<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ComfyUI中提高出图效果</title>
      <link href="/2024/10/16/AI-ComfyUI%E4%B8%AD%E6%8F%90%E9%AB%98%E5%87%BA%E5%9B%BE%E6%95%88%E6%9E%9C/"/>
      <url>/2024/10/16/AI-ComfyUI%E4%B8%AD%E6%8F%90%E9%AB%98%E5%87%BA%E5%9B%BE%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<h1>如何写好提示词</h1><h2 id="提示词的基础规则">提示词的基础规则</h2><ol><li>提示词要用英文,使用英文逗号分隔</li><li>提示词越靠前,权重越高</li><li>添加权重的两种方法:  (1girl:1.1), (((1girl)))</li></ol><h2 id="书写建议">书写建议</h2><p><img src="/2024/10/16/AI-ComfyUI%E4%B8%AD%E6%8F%90%E9%AB%98%E5%87%BA%E5%9B%BE%E6%95%88%E6%9E%9C/image.png" alt="alt text"></p><h1>提升出图效果的节点</h1><h2 id="AutomaticCfg">AutomaticCfg</h2><p>github地址: <a href="https://github.com/Extraltodeus/ComfyUI-AutomaticCFG">https://github.com/Extraltodeus/ComfyUI-AutomaticCFG</a><br>作用: 自动控制cfg值,避免cfg值调节数值不正确的情况,也能加快生成速度.<br>使用方法: 串联在model连接中</p><h2 id="PerturbedAttentionGuidance">PerturbedAttentionGuidance</h2><p>来源:comfyui自带的节点<br>作用:提升图片生成质量<br>使用方法:串联在model连接中</p><h2 id="SEGAttention">SEGAttention</h2><p>github地址: <a href="https://github.com/logtd/ComfyUI-SEGAttention">https://github.com/logtd/ComfyUI-SEGAttention</a><br>作用: 提升图片生成质量,可以跟automaticCFG和pag对比看<br>使用方法:串联在model连接中</p><h2 id="Tgate-Apply-类似于AutomaticCfg">Tgate Apply(类似于AutomaticCfg)</h2><p>github地址: <a href="https://github.com/JettHu/ComfyUI_TGate?tab=readme-ov-file">https://github.com/JettHu/ComfyUI_TGate?tab=readme-ov-file</a><br>作用: T-GATE 可以为不同的扩散模型带来 10%-50% 的加速，仅略微降低生成图像的质量并保持原始构图。<br>使用方法: 串联在model连接中</p><h2 id="FreeU-V2">FreeU_V2</h2><p>来源:comfyui自带的节点<br>作用: 减少画面杂乱,提升质量<br>使用方法:串联在model连接中</p><h1>Lora的进阶用法</h1><h2 id="LoRA-Loader-Block-Weight">LoRA Loader (Block Weight)</h2><p>github地址:<a href="https://github.com/ltdrdata/ComfyUI-Inspire-Pack">https://github.com/ltdrdata/ComfyUI-Inspire-Pack</a><br>作用:可以通过插件去控制lora的每个作用层的权重.通过分层控制权重可以针对更好地控制画风lora与人物lora<br>使用介绍:对于sd1.5模型的lora:要想保留lora模型的人物特征,主要关注中间部分.要更想关注lora模型的画风特征,则主要关注输出部分.<br>一些别人的预设:<br>脸部以外影响强:1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1<br>脸部以外影响弱:1,1,1,1,1,1,0.2,1,0.2,0,0,0.8,1,1,1,1,1<br>脸部影响强:1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0<br>脸部影响弱:1,0,0,0,0,0,0,0,0.8,1,1,0.2,0,0,0,0,0<br>服装:1,1,1,1,1,0,0.2,0,0.8,1,1,0.2,0,0,0,0,0<br>动作:1,0,0,0,0,0,0.2,1,1,1,0,0,0,0,0,0,0<br>画风:1,0,0,0,0,0,0,0,0,0,0,0.8,1,1,1,1,1<br>角色:1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0<br>背景:1,1,1,1,1,1,0.2,1,0.2,0,0,0.8,1,1,1,0,0<br>减小lora融合的影响:1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1<br>lora的每个层次的关注区域:<img src="/2024/10/16/AI-ComfyUI%E4%B8%AD%E6%8F%90%E9%AB%98%E5%87%BA%E5%9B%BE%E6%95%88%E6%9E%9C/image1.png" alt="alt text"></p><h1>图片清晰化的各种技术</h1><h2 id="通过放大模型放大图片">通过放大模型放大图片</h2><p>占用资源少,使用简单,不会改变原图的字体和细节,但是不同放大模型的侧重点不同.<br>下载放大模型的网站:<a href="https://openmodeldb.info/?t=anime&amp;sort=date-desc">https://openmodeldb.info/?t=anime&amp;sort=date-desc</a><br><img src="/2024/10/16/AI-ComfyUI%E4%B8%AD%E6%8F%90%E9%AB%98%E5%87%BA%E5%9B%BE%E6%95%88%E6%9E%9C/workflow%20(1).png" alt="alt text"></p><h2 id="UltimateSDUpscale插件">UltimateSDUpscale插件</h2><p><a href="https://github.com/ssitu/ComfyUI_UltimateSDUpscale">https://github.com/ssitu/ComfyUI_UltimateSDUpscale</a></p><h2 id="CCSR-DiffBIR-StableSR-SUPIR的对比的视频">CCSR,DiffBIR,StableSR,SUPIR的对比的视频</h2><p><a href="https://www.bilibili.com/video/BV1MU411o7vg/?vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1MU411o7vg/?vd_source=b1de3fe38e887eb40fc55a5485724480</a></p><h2 id="InstantIR">InstantIR</h2><p><a href="https://github.com/smthemex/ComfyUI_InstantIR_Wrapper">https://github.com/smthemex/ComfyUI_InstantIR_Wrapper</a></p><h2 id="面部清晰化-PMRF-codeformer-GFPGAN-GPEN-BFR">面部清晰化: PMRF,codeformer,GFPGAN,GPEN-BFR</h2><p><a href="https://github.com/2kpr/ComfyUI-PMRF">https://github.com/2kpr/ComfyUI-PMRF</a><br><img src="/2024/10/16/AI-ComfyUI%E4%B8%AD%E6%8F%90%E9%AB%98%E5%87%BA%E5%9B%BE%E6%95%88%E6%9E%9C/image-1.png" alt="alt text"></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComfyUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lora模型训练</title>
      <link href="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/"/>
      <url>/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/</url>
      
        <content type="html"><![CDATA[<p>参考:</p><ol><li><a href="https://www.bilibili.com/video/BV1m9xKeHEXh/?vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1m9xKeHEXh/?vd_source=b1de3fe38e887eb40fc55a5485724480</a></li><li><a href="https://www.bilibili.com/video/BV16e411e7Zx?spm_id_from=333.788.videopod.sections&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV16e411e7Zx?spm_id_from=333.788.videopod.sections&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a></li></ol><h1>准备篇</h1><p>如果训练单一角色的lora,20~30张图片即可,如果要训练画风的lora,图片数量建议要更高一些,300张左右.<br><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image.png" alt="alt text"><br><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-1.png" alt="alt text"><br>sd1.5的底模推荐选择:<br><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-2.png" alt="alt text"></p><h1>素材的注意项</h1><p>1.图片格式要统一<br>2.图片不要带有alpha通道,图片推荐jpg格式<br>3.图片大小在1024为基础<br>4.图片比例不要太夸张</p><h1>图像预处理</h1><h2 id="裁剪">裁剪</h2><p>推荐提前将图片裁剪为预训练模型对应的图片分辨率,sd1.5为512×512,sdxl为1024×1024.对于不好裁剪的图片,可以开启<strong>分辨率桶</strong>来分开训练.</p><h2 id="打标">打标</h2><p>越希望AI学习的东西,越不能出现在标注里.<br>解释:首先回顾AI训练的原理:通过标注文件让底模生成的图片变得越来越像训练集的图片,最终得到lora模型来对底模进行微调,配合触发词即可生成想要的图片.<strong>在训练过程中触发词每次都会出现在标注中.</strong><br>例如凝光角色lora这里的示例:如果除了触发词之外,打标都有white hair,red eyes的话,只有当触发词和white hair和red eyes一起配合的情况下才会出现凝光这个角色形象,而不是仅仅输入触发词就可以了.<br><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-6.png" alt="alt text"><br><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-8.png" alt="alt text"></p><h2 id="标注清洗">标注清洗</h2><p>可以通过Dataset Tag Editor来进行标注的清洗.<br>清洗过程:</p><ol><li>整体审核: 首先需要将训练集的所有打标中对于明确不符合角色特质的错词进行删除,然后删除与训练对象本体识别特征密切相关的词(例如角色的发型,发色,头饰,眼睛颜色等),对于识别不正确的内容进行替换.</li><li>批量调整:一些共通,有明确特质,元素的图片,可以为其批量增加一些标签.这样能够防止lora模型将这些共同特征当成必要的.</li><li>单张修改:对于自动打标不好的图片,进行单独的修改.</li></ol><h1>参数</h1><h2 id="参数介绍">参数介绍</h2><p><em><strong>Repeat(训练次数)</strong></em>:,重复学习训练集图片的次数,影响步数计算和学习效果,二次元图片推荐5~10,三次元图片推荐10~30.<br><em><strong>Epoch(训练轮数)</strong></em>:AI训练一轮之后(过完了训练集的每张图片),还需要重复训练的轮数.<br><em><strong>Enforce number of steps(最大训练步数)</strong></em>:训练集的规模在20~30张的话,1200~1500是不错的选择,<br><em><strong>train_batch_Size(批量大小)</strong></em>:同一时间同时训练的图片数量,值越大,训练的总时间越短.批量大小增加也会减少训练步数.当增加batch_size后需要同步的提高U-Net学习率<br><em><strong>save_every_n_epochs</strong></em>:每进行多少轮数后自动保存一次模型.假如训练10轮,这个值为2,那么会输出5个模型<br><em><strong>学习率</strong></em>:AI的学习强度.训练集图片增加的情况下,应该尝试降低学习率.训练样本的增加可能导致梯度下降算法在更新模型参数时需要更小的步长，因为更多的数据可能意味着更复杂的损失曲面。如果学习率过大，可能会导致训练不稳定或者错过收敛点。因此，一般会采取降低学习率的措施，或者开始就使用一个较低的学习率，逐渐增加直到能找到一个表现得更好的学习率数值。<br><em><strong>Unet_lr(U-Net学习率)</strong></em>:如果填上了U-Net学习率的参数,它就会覆盖学习率的参数,如果u-net训练过度,会导致面部扭曲或者产生大量色块,<br><em><strong>Text_encoder_lr(文本编码器学习率)</strong></em>:简称te,通常为U-net学习率的二分之一到十分之一,te训练不足会让出图对提示词的服从性更低,训练过度则会容易生成多余的物品.<br><em><strong>Lr_scheduler(学习率调度器设置)</strong></em>:在训练过程中动态调整学习率的机制,一般学习率调度器会在学习过程中慢慢降低学习强度的(防止过拟合).不同调度器对于最终训练效果差距不大.<br><em><strong>Lr_warmup_steps(学习率预热步数)</strong></em>:建议填总步数的5%~10%<br><em><strong>Optimizer_type(优化器设置)</strong></em>:决定了AI在训练的过程中如何把控学习的方式,常用的为AdamW8bit(当batch_size为1时推荐学习率1e-4,为2时推荐学习率2e-4,以此类推),Lion(推荐学习率7e-5,作者推荐当批次大小大于64时使用),Prodigy(又称神童,完全自适应的改变学习率,因此如果使用此优化器,学习率都直接设置为1即可)<br><em><strong>Network_dim(网络维度)</strong></em>:此参数越大,学习的就越深,最终lora模型就越大.数值推荐说法一:在训练三次元物体,形象或者复杂的画风时,推荐使用128或者64的高维度值,训练二次元画风或者人物时,通常使用32或者16或者8.数值推荐说法二: 训练集图片数量小于100时推荐32,100~500时推荐64,大于500时推荐128<br><em><strong>Network_alpha</strong></em>:设置为与网络维度一样,或者为网络维度的一半即可.<br><em><strong>Bucket Resolution(分辨率桶)</strong></em>: 虽然训练集的图片建议都裁剪为512×512或者1024×1024,但可以通过开启分辨率桶来将训练集的图片分成自定义比例来分开训练.,关闭可以节约显存.<br><em><strong>gradient_checkpointing(梯度检查点)</strong></em>: 开启梯度检查点可以以时间换内存,开启后可以支持更高的batch_size,当batch_size为1时需要关闭,因为梯度检查点会降低训练速度.<br><em><strong>gradient_accumulation_steps(梯度累积步数)</strong></em>: 用于在小显存模拟大batch_size的效果,如果显存足够使用4以上的batch size就没必要启用。要求数值为2的n次方,如果批量大小是2,累加步数是32,那么就相当于批量大小为64,使用lion学习器,要求高批次大小,就必须开,如果不用lion就没必要开<br><em><strong>caption_tag_dropout_rate(按逗号分隔的标签来随机丢弃tag的概率)</strong></em>: 当使用dreambooth+标签的训练方法来训练画风,推荐使用这个参数,数值调整为0.2~0.5,能够防止过拟合.<br><em><strong>clip_skip(clip跳过层数)</strong></em>:当训练底模是基于sd1.5的模型时使用1,当训练底模是基于novelai的二次元模型时使用2,当训练sd2.0以后都使用2.<br><em><strong>sdpa</strong></em>:优化与加速Transformer模型中注意力机制的计算,优化计算效率,加速gpu.<br><em><strong>enable_base_weight(启用基础权重)</strong></em>:用于差异炼丹,可以训练功能性lora,例如增减衣物lora,增加细节lora</p><h2 id="如何针对训练结果进行训练参数的调整">如何针对训练结果进行训练参数的调整</h2><p><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-4.png" alt="alt text"></p><h1>判断lora模型的训练结果</h1><h2 id="一些词汇的介绍与如何判断样图不正常的原因">一些词汇的介绍与如何判断样图不正常的原因</h2><ol><li>样图过拟合:生成的图片过分接近训练集的图片,并且发生了明显的画风畸变(面部扭曲,颜色异常,完全不像底模跑出来的风格)</li><li>样图欠拟合:生成的图片根本不像训练集的图片,用lora跟没用一样</li><li>样图十分的混乱,但能看出来学习的痕迹:维度设置错误(通常是过高)</li><li>样图模糊甚至黑图:炸炉了,需要重练.</li></ol><h2 id="loss值">loss值</h2><p>loss是机器学习里用于判断神经网络学习情况的一个重要指标,loss值越低,说明拟合程度越高.<br>sd1.5推荐loss值小于0.1<br>flux推荐loss值在0.25附近<br><img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-5.png" alt="alt text"></p><h1>lora分层与融合</h1><p><a href="https://www.bilibili.com/video/BV1qM4y1j7tD/?vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1qM4y1j7tD/?vd_source=b1de3fe38e887eb40fc55a5485724480</a></p><h1>正则化Lora训练</h1><p><a href="https://www.bilibili.com/video/BV1qK42187Mc?vd_source=b1de3fe38e887eb40fc55a5485724480&amp;spm_id_from=333.788.videopod.sections">https://www.bilibili.com/video/BV1qK42187Mc?vd_source=b1de3fe38e887eb40fc55a5485724480&amp;spm_id_from=333.788.videopod.sections</a></p><ol><li>什么是正则化: 指通过添加额外的约束和惩罚项来改进学习算法的表现.以减少过度的拟合问题,能提高模型的泛化能力.</li><li>正则化数据集: 正则化图片和应当数据集有某些共通之处,但在期望降低权重的部分有所不同,图片数量一般多于训练集.</li><li>正则化训练操作: 正常训练模型的操作的基础上在正则数据集中添加图片即可.</li><li>训练速度的区别: 无论正则化数据集中放了多少图片,训练步数都会乘以2,训练时间都会翻倍.</li><li>训练画风时,画风也会受到正则化数据集的影响,所以正则化数据集不要放太多和画风差异太大的图片.</li></ol><h1>画风Lora训练</h1><ol><li>可以先使用sd1.5进行训练,因为它的速度最快,然后再尝试sdxl或flux版本.</li><li>收集画风lora数据集</li><li>打标,正常描述图片内容即可</li><li>测试如果风格可以,但是出图效果不行,可以通过更改底模为对应风格的底模(非融合模型)来进行训练</li><li>判断模型是否欠拟合,如果欠拟合可以增加轮数或者重复次数</li><li>根据效果优化参数,打标,数据集等</li></ol><h1>差异炼丹法(训练功能性lora)</h1><p>增减衣物lora,增加细节lora,这些控制单一变量的功能性lora本质上都是通过向量相减,提取差异特征,使生成的lora模型不受原本大模型中画风和概念的污染.<br>差异炼丹法可以归纳为4种,分别是复印炼丹法,基于基础权重的差异炼丹法,基于SVD提取的差异炼丹法,滑块炼丹法.这四种方法都需要准备两组图片(原始图片和处理后的图片).这两组图片存在的差异就是我们要提取制作的lora.<br>步骤:</p><ol><li>准备两组图片,放到不同文件夹,原始图片和功能应用后的图片</li><li>给每组图片进行提示词标记,要求不同组的处理前后的图片的提示词相同,提示词只需要任意描述加个序号即可(例如假如要做个变老的功能lora,那么就第一张图片就bianlao1第二张图片就bianlao2).不需要描述图片内容.</li><li>训练一个过拟合的lora(训练轮数乘以训练次数超过1000可以保证过拟合)</li><li>在训练参数保持不变的前提下,开启enable_base_weight(启用基础权重(差异炼丹)),然后填入刚才过拟合的lora路径进行训练.<img src="/2024/10/16/AI-lora%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83/image-9.png" alt="alt text"><br>提醒:</li><li>数据集的选择: 4~8张即可.</li><li>应用场景: 操控体型,年龄,长度等变量</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComfyUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maya绑定</title>
      <link href="/2024/07/21/DCC%E8%BD%AF%E4%BB%B6-Maya%E7%BB%91%E5%AE%9A/"/>
      <url>/2024/07/21/DCC%E8%BD%AF%E4%BB%B6-Maya%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="Tn5Qr"></a></p><h1>transform节点</h1><p>使用ctrl+g打一个空组，这个空组就是最简单的transform节点，transform节点拥有移动旋转缩放这些属性。<br>一个模型是由transform节点和shape节点共同组成的，shape决定模型的形状，transform决定模型的移动旋转缩放，transform节点为shape节点的父级。<br><a name="LVCHR"></a></p><h1>父子层级关系</h1><p>移动旋转缩放的数值都是在相对位置下的数值，父物体进行的任何的移动旋转缩放都不会影响到子物体的数值。<br>当父物体进行旋转的同时子物体的坐标系也会相应的发生变化，因此有时候会出现，在世界坐标系下朝一个轴移动子物体，但是显示的是子物体有两个坐标轴数值发生变化（因为子物体使用的是相对坐标系）。<br><a name="Q5jw4"></a></p><h1>移动旋转缩放之间的关系</h1><p>移动是旋转的父物体，旋转是缩放的父物体。<br><a name="NnxOl"></a></p><h1>使用功能时选择的物体的先后顺序以及功能介绍</h1><p><a name="SBu5u"></a></p><h2 id="p键决定层级关系">p键决定层级关系</h2><p>使用p键时会以最后选择的物体当父级，其余的选择物体都作为最后选择的物体的子级<br><a name="Pkc4n"></a></p><h2 id="blendshape">blendshape</h2><p>最后选择的物体是需要进行变形的物体，前面选择的是变形的目标。前面如果选择了多个物体，那么会分开创建多个变形目标。<br><a name="m3YgD"></a></p><h2 id="约束">约束</h2><p>最后选择的是被约束的物体（子），被约束的物体会带有约束节点，在约束节点中可以控制约束物体对被约束物体的影响权重<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670217536060-ad82bcd7-0f17-4473-98c9-ee0fb165009a.png#averageHue=%23484241&amp;clientId=uf4d82161-efcf-4&amp;from=paste&amp;height=176&amp;id=u69a48566&amp;originHeight=158&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7358&amp;status=done&amp;style=none&amp;taskId=ua68c44b7-9cb2-4d52-9f1d-8e9377af5d9&amp;title=&amp;width=328.8888976014693" alt="image.png">，权重的计算：平均，例如这里数值都为一，那么各占二分之一，也就是50%<br><a name="gYChr"></a></p><h2 id="表达式（不推荐，了解即可）">表达式（不推荐，了解即可）</h2><p>表达式是不需要在乎选择顺序的<br>表达式使用方法：首先选中要进行表达式计算的物体，然后选一个属性，然后在edit栏中找到expression editor<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670217729877-0b481305-a4c4-438e-a12e-e8f67fab7796.png#averageHue=%234e514f&amp;clientId=uf4d82161-efcf-4&amp;from=paste&amp;height=137&amp;id=ubdc3c003&amp;originHeight=123&amp;originWidth=426&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23707&amp;status=done&amp;style=none&amp;taskId=ue69569e8-fd3a-446a-9faa-a3620971bb8&amp;title=&amp;width=473.3333458723849" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670217938545-81a94081-a3fb-42f8-a228-2538f5749ea4.png#averageHue=%234d504d&amp;clientId=uf4d82161-efcf-4&amp;from=paste&amp;height=827&amp;id=ud6311239&amp;originHeight=744&amp;originWidth=803&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=125261&amp;status=done&amp;style=none&amp;taskId=uc335e098-db46-476c-b261-b1e5801a1c8&amp;title=&amp;width=892.22224585804" alt="image.png"></p><p><a name="Mn4S5"></a></p><h1>约束，父子层级关系，属性连接，驱动关键帧，表达式之间的区别</h1><p><a name="QNPDu"></a></p><h2 id="父子约束与父子层级关系之间的区别">父子约束与父子层级关系之间的区别</h2><p>1.父子约束不对缩放进行控制<br>2.父子约束中被约束的物体的位置旋转信息都记录在约束节点上，因此针对被约束物体进行的移动旋转不会记录。而拥有父子层级关系的物体的情况是：子物体的移动旋转缩放都是自由的，只是父物体进行移动旋转缩放时子物体也会随着变化。<br>3.约束的优先级比父子层级关系高，当父子层级关系与约束同时存在时，优先使用约束的计算情况<br><a name="BcfgH"></a></p><h2 id="数值的计算区别">数值的计算区别</h2><p>约束看的是世界位置<br>属性连接，驱动关键帧，表达式只针对数值<br>父子关系看的是相对位置<br><a name="X6jLR"></a></p><h1>约束的删除过程</h1><p>直接delete掉约束节点<br><a name="NedpU"></a></p><h1>控制器创建过程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670212442477-4d720069-5b65-4bfb-8eb7-7830c2ccee9b.png#averageHue=%238191a3&amp;clientId=uf4d82161-efcf-4&amp;from=paste&amp;height=433&amp;id=ud2b9ead6&amp;originHeight=390&amp;originWidth=806&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=154852&amp;status=done&amp;style=none&amp;taskId=u0e0c3759-2efc-4cb9-9b17-8c67e4171ab&amp;title=&amp;width=895.5555792796765" alt="image.png"><br><a name="FVJGm"></a></p><h1>匹配transformations功能介绍</h1><p>将所有选择的物体的位移旋转缩放都设置为最后一个选择的物体的数值。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673598402928-4e8ff13b-38be-4e7a-9736-b85acad81b1e.png#averageHue=%2353504f&amp;clientId=u28c346ee-8da3-4&amp;from=paste&amp;height=246&amp;id=u367193f4&amp;originHeight=246&amp;originWidth=461&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25041&amp;status=done&amp;style=none&amp;taskId=u67ce78a4-019d-4119-a6e7-3d97eca7bde&amp;title=&amp;width=461" alt="image.png"><br><a name="NDP91"></a></p><h1>修改物体的线框颜色步骤</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673598543851-c9dd3f11-8aa6-4dcf-8657-b9d2a2c84ace.png#averageHue=%234f4d4d&amp;clientId=u28c346ee-8da3-4&amp;from=paste&amp;height=772&amp;id=ucc431bc9&amp;originHeight=772&amp;originWidth=542&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42538&amp;status=done&amp;style=none&amp;taskId=u408876cb-77b3-4383-ba7e-2904b757868&amp;title=&amp;width=542" alt="image.png"><br><a name="yVlg0"></a></p><h1>关节</h1><p><a name="N6Nbi"></a></p><h2 id="关节的介绍">关节的介绍</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673258410606-e095c674-40b4-47d3-807c-d7d15313378f.png#averageHue=%2316110f&amp;clientId=u66a221f8-cbf0-4&amp;from=paste&amp;height=556&amp;id=yYqD3&amp;originHeight=445&amp;originWidth=872&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=123017&amp;status=done&amp;style=none&amp;taskId=udbcfee9a-000f-45fd-97fb-11e660ce8fc&amp;title=&amp;width=1089.9999837577345" alt="image.png"><br>关节的位移在冻结坐标系的时候，不会归零，旋转缩放能够归零，新增加的这个joint orient 的作用就是为了让旋转数值能为0，然后关节自带一个属性InverseScale目的是抵消冻结坐标系<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673258437041-3dbb1f61-28e4-4e27-af4b-52cae5726d35.png#averageHue=%2321130f&amp;clientId=u66a221f8-cbf0-4&amp;from=paste&amp;height=295&amp;id=Ot2uf&amp;originHeight=236&amp;originWidth=822&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73071&amp;status=done&amp;style=none&amp;taskId=uf3578f4e-7491-4569-8f9e-6a02ff49986&amp;title=&amp;width=1027.499984689057" alt="image.png"><br>透过网格体显示关节：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673258917333-2634fa7c-d218-4aad-aa42-2155e50f11ec.png#averageHue=%23545353&amp;clientId=u9ad9c0e9-3d00-4&amp;from=paste&amp;height=269&amp;id=MHNtz&amp;originHeight=215&amp;originWidth=447&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7018&amp;status=done&amp;style=none&amp;taskId=u5dda31eb-6cda-497a-9951-10ee80288ac&amp;title=&amp;width=558.7499916739763" alt="image.png"><br><a name="zTdFD"></a></p><h2 id="关节定向">关节定向</h2><p>关节定向调整的是关节的坐标轴的方向<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673576217910-8fe1f174-accd-46ad-9174-ef2dd9d6e62c.png#averageHue=%235c5c5a&amp;clientId=ue3611319-9eae-4&amp;from=paste&amp;height=273&amp;id=WbcID&amp;originHeight=273&amp;originWidth=358&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=70991&amp;status=done&amp;style=none&amp;taskId=ufe86abbd-d60d-4432-8576-4390f8f673f&amp;title=&amp;width=358" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673577878554-0ce4507d-b69c-4a93-b0e6-9ac834b64729.png#averageHue=%23555454&amp;clientId=ue3611319-9eae-4&amp;from=paste&amp;height=515&amp;id=dZLIu&amp;originHeight=515&amp;originWidth=739&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=111005&amp;status=done&amp;style=none&amp;taskId=u17e5cec2-67ac-498d-9b68-993295717b8&amp;title=&amp;width=739" alt="image.png"><br><a name="l09B1"></a></p><h2 id="关节镜像">关节镜像</h2><p>如果选择有父物体的子关节进行镜像的话，新创建出来的镜像关节也会以那个关节为父关节。<br>关节镜像不能批量镜像，镜像后再选择其他的按G重复上一次操作。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673578129859-6a12ebe9-1b6f-4e78-ba5c-29d422c5eb26.png#averageHue=%23676663&amp;clientId=ue3611319-9eae-4&amp;from=paste&amp;height=421&amp;id=fHkX1&amp;originHeight=421&amp;originWidth=767&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84032&amp;status=done&amp;style=none&amp;taskId=u6149bc9e-ca9b-404c-be28-2e7c2703bc5&amp;title=&amp;width=767" alt="image.png"><br><a name="mecrK"></a></p><h1>IK手柄</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671516712022-aa897777-850d-4232-b26f-cc6ddb6743c3.png#averageHue=%235a5857&amp;clientId=u5317e7fd-928b-4&amp;from=paste&amp;height=326&amp;id=udcf2be53&amp;originHeight=293&amp;originWidth=469&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13065&amp;status=done&amp;style=none&amp;taskId=ua06790f4-c5e6-4921-9f91-bff4286295d&amp;title=&amp;width=521.1111249158415" alt="image.png"><br>创建时先选择根关节后选择子关节<br><a name="uGZ5z"></a></p><h2 id="Single-Chain-Solver">Single-Chain Solver</h2><p>单一旋转平面，IK手柄的首端和尾端组成一个平面，反求关节位置时依靠平面计算。平面的改变通过更改手柄的旋转来实现。<br>一般使用在两个关节组成的骨骼<br><a name="FNOwK"></a></p><h2 id="Rotate-Plane-Solver">Rotate-Plane Solver</h2><p>多一个极向量，IK手柄的首端和尾端和极向量三者组成一个平面，反求关节位置时依靠平面计算。平面的改变通过更改极向量的位置来改变<br>一般使用在多个关节组成的骨骼<br>白色指向的就是极向量的方向<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671517435221-dcb6ae72-643a-41a2-878b-8aba83293d12.png#averageHue=%235e5b5b&amp;clientId=u5317e7fd-928b-4&amp;from=paste&amp;height=417&amp;id=ufb9efb7d&amp;originHeight=375&amp;originWidth=608&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15936&amp;status=done&amp;style=none&amp;taskId=u579a9763-5522-4c8b-b8c8-bf3037d8d06&amp;title=&amp;width=675.5555734516666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671517753572-6fe72f30-2825-44e2-86d0-c10183003ca0.png#averageHue=%2344403f&amp;clientId=u5317e7fd-928b-4&amp;from=paste&amp;height=370&amp;id=uf5bdb171&amp;originHeight=333&amp;originWidth=310&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12604&amp;status=done&amp;style=none&amp;taskId=u34c641e1-fd12-4db6-9116-d2f82db5b94&amp;title=&amp;width=344.4444535691064" alt="image.png"><br>可以通过创建定位器与IK手柄进行极向量约束（先选择定位器后选择ik手柄）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671517896461-b54e9a46-449d-4d26-9ec5-44d845a3ce67.png#averageHue=%235c5c5c&amp;clientId=u5317e7fd-928b-4&amp;from=paste&amp;height=681&amp;id=u6c824887&amp;originHeight=613&amp;originWidth=562&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7795&amp;status=done&amp;style=none&amp;taskId=uf02be324-ea0f-4a3d-9499-432f02a01b8&amp;title=&amp;width=624.4444609865734" alt="image.png"><br><a name="ry1kB"></a></p><h2 id="IK-Spline-Handle">IK Spline Handle</h2><p>SplineIK一般用于多个关节组合的关节链（人的脊椎，蛇，龙等）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671518819593-c1c03815-b05c-4c03-bb85-9f84aaffda5e.png#averageHue=%23565251&amp;clientId=u5317e7fd-928b-4&amp;from=paste&amp;height=487&amp;id=uba8bd816&amp;originHeight=438&amp;originWidth=242&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14652&amp;status=done&amp;style=none&amp;taskId=u37b02980-92eb-43b3-98d8-90c69d5bb1e&amp;title=&amp;width=268.8888960120121" alt="image.png"><br>使用的选择顺序： 先选择根关节后选择子关节，最后选择曲线(如果不使用自动创建曲线选项的话)（不是直接点是ctrl+鼠标点击加选）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671518978840-21644317-cb3e-4e8f-a276-072a5de24296.png#averageHue=%235d5b5a&amp;clientId=u5317e7fd-928b-4&amp;from=paste&amp;height=330&amp;id=u4b89bd63&amp;originHeight=297&amp;originWidth=511&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22987&amp;status=done&amp;style=none&amp;taskId=u8e29af4f-7e61-48b6-a1dc-f3d7e627dc8&amp;title=&amp;width=567.7777928187527" alt="image.png"><br><a name="oy9n8"></a></p><h1>IKFK融合</h1><p>IKFK融合有两种方式，一种是通过约束，另一种是通过blend color<br><a name="Xy32X"></a></p><h2 id="约束方式">约束方式</h2><p>首先需要考虑的是，需不需要关节的位移，如果需要关节的位移就使用父子约束或者点约束。但是使用父子约束或者点约束会产生一个问题。当IKFKBlend的数值为0~1的中间值时，maya会自动计算位置,这个计算的位置是最短路径位置（会导致关节的长度发生改变）。<br>1.先进行约束，分别对无IKFK手柄的整体，手肘，手腕进行旋转约束（最后选择）,然后更改插值方式为shortest<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673850121885-71c26598-b038-4a50-a2f4-a16c62a89260.png#averageHue=%23505653&amp;clientId=ucf2e48f1-0923-4&amp;from=paste&amp;height=733&amp;id=uca8b94eb&amp;originHeight=733&amp;originWidth=2234&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=590586&amp;status=done&amp;style=none&amp;taskId=ub8f1826f-ee92-43c1-a7ba-02101b0d46f&amp;title=&amp;width=2234" alt="image.png"><br>2.进行属性的连接<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673850817702-a5a9fd10-6815-4cd5-8133-175f956b46a5.png#averageHue=%23373030&amp;clientId=ucf2e48f1-0923-4&amp;from=paste&amp;height=1093&amp;id=u918e99e0&amp;originHeight=1093&amp;originWidth=1831&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=666339&amp;status=done&amp;style=none&amp;taskId=ue04c019f-5b4d-4239-8fb8-07f735f0948&amp;title=&amp;width=1831" alt="image.png"><br><a name="tM5E3"></a></p><h1>skinCluster</h1><p>选择骨骼和模型（顺序无所谓）然后使用bind skin功能进行蒙皮，功能选项设置推荐如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673946303980-cffc4ca2-0722-44fe-b693-e69070530ede.png#averageHue=%23555554&amp;clientId=u729b1e5f-1fd5-4&amp;from=paste&amp;height=382&amp;id=u0484bcd7&amp;originHeight=382&amp;originWidth=548&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18710&amp;status=done&amp;style=none&amp;taskId=u0a6a0514-fb5c-465e-8bca-b48935d3ed8&amp;title=&amp;width=548" alt="image.png"><br>蒙皮后会生成skinCluster节点<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673946593477-dc346536-3cbd-42a2-8536-6f4dd3cd78de.png#averageHue=%2358473b&amp;clientId=u729b1e5f-1fd5-4&amp;from=paste&amp;height=1048&amp;id=u1f9f35df&amp;originHeight=1048&amp;originWidth=2088&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=662250&amp;status=done&amp;style=none&amp;taskId=ua7155168-e8e2-4c35-90cc-6c64a7cfd0c&amp;title=&amp;width=2088" alt="image.png"><br><a name="q17KV"></a></p><h1>addInfluence</h1><p>这个是蒙皮完以后如果需要新添加关节就使用这个功能，推荐选项设置如下：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673949125394-0b0e6326-7091-4ed6-8ea5-fd3da464da13.png#averageHue=%23515151&amp;clientId=u729b1e5f-1fd5-4&amp;from=paste&amp;height=466&amp;id=u389c67fc&amp;originHeight=466&amp;originWidth=667&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63575&amp;status=done&amp;style=none&amp;taskId=u748f487f-5e95-418e-91e9-12035db399e&amp;title=&amp;width=667" alt="image.png"><br><a name="IUOjg"></a></p><h1>刷权重</h1><p>选中已经蒙皮的皮肤，然后右键找到Paint Skin Weights Tool<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674008708447-3780340e-fa6d-47c6-ad37-556ce56d6658.png#averageHue=%236c8092&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=322&amp;id=u43673dc3&amp;originHeight=322&amp;originWidth=711&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=128265&amp;status=done&amp;style=none&amp;taskId=u1444a44b-2812-4a6c-bab9-2786769efcf&amp;title=&amp;width=711" alt="image.png"><br><a name="XdKgG"></a></p><h1>变形器</h1><p><a name="cXJX7"></a></p><h2 id="BlendShape">BlendShape</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674021502267-8b64365c-ed79-474d-8ccc-f44b1d000af6.png#averageHue=%23514f4f&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=430&amp;id=u0cd4fae4&amp;originHeight=430&amp;originWidth=702&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75715&amp;status=done&amp;style=none&amp;taskId=u4db66afb-71ce-4228-b8b1-2149214b465&amp;title=&amp;width=702" alt="image.png"><br><a name="SAgWM"></a></p><h2 id="cluster簇">cluster簇</h2><p>跟关节差不多，一般不用簇，簇跟关节一样都是影响对应的顶点。<br><a name="qFU0f"></a></p><h2 id="deltaMush">deltaMush</h2><p>deltaMush的作用： 一个模型应用deltaMush后，移动模型的顶点时，变形器会自动平滑模型来使模型布线均匀。<br>注意：是应用deltaMush后再移动顶点。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674099425473-7e3080cb-8a93-47e5-93c9-b319f0a8dede.png#averageHue=%236f80a1&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=669&amp;id=u4df0011f&amp;originHeight=669&amp;originWidth=844&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=380832&amp;status=done&amp;style=none&amp;taskId=ud8d73674-d894-4249-b036-321e80efbe5&amp;title=&amp;width=844" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674099145812-75f8fe76-7175-45de-a154-2d3b1787fb00.png#averageHue=%2353524f&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=284&amp;id=uba80905e&amp;originHeight=284&amp;originWidth=400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=64997&amp;status=done&amp;style=none&amp;taskId=ud3c03d7b-54a3-4e3d-a7c0-9fcbbd59d32&amp;title=&amp;width=400" alt="image.png"><br>参数介绍： <br>envelope是总的影响程度设置<br>distance weight 为0时不会考虑模型的布线，会平滑所有模型曲线。如果值为1时，那么会自动判断模型的布线，平滑时不会影响模型中离得很近的线(那些用来卡线的线)。<br>displacement 为1时平滑时会考虑模型的细节，为0时不会考虑模型的细节。<br><a name="QOEjE"></a></p><h2 id="lattice晶格变形器">lattice晶格变形器</h2><p>选择一个物体创建晶格变形器，会生成两个新节点：ffd1Lattice与ffd1Base。然后物体会根据ffd1Lattice与ffd1Base进行插值来产生形变<br><a name="Pqx7x"></a></p><h2 id="Wrap包裹变形器">Wrap包裹变形器</h2><p>先选择被驱动物体，再选择驱动物体。<br>然后就像晶格变形器一样在驱动物体会产生一个base物体，然后被驱动物体会根据驱动物体与base物体之间进行插值来产生形变。<br>包裹变形器运行很慢，尽量不用。<br><a name="R12ZK"></a></p><h2 id="shrinkWrap">shrinkWrap</h2><p>先选择被驱动物体，再选择驱动物体<br>应用这个变形器后，被驱动物体的顶点会根据不同的映射方式依附到驱动物体的顶点上面去。<br>映射方式介绍：<br>面片为被驱动物体，球为驱动物体<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674105821630-561e5323-d8df-4b85-b4fd-ee0cb7b07ee2.png#averageHue=%23434342&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=241&amp;id=u01fbd000&amp;originHeight=241&amp;originWidth=524&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58598&amp;status=done&amp;style=none&amp;taskId=u749ca5fe-7de2-4c7e-934a-0014043ff7f&amp;title=&amp;width=524" alt="image.png"><br> Toward lnner object：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674105844158-564af453-1fe6-46ea-9079-459bffa2e810.png#averageHue=%23647381&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=180&amp;id=ub8f35d77&amp;originHeight=952&amp;originWidth=1586&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1054024&amp;status=done&amp;style=none&amp;taskId=u42f8420a-842c-48f7-8040-7e3a364133b&amp;title=&amp;width=300" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674105856727-601b6ee7-e2f8-4af0-b003-3c682ce607dd.png#averageHue=%23648183&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=178&amp;id=u81ae0845&amp;originHeight=490&amp;originWidth=692&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=302332&amp;status=done&amp;style=none&amp;taskId=u52459b8e-55e4-44f2-afea-69d11429554&amp;title=&amp;width=251" alt="image.png"><br>Vertex normals:<br>被驱动物体与驱动物体的接触的顶点会产生依附效果<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674106015351-e34399f0-ed98-4d22-bece-fa38520bed28.png#averageHue=%236a817f&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=214&amp;id=u2a8f8a2f&amp;originHeight=891&amp;originWidth=1421&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1194143&amp;status=done&amp;style=none&amp;taskId=u538817d5-47e4-40aa-a270-644f1986ff7&amp;title=&amp;width=341" alt="image.png"> <img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674106104759-3eb44e86-c529-4ac9-b7f0-a716a7b70dd0.png#averageHue=%237f8d81&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=172&amp;id=uf48d2b49&amp;originHeight=727&amp;originWidth=1291&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=660663&amp;status=done&amp;style=none&amp;taskId=u93078f12-c454-4d55-b216-4c4787ba59e&amp;title=&amp;width=306" alt="image.png"><br><a name="yD86A"></a></p><h2 id="Wire线变形器">Wire线变形器</h2><p>使用步骤：<br>选择模型按回车，再选择曲线按回车<br>然后就可以通过曲线来驱动模型使模型产生形变<br>一些属性的介绍:<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674106695740-58de65e6-8aa5-4be0-b37f-67673d251c50.png#averageHue=%23414141&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=242&amp;id=u90b0566c&amp;originHeight=242&amp;originWidth=582&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53040&amp;status=done&amp;style=none&amp;taskId=u3655e9cf-cc07-4bf7-aa65-4cb8c123cab&amp;title=&amp;width=582" alt="image.png"><br>Rotation: 产生形变时对模型旋转属性影响的权重<br>Dropoff distance： 曲线点寻找最近的顶点的距离范围<br>变形器是可以刷权重的<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674107272387-47291f7f-a956-4cdf-bc4b-2b923336abc2.png#averageHue=%235e605a&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=1148&amp;id=ub2d6705d&amp;originHeight=1148&amp;originWidth=417&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=263266&amp;status=done&amp;style=none&amp;taskId=ubefac0cd-ae31-4c5e-9f50-fcb5b6eb6f8&amp;title=&amp;width=417" alt="image.png"><br><a name="v54zy"></a></p><h2 id="Nonlinear非线性变形器">Nonlinear非线性变形器</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674107436732-c044c177-673f-4a4f-82a3-aedae7925efd.png#averageHue=%23585956&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=213&amp;id=u55dcd8b8&amp;originHeight=213&amp;originWidth=529&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65312&amp;status=done&amp;style=none&amp;taskId=u5693f4ad-851f-4577-b92a-72cf3b5cfd0&amp;title=&amp;width=529" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674107864601-3ebdd4ef-ca5e-447b-ae35-4fc6ecbbde2d.png#averageHue=%235e6d80&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=629&amp;id=u25284a14&amp;originHeight=629&amp;originWidth=1093&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=191598&amp;status=done&amp;style=none&amp;taskId=u69a9992e-f21b-432e-a5c3-318be7e3542&amp;title=&amp;width=1093" alt="image.png"><br><a name="MymSj"></a></p><h2 id="sculpt雕刻变形器">sculpt雕刻变形器</h2><p>选择一个模型就可以使用这个雕刻变形器了。没啥用这个变形器，他能做的shrinkWrap也能做并且更方便。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674108375883-b4128dd2-7ebf-4636-86ca-8bc5f10c41ba.png#averageHue=%23596987&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=563&amp;id=u70f38e32&amp;originHeight=563&amp;originWidth=712&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=450905&amp;status=done&amp;style=none&amp;taskId=u019d6c5e-8db2-496b-8b70-78d08a9f3bf&amp;title=&amp;width=712" alt="image.png"><br><a name="FDn1j"></a></p><h1>deformation_order</h1><p>如果一个模型只受一个变形器控制都很好理解，但是如果受到多个变形器控制的话就会根据变形器的顺序不同而导致不同的结果，因此要理清变形器的顺序是很重要的。<br>这里介绍两个更改变形器执行的顺序的方法：<br>第一种：<br>选择好模型然后查看其所有的输入属性，然后通过鼠标中键拖拽即可改变变形器执行的顺序<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674112832754-5fb47a6d-38f3-4525-929c-f8bb19314217.png#averageHue=%23535451&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=264&amp;id=u72763447&amp;originHeight=264&amp;originWidth=382&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66502&amp;status=done&amp;style=none&amp;taskId=uaa04c244-170b-403a-88b2-495c2f134db&amp;title=&amp;width=382" alt="image.png"><br>第二种：deformation order<br>更改对应变形器的deformation order<br>automatic是让maya自己判断设置变形器的执行顺序，pre-deformation是将变形器设置成最先执行，post-deformation是将变形器设置成最后执行。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1674112912258-bb05c6fb-40cb-4529-acf5-4e5b5d8bacbc.png#averageHue=%23535353&amp;clientId=u0af6a990-500b-4&amp;from=paste&amp;height=453&amp;id=uf6af1e1e&amp;originHeight=453&amp;originWidth=711&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72269&amp;status=done&amp;style=none&amp;taskId=u181af5f8-b802-4a8d-a600-42d6fd9f519&amp;title=&amp;width=711" alt="image.png"><br><a name="jEW6m"></a></p><h1>快速转化低模</h1><p>首先通过自带的reduce功能减面，删除历史，使用deltaMush变形器并调整参数使布线变得均匀，删除历史，选择低模后选择高模使用shrinkWrap变形器并调整参数来保留高模的模型细节，删除历史。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1675221119348-35b72450-d2fc-4b8d-87f9-d0fe64a1195b.png#averageHue=%235b5a59&amp;clientId=u7fb7aa6f-4485-4&amp;from=paste&amp;height=603&amp;id=u41f81f5a&amp;originHeight=603&amp;originWidth=470&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42211&amp;status=done&amp;style=none&amp;taskId=u0ebf8a5c-d834-4d3d-bea8-e192be2b143&amp;title=&amp;width=470" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1675221693200-dc2aedc3-c7d3-481c-a7f6-3328c41870a9.png#averageHue=%23464745&amp;clientId=u7fb7aa6f-4485-4&amp;from=paste&amp;height=273&amp;id=u1a530abf&amp;originHeight=273&amp;originWidth=389&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62102&amp;status=done&amp;style=none&amp;taskId=u4536fd8b-bc76-4175-8110-346cad89b24&amp;title=&amp;width=389" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1675221640088-83ebb73b-f320-48e8-a014-4adfe704c730.png#averageHue=%23595855&amp;clientId=u7fb7aa6f-4485-4&amp;from=paste&amp;height=404&amp;id=u1d6c89c9&amp;originHeight=404&amp;originWidth=360&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=102413&amp;status=done&amp;style=none&amp;taskId=u0be85a61-a4df-4af9-8d7b-2bf4ec41c85&amp;title=&amp;width=360" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> DCC软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maya </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>houdini</title>
      <link href="/2024/07/21/DCC%E8%BD%AF%E4%BB%B6-houdini/"/>
      <url>/2024/07/21/DCC%E8%BD%AF%E4%BB%B6-houdini/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="biomu"></a></p><h1>Houdini的一些专业术语</h1><p><a name="yo3oF"></a></p><h2 id="不同网络的介绍">不同网络的介绍</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689061156266-f97ffd6f-8523-4e9b-9881-5bc30905ad3e.png#averageHue=%23222222&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=1001&amp;id=ltCBL&amp;originHeight=1001&amp;originWidth=2049&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1345247&amp;status=done&amp;style=none&amp;taskId=u2413d157-4645-4ed0-a78c-4b5a5572c61&amp;title=&amp;width=2049" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689061605663-26354c46-c219-4ee1-832e-a075f297d2dd.png#averageHue=%23444241&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=232&amp;id=pkx9H&amp;originHeight=232&amp;originWidth=116&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14937&amp;status=done&amp;style=none&amp;taskId=u82469f77-6c15-4f0f-9397-9c69db01e7f&amp;title=&amp;width=116" alt="image.png"> <br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689061625011-6b95d11b-b34b-479b-aa72-7ab412e7e8f6.png#averageHue=%23424242&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=31&amp;id=DGN3z&amp;originHeight=31&amp;originWidth=75&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1885&amp;status=done&amp;style=none&amp;taskId=uc51dc965-3e6c-4697-b8f9-f1b34094ad5&amp;title=&amp;width=75" alt="image.png"> ch是控制动态和声音的<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689061761639-7c3deb25-2fa2-4b1e-89fc-5b17fe6155d5.png#averageHue=%23494040&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=30&amp;id=rBWBv&amp;originHeight=30&amp;originWidth=78&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1866&amp;status=done&amp;style=none&amp;taskId=u099bfccf-c732-442a-a5a6-1d6022a2753&amp;title=&amp;width=78" alt="image.png">shop是旧的管理材质的，现在已经被mat代替了<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689062628883-6ae3c575-96bd-4b43-a1ac-d4473bdb749b.png#averageHue=%234c4640&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=30&amp;id=bCOfh&amp;originHeight=30&amp;originWidth=86&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2081&amp;status=done&amp;style=none&amp;taskId=u67346da3-5258-4085-a745-9a29c9a997d&amp;title=&amp;width=86" alt="image.png">stage(solaris):适用于lookdev，布局和照明，以USD为核心，可以使用专门的节点定位对象，实例化几何体和管理镜头布局。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689062633114-c4c47694-9015-4be7-9e31-eb357d3c610a.png#averageHue=%233e3d3b&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=30&amp;id=wK1fy&amp;originHeight=30&amp;originWidth=88&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1654&amp;status=done&amp;style=none&amp;taskId=u317279d8-e9c9-42ab-8bb2-b5cdd007082&amp;title=&amp;width=88" alt="image.png">tasks: 用于处理多线程任务和作业。它用于执行复杂的计算、模拟和渲染任务，并对其进行分析和管理<br><a name="Yltcj"></a></p><h2 id="particle与grains的区别">particle与grains的区别</h2><p>grains是颗粒，particles是粒子<br>grains模拟的是颗粒材料，如沙子、粉末等。它们具有质量、速度、位置等物理属性，并受到力的作用。grains的模拟通常涉及颗粒之间的聚集、流动、堆积和碰撞等行为。<br>particles一般用于模拟离散的小元素，例如火花、烟雾、爆炸碎片等。粒子可以表示各种物理属性，如速度、位置、颜色等。particle的模拟通常设计粒子之间的移动、发射、生命周期和相互作用等。<br><a name="SGyGQ"></a></p><h2 id="HDA（OTL）">HDA（OTL）</h2><p>HDA在旧版本中叫OTL，意思是Houdini Digital Asset 数字资产，当制作完一个程序化的模型或者动画或者效果等以后，可以将这些节点打包成一个HDA以便在不同的项目中进行共享和重复使用。<br>HDA不仅可以在Houdini中重复使用并且可以编辑，HDA也可以导出为独立的文件提供给其他DCC软件或者引擎来使用。<br>在houdini中这些带锁的节点都是HDA<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689320716023-6921b55b-1837-4d2a-bbd7-a2a00e41db9e.png#averageHue=%23383736&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=437&amp;id=uab7062e4&amp;originHeight=437&amp;originWidth=864&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45822&amp;status=done&amp;style=none&amp;taskId=u7d7a7ce8-187a-4dcd-a2c4-f58c029d1be&amp;title=&amp;width=864" alt="image.png"><br><a name="ur7FM"></a></p><h3 id="制作HDA">制作HDA</h3><p>首先将节点进行打包，并在打包节点中通过参数编辑器绑定对应的参数。<br>打包快捷键（shift+c）：选中节点后点击右上角图标<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689321623116-8160f13a-4721-4bd5-82f6-a1b21ec8c25f.png#averageHue=%233b3a39&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=267&amp;id=u80b0cf0e&amp;originHeight=267&amp;originWidth=477&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20582&amp;status=done&amp;style=none&amp;taskId=u64d57096-1f2d-4037-8357-f1ccf7f63b1&amp;title=&amp;width=477" alt="image.png">，<br>然后在打包的节点上右键选择创建HDA（这是18.5上面截的图，19.5上面没有，19.5版本需要在显示器左上角创建HDA）<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689322027591-a25ba17c-fff8-4d8f-ad81-58d2025ebf32.png#averageHue=%233e3c39&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=345&amp;id=u33ec8d17&amp;originHeight=345&amp;originWidth=387&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25085&amp;status=done&amp;style=none&amp;taskId=u61800548-abb0-4a76-bd45-e424522524b&amp;title=&amp;width=387" alt="image.png">，<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689322101513-49ea9641-6e85-4063-b809-5592b3d2a38a.png#averageHue=%234c4a48&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=109&amp;id=ue9c47823&amp;originHeight=109&amp;originWidth=531&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24530&amp;status=done&amp;style=none&amp;taskId=u4c360d63-6875-4f33-995c-c9391713f1e&amp;title=&amp;width=531" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689322276022-e99e4260-c070-492d-a865-764081ff20de.png#averageHue=%2350504f&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=212&amp;id=u1c83773b&amp;originHeight=212&amp;originWidth=566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23866&amp;status=done&amp;style=none&amp;taskId=u60db91a9-b047-46a7-9434-1ec7113138f&amp;title=&amp;width=566" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689322499588-4f49b052-e74d-498b-85cf-98e959991620.png#averageHue=%233f3e3e&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=855&amp;id=u3ab13769&amp;originHeight=855&amp;originWidth=1224&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84192&amp;status=done&amp;style=none&amp;taskId=ub9a83e84-0be0-4443-9219-80461d43e5f&amp;title=&amp;width=1224" alt="image.png"><br>保存以后在houdini的网络编辑器中输入HDA的名字来调用了，并且可以在houdini中再次调整HDA的默认参数。<br>并且在电脑里的houdini文档里面可以找到对应HDA文件：Documents\houdini19.5\otls<br><a name="ikxeV"></a></p><h3 id="修改HDA默认参数">修改HDA默认参数</h3><p>方法一：先解锁节点的锁定。右键点击 Type Properties… 即可再次修改默认参数<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689322626633-d7217860-126d-44f9-b3d1-aae687e0abc9.png#averageHue=%23484540&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=487&amp;id=qIoJb&amp;originHeight=487&amp;originWidth=357&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43289&amp;status=done&amp;style=none&amp;taskId=u6224e910-98cf-485c-8da7-1bb2bee44fa&amp;title=&amp;width=357" alt="image.png"><br>方法二：在节点本身的参数面板中修改参数然后右键节点选择Save Node Type然后选择Match Current Definition<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689326490636-afa265a3-794d-4024-b092-45ed221420e4.png#averageHue=%234d463f&amp;clientId=u85a49878-3118-4&amp;from=paste&amp;height=418&amp;id=u8886ac0e&amp;originHeight=418&amp;originWidth=222&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27589&amp;status=done&amp;style=none&amp;taskId=u4b2d5c1d-ef71-4d78-9409-83c5abb320e&amp;title=&amp;width=222" alt="image.png"></p><p><a name="IBSWy"></a></p><h1>界面设置</h1><p><a name="brUG7"></a></p><h2 id="UI设置">UI设置</h2><p>使用Ctrl + ,  进入界面设置<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689052670029-436cbe6e-4999-478d-8a63-3342240b5c54.png#averageHue=%234d473f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=272&amp;id=u9559eddf&amp;originHeight=272&amp;originWidth=620&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54858&amp;status=done&amp;style=none&amp;taskId=ue5a25b2d-b0c2-4ac0-a5e5-6a4f447a20a&amp;title=&amp;width=620" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689052678655-525899c5-c1bc-4e65-aa1f-cbcbfcaa3243.png#averageHue=%233b3a3a&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=820&amp;id=u40ad350e&amp;originHeight=820&amp;originWidth=655&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63975&amp;status=done&amp;style=none&amp;taskId=u46c7ad6f-8a15-4036-8868-37e693eca7c&amp;title=&amp;width=655" alt="image.png"><br><a name="kDDD4"></a></p><h2 id="视图还原">视图还原</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689060593298-9d2ecce5-3592-4de9-b112-ee5403a555e9.png#averageHue=%23ac7624&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=549&amp;id=uf0f9253f&amp;originHeight=549&amp;originWidth=588&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=183785&amp;status=done&amp;style=none&amp;taskId=ub1631d02-cfd1-4564-b52f-14e6e2d99c1&amp;title=&amp;width=588" alt="image.png"><br><a name="aYSVn"></a></p><h2 id="扩展界面布局">扩展界面布局</h2><p>在基础视窗的下面创建一个新的视窗alt+]<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689151251229-fda78af2-3c3d-4c38-bfcf-4b915c3e8ead.png#averageHue=%23b87c2f&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=498&amp;id=u7af9267e&amp;originHeight=498&amp;originWidth=1028&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=277488&amp;status=done&amp;style=none&amp;taskId=u1cfd423c-107c-4f26-8d15-acc5a3358a1&amp;title=&amp;width=1028" alt="image.png"><br>然后更改下面新创建的视窗的类型，这样就能够上面显示视窗，下面显示geometry的数据表格。<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689151406446-57d1695a-253a-4d4b-8fee-a7bcaa4dd4eb.png#averageHue=%236b6762&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=398&amp;id=ue83c3884&amp;originHeight=398&amp;originWidth=663&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=149134&amp;status=done&amp;style=none&amp;taskId=u871c11dd-13ae-41c3-be17-5a30bf3ee8d&amp;title=&amp;width=663" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689151463706-695c1046-d36a-4dcd-b0ae-c27945f0598b.png#averageHue=%23979982&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=1283&amp;id=uc948b111&amp;originHeight=1283&amp;originWidth=2344&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1385059&amp;status=done&amp;style=none&amp;taskId=u37308915-c697-49d0-9189-ccae57d8193&amp;title=&amp;width=2344" alt="image.png"></p><p><a name="fmM1d"></a></p><h1>工具架介绍</h1><p><a name="yam6V"></a></p><h2 id="Lights-and-Cameras灯光和摄像机">Lights and Cameras灯光和摄像机</h2><p>这些工具用于在场景中创建和设置灯光和相机。灯光工具可以帮助您调整光源的属性和光照效果，而相机工具则用于设置场景的视角和渲染参数。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048140387-e5ea0011-c3f5-47a1-b3fa-d694e655c195.png#averageHue=%23474541&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=44&amp;id=u7e327302&amp;originHeight=44&amp;originWidth=496&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13828&amp;status=done&amp;style=none&amp;taskId=udedd4f14-6057-4e81-b91e-94015c0a00c&amp;title=&amp;width=496" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048146922-fa49bac9-e955-4d88-ae43-257a5c3b6f34.png#averageHue=%233f3f3f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=55&amp;id=u1d781436&amp;originHeight=55&amp;originWidth=468&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13691&amp;status=done&amp;style=none&amp;taskId=u9cd29529-a9c9-43d4-8edc-ff4d132f683&amp;title=&amp;width=468" alt="image.png"><br><a name="pkNfH"></a></p><h2 id="Collisions碰撞">Collisions碰撞</h2><p>这个工具集用于处理物体之间的碰撞效果。它可以模拟物体之间的碰撞和反应，并生成逼真的物理效果。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047487367-4f683cc9-a0f8-409a-b66e-d668864be23c.png#averageHue=%23403f3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=46&amp;id=u1d10c55a&amp;originHeight=46&amp;originWidth=383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9320&amp;status=done&amp;style=none&amp;taskId=ua7540e2a-471e-4458-9044-22fac9a6a1e&amp;title=&amp;width=383" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689055021610-368a8881-109a-4fc2-97e6-353f0801322f.png#averageHue=%2343433f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=65&amp;id=u81009f92&amp;originHeight=65&amp;originWidth=73&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3311&amp;status=done&amp;style=none&amp;taskId=u36acc161-a258-49ab-a290-a913237b121&amp;title=&amp;width=73" alt="image.png"> Deforming Object：令一个geo变成有形变的物体。也就是说这个物体能够影响其他带动力学的物体<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689052258133-5e2db26d-1ae8-4684-a625-28dcdd35c10b.png#averageHue=%233e3e3d&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=56&amp;id=ub0e13744&amp;originHeight=56&amp;originWidth=85&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2715&amp;status=done&amp;style=none&amp;taskId=uc004a5dd-a9bb-457b-ba96-f3adde51c4c&amp;title=&amp;width=85" alt="image.png">GroundPlane：添加地面碰撞。</p><p><a name="KELLH"></a></p><h2 id="Particles粒子">Particles粒子</h2><p>粒子工具用于创建和模拟粒子效果。通过设置粒子的属性和行为，您可以模拟烟雾、火焰、爆炸等效果。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047879218-6a53f94a-13bb-4121-97ce-bea6c0c9eb0d.png#averageHue=%23424141&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=53&amp;id=uc4df9c78&amp;originHeight=53&amp;originWidth=656&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18063&amp;status=done&amp;style=none&amp;taskId=u05216ddd-3f25-440c-9845-1b063ddef41&amp;title=&amp;width=656" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047886198-ab8edb21-ce80-4608-92d5-8c342e76efa2.png#averageHue=%23454342&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=44&amp;id=ucec7dff4&amp;originHeight=44&amp;originWidth=682&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15797&amp;status=done&amp;style=none&amp;taskId=uf49cffd6-4ca3-4d71-9352-f33d839bc62&amp;title=&amp;width=682" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689056776565-2f42881e-6873-4f57-bdc3-51dcbc55cb46.png#averageHue=%233e3e3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=77&amp;id=u531f0a6a&amp;originHeight=77&amp;originWidth=75&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3291&amp;status=done&amp;style=none&amp;taskId=u626295c8-e989-4538-bd60-92c31884c77&amp;title=&amp;width=75" alt="image.png"><br>SourceParticleEmitter：将所选择的物体变成粒子发射器。</p><p><a name="SGYfR"></a></p><h2 id="Grains颗粒">Grains颗粒</h2><p>颗粒工具是一种更高级的粒子系统，用于模拟具有更多物理特性的颗粒，消耗资源更高，相比粒子，它会模拟颗粒与颗粒之间的物理效果，例如沙子、泥浆。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047527124-8ac8ff40-9f0e-41fe-bfa9-389c25357dd9.png#averageHue=%2342413e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=48&amp;id=u2242df1b&amp;originHeight=48&amp;originWidth=784&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20197&amp;status=done&amp;style=none&amp;taskId=ua2bb4ad8-7f94-40cd-a9f2-935a294853e&amp;title=&amp;width=784" alt="image.png"><br><a name="eXxuU"></a></p><h2 id="Vellum布料">Vellum布料</h2><p>Vellum是一个用于模拟布料、软体和其他变形物体的工具集。它可以模拟布料的折叠、撕裂和变形，以及其他物体的动态行为。毛发，沙子，黏体也可以通过vellum来做<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047548326-79f19b27-8f6c-4a8d-a44e-de1592204d0f.png#averageHue=%23404040&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=46&amp;id=uca4a8baf&amp;originHeight=46&amp;originWidth=493&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12531&amp;status=done&amp;style=none&amp;taskId=u22872689-85f1-4e54-819c-12351164f5a&amp;title=&amp;width=493" alt="image.png"><br><a name="UQd1X"></a></p><h2 id="Rigid-Bodies刚体">Rigid Bodies刚体</h2><p>刚体工具用于模拟刚体物体的物理行为，如碰撞、重力和动力学。您可以创建刚体对象，并模拟它们在场景中的运动和互动。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047900689-a56852dd-b649-439c-9f85-e4afbfdcab37.png#averageHue=%23434240&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=55&amp;id=u49a12f79&amp;originHeight=55&amp;originWidth=643&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19656&amp;status=done&amp;style=none&amp;taskId=u3d641c3c-d4f9-436d-8334-e5decfb609c&amp;title=&amp;width=643" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047907390-25ac370c-e527-457d-a737-367c9d80abf8.png#averageHue=%2340403f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=55&amp;id=uabd33aa0&amp;originHeight=55&amp;originWidth=711&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15676&amp;status=done&amp;style=none&amp;taskId=u0df05b36-0ed9-4a2d-ada3-27d5369ef8c&amp;title=&amp;width=711" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689058013341-4b023cc6-573c-45d9-9d05-2a170be35594.png#averageHue=%23424242&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=51&amp;id=ud84e1db5&amp;originHeight=51&amp;originWidth=71&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2647&amp;status=done&amp;style=none&amp;taskId=ufda6611e-daf6-4432-8ad0-a1a4936934d&amp;title=&amp;width=71" alt="image.png"> MakeBreakable：为选择的刚体物体添加破碎<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689052205976-c8008265-ef72-4d82-9b4f-d23f97f9f434.png#averageHue=%233f3e3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=64&amp;id=u820c4b47&amp;originHeight=64&amp;originWidth=81&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3329&amp;status=done&amp;style=none&amp;taskId=u29c883f0-7f30-4deb-837b-1945db3798d&amp;title=&amp;width=81" alt="image.png">RBD Instanced Objects： 先选择一个物体A，然后点击此工具，然后选择物体B再按回车，按完回车以后物体A的所有顶点都会被替换成物体B。</p><p><a name="wzsal"></a></p><h2 id="Particle-Fluids-粒子流体">Particle Fluids 粒子流体</h2><p>这个工具用于模拟流体的行为，通过将粒子和网格结合起来，可以生成逼真的流体效果，如水、烟雾或液体金属。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048115292-48d50b41-7189-4ea2-b4b4-77685b619667.png#averageHue=%23404040&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=60&amp;id=u78a5b5db&amp;originHeight=60&amp;originWidth=453&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14643&amp;status=done&amp;style=none&amp;taskId=ud49459b3-ebf0-47f2-9596-dd1c16b0365&amp;title=&amp;width=453" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048120527-2815f1ae-2b0d-4a25-b634-349a5fd27022.png#averageHue=%23403f3f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=49&amp;id=u5ccf93af&amp;originHeight=49&amp;originWidth=451&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13357&amp;status=done&amp;style=none&amp;taskId=uacff56cd-92c0-4bce-b729-b5d148935af&amp;title=&amp;width=451" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689054951139-88cfcde0-da30-4684-948e-f28bcdd07aa6.png#averageHue=%233e3e3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=60&amp;id=u6216d798&amp;originHeight=60&amp;originWidth=71&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2906&amp;status=done&amp;style=none&amp;taskId=u75ef010d-6031-4416-a987-f76b45fe2d3&amp;title=&amp;width=71" alt="image.png">FLIPTank 创建一个水缸<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689054977847-95c939ec-3808-4632-9bb5-d1618366c095.png#averageHue=%238f9bb2&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=208&amp;id=ubdc2bc78&amp;originHeight=550&amp;originWidth=627&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=385350&amp;status=done&amp;style=none&amp;taskId=u0759904d-00cd-47de-9f49-17edeb8622a&amp;title=&amp;width=237" alt="image.png"></p><p><a name="V9o6z"></a></p><h2 id="Viscous-Fluids粘性流体">Viscous Fluids粘性流体</h2><p>粘性流体工具是Particle Fluids的扩展，可以模拟具有更高黏度或粘性特性的流体，如糖浆或蜂蜜。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047573158-250e80d2-ac5b-4b9a-92aa-bf7322c58b23.png#averageHue=%23444241&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=52&amp;id=u7026d1aa&amp;originHeight=52&amp;originWidth=631&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19936&amp;status=done&amp;style=none&amp;taskId=ub322d555-b92c-48b2-be6d-e6b9edef758&amp;title=&amp;width=631" alt="image.png"><br><a name="YqqHB"></a></p><h2 id="Oceans海洋">Oceans海洋</h2><p>这个工具集用于创建逼真的海洋和水面效果。它可以模拟海浪、波纹、海浪翻滚等效果，并生成逼真的水体表面。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047580614-e0973059-2703-4ed6-be3a-4d0ac18d67e7.png#averageHue=%233d3d3d&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=51&amp;id=u1466064c&amp;originHeight=51&amp;originWidth=490&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11344&amp;status=done&amp;style=none&amp;taskId=u481c3039-a4e5-4948-8708-e367941d442&amp;title=&amp;width=490" alt="image.png"><br><a name="GqVX1"></a></p><h2 id="PyroFX火焰和烟雾">PyroFX火焰和烟雾</h2><p>PyroFX工具集用于创建逼真的火焰和烟雾效果。它可以模拟火焰的燃烧、烟雾的扩散和交互，并生成逼真的火焰和烟雾效果。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047589685-ca21bea0-df05-438a-9434-1b23c575f908.png#averageHue=%2344413e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=49&amp;id=u391cedc9&amp;originHeight=49&amp;originWidth=445&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10949&amp;status=done&amp;style=none&amp;taskId=u51b3f215-0c9e-4bcb-b052-16e3a97cd0e&amp;title=&amp;width=445" alt="image.png"></p><p><a name="XNVAr"></a></p><h2 id="FEM">FEM</h2><p>FEM工具集用于模拟弹性和变形物体的行为。它可以模拟弹性体、变形物体的扭曲、弯曲和拉伸，并生成逼真的变形效果。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047965248-d4c249b6-97aa-44cb-bc35-9c0a86b6e14b.png#averageHue=%233e3e3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=59&amp;id=u049ecf7a&amp;originHeight=59&amp;originWidth=450&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13132&amp;status=done&amp;style=none&amp;taskId=u8db51c22-25f1-4761-b782-c55d081b3ba&amp;title=&amp;width=450" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047972860-f7619f70-6592-4103-9b93-395209c486ed.png#averageHue=%2341403f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=53&amp;id=uc4939793&amp;originHeight=53&amp;originWidth=502&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13498&amp;status=done&amp;style=none&amp;taskId=ue01236f1-0b24-4333-b1bc-d36df87b5e5&amp;title=&amp;width=502" alt="image.png"><br><a name="osjid"></a></p><h2 id="Wires线条">Wires线条</h2><p>线条工具用于模拟线条和柔性物体的行为。它可以创建和模拟绳索、电线、海藻等柔性物体，并模拟它们的动态行为。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047988436-78a55797-e6b4-44a2-adb6-75d2ad514df7.png#averageHue=%233f3f3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=51&amp;id=u1dbd512f&amp;originHeight=51&amp;originWidth=475&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11450&amp;status=done&amp;style=none&amp;taskId=u01e11f09-8f8c-48e9-8fe4-42792a41ca6&amp;title=&amp;width=475" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689047998940-88a62b7b-56d1-480e-b15e-608dd37619b2.png#averageHue=%23414040&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=56&amp;id=ue6f618c9&amp;originHeight=56&amp;originWidth=537&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13260&amp;status=done&amp;style=none&amp;taskId=ua1b4d17a-8780-4ff9-b7e3-837bd5c2218&amp;title=&amp;width=537" alt="image.png"><br><a name="zhyXl"></a></p><h2 id="Crowds群集">Crowds群集</h2><p>Crowds工具集用于创建和模拟大规模的人群效果。它可以模拟人群的移动、交互和行为，并生成逼真的人群场景。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048015892-e454dfcb-9340-4226-9481-d6a620a85af9.png#averageHue=%23434140&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=51&amp;id=u2285fc29&amp;originHeight=51&amp;originWidth=527&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17578&amp;status=done&amp;style=none&amp;taskId=u694c271d-9527-4b43-b7e6-ecd752294d1&amp;title=&amp;width=527" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048022519-69084fc3-3785-453b-ade1-897a2828523b.png#averageHue=%23433f3f&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=52&amp;id=u7a29d580&amp;originHeight=52&amp;originWidth=574&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10183&amp;status=done&amp;style=none&amp;taskId=u4268e0eb-d80c-41e5-866b-2ad7471b965&amp;title=&amp;width=574" alt="image.png"><br><a name="W5wjh"></a></p><h2 id="Drive-Simulation驱动模拟">Drive Simulation驱动模拟</h2><p>驱动模拟工具用于模拟和驱动复杂的物体和效果。它可以通过外部力、约束和动画数据来驱动模拟，并生成复杂的动态效果。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048031676-7f9e6a43-d247-4874-924b-0e015b903151.png#averageHue=%23403f3e&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=59&amp;id=u864e92fb&amp;originHeight=59&amp;originWidth=405&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12549&amp;status=done&amp;style=none&amp;taskId=u2c909bad-3402-43dd-a203-36086cd37cf&amp;title=&amp;width=405" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689048039399-57213f07-079f-4b8f-80a4-52b623fc7eab.png#averageHue=%23414040&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=54&amp;id=u8f8adacd&amp;originHeight=54&amp;originWidth=428&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13692&amp;status=done&amp;style=none&amp;taskId=u255d73b6-ecfe-470b-86b1-b3e6a240239&amp;title=&amp;width=428" alt="image.png"><br><a name="CC9g8"></a></p><h1>快捷键与操作</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1688983296559-86b10eca-f3dc-434b-9ae9-f2c8528dae7b.png#averageHue=%23fcfaf8&amp;clientId=u5c4fd87d-e6a3-4&amp;from=paste&amp;height=1161&amp;id=aOdsm&amp;originHeight=1161&amp;originWidth=931&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=288455&amp;status=done&amp;style=none&amp;taskId=u0b9afa62-31e9-410e-8065-6ca7f954adf&amp;title=&amp;width=931" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689058423850-c4fa95bc-f76f-47e2-a612-c4453c3f05af.png#averageHue=%2333211d&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=753&amp;id=ua3c4fffe&amp;originHeight=753&amp;originWidth=1052&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=721267&amp;status=done&amp;style=none&amp;taskId=u9426299a-ebed-464a-ba87-58254183db6&amp;title=&amp;width=1052" alt="image.png"><br><a name="N2PXA"></a></p><h2 id="视图操作快捷键">视图操作快捷键</h2><p><a name="eKfwY"></a></p><h3 id="快捷键">快捷键</h3><p>空格+f键： 居中显示<br>w键：切换为网格显示<br>e键： 缩放<br>r键：旋转<br>t键： 位移<br>视图模式中按1，2，3，4，5切换透视图，顶视图，前视图，右视图，UV视图<br>9键： 显示geometry对应的group和连接的geometry。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689214808487-bd7725ac-d0c1-44c8-b943-ed61e40b700e.png#averageHue=%23949a8f&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=430&amp;id=ufc07a38b&amp;originHeight=430&amp;originWidth=502&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=155040&amp;status=done&amp;style=none&amp;taskId=u4675deb6-5883-4286-81e1-f8f44bfb61c&amp;title=&amp;width=502" alt="image.png"><br>空格键：切换view视窗模式和select选择编辑模式，如果切换不了就按s键也能进入选择编辑模式<br>ctrl+b：视图最大化，需要在对应视图处按<br>d键：设置选择视图的显示项<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663667735662-95f8016d-6a7f-49eb-81e5-561bb03c7bd3.png#averageHue=%23484848&amp;clientId=u5015aa74-1ea4-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=495&amp;id=u321afc6d&amp;originHeight=495&amp;originWidth=743&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=70072&amp;status=error&amp;style=none&amp;taskId=ud20e9657-e103-4788-8610-8babf97f7ab&amp;title=&amp;width=743" alt="image.png"><br>shift+G键：扩大选择的点边面区域<br>shift+s键：缩小选择的点边面区域<br>快速选择循环点边面：选中一个点边面以后，按a键配合鼠标中键快速选择循环点边面<br><a name="VQNlt"></a></p><h3 id="操作">操作</h3><p>将某一窗口最小化：例如想要将属性编辑器缩小就点击图中图标<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663661983206-f83421db-62fa-4c61-bb93-bcae82435e97.png#averageHue=%23333333&amp;clientId=u5c2a535c-7f3e-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=893&amp;id=WBF8B&amp;originHeight=893&amp;originWidth=1137&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84774&amp;status=error&amp;style=none&amp;taskId=u5a2d8777-7221-4a81-8393-3890a88d57e&amp;title=&amp;width=1137" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663662030215-d4cfdbae-58fc-4872-8868-e59cd11a9cac.png#averageHue=%23323232&amp;clientId=u5c2a535c-7f3e-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=683&amp;id=IQhqE&amp;originHeight=683&amp;originWidth=1097&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53207&amp;status=error&amp;style=none&amp;taskId=u833d11db-d3fd-498f-a40f-3e477fe9c15&amp;title=&amp;width=1097" alt="image.png"></p><p><a name="npGdV"></a></p><h2 id="网络编辑器快捷键">网络编辑器快捷键</h2><p>g键：快速定位到选择的节点<br>h键：定位显示所有的节点<br>l键：一键快速排列<br>令节点对齐：选中要对齐的节点然后按shift+a+鼠标左键按住拖动（上下拖动为竖着对齐，左右拖动为横着对齐）<br>R键：显示与隐藏节点<br>复制节点：ctrl+cv或者alt+鼠标拖动<br>y键：按着不松开启剪刀模式剪断节点之间的连接<br>shift+o：添加注释<br>shift+w：显示大纲<br>shift+c： 打包节点<br>p键：在网络编辑器中快捷显示隐藏属性编辑器<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663662078906-6cb9d917-ced2-4e3c-a957-f6afa888e3f8.png#averageHue=%23333333&amp;clientId=u5c2a535c-7f3e-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=639&amp;id=sLnZ3&amp;originHeight=639&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66573&amp;status=error&amp;style=none&amp;taskId=u137ff9e5-3237-4839-93ca-afaabaea354&amp;title=&amp;width=1113" alt="image.png"><br><a name="zZup5"></a></p><h2 id="网格编辑器的一些操作">网格编辑器的一些操作</h2><p><a name="NMZGD"></a></p><h3 id="创建一个节点的引用">创建一个节点的引用</h3><p>使用此功能后会创建一个新的相同节点，新的节点的属性会完全同步旧节点的属性调整。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689134672795-56affba5-9d44-4094-a9ea-27eb14851f29.png#averageHue=%23454039&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=246&amp;id=uadd4f3e0&amp;originHeight=246&amp;originWidth=565&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28677&amp;status=done&amp;style=none&amp;taskId=ua5b0734b-1b72-4b64-8af8-1bc7daa112c&amp;title=&amp;width=565" alt="image.png"><br><a name="UkPEY"></a></p><h3 id="创建参数的引用">创建参数的引用</h3><p>先复制要引用的参数<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689134794385-f2679a48-a5f2-4cda-a74a-cc14ed992018.png#averageHue=%23494137&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=209&amp;id=u414db8b4&amp;originHeight=209&amp;originWidth=372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16844&amp;status=done&amp;style=none&amp;taskId=u41d8c11b-1d59-460c-872c-1b7b8a08afb&amp;title=&amp;width=372" alt="image.png"><br>然后在另一个参数中右键使用粘贴，有两种方式，一个是相对路径一个是绝对路径。<br>使用此功能后将会建立双方参数的同步。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689134832342-bd421a14-cbfc-4d02-a4ff-8f16f956d240.png#averageHue=%23403c38&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=340&amp;id=ue4b26d5f&amp;originHeight=340&amp;originWidth=578&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36646&amp;status=done&amp;style=none&amp;taskId=u7d247a7e-69be-4a10-a7f7-3c5db7e2b0e&amp;title=&amp;width=578" alt="image.png"><br><a name="P8gdF"></a></p><h2 id="将VOP中的输入变量变成参数使其可以直接在VOP节点上自定义参数值">将VOP中的输入变量变成参数使其可以直接在VOP节点上自定义参数值</h2><p>在变量处按鼠标中间然后选择Promote Parameter即可创建出来可以用户自定义的参数、<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689241831109-ecc4032c-2541-41c5-83be-43d3021c1970.png#averageHue=%2344413e&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=340&amp;id=u705d7c37&amp;originHeight=340&amp;originWidth=434&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28065&amp;status=done&amp;style=none&amp;taskId=udb37a3a6-fd55-405c-aa87-ce3dd65df39&amp;title=&amp;width=434" alt="image.png"><br>然后点击变量输入引脚的四边形即可调整参数的类型和名字。<br>添加完参数以后，即可在VOP节点外部调整参数的值。</p><p><a name="NaAeq"></a></p><h2 id="动画相关快捷键">动画相关快捷键</h2><p>alt+鼠标左键点击属性进行k帧，设置关键帧<br>shift+鼠标左键点击属性：进入属性的动画曲线编辑器<br>⬆上箭头键：正序播放动画<br>⬇下箭头键：倒序播放动画</p><p><a name="smR4p"></a></p><h1>不同网络对应的常用节点</h1><p><a name="nFePv"></a></p><h2 id="GEO-SOP-建模，程序化建模，K帧，展UV">GEO(SOP)(建模，程序化建模，K帧，展UV)</h2><p><a name="neX0x"></a></p><h3 id="建模">建模</h3><p>null：空节点，主要作用是标记和分类<br>merge：合并<br>transform ： 变换  <br>soft transform ： 带软选择的变换<br>blast：爆破（有删除的作用）<br>fuse: 焊接相邻的点<br>facet：把面与面进行拆分，将有多条边共用的点分离成多个点，需要勾选uniquePoints<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663746774746-d603a37a-6368-4c36-92c0-608661cf6429.png#averageHue=%23424242&amp;clientId=u2b212657-78c4-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=34&amp;id=uec3a6324&amp;originHeight=34&amp;originWidth=163&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1655&amp;status=error&amp;style=none&amp;taskId=uda015188-9f3c-43f8-aab0-4aa5144600c&amp;title=&amp;width=163" alt="image.png"><br>ends:可以使用这个节点将模型线框显示，需要将close U属性改为Open<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663747682517-bbb52790-06e0-4996-85b9-50ff04f52c21.png#averageHue=%233f3f3f&amp;clientId=u2b212657-78c4-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=38&amp;id=udf822390&amp;originHeight=38&amp;originWidth=265&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2361&amp;status=error&amp;style=none&amp;taskId=u15880ef4-1bde-4587-98cd-9ae674a2600&amp;title=&amp;width=265" alt="image.png"><br>add:可以将模型删除但只保留点，需要勾选<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663747791647-b52ddd33-f444-4ed9-9e0e-245380cebce8.png#averageHue=%23404040&amp;clientId=u2b212657-78c4-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=34&amp;id=ub2763d35&amp;originHeight=34&amp;originWidth=312&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3488&amp;status=error&amp;style=none&amp;taskId=ua327da12-2dac-445b-a8bc-a2d3cbd6cd4&amp;title=&amp;width=312" alt="image.png">。<br>add也可以将点连成线：需要在Polygons一栏中选择By Group<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689242224496-6c9efebe-9c6a-462a-a887-f4f6737e4224.png#averageHue=%23373737&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=187&amp;id=u4989e598&amp;originHeight=187&amp;originWidth=383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25596&amp;status=done&amp;style=none&amp;taskId=uec77778d-9bc2-4f38-89a4-a8381028fef&amp;title=&amp;width=383" alt="image.png"><br>scatter：模型变点(可以自己设置点的数量)<br>polywire：将线框向外扩展变成网格<br>polyextrude: 挤出<br>polysplit：多切割，以及插入循环边，如果不能交互的话就在视图窗口中按enter键，通过改变path type切换点击切割的模式还是循环边的模式<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689131620240-afc23153-3ed1-4e5e-888e-01b01262dae4.png#averageHue=%235b4e3d&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=77&amp;id=u4cc0e5ef&amp;originHeight=77&amp;originWidth=248&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7540&amp;status=done&amp;style=none&amp;taskId=u4813f39e-24d7-4d80-965c-e25c1969550&amp;title=&amp;width=248" alt="image.png"><br>split：分离<br>polybevel：倒角<br>polyfill(polycap)：填充<br>poly frame：输出normal和tangent属性并且可以更改其normal属性和tangent属性的名字，例如可以在tangent属性的名字写成N，这样就相当于使用其tangent属性作为N属性来使用。<br>copy to points ：将模型复制到点上<br>sort：可以用来反转点序号<br>match size: 匹配大小，例如通过一个box为标准来使其他物体大小跟box大小匹配（需要更改一些节点的参数）<br>reverse: 反转，通常用来处理法线<br>attribute create：创建自定义属性<br>attribute randimize ： 添加或设置属性值的随机<br>mountain：翻译为山，往山的形象进行变形，作用是为模型添加变形<br>subdivide: 细分<br>color：添加颜色<br>group：组，可以将顶点或者边等进行打组，在选择节点的情况下可以按~键然后就可以手动选择需要打组的元素，然后再按回车键进行打组。<br>也可以通过另一个geometry来进行范围的选择：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689155853946-26709063-411d-45ac-88ea-293871a71db7.png#averageHue=%23464442&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=475&amp;id=u42bbf13c&amp;originHeight=475&amp;originWidth=510&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39742&amp;status=done&amp;style=none&amp;taskId=u288538d7-d7a1-422d-a7f2-a267a3f8890&amp;title=&amp;width=510" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689155865380-583e139f-f199-4955-9ae7-e681b4e37159.png#averageHue=%23424241&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=475&amp;id=u2ada29a0&amp;originHeight=475&amp;originWidth=689&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45432&amp;status=done&amp;style=none&amp;taskId=udaebe27d-5670-48a1-84f4-b2cc6fd846f&amp;title=&amp;width=689" alt="image.png"><br>L-System：提供了很多预设，可以快速做出一些形状，比如树，树丛，闪电等<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689218131712-b454f98d-3a06-484b-9eb6-85ebfccacb89.png#averageHue=%23393735&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=151&amp;id=u11757cd0&amp;originHeight=151&amp;originWidth=298&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9939&amp;status=done&amp;style=none&amp;taskId=ub77eb91c-5ad5-41bd-a86d-a18d7794499&amp;title=&amp;width=298" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689218112636-63429f71-6df6-4db8-aa7a-1b470da11743.png#averageHue=%233d3b3b&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=868&amp;id=uc1eb3cc8&amp;originHeight=1168&amp;originWidth=444&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=89665&amp;status=done&amp;style=none&amp;taskId=u7efbaf37-b269-4e3c-8b85-9bba80fc419&amp;title=&amp;width=330" alt="image.png"><br>pack：打包，打包后组成元素变成1<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689218298841-e4185e88-2b99-423d-b678-3e19036b6fa7.png#averageHue=%232a2c37&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=120&amp;id=uc5e7bba8&amp;originHeight=120&amp;originWidth=155&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5759&amp;status=done&amp;style=none&amp;taskId=u34710503-d460-4cbf-b5ce-859b69771da&amp;title=&amp;width=155" alt="image.png"><br>resample：重新采样，可以改变曲线的组成，例如让曲线的点更多。<br>object merge：将obj层级下的其他geometry带到另一个geometry层级下<br>switch：可以控制两个节点之间切换显示<br>magnet：磁力配合metaball来制作geometry与metaball相互作用的磁力效果<br>skin: skin节点可以将线变成面<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689239491649-651323c6-7a8f-4f31-b81c-221a54b3918e.png#averageHue=%23a1a8ac&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=166&amp;id=u7dd50d25&amp;originHeight=166&amp;originWidth=212&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29012&amp;status=done&amp;style=none&amp;taskId=u458d6b47-4f57-456a-a784-5c3f56c26dc&amp;title=&amp;width=212" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689239493799-e6627735-8f73-4dc7-b077-e7d510915bcf.png#averageHue=%23acadac&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=165&amp;id=u20bee3ed&amp;originHeight=165&amp;originWidth=208&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27426&amp;status=done&amp;style=none&amp;taskId=ub8e8a114-a42a-4bea-8776-d6d6fc53adc&amp;title=&amp;width=208" alt="image.png"><br>group promote：切换组的类型<br>convert： 转换类型<br>connectivity： 新增一个属性（默认是class），将merge到一起的geometry按照顺序给0~（geometry个数-1）的值，例如这里将两个box合并后给connectivity后，第一个box的点（或面）的class属性为0，第二个box的点（或面）的class属性为1<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1690191324087-f1663acc-835d-4cfd-bee1-7331d11ea0f4.png#averageHue=%23333333&amp;clientId=u48f6dd24-7c60-4&amp;from=paste&amp;height=364&amp;id=u12e3b5a1&amp;originHeight=364&amp;originWidth=143&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4167&amp;status=done&amp;style=none&amp;taskId=u0da282e0-418a-4b77-8cbf-53660a17875&amp;title=&amp;width=143" alt="image.png">。<br>collisionSource：通过输入后输出一个geo一个vdb</p><p><a name="uLtUS"></a></p><h3 id="UV">UV</h3><p>UV Texture：对geometry进行UV的投射,19.5测试的是在投射的时候同时能够显示出来UV的贴图18.5则不会显示出来。<br>UV Quick Shade : 赋予UV检查的Shader方便观察。</p><p><a name="ajq2u"></a></p><h3 id="地形">地形</h3><p>下面的这些前面的HeightField都可以打hf缩写来快速定位到类型<br>HeightField：初始地形，平面网格<br>HeightField Noise : 专门针对地形的Noise<br>HeightField Distort by Noise： 对Noise进行扭曲<br>HeightField Transform：专门针对地形的移动节点<br>HeightField Erode： 模拟侵蚀（属于解算，通过移动关键帧可以看出来）<br>HeightField Flow Field：添加水流的影响<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689230248827-58b607a1-afe9-4ebe-9d91-4a0e8d48ed5a.png#averageHue=%237c5718&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=128&amp;id=u69df612c&amp;originHeight=276&amp;originWidth=572&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=154131&amp;status=done&amp;style=none&amp;taskId=u447c83a8-4a2a-4b38-a4cd-4460a467d8c&amp;title=&amp;width=265" alt="image.png">（红色）<br>HeightField Visualize：使为地形添加的不同细节更加形象话的表示出来（通过自定义的颜色）<br>Convert HeightField ：将地形转换成网格体<br>Time Shift：如果前面有模拟，那么可以通过这个节点停掉解算过程而得到需要的某一帧的效果。<br><a name="u2Xfb"></a></p><h2 id="动画">动画</h2><p>time shift：记录输入的对象的动画，然后让这个动画的帧数由timeshift节点的属性来操控。可以通过给timeshift的属性进行K帧达到给动画的某一阶段的动画进行倍速的效果。</p><p><a name="oMeyk"></a></p><h3 id="制作粒子可能用得到的">制作粒子可能用得到的</h3><p>trail:记录输入的点的前一帧（或前几帧，可以自定义），然后会把这些记录显示在窗口上。也可以通过它来得到对象的速度属性，不过需要修改类型。<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1690535301265-4c0c9a92-5461-483d-859e-fb857e0d0776.png#averageHue=%23383736&amp;clientId=u182835ed-113b-4&amp;from=paste&amp;height=210&amp;id=u323329f3&amp;originHeight=210&amp;originWidth=716&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18116&amp;status=done&amp;style=none&amp;taskId=uaebcb37e-d114-40dd-98aa-72fc46cbaa8&amp;title=&amp;width=716" alt="image.png"><br>pointReplicate: 基于输入的sop的点，来为sop的点周围来生成点云。并且可以继承点的速度（在attribute里面），能够控制点云的形状数量的noise</p><p><a name="WMusM"></a></p><h2 id="VOP（VEX-Builder）">VOP（VEX Builder）</h2><p><a name="TiVHj"></a></p><h3 id="VOP变量颜色对应类型介绍">VOP变量颜色对应类型介绍</h3><p>先介绍一下不同颜色对应的类型：<br>没有布尔类型，布尔类型用int类型的0和1来代替了<br>绿色：vector<br>青色：float<br>深青色：floata   浮点数数组<br>蓝色：int<br>棕黄色：string<br><a name="VnSyJ"></a></p><h3 id="VOP变量名字对应">VOP变量名字对应</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689242456393-191f7ff8-e461-4c0c-b21e-baab2a044301.png#averageHue=%23464545&amp;clientId=u0b51113a-ff6a-4&amp;from=paste&amp;height=763&amp;id=uc5a4f31d&amp;originHeight=763&amp;originWidth=438&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32437&amp;status=done&amp;style=none&amp;taskId=ud999579b-86b9-4530-96b9-35ba3729bdc&amp;title=&amp;width=438" alt="image.png"><br>P对应顶点属性为vector类型<br>Cd对应颜色属性为vector类型<br>ptnum意思是point number 也就是点序号，int类型<br>numpt意思是number of point 也就是点的总数量，int类型<br><a name="wHGgV"></a></p><h3 id="VOP节点介绍">VOP节点介绍</h3><p>VOP节点有很多种<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689151972832-5c5e48cc-2121-4cd3-a0b4-2d70e5194fe8.png#averageHue=%23444443&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=149&amp;id=u73d68979&amp;originHeight=149&amp;originWidth=175&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11172&amp;status=done&amp;style=none&amp;taskId=u3f8d51d3-532d-4437-a000-d8d986b1f59&amp;title=&amp;width=175" alt="image.png"><br>Point VOP 和 Primitive VOP 和 Vertex VOP都属于Attribute VOP,只是这三个默认的类型不同。<br><a name="LkkpL"></a></p><h4 id="Attribute-VOP">Attribute VOP</h4><p>attributeVOP，这个是一个可以处理各种属性的节点，在节点里面可以通过可视化编程网络设置属性。<br>bind：读取属性<br>bind export： 输出属性（创建一个新属性）（跟bind节点是一样的，只不过把bind里的默认参数修改了一下）<br>random：随机<br>fit range：将数值限制在一个范围内<br>round to integer：四舍五入<br>multply add constant：乘和添加常数，配合random调节随机值<br>switch： 通过接收的数来选择自身所具有的对应位置的数来进行输出<br>subtract： 减（要求有两个输入）<br>subtract Constant：减一个常数（只需要一个输入）<br>mix：混合，跟UE材质蓝图的lerp是一个道理<br><a name="Jvfsu"></a></p><h2 id="out（ROP）-渲染输出">out（ROP）(渲染输出)</h2><p>mantra：houdini自带的渲染器节点<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689060197542-f982d1d5-d00b-47bc-9459-94ff50440ac6.png#averageHue=%23393837&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=825&amp;id=Meet3&amp;originHeight=825&amp;originWidth=480&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=89232&amp;status=done&amp;style=none&amp;taskId=uc94e0acf-2310-4867-978f-337e0bfae71&amp;title=&amp;width=480" alt="image.png"><br><a name="KG6F0"></a></p><h2 id="mat（材质网络）">mat（材质网络）</h2><p>mat是为物体添加着色器和材质的网络<br>创建好shader以后可以将节点拖入到视图中的物体中可以快速地赋予材质<br>classicshader 经典shader<br><a name="zpg3i"></a></p><h2 id="dop（动力学解算）（烟火水粒子）">dop（动力学解算）（烟火水粒子）</h2><p>gravity：引力，重力，9.8<br>staticObject:赋予SOP路径后生成被动碰撞体<br><a name="KVZ6A"></a></p><h3 id="粒子">粒子</h3><p>popobject：配合popSolver使用，使其能够与DOP环境的其他对象正确交互<br>popSource：用于通过几何体生成粒子的节点<br>popCollisionDetect：用于粒子的碰撞并设置碰撞后的反应<br>popDrag：为粒子添加类似风阻的效果<br>popForce：为粒子添加新的作用力</p><p><a name="DSIEe"></a></p><h3 id="解算器节点">解算器节点</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689064091029-2fcd79cc-edd2-4631-a26d-de96b91906dc.png#averageHue=%23f8f5f0&amp;clientId=u6ad503fa-7cfa-4&amp;from=paste&amp;height=436&amp;id=udefb0eaa&amp;originHeight=436&amp;originWidth=427&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77449&amp;status=done&amp;style=none&amp;taskId=ufdf2f652-568d-4456-9b4e-de45ba10820&amp;title=&amp;width=427" alt="image.png"><br>rigid body solver：专门用于处理刚体物体的运动、碰撞和相互作用。<br>刚体是指在运动过程中形状和体积保持不变的物体，它们的运动受到物理力学规律的约束。<br>static solver：使其变成被动的碰撞体，但不受模拟的影响。例如，建筑物、地形、静态障碍物等都可以被视为静态物体。<br>flip solver：流体解算器，计算飞溅和波浪效应<br>Whitewater solver：在flip solve的基础上创建泡沫喷雾和气泡<br>vellum solver：属于POP solver类型，用于支持布料，头发，颗粒<br>POP Solver：用于粒子和颗粒，也可以用来模拟软体和布料。<br>Wire Solver： 用于解算毛发和皮毛或其他例如船的索具或树枝的索具等丝状物体。<br>Finite Element Solver：用于模拟四面体的材料和固体，用于模拟肌肉，软体，破碎的木头<br>Cloth Solver：对与变形物体作用的布料进行模拟<br>SOP Solver：用于SOP网络，随着时间的推移而改变物体的形状。例如墙壁被物体撞击而产生凹痕。<br><a name="pUZWY"></a></p><h1>文件管理规范和场景比例</h1><p><a name="aoeGv"></a></p><h2 id="场景比例">场景比例</h2><p>houdini的场景比例是一个单位是1m，其他dcc软件的单位一般是1cm。<br>修改场景比例的方法（houdini因为计算原因所以更推荐使用m为单位）：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689144934395-1f11c023-9f25-4bdd-b6a3-31bf3a7397b1.png#averageHue=%234c463d&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=255&amp;id=ub2f9f4c8&amp;originHeight=255&amp;originWidth=584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45467&amp;status=done&amp;style=none&amp;taskId=ufa9fb9df-2748-4bc0-b2ce-609e246613d&amp;title=&amp;width=584" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689144918467-548b3ab2-c1fc-4337-8275-b52c26471076.png#averageHue=%234f4e4e&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=328&amp;id=ud6088751&amp;originHeight=328&amp;originWidth=586&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33088&amp;status=done&amp;style=none&amp;taskId=u5e89cd63-cdbb-4d6a-bb8a-1905f5d6828&amp;title=&amp;width=586" alt="image.png"><br><a name="AXo7u"></a></p><h2 id="文件管理规范">文件管理规范</h2><p><a name="j88ZV"></a></p><h3 id="文件命名">文件命名</h3><p>内容_大版本_小版本.hip<br>v是version的意思<br>t是take的意思<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689146121770-780697f0-4a57-4566-acef-033793ebbbfc.png#averageHue=%23b2a75f&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=128&amp;id=u08afc83c&amp;originHeight=128&amp;originWidth=1227&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75118&amp;status=done&amp;style=none&amp;taskId=u9868cf07-4ea7-4e03-bef7-d92b14b5d45&amp;title=&amp;width=1227" alt="image.png"><br><a name="LUrJl"></a></p><h3 id="文件节点">文件节点</h3><p>经常使用的文件节点有两个，一个是file 一个是filecache<br>一般file只使用它的读取功能<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689147333670-5e2fe2b1-4ef4-464a-9307-acb836da0ef6.png#averageHue=%23424039&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=201&amp;id=u784b0172&amp;originHeight=201&amp;originWidth=725&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22171&amp;status=done&amp;style=none&amp;taskId=uf1c083d2-1049-4d6a-ba7b-f3e9e767d87&amp;title=&amp;width=725" alt="image.png"><br>filecache：<br>这里的$HIPNAME和$OS和$HIP都是环境变量。 $HIPNAME是项目文件名称，$OS是filecache这个节点的名称，$HIP是项目文件的目录路径,$F是帧数<br>houdini项目文件名字的后缀就是hip<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689147406721-17ff8f42-fc18-42be-9e4e-1784e759a157.png#averageHue=%23383838&amp;clientId=u2b227c25-553c-4&amp;from=paste&amp;height=467&amp;id=u933bae38&amp;originHeight=467&amp;originWidth=748&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50525&amp;status=done&amp;style=none&amp;taskId=u8335ba63-08bc-4b65-ac07-6c4bfa33728&amp;title=&amp;width=748" alt="image.png"><br><a name="ZVfYy"></a></p><h1>扩展节点布局预设</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689149877195-6a53a1a9-afc2-483c-85bd-85a1ca08991e.png#averageHue=%233a3835&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=252&amp;id=ub070e94d&amp;originHeight=252&amp;originWidth=1116&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52566&amp;status=done&amp;style=none&amp;taskId=u420e674d-5c16-40c7-8dc0-072a628999b&amp;title=&amp;width=1116" alt="image.png"><br>在节点上使用编辑参数界面功能<br>左边是能够添加的参数列表，中间是属性界面中已经存在的参数列表，右边是改变参数的一些属性.<br>也可以通过鼠标左键拖动其他节点的属性参数至设置参数的这个列表使这个节点可以控制其他节点的属性参数。（比如可以将通过节点做好的模型进行打包，然后在打包节点里的模型节点的属性参数拖入到打包节点里，这样就可以在打包节点中调整模型的细节；也可以在打包节点中新增新的属性然后将打包节点的属性值复制到模型里的节点的属性上面）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689150395682-cdb2b59f-ae84-4f0b-96ad-a98f86a489f3.png#averageHue=%23403f3f&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=874&amp;id=ub5d1e80a&amp;originHeight=874&amp;originWidth=1234&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=236244&amp;status=done&amp;style=none&amp;taskId=u1d4cc4bf-cc4b-4eb1-8392-908cc531b24&amp;title=&amp;width=1234" alt="image.png"><br>调整好的节点界面可以保存预设，或者替换默认预设<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689150710208-46863586-3560-4948-8fa0-ecd6cd326bde.png#averageHue=%233e3c39&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=430&amp;id=ue32dbeda&amp;originHeight=430&amp;originWidth=550&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=41303&amp;status=done&amp;style=none&amp;taskId=u90186905-a9bf-416a-80b7-f85fe240939&amp;title=&amp;width=550" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689150731498-e65088a0-ca8b-4d78-900b-901ed64bc41e.png#averageHue=%23646260&amp;clientId=u4909db3d-a257-4&amp;from=paste&amp;height=159&amp;id=u698b4bb0&amp;originHeight=159&amp;originWidth=399&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14301&amp;status=done&amp;style=none&amp;taskId=u00d4fcc3-94d7-4ae5-9fe4-c007047650f&amp;title=&amp;width=399" alt="image.png"><br><a name="U09wQ"></a></p><h1>HScript</h1><p><a name="BSsV6"></a></p><h2 id="和-的区别">@和$的区别</h2><p>@是VEX的变量，$是HScript的变量<br>通常通过@来使用局部的变量(例如访问几何属性),$来使用全局的变量(例如访问houdini的帧数，文件路径)。<br><a name="hq9lB"></a></p><h2 id="全局变量举例">全局变量举例</h2><p>houdini文档上提供的一些：<br><a href="https://www.sidefx.com/docs/houdini/network/expressions.html">https://www.sidefx.com/docs/houdini/network/expressions.html</a><br>文档上没有的：<br>$CEX,$CEY,$CEZ分别表示一个物体的中心的XYZ在坐标系下的对应的X或Y或Z的值<br><a name="T1NTL"></a></p><h2 id="函数">函数</h2><p><a href="https://www.sidefx.com/docs/houdini/expressions/index.html">https://www.sidefx.com/docs/houdini/expressions/index.html</a><br>常用的函数：<br>rand<br>stamp<br>fit<br>fit01<br><a name="RACTF"></a></p><h1>VEX</h1><p>VOP节点是将VEX可视化了，如果想要直接写VEX可以使用Point Wrangle节点。<br><a name="tm2KR"></a></p><h2 id="浏览连接好的VOP的VEX代码">浏览连接好的VOP的VEX代码</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1689563138289-fda09f3b-82ec-4911-b11b-7d3003ba3e33.png#averageHue=%234c453c&amp;clientId=u8c90dfb8-4e44-4&amp;from=paste&amp;height=215&amp;id=u1723ebdc&amp;originHeight=215&amp;originWidth=429&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25295&amp;status=done&amp;style=none&amp;taskId=u85523f0d-9b5e-435e-a0e6-c423413a8c7&amp;title=&amp;width=429" alt="image.png"><br><a name="lUlRk"></a></p><h1>VOP里的Noise的介绍</h1><p>首先需要知道的是Noise不是完全随机的计算，例如针对一系列点添加Noise时，Noise控制的每个点和上一个点的变化差别。<br><a name="HcNqw"></a></p><h2 id="不同NoiseType的区别">不同NoiseType的区别</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1690390338743-74b1d669-ceeb-48d0-87ff-febbc1cc0be0.png#averageHue=%23b2a593&amp;clientId=uf63b0efc-1872-4&amp;from=paste&amp;height=763&amp;id=ud6666b83&amp;originHeight=1145&amp;originWidth=2693&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=1128504&amp;status=done&amp;style=none&amp;taskId=uc73e4ce0-be8b-40eb-923c-2da73b7a1ec&amp;title=&amp;width=1795.3333333333333" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1690390366436-88d73d1b-cf5b-4411-bca1-5bae50ac9f3f.png#averageHue=%23a5a3a1&amp;clientId=uf63b0efc-1872-4&amp;from=paste&amp;height=998&amp;id=u682f120f&amp;originHeight=1497&amp;originWidth=2871&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=1656225&amp;status=done&amp;style=none&amp;taskId=ub5d57e8b-9f10-4ffb-bbf8-e6800904627&amp;title=&amp;width=1914" alt="image.png"><br><a name="UF170"></a></p><h2 id="Noise的一些参数">Noise的一些参数</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1690388461405-429b1aba-f4da-4e7a-a3a0-87ed4c3ccc88.png#averageHue=%23323232&amp;clientId=uf63b0efc-1872-4&amp;from=paste&amp;height=188&amp;id=u02961c8f&amp;originHeight=282&amp;originWidth=1153&amp;originalType=binary&amp;ratio=1.5&amp;rotation=0&amp;showTitle=false&amp;size=24558&amp;status=done&amp;style=none&amp;taskId=u30f6f194-24ec-4c06-8c8e-80eb95be2ce&amp;title=&amp;width=768.6666666666666" alt="image.png"><br>frequency是频率，频率在0~1之间调整可以看到明显的区别，越高变化的次数越多<br>Amplitude意思是振幅，是指变化的幅度，正一和负一是完全相反的<br>roughness是粗糙度，0~1之间粗糙度越高变化的越明显<br>Attenuation是衰减系数， 官方解释是Flattens the noise to prevent extreme spikes by damping the values. Higher values create a smoother look.<br>Turbulence翻译是湍流，可以理解为控制Noise的Noise，也就是为Noise再添加Noise</p>]]></content>
      
      
      <categories>
          
          <category> DCC软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> houdini </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从零开始安装ComfyUI</title>
      <link href="/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/"/>
      <url>/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/</url>
      
        <content type="html"><![CDATA[<h1>大概过程总结</h1><p>确保拥有git -&gt; 拉取comfyui的github仓库 -&gt; 使用conda配置comfyui的对应环境 -&gt; 使用.bat文件来方便运行启动comfyui</p><h1>安装git</h1><p>git官方网站:<a href="https://www.git-scm.com/">https://www.git-scm.com/</a></p><h1>拉取comfyui的github仓库</h1><p><a href="https://github.com/comfyanonymous/ComfyUI">https://github.com/comfyanonymous/ComfyUI</a><br>在你要安装comfyui的盘中右键打开git bash<br><img src="/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/image.png" alt="alt text"><br>在界面中输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/comfyanonymous/ComfyUI.git</span><br></pre></td></tr></table></figure><p>如果是第一次使用git,可能会有注册github账号,配置账号,下载速度慢的问题.这些问题都可以通过谷歌百度得到详细的问题解决过程,这里不再赘述.</p><h1>使用conda配置python环境</h1><h2 id="安装conda">安装conda</h2><p>通过使用conda可以方便地进行python环境的管理,常见的对应软件有,anaconda,miniconda,miniforge,这三个更推荐miniconda,如果公司不让用anaconda和miniconda的话可以使用miniforge代替.<br>请谷歌搜索自行下载与安装,下载和安装conda网上有很多.<br><strong>需要强调的是安装完conda以后需要手动配置环境变量,不然没办法使用conda命令</strong><br>在Path变量中新建添加类似于这两个的路径<br><img src="/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/image-1.png" alt="alt text"><br><strong>添加完环境变量以后需要重新开一个终端</strong></p><h2 id="通过conda配置comfyui的python环境">通过conda配置comfyui的python环境</h2><p>在comfyui的文件夹上输入cmd进入对应路径的终端<br><img src="/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/image-2.png" alt="alt text"><br>根据终端中显示的提示依次输入命令回车.命令的作用是:创建comfyui的基础环境,激活这个环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda create -n comfyuiBase python=3.10</span><br><span class="line">conda activate comfyuiBase</span><br></pre></td></tr></table></figure><h2 id="在comfyuiBase环境中安装pytorch">在comfyuiBase环境中安装pytorch</h2><p>在上一步中,已经通过conda创建了一个comfyuiBase的环境并且已经激活.<br>接下来为需要在comfyuiBase环境中安装pytorch.<br>如果你的电脑是n卡的话,可以在终端中输入命令查看自己的显卡支持的cuda版本.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p><img src="/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/image-4.png" alt="alt text"></p><p>接下来你需要去谷歌搜索cuda去进行cuda的安装</p><p>安装完cuda之后安装pytorch<br>进入pytorch的网站<br><a href="https://pytorch.org/get-started/locally/">https://pytorch.org/get-started/locally/</a><br>根据自己的所支持的cuda版本(你的cuda版本需要大于界面中选择的cuda版本),使用对应的命令进行安装.<br><img src="/2024/06/18/AI-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AE%89%E8%A3%85ComfyUI/image-3.png" alt="alt text"><br>在comfyuiBase环境下安装完pytorch后,安装comfyui的依赖环境,并通过python main.py来打开comfyui进行环境测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line">python main.py --auto-launch</span><br></pre></td></tr></table></figure><h2 id="基于配置好的comfyuiBase环境-创建属于自己的comfyui环境-可不做">基于配置好的comfyuiBase环境,创建属于自己的comfyui环境(可不做)</h2><p>经过前面的环境配置以后你就拥有了运行comfyui所需要的最基础的环境.<br>接下来你可以保留这个最基础的comfyui环境,创建一个自己平时使用的comfyui环境.<br>这样环境随便搞,后面搞坏了也有一个基础的可以用的环境.<br>在终端中输入命令,基于comfyuiBase环境创建一个新的环境,我这里命名为comfyui.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create comfyui --<span class="built_in">clone</span> comfyuiBase</span><br></pre></td></tr></table></figure><h1>使用.bat文件来方便运行启动comfyui</h1><p>在comfyui文件夹中新建一个txt文件,然后输入类似于下面的内容<br>第二行activate comfyui是激活你的comfyui环境(因为我创建的环境名字是comfyui所以填comfyui)<br>第三行C:\ComfyUI对应你的comfyui的文件夹路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">call activate comfyui</span><br><span class="line"><span class="built_in">cd</span> C:\ComfyUI</span><br><span class="line">python main.py --auto-launch</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>填好以后保存txt文件,改后缀名为.bat,这样以后都可以通过这个.bat文件直接激活comfyui环境并启动comfyui了.</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComfyUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pymxs</title>
      <link href="/2024/03/21/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-Pymxs-Pymxs/"/>
      <url>/2024/03/21/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-Pymxs-Pymxs/</url>
      
        <content type="html"><![CDATA[<h1>官方文档</h1><p><a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=MAXDEV_Python_executing_python_html">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=MAXDEV_Python_executing_python_html</a></p><h1>如何使用3dsmax自带的图标</h1><p>参考Loading Multi-resolution Icons:<a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=MAXDEV_Python_creating_python_uis_html">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=MAXDEV_Python_creating_python_uis_html</a><br>3dsmax自带的图标指南:<a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=Max_Developer_Help_icon_guide_icon_resource_guide_html">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=Max_Developer_Help_icon_guide_icon_resource_guide_html</a><br>核心代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> qtmax <span class="keyword">import</span> LoadMaxMultiResIcon</span><br><span class="line">toolBtn1 = QToolButton()</span><br><span class="line">toolBtn1.setIcon(LoadMaxMultiResIcon(<span class="string">&quot;Common/Lock&quot;</span>))</span><br></pre></td></tr></table></figure><h1>官方提供的pymxs与pyside2的实例代码</h1><p>路径:C:\Program Files\Autodesk\3ds Max 2024\scripts\PythonSamples\Python3\</p>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pymxs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FastAPI</title>
      <link href="/2024/03/15/Geek-FastAPI-FastAPI/"/>
      <url>/2024/03/15/Geek-FastAPI-FastAPI/</url>
      
        <content type="html"><![CDATA[<h1>开始</h1><p>官方文档:<a href="https://fastapi.tiangolo.com/python-types/">https://fastapi.tiangolo.com/python-types/</a></p><h2 id="第一步">第一步</h2><p>文件夹里创建一个main.py文件<br>运行实时服务器(代码更新时服务器也会自动更新):<br>uvicorn main:app --reload<br>有可能会报错,报错的话一般就是8000端口被占用了,需要处理一下</p><h2 id="代码内容">代码内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/&quot;</span></span>) </span><span class="comment"># HTTP方法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">root</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;Hello World&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="api文档链接">api文档链接</h2><p>交互式API文档链接(原链接基础上加/docs):<a href="http://127.0.0.1:8000/docs">http://127.0.0.1:8000/docs</a><br>替代API文档链接(原链接基础上加/redoc):<a href="http://127.0.0.1:8000/redoc">http://127.0.0.1:8000/redoc</a></p><h2 id="HTTP方法">HTTP方法</h2><p>post:创建数据<br>get:读取数据<br>put:更新数据<br>delete:删除数据</p><h1>接口路由的类型</h1><h2 id="路径带有参数">路径带有参数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>) </span><span class="comment"># item_id可以作为参数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="路径参数带有类型">路径参数带有类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/items/&#123;item_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_item</span>(<span class="params">item_id: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;item_id&quot;</span>: item_id&#125;</span><br></pre></td></tr></table></figure><h2 id="如何让带参数的路径与固定路径共存">如何让带参数的路径与固定路径共存</h2><p>例如既需要@app.get(“/users/me”)又需要@app.get(“/users/{user_id}”)时<br>只需要将@app.get(“/users/me”)声明放到@app.get(“/users/{user_id}”)前面即可<br>举例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/me&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_user_me</span>():</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;the current user&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/users/&#123;user_id&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_user</span>(<span class="params">user_id: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_id&quot;</span>: user_id&#125;</span><br></pre></td></tr></table></figure><h2 id="通过枚举来让一个函数实现多个路径">通过枚举来让一个函数实现多个路径</h2><p>通过继承str和enum来创建string类型的枚举类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ModelName</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    alexnet = <span class="string">&quot;alexnet&quot;</span></span><br><span class="line">    resnet = <span class="string">&quot;resnet&quot;</span></span><br><span class="line">    lenet = <span class="string">&quot;lenet&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/models/&#123;model_name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_model</span>(<span class="params">model_name: ModelName</span>):</span><br><span class="line">    <span class="keyword">if</span> model_name <span class="keyword">is</span> ModelName.alexnet:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Deep Learning FTW!&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> model_name.value == <span class="string">&quot;lenet&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;LeCNN all the images&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;model_name&quot;</span>: model_name, <span class="string">&quot;message&quot;</span>: <span class="string">&quot;Have some residuals&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="包含路径的路径参数">包含路径的路径参数</h2><p>在本例中，参数的名称是 file_path ，最后一部分 :path 告诉它该参数应该匹配任何路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fastapi <span class="keyword">import</span> FastAPI</span><br><span class="line"></span><br><span class="line">app = FastAPI()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.get(<span class="params"><span class="string">&quot;/files/&#123;file_path:path&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">read_file</span>(<span class="params">file_path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;file_path&quot;</span>: file_path&#125;</span><br></pre></td></tr></table></figure><h1>查询参数</h1>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FastAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python</title>
      <link href="/2024/03/03/Geek-python/"/>
      <url>/2024/03/03/Geek-python/</url>
      
        <content type="html"><![CDATA[<h1>面向对象概念与设计原则</h1><h2 id="面向对象编程的基本原理">面向对象编程的基本原理</h2><h3 id="类与对象">类与对象</h3><p>程序是由多种对象组合而成。<br>类是对象的类型定义，每一个对象都有类型，每一种类型的对象，都有同样的属性和方法。<br>对象是具备属性和功能的实例，而类则是定义属性和功能的模板。<br>类和对象的关系：类是对象的抽象，对象是类的实例。</p><h3 id="封装">封装</h3><p>定义一个类的过程就是将一些相关的属性和方法组织在一起的过程。这样的操作被称为封装。</p><h3 id="继承">继承</h3><p>子类继承父类，那么子类就拥有了父类的的所有属性和方法。<br>使用继承的方式复用类定义的代码</p><h3 id="多态">多态</h3><p>由一个类实例化出来的对象之间是相互独立的，不同对象虽然具备相同作用的属性和方法。但是由于它们各自在程序中扮演的角色不同，相同的属性值也将各自不同，相同的方法运行的结果也会不同。<br>这种同类对象各自独立的特性也被称为多态。</p><h2 id="面向对象设计">面向对象设计</h2><h3 id="接口与抽象类">接口与抽象类</h3><p>接口是一种对程序模块间互相访问方式的约定，在面向对象语言中，一般都会使用抽象类来定义。<br>抽象类指的是一种只定义了行为，但并没有提供完整功能实现的类。<br>举例：交通工具这样一个概念就可以被理解为一个抽象类或者一个接口。它只定义了交通工具运输的功能，但是并没有限制实现的方法。无论是汽车还是轮船，只要提供了对应的功能。就都符合了交通工具这个类型的定义。</p><h3 id="面向接口的设计模式">面向接口的设计模式</h3><p>面向接口指的是以面向对象的方式定义程序功能和模块间传递数据的格式，以面向接口的方式设计程序框架结构是建立复杂程序的基础。<br>举例：在图形界面编程中定义一个按钮，我们会考虑到按钮需要可以被点击，点击可以触发一个信号来做一些别的事情，这就是一个行为，我们可以定义一个方法来描述这个行为。而这个按钮上，还有它的外观，比如形状尺寸等，按钮上面的文字，图标，控件的名称等等这些信息，有的是数字有的是文字有的是其他类型的对象。因此作为一个按钮对象，除了提供行为能力的方法之外，还需要各种类型的属性来支持。而设计一个界面编程库的时候，我们显然并不需要立刻就实例化一个真正的按钮控件，此时需要做的就是定义将来真正的按钮控件，被实例化时应当符合的规则。在设计接口时，我们需要做的就是创建一个类型来定义这些信息,并提示开发者在使用这个库的时候，完成这些抽象定义的具体实现，面向接口的设计模式从架构层面出发，从开发之初就预先定义了程序的复杂度，在之后的开发工作中，编程工作只需要不断地细化程序功能的实现从而避免随着开发的继续程序复杂度无限制的膨胀的问题。</p><h2 id="SOLID原则">SOLID原则</h2><p>设计模式的五大基本原则根据英文被统称为SOLID原则：<br><img src="/2024/03/03/Geek-python/image.png" alt="alt text"></p><h3 id="单一职责原则">单一职责原则</h3><p>单一职责原则指的是一个模块或一个类应当只承担一个职责，如果一个类在程序中同时扮演多种角色的话，当其中一个功能面临修改时势必会影响其他功能的使用。<br>在程序开发的阶段，一个类被修改的几率是很大的，因此应该专注于单一的功能。</p><h3 id="开放封闭原则">开放封闭原则</h3><p>开放封闭原则指的是对扩展开放，对修改封闭，调整已存在的代码逻辑，往往会破坏与之相关的诸多模块。而在相同的逻辑规则下，增加更多的不同功能的插件实现，则可以有效的保持程序的稳定性。<br>如果提前划分了模块，并定义了各种模块的程序接口，当遇到需要调整某个模块才能适应新需求的问题时，只需要实现新的符合程序接口的模块即可实现适配。这样一个需要修改的问题就变成了扩展问题了。<br>实现更多变种的模块，以适应更多的需求实际上只是对程序的扩展，而非牵扯内部逻辑关系的修改，支持扩展反对修改就是开放封闭原则的关键。</p><h3 id="里氏替换原则">里氏替换原则</h3><p>里氏替换原则规定子类或以任何形式派生的类，都应当具备完全替代父类的能力。这意味着在编程中，当我们需要依赖一个明确定义的接口类型时，可以放心地依赖这个类，以及其任意子类实例地对象。而无需担心程序地预期行为受到影响。<br>举例：假如定义了一个交通工具这个父类，并实现了一个行驶的方法，假设这个方法允许输入一个目的地类型的对象从而改变当前对象的位置。如果继承交通工具来创建一个叫做汽车的子类，无论我们如何扩展这个子类，必须保证的是，他依然具备父类的功能，也就是行驶的方法，其输入的参数类型以及作用应当与父类保持一致。<br>通俗地讲：子类对象必须是一种更为具体地父类对象，一辆汽车必须是一个交通工具，否则它就不符合里氏替换原则，这样才能确保已经依赖了交通工具类型对象的模块，再将对象替换为汽车时依然是有效的。一个可以操作maya节点的程序，必须可以操作maya中的多边形节点，因为多边形节点必须与maya节点具备符合里氏替换的原则的关系。</p><h3 id="接口隔离原则">接口隔离原则</h3><p>接口，是模块行为的描述。在程序构建阶段，我们需要定义的类型，都需要继承并实现接口中定义的功能。因此接口应当尽可能的单纯。换句话说，类不应该被迫地依赖它们不使用的方法。在python中语言本身并没有提供标准的接口类型，因此执行接口隔离原则需要具备对面向对象设计中的各种抽象概念有较深入的认识。</p><h3 id="依赖倒置原则">依赖倒置原则</h3><p>依赖倒置原则主张在程序开发中，当模块之间互相关联时，应当依赖抽象而不应当依赖具体。假如实现一个控制多功能的渲染农场的程序，这个程序需要支持多种格式的任务文件。如果在开发中并没有提前定义一个任务文件的接口类型，而是直接在程序中依赖一些具体的文件格式，当需要支持新的格式时，势必无法避免重构所涉及这些对象的代码，这样的设计无疑造成了开发工作量和维护难度的增加。</p><h1>闭包</h1><p>定义了一个函数,这个函数里有个内部函数,这个内部函数使用了函数中定义的变量,当外部函数执行完毕后,内部函数依然可以访问和操作外部函数中的变量.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>():</span><br><span class="line">    message = <span class="string">&quot;hello&quot;</span></span><br><span class="line">    value = <span class="number">20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;value&#125;</span> - <span class="subst">&#123;message&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    message = <span class="string">&quot;second&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">f = greeting()</span><br><span class="line"><span class="built_in">print</span>(f.__closure__) </span><br><span class="line">f()</span><br></pre></td></tr></table></figure><h1>python自带的装饰器</h1><p>在定义函数时可以使用装饰器来改变函数的性质。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def welcome(fn):</span></span><br><span class="line"><span class="comment">#     @wraps(fn)</span></span><br><span class="line"><span class="comment">#     def wrapper(*args, **kwargs):</span></span><br><span class="line"><span class="comment">#         print(&quot;Welcome&quot;)</span></span><br><span class="line"><span class="comment">#         result = fn(*args, **kwargs)</span></span><br><span class="line"><span class="comment">#         return result</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     return wrapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">welcome</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decorator</span>(<span class="params">fn</span>):</span><br><span class="line"><span class="meta">        @wraps(<span class="params">fn</span>)</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Welcome <span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line">            result = fn(*args, **kwargs)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrapper</span><br><span class="line">    <span class="keyword">return</span> decorator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@welcome(<span class="params"><span class="string">&quot;Tom&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_fun</span>(<span class="params">message: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hello <span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@welcome(<span class="params"><span class="string">&quot;Mary&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_fun_2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;my fun 2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># f1 = welcome(my_fun)</span></span><br><span class="line"><span class="comment"># f1(&quot;Jack&quot;)</span></span><br><span class="line"></span><br><span class="line">my_fun(<span class="string">&quot;Jack&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_fun.__name__)</span><br></pre></td></tr></table></figure><h2 id="property">property</h2><p>property是一个用于创建特殊属性的装饰器，他的功能是将一个方法转换为一个属性，方法的返回值就是属性的返回值。<br>使用property装饰器定义的属性具有只读的特性，他的值在每一次被访问时，是实时的被计算出来的。<br>一般来说我们调用类的方法都是加一个括号，但是如果这个方法添加了property装饰器，那么我们就可以像调用类的属性一样直接使用这个方法调用返回的结果。</p><h2 id="attr-setter">attr.setter</h2><p>这里的attr是经过property装饰后的方法的名字。因为经过property装饰后的方法就变成只能读的属性了，要想通过对象修改这个属性就需要使用setter装饰器</p><h2 id="classmethod">classmethod</h2><p>类中定义的不加装饰器的方法都是实例方法，都需要一个self参数，而用classmethod装饰器装饰的方法被称为类方法，它需要的第一个参数不是self而是cls参数，用于表示类本身，类方法只能被类直接的调用，而不能在对象下调用。</p><h2 id="staticmethod">staticmethod</h2><p>被staticmethod装饰的方法叫静态方法，静态方法不需要传入self或cls参数。<br>静态方法和定义在类以外的方法是相似的。</p><h1>类与装饰器</h1><p>可以通过类来定义函数装饰器,也可以给类定义装饰器.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以下装饰器实现的功能是在原来功能的基础上添加输出start与输出end的功能</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个不需要参数的通过类定义的函数装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDecorator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, f</span>):</span><br><span class="line">        <span class="variable language_">self</span>.f = f</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        result = <span class="variable language_">self</span>.f(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个带参数的通过类定义的函数装饰器</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParamDecorator</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, f</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">wrap</span>(<span class="params">*args</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;start <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line">            result = f(*args)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> wrap</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ParamDecorator(<span class="params"><span class="string">&quot;Jack&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(test())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义类的装饰器</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cls_decorator</span>(<span class="params">cls</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start class decorator&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">        obj = cls()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@cls_decorator</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">p1 = Person()</span><br><span class="line">p2 = Person()</span><br></pre></td></tr></table></figure><h1>迭代器</h1><blockquote><p>迭代器（Iterator）是访问集合元素的一种方式。在Python中，迭代器对象必须实现两个特殊方法，  _<em>iter_</em>()   和   _<em>next_</em>()  。<br>_<em>iter_</em>()  : 返回迭代器对象本身。如果类定义了此方法，则可以使用 in 语句和 for 循环来遍历。<br>_<em>next_</em>()  : 返回下一个值。如果没有后续元素，应该抛出StopIteration 异常。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,count</span>):</span><br><span class="line">        <span class="variable language_">self</span>.count = count</span><br><span class="line">        <span class="variable language_">self</span>.current = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__next__</span>(<span class="params">self</span>):</span><br><span class="line">        result = <span class="variable language_">self</span>.current**<span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.current += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.current &gt; <span class="variable language_">self</span>.count:</span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">Square_obj = Square(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> Square_obj:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><h1>生成器</h1><p>当一个函数里包含yield语句时,这个函数就是一个生成器,生成器用来生成东西,相比return语句有个本质的区别:return在函数中只能返回一次,yield可以返回很多次.<br>这个函数执行后返回一个生成器对象,这个对象是可以迭代的.<br>生成器的好处是更节省内存,只要在用到数据的时候才会加载数据到内存中.<br>next(生成器对象)可以用来迭代</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():  <span class="comment"># an iteratable object</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step 1&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step 2&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;step 3&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_fun</span>():</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        result.append(n ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = hello()</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> g:</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过生成器来实现上一章的迭代器实现的功能也可以实现这里my_fun的功能</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">squares</span>(<span class="params">count: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(count):</span><br><span class="line">        <span class="keyword">yield</span> n ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> squares(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h1>上下文管理器</h1><p>上下管理器是一个对象,它定义了运行时的上下文,上下文管理器为它造出来的对象定义了一个时间段,在这个时间段开始的时候做一件事情,在结束的时候做另外一件事情,在时间段开始到结束之间可以使用这个上下文管理器对象.<br>上下文管理器的类需要实现以下方法:<br>_<em>enter_</em>():上下文管理器造出来时执行,并且enter返回的对象为上下文管理器的别名<br>_<em>exit_</em>(): 上下文管理器结束后执行的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># instance = open(&quot;mydata.txt&quot;, &quot;w&quot;)</span></span><br><span class="line"><span class="comment"># instance.write(&quot;Hello this is a test file&quot;)</span></span><br><span class="line"><span class="comment"># instance.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># with open(&quot;mydata.txt&quot;, &quot;w&quot;) as instance:</span></span><br><span class="line"><span class="comment">#     instance.write(&quot;Hello this is a test file&quot;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># print(&quot;The end&quot;)</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义实现上下文管理器的类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.elapsed = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.start = time.perf_counter()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stop = time.perf_counter()</span><br><span class="line">        <span class="variable language_">self</span>.elapsed = <span class="variable language_">self</span>.stop - <span class="variable language_">self</span>.start</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里的timer是__enter__的返回值</span></span><br><span class="line"><span class="keyword">with</span> Timer() <span class="keyword">as</span> timer:</span><br><span class="line">    nums = []</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        nums.append(n ** <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(timer.elapsed)</span><br></pre></td></tr></table></figure><h1>Mixin模式</h1><p>Mixin模式是一种设计模式,将许多可以重用的功能写到类中当Mixin,凡是需要Mixin类功能的类都去通过多继承来获得Mixin类的功能.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MapMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, key</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__dict__[key]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__setitem__</span>(<span class="params">self, key, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.__dict__[key] = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DictMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_dict</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.__convert_dict(<span class="variable language_">self</span>.__dict__)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__convert_dict</span>(<span class="params">self, attrs: <span class="built_in">dict</span></span>):</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> attrs.items():</span><br><span class="line">            result[key] = <span class="variable language_">self</span>.__convert_value(value)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__convert_value</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(value, DictMixin):</span><br><span class="line">            <span class="keyword">return</span> value.to_dict()</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, <span class="built_in">dict</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.__convert_dict(value)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">isinstance</span>(value, <span class="built_in">list</span>):</span><br><span class="line">            <span class="keyword">return</span> [<span class="variable language_">self</span>.__convert_value(v) <span class="keyword">for</span> v <span class="keyword">in</span> value]</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(value, <span class="string">&#x27;__dict__&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.__convert_dict(value.__dict__)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JSONMixin</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">to_json</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> json.dumps(<span class="variable language_">self</span>.to_dict())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span>(MapMixin, DictMixin, JSONMixin):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&quot;name&quot;: &quot;Jack&quot;, &quot;age&quot;: 20, &quot;clasx&quot;: &#123;&quot;name&quot;: &quot;class 9-1&quot;, &quot;building&quot;: &quot;A&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">s = Student(<span class="string">&quot;Jack&quot;</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"><span class="built_in">print</span>(s.to_dict())</span><br><span class="line"><span class="built_in">print</span>(s.to_json())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>单例模式</h1><p>单例模式的根本目的就是让一个类只能制造出一个对象<br>单例的需求一般是针对需要共享数据的对象,例如:工厂对象,数据库连接池对象,任何其他想要所有人共享的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">singleton</span>(<span class="params">cls</span>):</span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">in</span> _instance:</span><br><span class="line">            <span class="keyword">return</span> _instance[cls]</span><br><span class="line"></span><br><span class="line">        obj = cls(*args, **kwargs)</span><br><span class="line">        _instance[cls] = obj</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingletonMeta</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">cls, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">getattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        obj = <span class="built_in">super</span>().__call__(*args, **kwargs)</span><br><span class="line">        <span class="built_in">setattr</span>(cls, <span class="string">&#x27;_instance&#x27;</span>, obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> obj</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># @singleton</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(metaclass=SingletonMeta):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p_1 = Person()</span><br><span class="line">p_2 = Person()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p_1 <span class="keyword">is</span> p_2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MaxScript</title>
      <link href="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/"/>
      <url>/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/</url>
      
        <content type="html"><![CDATA[<h1>如何阅读帮助文档</h1><p>文档地址:<a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-F039181A-C072-4469-A329-AE60FF7535E7">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-F039181A-C072-4469-A329-AE60FF7535E7</a><br>max的各种object类的描述的地址:<a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-F159E458-15C2-4CDC-B926-0FB7EFB810DB">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-F159E458-15C2-4CDC-B926-0FB7EFB810DB</a><br>文档的描述约定:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-1.png" alt="Alt text"><br>尖括号中的词语是对内容的规则定义<br>方括号中的内容是可选的<br>被竖线分割的的内容是在其中选择一个<br>大括号的内容可以重复零次或多次<br>大括号+意思是里的内容可以重复一次或多次<br>::= 可以理解为一个符号,右边描述了左边名称的定义,例如 <digit> ::= 1|2|3|4 意思是 digit可以取1,2,3,4一共四个数</digit></p><h1>VScode for MaxScript</h1><ol><li>搜索Language MaxScript插件并安装</li><li>点击下载:<a href="https://github.com/techartorg/MXSPyCOM/releases/download/1.14/MXSPyCOM.zip">MXSPyCOM</a>,<a href="https://github.com/techartorg/MXSPyCOM">可以参考的GitHub地址</a></li><li>解压文件,将MXSPyCOM.exe放入到&quot;C:\Program Files\MXSPyCOM\MXSPyCOM.exe&quot;,将initialize_COM_server.ms放入到&quot;C:\Program Files\Autodesk\3ds Max 2024\scripts\Startup\initialize_COM_server.ms&quot;</li><li><a href="https://github.com/techartorg/MXSPyCOM/wiki/Visual-Studio-Code">进行vscode的配置</a><br>配置的关键:<br>将以下内容放到task里面</li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Execute Script in 3ds Max&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\Program Files\\MXSPyCOM\\MXSPyCOM.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-s&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;presentation&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;echo&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;reveal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;never&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;focus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;panel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dedicated&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>然后输入&gt;key进入快捷键绑定<br>填入内容,将ctrl+e与运行任务进行绑定.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ctrl+e&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workbench.action.tasks.runTask&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Execute Script in 3ds max&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h1>MaxScript的语法</h1><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">-- 数学表达式</span><br><span class="line">+ - * / ^ as(类型转换)</span><br><span class="line">-- 比较表达式</span><br><span class="line">== != &gt; &lt; &gt;= &lt;=</span><br><span class="line">-- 逻辑表达式</span><br><span class="line">or and not</span><br><span class="line">-- 判断</span><br><span class="line"><span class="keyword">if</span> ... then ... <span class="keyword">else</span> ...</span><br><span class="line"><span class="keyword">if</span> ... <span class="keyword">do</span> ...</span><br><span class="line">-- <span class="keyword">case</span>语句 语法一</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> geometry <span class="keyword">do</span></span><br><span class="line">(</span><br><span class="line">    local d = distance obj $cam1</span><br><span class="line">    <span class="keyword">case</span> of</span><br><span class="line">    (</span><br><span class="line">        (d &lt;= <span class="number">50</span>):  obj.segs = <span class="number">40</span></span><br><span class="line">        (d &lt;= <span class="number">120</span>): obj.segs = <span class="number">25</span></span><br><span class="line">        (d &lt;= <span class="number">250</span>): obj.segs = <span class="number">10</span></span><br><span class="line">        <span class="keyword">default</span>:    obj.segs = <span class="number">5</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">-- <span class="keyword">case</span>语句 语法二</span><br><span class="line">newObj = <span class="keyword">case</span> cloneType.state of</span><br><span class="line">         (</span><br><span class="line">            <span class="number">1</span>: <span class="keyword">instance</span> pickedObj</span><br><span class="line">            <span class="number">2</span>: <span class="keyword">reference</span> pickedObj</span><br><span class="line">            <span class="number">3</span>: copy pickedObj</span><br><span class="line">         )</span><br><span class="line">-- <span class="keyword">while</span> 循环</span><br><span class="line"><span class="keyword">while</span> ... <span class="keyword">do</span> ...</span><br><span class="line">-- <span class="keyword">for</span> 循环</span><br><span class="line">写法<span class="number">1</span>,遍历数字: <span class="keyword">for</span> i = <span class="number">1</span> to <span class="number">10</span> <span class="keyword">do</span> <span class="keyword">print</span> i</span><br><span class="line">写法<span class="number">2</span>,遍历数组: <span class="keyword">for</span> item <span class="keyword">in</span> [able] <span class="keyword">do</span> x = x+item.height</span><br><span class="line">写法<span class="number">3</span>,在<span class="keyword">for</span>循环里判断然后放到数组中: bigones = <span class="keyword">for</span> obj <span class="keyword">in</span> $Box* where obj.height &gt; <span class="number">100</span> collect obj</span><br><span class="line"></span><br><span class="line">-- <span class="keyword">continue</span> 同<span class="keyword">python</span>的<span class="keyword">continue</span></span><br><span class="line">-- exit 同<span class="keyword">python</span>的<span class="keyword">break</span></span><br><span class="line">-- try 异常处理</span><br><span class="line">try ... <span class="keyword">catch</span> ...</span><br></pre></td></tr></table></figure><h1>MaxScript的UI</h1><h2 id="控件类型与介绍">控件类型与介绍</h2><p>文档地址:<a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-E421933F-958E-42FD-80A1-D66F2A2C0A06">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-E421933F-958E-42FD-80A1-D66F2A2C0A06</a><br>参考图片:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-12.png" alt="Alt text"></p><h3 id="各种button的区别">各种button的区别:</h3><p>button:最基础的按钮,有点击事件<br>checkbutton:点一次和点两次的状态不同<br>mapbutton:单击按钮时会弹出3dsmax的贴图浏览器对话框<br>materialbutton:单击按钮时会弹出3dsmax的材质浏览器对话框<br>pickbutton:单击按钮后进入对象拾取模式,再单击一个场景对象后自动退出拾取模式或右键单击取消拾取模式<br>button举例:</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rollout test_buttons <span class="string">&quot;Testing Buttons&quot;</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">button</span> theButton iconName:@<span class="string">&quot;PolyTools\TransformTools\PB_CW&quot;</span> iconSize:[<span class="number">20</span>,<span class="number">20</span>]</span><br><span class="line">    <span class="keyword">button</span> theBorderlessButton <span class="string">&quot;I am a button, too!&quot;</span> border:false</span><br><span class="line">    <span class="keyword">on</span> theButton pressed <span class="keyword">do</span></span><br><span class="line">    messagebox <span class="string">&quot;Remember: Never press unknown buttons!&quot;</span></span><br><span class="line">)</span><br><span class="line">createDialog test_buttons <span class="number">150</span> <span class="number">60</span></span><br></pre></td></tr></table></figure><p>checkbutton举例:</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rollout test <span class="string">&quot;Test&quot;</span></span><br><span class="line">(</span><br><span class="line">checkbutton setup <span class="string">&quot;Setup&quot;</span> checked:true tooltip:<span class="string">&quot;Opens setup panels&quot;</span></span><br><span class="line"><span class="keyword">on</span> setup changed <span class="keyword">state</span> do</span><br><span class="line">if <span class="keyword">state</span> == <span class="keyword">on</span> then</span><br><span class="line">    openRollout setup_pan</span><br><span class="line">else</span><br><span class="line">    closeRollout setup_pan</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>mapbutton举例:</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">rollout test_mapbutton <span class="string">&quot;Background&quot;</span></span><br><span class="line">(</span><br><span class="line">    label sbm_lbl <span class="string">&quot;Background Map:&quot;</span></span><br><span class="line">    mapbutton choosemap <span class="string">&quot;&lt;&lt;none&gt;&gt;&quot;</span> tooltip:<span class="string">&quot;Select Background Map&quot;</span> width:<span class="number">120</span></span><br><span class="line">    <span class="keyword">on</span> choosemap picked texmap <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">    environmentmap = texmap</span><br><span class="line">    choosemap.<span class="keyword">text</span>=classof texmap <span class="keyword">as</span> <span class="type">string</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">createDialog test_mapbutton</span><br></pre></td></tr></table></figure><p>materialbutton举例:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Rollout assign_material <span class="string">&quot;Assign Material&quot;</span></span><br><span class="line">(</span><br><span class="line">    label smtl_lbl <span class="string">&quot;Set selected object&#x27;s material to:&quot;</span></span><br><span class="line">    materialbutton choosemtl <span class="string">&quot;Pick Material&quot;</span></span><br><span class="line">    on choosemtl picked mtl <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">    <span class="built_in">print</span> mtl</span><br><span class="line">    <span class="keyword">if</span> $ != undefined <span class="keyword">do</span> $.<span class="attribute">material</span>=mtl</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">createDialog assign_material</span><br></pre></td></tr></table></figure><p>pcikbutton举例:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">rollout pick_box_test &quot;Pick Box Test&quot;</span><br><span class="line">(</span><br><span class="line"><span class="comment">--filter all objects of class Box:</span></span><br><span class="line">fn box_filt obj = classof obj == <span class="type">Box</span></span><br><span class="line"><span class="comment">--Pickbutton to select a Box from the scene</span></span><br><span class="line">pickbutton chooseit &quot;Select Box&quot; width:<span class="number">140</span> <span class="keyword">filter</span>:box_filt</span><br><span class="line"><span class="comment">--If the user picked an object, then</span></span><br><span class="line"><span class="keyword">on</span> chooseit picked obj <span class="keyword">do</span></span><br><span class="line">(</span><br><span class="line"><span class="comment">--see if the user did not cancel the picking...</span></span><br><span class="line"><span class="keyword">if</span> obj != undefined <span class="keyword">do</span></span><br><span class="line">(</span><br><span class="line"><span class="comment">--if he did not, make the box&#x27;s wireframe red:</span></span><br><span class="line">obj.wirecolor = red</span><br><span class="line"><span class="comment">--and display the name of the object on the button:</span></span><br><span class="line">chooseit.text = obj.name</span><br><span class="line">)</span><br><span class="line">)<span class="comment">--end on</span></span><br><span class="line">)<span class="comment">--end rollout</span></span><br><span class="line">createDialog pick_box_test</span><br></pre></td></tr></table></figure><h1>让max启动时就执行对应的脚本</h1><p>参考官方文档:<a href="https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-615D14FB-0F2D-4801-B381-1128C4128C70">https://help.autodesk.com/view/MAXDEV/2024/ENU/?guid=GUID-615D14FB-0F2D-4801-B381-1128C4128C70</a></p><h2 id="使用startup-ms文件">使用startup.ms文件</h2><p><a href="http://xn--MAXScriptstartup-gr9yrrxhp0ku0r5vdbtav76a4va095d3v9brsekr6a7lh6xlj5wzs0id7cq0l734c8eykducu78jojj.ms">通过文档可知MAXScript首先按列出的顺序在以下目录中搜索名为startup.ms</a> 的文件然后运行:用户脚本目录,用户启动脚本目录,3ds Max 系统脚本目录,3ds Max 系统启动脚本目录.<br>用户脚本、系统脚本、用户启动脚本和系统启动脚本分别对应于 #userscripts 、 #systemscripts 、 #userstartupscripts 和 #startupScripts 的位置。<br>可以通过命令:GetDir &lt;文件类型名字&gt;来获取路径<br>举例:GetDir #startupScripts<br>返回:C:\Program Files\Autodesk\3ds Max 2024\scripts\startup</p><h2 id="使用命令行启动max-并伴随对应脚本文件">使用命令行启动max,并伴随对应脚本文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先先<span class="built_in">cd</span>到对应的max目录中</span></span><br><span class="line">cd C:\Program Files\Autodesk\3ds Max 2024</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参考以下命令打开对应max文件并启动对应脚本</span></span><br><span class="line">3dsmax.exe E:\3dsmaxTest\a.max -U MAXScript D:\MaxScript\TestMaxScript.ms</span><br></pre></td></tr></table></figure><h1>使用MaxScript处理数据</h1><h2 id="字符串">字符串</h2><h3 id="分割字符串">分割字符串</h3><p>filterString &lt;string&gt; &lt;token_string&gt;<br><strong>注意:</strong> token_string,也就是第二个的字符串中的每个字符都会被识别为分割<br>点,因此第二个字符串建议只有单字符</p><figure class="highlight leaf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">filterString &quot;MAX Script, is-dead-funky&quot; &quot;, -&quot;  -- 返回<span class="punctuation">#</span><span class="params">(<span class="string">&quot;MAX&quot;</span>, <span class="string">&quot;Script&quot;</span>, <span class="string">&quot;is&quot;</span>, <span class="string">&quot;dead&quot;</span>, <span class="string">&quot;funky&quot;</span>)</span></span><br><span class="line">filterString &quot;MAX Script, is-dead-funky&quot; &quot;-&quot;    -- 返回<span class="punctuation">#</span><span class="params">(<span class="string">&quot;MAX Script, is&quot;</span>, <span class="string">&quot;dead&quot;</span>, <span class="string">&quot;funky&quot;</span>)</span></span><br></pre></td></tr></table></figure><h3 id="替换字符串">替换字符串</h3><p>replace &lt;string&gt; &lt;from_integer&gt; &lt;length_integer&gt; &lt;new_string&gt;</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">s</span> <span class="operator">=</span> <span class="string">&quot;1234567890&quot;</span></span><br><span class="line"><span class="attribute">s1</span><span class="operator">=</span>replace s <span class="number">5</span> <span class="number">3</span> <span class="string">&quot;inserted string&quot;</span> --返回<span class="string">&quot;1234inserted string890&quot;</span></span><br></pre></td></tr></table></figure><h3 id="字符串的切片">字符串的切片</h3><p>substring &lt;string&gt; &lt;from_integer&gt; &lt;length_integer&gt;</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">s</span> <span class="operator">=</span> <span class="string">&quot;Balerofon&quot;</span></span><br><span class="line"><span class="attribute">ss</span> <span class="operator">=</span> substring s <span class="number">5</span> <span class="number">3</span> --返回<span class="string">&quot;rof&quot;</span></span><br><span class="line"><span class="attribute">ss</span> <span class="operator">=</span> substring s <span class="number">5</span> -<span class="number">1</span> --返回<span class="string">&quot;rofon&quot;</span></span><br><span class="line"><span class="attribute">ss</span> <span class="operator">=</span> substring s <span class="number">5</span> <span class="number">100</span> --返回<span class="string">&quot;rofon&quot;</span> </span><br></pre></td></tr></table></figure><h3 id="查询字符串">查询字符串</h3><p>matchPattern &lt;string&gt; pattern:&lt;pattern_string&gt; [ ignoreCase:&lt;boolean&gt; ]<br>如果字符串&lt;string&gt;与通配符 pattern:匹配，返回 True，否则返回 False。如果没有指定<br>参数 ignoreCase:False，比较是大小写不敏感的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s <span class="operator">=</span> &quot;text1&quot;</span><br><span class="line">matchPattern s <span class="keyword">pattern</span> : &quot;text?&quot; <span class="comment">--返回 True</span></span><br><span class="line">matchPattern s <span class="keyword">pattern</span> : &quot;T*&quot; <span class="comment">--返回 True</span></span><br><span class="line">matchPattern s <span class="keyword">pattern</span> : &quot;T*&quot; ignoreCase:<span class="literal">False</span> <span class="comment">--返回 False</span></span><br><span class="line">matchPattern s <span class="keyword">pattern</span> : &quot;s*&quot; <span class="comment">--返回 False</span></span><br></pre></td></tr></table></figure><h2 id="Point3矢量">Point3矢量</h2><p>Point3 类定义了三维空间的点，也称为三维矢量，包含三个 Float 类数。<br>[320,240] – 定义2维点<br>[10,20,30] – 定义3维点<br>有x,y,z三个属性来代表xyz坐标</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义两个point3类型的对象</span></span><br><span class="line">vector1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]</span><br><span class="line">vector2 = [<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]</span><br><span class="line"><span class="comment">-- 返回矢量的长度</span></span><br><span class="line"><span class="built_in">length</span> vector1</span><br><span class="line"><span class="comment">-- 返回两个矢量的点积</span></span><br><span class="line">dot vector1 vector2</span><br><span class="line"><span class="comment">-- 返回两个矢量的叉积</span></span><br><span class="line">cross vector1 vector2</span><br><span class="line"><span class="comment">-- 返回矢量的标准矢量</span></span><br><span class="line">normalize vector1</span><br><span class="line"><span class="comment">-- 返回指定两点之间的距离</span></span><br><span class="line">distance vector1 vector2</span><br><span class="line"><span class="comment">-- 返回指定两点之间的随机点</span></span><br><span class="line"><span class="built_in">random</span> vector1 vector2</span><br></pre></td></tr></table></figure><h2 id="Array-数组">Array 数组</h2><p>定义数组的语法是: #(数组内容)<br>用户可以将一个对象集和通配符路径名用 as 操作符转化为一个数组。这相当于给对象集或与路径名匹配的当前对象拍了一张“快照”，这样可以在随后的脚本里操作集合里的对象，而不用担心对象集改变。这种功能与 3ds max 用户界面下的 Named Selection Sets 按钮类似。如果用户删除了数组里的某一对象，而在随后的脚本里再对数组进行映射操作，系统会给出一个错误信息。<br>例子：<br>sel1 = Selection as array<br>Boxes_at_load = $Box* as array<br>snap_children = $torso…* as array<br>original_cameras = cameras as array</p><h3 id="数组的方法">数组的方法</h3><ol><li>append&lt;array&gt;&lt;value&gt;<br>将指定值插入到数组的最后</li><li>deleteItem&lt;array&gt;&lt;number&gt;<br>从数组里删除指定序号的元素</li><li>join&lt;array&gt;&lt;collection&gt;<br>将变量&lt;collection&gt;里的所有元素添加到数组&lt;array&gt;的后面</li><li>sort&lt;array&gt;<br>按升序对数组进行排序.所有数组的元素必须具有可比性</li><li>findItem&lt;array&gt;&lt;value&gt;<br>在数组里查找指定目标对象,返回第一次找到的元素序号,如果没有找到就返回0,Point3类值与String类值如果内容相同,系统也认为欸它们是匹配的.</li><li>insertItem&lt;value&gt;&lt;array&gt;&lt;integer&gt;<br>在数组的指定位置&lt;integer&gt;插入指定值&lt;value&gt;</li><li>amin(&lt;array&gt;|{value})<br>返回数组或指定值序列里的最小值.如果数组长度为0或没有指定值序列,返回值undefined</li><li>amax(&lt;array&gt;|{value})<br>返回数组或指定值序列里的最大值.如果数组长度为0或没有指定值序列,返回值undefined</li></ol><h1>批量生成球</h1><p><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image.png" alt="Alt text"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- UI的定义</span><br><span class="line">rollout SphereTool &quot;Spheres Creator&quot;</span><br><span class="line">(</span><br><span class="line">    -- 创建UI</span><br><span class="line">    spinner count &quot;Number: &quot; type:#integer range:[1,100,10]</span><br><span class="line">    spinner growth &quot;Radius growth: &quot; range:[1,100,10]</span><br><span class="line">    button create &quot;Create Spheres&quot;</span><br><span class="line">    -- UI事件</span><br><span class="line">    on create pressed do</span><br><span class="line">        for i in 1 to count.value do</span><br><span class="line">            sphere radius:(i*growth.value) position:[i^2*growth.value,0,0]</span><br><span class="line">)</span><br><span class="line">-- 创建对应UI窗口</span><br><span class="line">createDialog SphereTool width:200</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>函数的写法</h1><h2 id="一般函数-生成一排球体">一般函数(生成一排球体)</h2><p>参数:count growth<br>作用:生成一排球体</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数的定义</span></span><br><span class="line">function createSphere <span class="built_in">count</span> growth =</span><br><span class="line">(</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="keyword">to</span> <span class="built_in">count</span> do </span><br><span class="line">sphere radius:(i*growth) position:[i^<span class="number">2</span>*growth,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 函数的调用</span></span><br><span class="line">createSphere <span class="number">25</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="带默认值的函数-渲染场景内所有摄像机">带默认值的函数(渲染场景内所有摄像机)</h2><p>参数:label,size,frames,folder.  其中size与folder有默认值,frames意思是可选的,可以传参数也可以不传,不传时为unsupplied<br>作用:寻找场景内所有摄像机并进行渲染</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-- 函数的定义</span><br><span class="line">function snapCams label <span class="keyword">size</span>:[<span class="number">320</span>,<span class="number">240</span>] frames: folder:<span class="string">&quot;C:/testimages/&quot;</span> = </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> cameras <span class="keyword">do</span> </span><br><span class="line">    (</span><br><span class="line">        local fname = folder + label + <span class="string">&quot;-&quot;</span> + c.name</span><br><span class="line">        <span class="keyword">if</span> frames == unsupplied then</span><br><span class="line">            <span class="keyword">render</span> <span class="keyword">camera</span>:c outputFile:(fname+<span class="string">&quot;.jpg&quot;</span>) outputSize:<span class="keyword">size</span></span><br><span class="line">        <span class="keyword">else</span>   </span><br><span class="line">            <span class="keyword">render</span> <span class="keyword">camera</span>:c frameRange:frames \</span><br><span class="line">                   outputFile:(fname+<span class="string">&quot;.avi&quot;</span>) outputSize:<span class="keyword">size</span></span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">-- 函数的调用</span><br><span class="line">snapCams <span class="string">&quot;phase1&quot;</span> <span class="keyword">size</span>:[<span class="number">640</span>,<span class="number">480</span>]</span><br></pre></td></tr></table></figure><h2 id="有返回值的函数-创建材质的函数">有返回值的函数(创建材质的函数)</h2><p>参数:baseColor cellSize<br>作用:通过函数创建材质并返回<br>这里函数调用是给模型Box001和Box002赋予材质</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数的定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title">cellMaterial</span> baseColor cellSize = </span><br><span class="line">(</span><br><span class="line">    local mtl = standardMaterial specularLevel:55 glossiness:35,</span><br><span class="line">          map = cellular cellColor:baseColor size:cellSize fractal:on</span><br><span class="line">    mtl.diffusemAP = map</span><br><span class="line">    <span class="keyword">return</span> <span class="type">mtl</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 函数调用</span></span><br><span class="line">$Box001.material = cellMaterial red <span class="number">25</span></span><br><span class="line">$Box002.material = cellMaterial blue <span class="number">50</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="递归">递归</h2><p>这里举例是找名字叫Box001的模型,自动赋予材质,然后会找Box001的子模型并赋予材质(材质的参数也会自动发生变化)</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 上一标题的函数的定义</span></span><br><span class="line"><span class="keyword">function</span> <span class="title">cellMaterial</span> baseColor cellSize = </span><br><span class="line">(</span><br><span class="line">    local mtl = standardMaterial specularLevel:55 glossiness:35,</span><br><span class="line">          map = cellular cellColor:baseColor size:cellSize fractal:on</span><br><span class="line">    mtl.diffusemAP = map</span><br><span class="line">    <span class="keyword">return</span> <span class="type">mtl</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 函数的定义(写function和fn都可以,一样的效果)</span></span><br><span class="line">fn mtlToChildren obj cellColor cellSize = </span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- 设置材质给obj</span></span><br><span class="line">    obj.material = cellMaterial cellColor cellSize</span><br><span class="line">    <span class="comment">-- 循环遍历子obj</span></span><br><span class="line">    <span class="keyword">for</span> child <span class="keyword">in</span> obj.children <span class="keyword">do</span></span><br><span class="line">        mtlToChildren child (cellColor + [<span class="number">75</span>,<span class="number">0</span>,<span class="number">0</span>]) (cellSize - <span class="number">3</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 函数调用</span></span><br><span class="line">mtlToChildren $Box001 blue <span class="number">10</span></span><br></pre></td></tr></table></figure><h1>得到变量的类型</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classOf <span class="number">23</span> <span class="comment">-- Integer</span></span><br><span class="line">classOf <span class="string">&quot;foo&quot;</span> <span class="comment">-- String</span></span><br><span class="line">classOf &amp;ball  <span class="comment">-- &amp;phere</span></span><br></pre></td></tr></table></figure><h1>得到相关类名称与方法</h1><p>MAXWrapper是max的所有object的父类(maxscript里称为超类)</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">showClass </span><span class="string">&quot;sphere&quot;</span> -- 显示sphere开头的类</span><br><span class="line"><span class="keyword">showClass </span><span class="string">&quot;sphere*.*&quot;</span> -- 显示sphere开头的类以及对应的方法</span><br><span class="line"></span><br><span class="line">-- 通过对象或路径名得到其所具有的方法</span><br><span class="line"><span class="keyword">b </span>= <span class="keyword">box()</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">showproperties </span><span class="keyword">b</span></span><br><span class="line"><span class="keyword"></span><span class="keyword">showproperties </span>$<span class="keyword">Box001</span></span><br><span class="line"><span class="keyword"></span></span><br></pre></td></tr></table></figure><h1>集合和数组</h1><p>数组的下标是从1开始的,不是0<br>集合是没有重复元素的,集合是无序的<br>定义数组: a = #(1,3,5,7,9)<br>定义集合: a = #{1,2,3,4,5}<br>修改数组的第三个数的值: a[3] = five<br>向数组追加内容: append a 11   输出的数值:1,3,5,7,9,11<br>通过表达式创建数组:<br>遍历1到5,然后对其进行开平方并存入roots的数组中.<br>roots = for i in 1 to 5 collect sqrt i<br>遍历的同时进行判断:<br>smallSpheres = for obj in geometry<br>where classOf obj == sphere and obj.numFaces &lt; 50<br>collect obj</p><h1>生成排列好的球体(增强版)</h1><p>界面:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-2.png" alt="Alt text"><br>可以随时通过UI数值的调整来实时改变球体的数量和大小</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">rollout SphereTool3 &quot;Spheres Creator 3&quot;</span><br><span class="line">(</span><br><span class="line">    local spheres = #()</span><br><span class="line">    spinner count &quot;Number: &quot; type:#integer range:[1,100,10]</span><br><span class="line">    spinner growth &quot;Radius growth :&quot; range:[1,100,10]</span><br><span class="line">    button create &quot;Create Spheres&quot;</span><br><span class="line">    button del &quot;Delete Spheres&quot;</span><br><span class="line">    on create pressed do</span><br><span class="line">        spheres = for i in 1 to count.value collect</span><br><span class="line">            sphere radius:(i*growth.value) position:[i^2*growth.value,0,0]</span><br><span class="line">    on del pressed do delete spheres</span><br><span class="line"></span><br><span class="line">    on growth changed val do</span><br><span class="line">        for i in 1 to spheres.count do</span><br><span class="line">        (</span><br><span class="line">            spheres[i].radius = i * val</span><br><span class="line">            spheres[i].pos = [i ^ 2 * val, 0, 0]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    on count changed val do</span><br><span class="line">    (</span><br><span class="line">        delete spheres</span><br><span class="line">        create.pressed()</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line">create dialog SphereTool3 width: 300</span><br></pre></td></tr></table></figure><h1>类集合数据类型</h1><h2 id="对象集合">对象集合</h2><p>这些对象集合是动态刷新的<br>geometry 指定类型的3dsmax对象<br>lights<br>cameras<br>helpers<br>shapes<br>systems<br>spacewarps<br>objects 所有场景对象<br>selection 获得当前选择的对象并保存为数组</p><p>相关方法:</p><ol><li>clearSelection() 清除当前场景对象选择集</li><li>deselect &lt;PathName&gt; 将指定对象从当前选择集里去掉</li><li>select &lt;PathName&gt; 先解除所有当前选择集,然后选择指定的对象</li><li>selectMore &lt;PathName&gt; 将指定对象集添加到当前选择集</li><li>getCurrentSelection() 返回一个数组，表示当前选择集。本函数相当于函数 Selection as array，但如果场景里有大量的对象，本函数的执行速度会大大快于后者。</li></ol><p>基础对象集合的使用举例<br>举例1:<br>删除距离原点距离大于10000的几何体,使用 as array的作用是防止geometry发生改变而造成的影响<br>for o in geometry as array where (distance o.pos [0,0,0]) &gt; 10000 do delete o<br>举例2:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-4.png" alt="Alt text"><br>举例3:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-5.png" alt="Alt text"></p><h2 id="Pathname">Pathname</h2><p>模型可能有层级关系,因此可以用Pathname的方式来得到对应的模型<br>也可以通过类似正则表达式的方式来得到相关模型<br>select $Box002/Box003<br>select $Box*<br>select $Box001/Box002/*  (注意这个的<em>号是只针对Box002的子集这个层级)<br>select $Box001/…/Sphere</em> 通过&quot;…&quot;让*号不止局限于固定的层级</p><p>select $Box00?</p><h1>动画脚本</h1><p>开启自动k帧模式然后在0和100帧处k帧并设定名字叫Sphere001的模型的位置</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在界面中显示当前max模式为自动k帧模式</span></span><br><span class="line"><span class="built_in">max</span> tool animmode</span><br><span class="line"><span class="comment">-- 开启自动k帧 加set的作用是让自动k帧持续开启</span></span><br><span class="line"><span class="built_in">set</span> animate <span class="keyword">on</span></span><br><span class="line"><span class="comment">-- 进行脚本k帧</span></span><br><span class="line">animation <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">at</span> <span class="built_in">time</span> <span class="number">0</span> $Sphere001.pos = [<span class="number">-100</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">at</span> <span class="built_in">time</span> <span class="number">100</span> $Sphere001.pos = [<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>制作一个动画,在名字叫做ball的模型位置处创建一个小球,然后0~100帧中每5帧在ball的模型位置处的16个距离单位下k一帧,然后将ball的半径进行sin趋势的改变</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b2 = sphere radius:<span class="number">3</span> wireColor:red</span><br><span class="line">animate on <span class="keyword">for</span> t <span class="keyword">in</span> <span class="number">0</span> to <span class="number">100</span> by <span class="number">5</span> do</span><br><span class="line">    at <span class="selector-tag">time</span> t</span><br><span class="line">    (</span><br><span class="line">        b2<span class="selector-class">.pos</span> = <span class="variable">$ball</span><span class="selector-class">.pos</span> + random <span class="selector-attr">[-16,-16,-16]</span> <span class="selector-attr">[16,16,16]</span></span><br><span class="line">        <span class="variable">$ball</span><span class="selector-class">.radius</span> = <span class="number">8</span>+<span class="number">4</span>*<span class="built_in">sin</span>(<span class="number">720</span>*t/<span class="number">100</span>)</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p>得到10帧和50帧ball名称的模型的位置并计算之间距离<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-3.png" alt="Alt text"><br>其他时间的写法<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-6.png" alt="Alt text"><br>遍历时间<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-7.png" alt="Alt text"><br>通过脚本制作,一个box在两个线之间移动的动画<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-8.png" alt="Alt text"><br>box的长度和方向会跟着线的距离来变化.</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">fn railFollow obj line1 line2 u =</span><br><span class="line">(</span><br><span class="line"><span class="comment">-- u的值代表了从起始点到结束点的值,范围是从0到1,计算方式是(t-start) as float/(end-start) as float</span></span><br><span class="line"><span class="comment">-- 计算位置,方向,距离</span></span><br><span class="line"><span class="comment">-- 通过lengthInterp可以得到在线的u的数值下的点位置</span></span><br><span class="line"><span class="comment">-- 通过nearestPathParam可以得到在线上,离p1点位置最近的点的位置的u值</span></span><br><span class="line"><span class="comment">-- 通过pathInterp可以得到在线上的u的数值下点的位置</span></span><br><span class="line"><span class="comment">-- p1-p2得到p1到p2向量</span></span><br><span class="line"><span class="built_in">local</span> p1 = lengthInterp line1 u,</span><br><span class="line">u2 = nearestPathParam line2 p1,</span><br><span class="line">p2 = pathInterp line2 u2,</span><br><span class="line">dv = p2 - p1,</span><br><span class="line">d = distance p1 p2</span><br><span class="line"></span><br><span class="line">obj.pos = p1</span><br><span class="line">obj.dir = dv</span><br><span class="line">obj.height = d</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> = animationRange.<span class="built_in">start</span></span><br><span class="line"><span class="function"><span class="keyword">end</span> = <span class="title">animationRange</span>.<span class="title">end</span></span></span><br><span class="line">animate <span class="keyword">on</span></span><br><span class="line"><span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">start</span> <span class="built_in">to</span> <span class="function"><span class="keyword">end</span> <span class="title">by</span> <span class="title">2</span> <span class="title">do</span></span></span><br><span class="line">(</span><br><span class="line"><span class="built_in">local</span> u = (t - <span class="built_in">start</span>) <span class="keyword">as</span> float / (<span class="function"><span class="keyword">end</span> - <span class="title">start</span>) <span class="title">as</span> <span class="title">float</span></span></span><br><span class="line"><span class="keyword">at</span> <span class="built_in">time</span> t railFollow $Box001 $Line001 $Line002 u</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>控制器的使用</h1><p>将box01的高度控制器赋予c<br>c = $box01.height.controller<br>创建一个路径约束控制器<br>pc = path_constraint follow:true bank:true path:$line01<br>创建一个路径约束控制器并赋予一个box的位置参数<br>$Box001.pos.controller = path_constraint follow:true bank:true path:$Line001<br>调整控制器的属性参数<br>$box01.pos.controller.bankAmount -= 0.25<br>复制控制器.<br>因为maxscript的变量赋值是引用赋值,所以第一句两个控制器变量是同一个值<br>使用copy语句以后会创建右边变量的一个副本来赋予左边<br>$box01.scale.controller = $box02.scale.controller<br>$sphere01.radius.controller = copy $box01.height.controller<br>得到控制器上的keys,返回一个数组<br>keys = $box02.height.controller.keys<br>得到keys后对应的可以使用的方法<br>keys = $box02.height.controller.keys<br>keys[1].value = 23<br>for k in keys do fomat “% at %\n” k.value k.time</p><h1>通过读取数据文件,设置摄像机在对应key下的位置</h1><p>数据文件:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-9.png" alt="Alt text"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stepCam</span> <span class="title">cam</span> <span class="title">dataFile</span> = </span></span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- 判断摄像机是否有bezier_position控制器,如果有就删掉重新建,否则就直接建</span></span><br><span class="line">    <span class="keyword">if</span> claasoOf cam.pos.controller != bezier_position <span class="keyword">then</span></span><br><span class="line">        cam.pos.controller = bezier_position()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        deleteKeys cam.pos.controller</span><br><span class="line">    <span class="keyword">if</span> classOf cam.target.pos.controller != bezier_position <span class="keyword">then</span></span><br><span class="line">        cam.target.pos.controller = bezier_postion()</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        deleteKeys cam.target.pos.controller</span><br><span class="line">    <span class="comment">-- 得到摄像机的控制器</span></span><br><span class="line">    <span class="built_in">local</span> cc = cam.pos.controller,</span><br><span class="line">          tc = cam.target.pos.controller</span><br><span class="line">    <span class="comment">-- 得到文件</span></span><br><span class="line">    <span class="built_in">local</span> f = openFile dataFile,</span><br><span class="line">          curFrame = <span class="number">0</span></span><br><span class="line">    <span class="comment">-- 读取文件并设置</span></span><br><span class="line">    <span class="comment">-- eof 是 MaxScript 中的一个函数，用于检查文件是否已经到达末尾</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> <span class="literal">eof</span> f <span class="built_in">do</span></span><br><span class="line">    (</span><br><span class="line">        <span class="comment">-- 读取文件三个参数</span></span><br><span class="line">        <span class="built_in">local</span> camPos = readValue f,</span><br><span class="line">              targPos = readValue f,</span><br><span class="line">              frames = readValue f</span><br><span class="line">        <span class="comment">-- 为摄像机的控制器在当前帧进行k帧</span></span><br><span class="line">        <span class="built_in">local</span> ck = addNewKey cc curFrame,</span><br><span class="line">              tk = addNewKey tc curFrame</span><br><span class="line">        <span class="comment">-- 设置帧的数值还有切线类型为#step</span></span><br><span class="line">        ck.<span class="built_in">value</span> = camPos; ck.inTangentType = <span class="comment">#step</span></span><br><span class="line">        tk.<span class="built_in">value</span> = targPos;  tk.inTangentType = <span class="comment">#step</span></span><br><span class="line">        <span class="comment">-- 设置下一个要设置的关键帧</span></span><br><span class="line">        curFrame += frames</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">close</span> f</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>修改器的应用</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- 创建修改器</span><br><span class="line"><span class="selector-tag">b</span> = bend angle:<span class="number">45</span> <span class="attribute">direction</span>:<span class="number">90</span></span><br><span class="line">-- 将修改器添加到模型上</span><br><span class="line">addModifier <span class="variable">$box01</span> <span class="selector-tag">b</span></span><br><span class="line">-- 创建修改器并添加到模型上</span><br><span class="line">addModifier <span class="variable">$box01</span> (twist angle:<span class="number">90</span>)</span><br><span class="line">-- 访问模型上的修改器(假如box01模型上有bend,twist)</span><br><span class="line"><span class="variable">$box01</span><span class="selector-class">.bend</span></span><br><span class="line"><span class="variable">$box01</span><span class="selector-class">.twist</span></span><br><span class="line">-- 修改模型上的修改器的数值</span><br><span class="line"><span class="variable">$box01</span><span class="selector-class">.bend</span><span class="selector-class">.angle</span> += <span class="number">20</span></span><br><span class="line">-- 得到模型上的所有修改器</span><br><span class="line"><span class="variable">$box01</span>.modifiers</span><br></pre></td></tr></table></figure><h1>MaxScript中的循环</h1><h2 id="while-…-do-…">while … do …</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 定义一个获取路径名称的函数</span></span><br><span class="line">fn get_pathname obj =</span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- 一直循环找物体的parent,然后设置路径名,当parent为undefined时终止循环</span></span><br><span class="line">    <span class="keyword">local</span> pathname = obj.name</span><br><span class="line">    <span class="keyword">while</span> obj.parent != undefined <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">        obj = obj.parent</span><br><span class="line">        pathname = obj.name + &quot;/&quot; + pathname</span><br><span class="line">    )</span><br><span class="line">    &quot;&amp;&quot; + pathname</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 对当前选择的物体进行获取路径名</span></span><br><span class="line">get_pathname $</span><br></pre></td></tr></table></figure><h2 id="continue命令">continue命令</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> selection <span class="keyword">do</span></span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- 通过isKindOf 判断obj是否是Editable_Mesh类或其子类</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> isKindOf obj Editable_Mesh <span class="keyword">then</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">local</span> msg = &quot;Selected object \&quot;&quot; + obj.name + &quot;\&quot; is not a mesh. \nObject skipped.&quot;</span><br><span class="line">        <span class="comment">-- 显示信息弹窗</span></span><br><span class="line">        messageBox msg</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    )</span><br><span class="line">    totalObjects += <span class="number">1</span></span><br><span class="line">    totalFaces += obj.numFaces</span><br><span class="line">    totalVerts += obj.numVerts</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="exit命令">exit命令</h2><p>在循环中通过exit命令退出循环,类似于python的break<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-10.png" alt="Alt text"></p><h2 id="return命令">return命令</h2><p>函数中的循环中使用return命令也可以跳出循环<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-11.png" alt="Alt text"></p><h1>coordsys控制坐标空间</h1><h2 id="坐标空间的种类">坐标空间的种类</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">coordsys <span class="built_in">word</span>          <span class="comment">-- 世界空间</span></span><br><span class="line">coordsys <span class="keyword">local</span>         <span class="comment">-- 局部空间</span></span><br><span class="line">coordsys parent        <span class="comment">-- 父对象空间,如果没有父对象则是世界空间</span></span><br><span class="line">coordsys grid          <span class="comment">-- 激活的网格的坐标空间</span></span><br><span class="line">coordsys screen        <span class="comment">-- 当前激活的视图的坐标空间</span></span><br><span class="line">coordsys &lt;node&gt;        <span class="comment">-- 对应node的局部的坐标空间</span></span><br><span class="line">coordsys &lt;matrix3&gt;     <span class="comment">-- 基于给定的矩阵来当坐标空间</span></span><br></pre></td></tr></table></figure><h2 id="coordsys的使用参考">coordsys的使用参考</h2><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">coordsys local</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">move</span> $box3 [<span class="number">100</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">rotate</span> $box4 <span class="number">45</span> z_axis</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>制作选取线然后生成锁链的工具</h1><p><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-13.png" alt="Alt text"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">rollout ChainMaker &quot;Chain Maker&quot;</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">local</span> curve,</span><br><span class="line">          chain = #()</span><br><span class="line">    <span class="comment">-- 定义一个负责筛选物体是否是shape的函数来辅助Pickbutton判断</span></span><br><span class="line">    fn shapesOnly obj = isKindOf obj Shape</span><br><span class="line">    <span class="keyword">group</span> &quot;Controlling Shape&quot;</span><br><span class="line">    (</span><br><span class="line">        pickbutton pickCurve &quot;Pick Curve&quot; width:<span class="number">100</span> <span class="keyword">filter</span>:shapesOnly</span><br><span class="line">        label theCurve &quot;-- none --&quot;</span><br><span class="line">    )</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">group</span> &quot;Chain Parameters&quot;</span><br><span class="line">    (</span><br><span class="line">        <span class="comment">-- diam负责控制锁链的大小</span></span><br><span class="line">        <span class="comment">-- thickness负责控制锁链的宽厚</span></span><br><span class="line">        spinner diam &quot;Link Diameter: &quot; range:[<span class="number">1</span>,<span class="number">500</span>,<span class="number">12</span>]</span><br><span class="line">        spinner thickness &quot;Link Thickness:&quot; range:[<span class="number">0.1</span>,<span class="number">500</span>,<span class="number">2</span>]</span><br><span class="line">        colorPicker wireColor &quot;Wire Color:&quot; align:#center</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    button deleteChain &quot;Delete Chain&quot; width:<span class="number">100</span> <span class="keyword">enable</span>:<span class="keyword">false</span></span><br><span class="line">    <span class="comment">-- 负责生成锁链</span></span><br><span class="line">    fn updateChain = </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">local</span> len = curvelength curve, <span class="comment">-- 曲线的长度</span></span><br><span class="line">              uStep = (diam.<span class="keyword">value</span> - thickness.<span class="keyword">value</span>) / len, <span class="comment">-- 环的直径减去厚度等于内圈的直径,再除以曲线的长度可以得到一个圆环占曲线长度的比例</span></span><br><span class="line">              up = <span class="keyword">true</span>,</span><br><span class="line">              i  = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> u = <span class="number">0.0</span> <span class="keyword">to</span> <span class="number">1.0</span> <span class="keyword">by</span> uStep <span class="keyword">do</span></span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">if</span> i &gt; chain.count <span class="keyword">then</span> chain[i] = torus wireColor:wireColor.color</span><br><span class="line">            <span class="keyword">local</span> t = chain[i]</span><br><span class="line">            t.radius1 = diam.<span class="keyword">value</span> / <span class="number">2</span>  </span><br><span class="line">            t.radius2 = thickness.<span class="keyword">value</span> / <span class="number">2</span></span><br><span class="line">            t.pos = lengthInterp curve u</span><br><span class="line">            t.dir = lengthTangent curve u</span><br><span class="line">            <span class="comment">-- 方向一次x,一次y</span></span><br><span class="line">            coordsys <span class="keyword">local</span> rotate t <span class="number">90</span> (<span class="keyword">if</span> up <span class="keyword">then</span> y_axis <span class="keyword">else</span> x_axis)</span><br><span class="line">            up = <span class="keyword">not</span> up </span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i <span class="keyword">to</span> chain.count <span class="keyword">do</span></span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">delete</span> chain[i]</span><br><span class="line">            deleteItem chain i</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">on</span> pickCurve picked obj <span class="keyword">do</span></span><br><span class="line">    (</span><br><span class="line">        curve = obj</span><br><span class="line">        theCurve.text = obj.name</span><br><span class="line">        deleteChain.enabled = <span class="keyword">true</span></span><br><span class="line">        updateChain()</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">on</span> deleteChain pressed <span class="keyword">do</span> (<span class="keyword">delete</span> chain; chain = #())</span><br><span class="line">    <span class="keyword">on</span> diam changed val <span class="keyword">do</span> updateChain()</span><br><span class="line">    <span class="keyword">on</span> thickness changed val <span class="keyword">do</span> updateChain()</span><br><span class="line">    <span class="keyword">on</span> wireColor changed val <span class="keyword">do</span> chain.wireColor = val</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">createDialog ChainMaker width:<span class="number">180</span></span><br></pre></td></tr></table></figure><h1>把脚本放到菜单栏中</h1><p>例如把刚才做的ChainMaker放到菜单栏中<br>前提已知:做好了一个脚本,脚本中的布局的变量名字叫ChainMaker,脚本另存到了3dmax的根目录的scripts文件夹中<br>创建macroScript:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">macroScript ChainMakerMacro</span><br><span class="line">category:<span class="string">&quot;My Tools&quot;</span></span><br><span class="line">buttonText:<span class="string">&quot;Chain Maker&quot;</span></span><br><span class="line"><span class="built_in">toolTip</span>:<span class="string">&quot;根据曲线创建锁链的工具&quot;</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">global</span> ChainMaker</span><br><span class="line"><span class="keyword">if</span> ChainMaker == undefined <span class="literal">or</span> <span class="literal">not</span> ChainMaker.open <span class="keyword">do</span></span><br><span class="line">fileIn <span class="string">&quot;ChainMaker.ms&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建自定义菜单:<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-14.png" alt="Alt text"></p><h1>导出模型信息举例</h1><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportMesh</span> <span class="title">obj</span> <span class="title">fileName</span> <span class="title">origin</span>=</span></span><br><span class="line">(</span><br><span class="line">    <span class="built_in">local</span> <span class="built_in">file</span> = createfile fileName ,</span><br><span class="line">          vertStore = <span class="comment">#(),</span></span><br><span class="line">          numFrames = (animationRange.<span class="function"><span class="keyword">end</span> - <span class="title">animationRange</span>.<span class="title">start</span>).<span class="title">frame</span> <span class="title">as</span> <span class="title">integer</span></span></span><br><span class="line">          </span><br><span class="line">    <span class="built_in">format</span> <span class="string">&quot;%, numVerts = %, numFrames = %\n\n&quot;</span> obj.name obj.numVerts numFrames <span class="built_in">to</span>:<span class="built_in">file</span></span><br><span class="line">    <span class="built_in">format</span> <span class="string">&quot;Frame,Vert #, Delta\n&quot;</span> <span class="built_in">to</span>:<span class="built_in">file</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> f = animationRange.<span class="built_in">start</span> <span class="built_in">to</span> animationRange.<span class="function"><span class="keyword">end</span> <span class="title">do</span></span></span><br><span class="line">    (</span><br><span class="line">    sliderTime = f</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="built_in">to</span> obj.numVerts <span class="built_in">do</span></span><br><span class="line">    (</span><br><span class="line">        <span class="built_in">local</span> v = coordsys origin getVert obj i</span><br><span class="line">        <span class="built_in">local</span> dv = <span class="keyword">if</span> vertStore[i] == undefined <span class="keyword">then</span> v <span class="keyword">else</span> v - vertStore[i]</span><br><span class="line">        vertStore[i] = v</span><br><span class="line">        <span class="built_in">format</span> <span class="string">&quot;%, %, %\n&quot;</span> (f.frame <span class="keyword">as</span> <span class="keyword">integer</span>) (i<span class="number">-1</span>) dv <span class="built_in">to</span>:<span class="built_in">file</span></span><br><span class="line">    )</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">close</span> <span class="built_in">file</span></span><br><span class="line">    edit fileName  </span><br><span class="line">)</span><br><span class="line">exportMesh $Sphere001 <span class="string">&quot;E:/3dsmaxTest/test.txt&quot;</span> $Sphere001</span><br></pre></td></tr></table></figure><h1>批量渲染对应文件夹下的max文件然后输出图片</h1><p><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-15.png" alt="Alt text"></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function thumbNailFolder <span class="keyword">in</span>Folder <span class="keyword">out</span>Folder thumbType:<span class="string">&quot;.jpg&quot;</span> thumbSize:[<span class="number">320</span>,<span class="number">240</span>] =</span><br><span class="line">(</span><br><span class="line">    makeDir <span class="keyword">out</span>Folder</span><br><span class="line">    local <span class="keyword">max</span>FilePattern = <span class="keyword">in</span>Folder + <span class="string">&quot;\\*.max&quot;</span></span><br><span class="line">    -- 遍历对应文件夹下的所有<span class="keyword">max</span>文件</span><br><span class="line">    <span class="keyword">for</span> filePath <span class="keyword">in</span> getFiles <span class="keyword">max</span>FilePattern do</span><br><span class="line">    (</span><br><span class="line">        local fileName = getFileNameFile filePath,</span><br><span class="line">              thumbPath = <span class="keyword">out</span>Folder + <span class="string">&quot;\\&quot;</span> + fileName + thumbType</span><br><span class="line">        </span><br><span class="line">              format <span class="string">&quot;Rendering thumbnail for %\n&quot;</span> filePath</span><br><span class="line">              -- 进入<span class="keyword">max</span>文件进行渲染,并设置输出路径和输出大小,vfb为off则渲染完不自动打开图像窗口</span><br><span class="line">              <span class="built_in">load</span>MaxFile filePath</span><br><span class="line">              render outputFile:thumbPath outputSize:thumbSize vfb:off</span><br><span class="line">    )</span><br><span class="line">    resetMaxFile <span class="comment">#noPrompt</span></span><br><span class="line">    print(<span class="string">&quot;Done.&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">thumbNailFolder <span class="string">&quot;E:/3dsmaxTest&quot;</span> <span class="string">&quot;E:/3dsmaxTest&quot;</span></span><br></pre></td></tr></table></figure><h1>沿着曲线种树的脚本</h1><p>前提:需要有名字叫road的曲线,有一个叫ground的地面模型,有一个叫masterTree的树的模型<br><img src="/2024/01/06/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MaxScript/image-16.png" alt="Alt text"></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">numTrees = <span class="number">500</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> <span class="built_in">to</span> numTrees <span class="built_in">do</span></span><br><span class="line">(</span><br><span class="line">    <span class="built_in">local</span> u = <span class="built_in">random</span> <span class="number">0.0</span> <span class="number">1.0</span>,</span><br><span class="line">          pos = lengthInterp $road u,</span><br><span class="line">          <span class="built_in">tan</span> = lengthTangent $road u</span><br><span class="line"></span><br><span class="line">    <span class="built_in">local</span> <span class="built_in">offset</span> = <span class="built_in">random</span> <span class="number">5</span> <span class="number">18</span> * (<span class="keyword">if</span> i &lt; numTrees / <span class="number">2</span> <span class="keyword">then</span> <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span>),</span><br><span class="line">          <span class="comment">-- cross tan z_axis得到切线与z轴的叉积,然后再乘以偏移值,最终得到偏移的向量</span></span><br><span class="line">          offsetVec = cross <span class="built_in">tan</span> z_axis * <span class="built_in">offset</span>,</span><br><span class="line">          <span class="comment">-- 当前位置加上偏移的向量等于偏移的位置</span></span><br><span class="line">          offsetPos = pos + offsetVec,</span><br><span class="line">          <span class="comment">-- 以当前偏移的位置的z轴1000的位置处向正下方0,0,-1处生成射线</span></span><br><span class="line">          treeRay = ray [offsetPos.x, offsetPos.y, <span class="number">1000</span>] [<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 定义树的位置和大小,intersectRay $ground treeRay得到的是模型与射线相交地方的法向量,因此再加个.pos得到位置</span></span><br><span class="line">    <span class="built_in">local</span> treePos = (intersectRay $ground treeRay).pos,</span><br><span class="line">          treeScale = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>] * <span class="built_in">random</span> <span class="number">0.2</span> <span class="number">1.1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">-- 创建masterTree这个模型的实例</span></span><br><span class="line">    instance $masterTree pos:treePos scale:treeScale name:<span class="string">&quot;tree&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">-- 更新max的视图,来观察到脚本执行时的状态</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">mod</span> i <span class="number">10</span> == <span class="number">0</span> <span class="keyword">then</span> redrawViews()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>实现进度条功能</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 进度条的名字</span><br><span class="line">progressStart <span class="string">&quot;test&quot;</span></span><br><span class="line">-- 进度条处理的任务总数</span><br><span class="line">loop_count = <span class="number">500</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1</span> to loop_count <span class="keyword">do</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">if</span> getProgressCancel() </span><br><span class="line">then </span><br><span class="line">(</span><br><span class="line">progressEnd()</span><br><span class="line"><span class="keyword">exit</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">(</span><br><span class="line">-- 这里填写要做的事情</span><br><span class="line">print(i)</span><br><span class="line">-- 更新进度条</span><br><span class="line">percent = i*<span class="number">100</span>/loop_count </span><br><span class="line">progressUpdate percent</span><br><span class="line">)</span><br><span class="line"><span class="keyword">if</span> percent==<span class="number">100</span> <span class="keyword">do</span> progressEnd()</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MaxScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript快速入门</title>
      <link href="/2023/12/10/Geek-JavaScript%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2023/12/10/Geek-JavaScript%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>教程链接:<a href="https://www.bilibili.com/video/BV11B4y1U7aH?p=2&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV11B4y1U7aH?p=2&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a></p></blockquote><h1>JavaScript的介绍</h1><p>JavaScript是一种编程语言,JavaScript用于在浏览器中建立交互式网页,移动应用程序,实时网络应用程序,命令行工具,游戏.每个浏览器都有JavaScript引擎.将谷歌的引擎取出嵌入到cpp程序当中,这个cpp程序叫做Node.有了Node后可以在浏览器中运行JavaScript代码,把JavaScript代码发送给Node执行.所以JavaScript可以为网络和移动设备构建后端.JavaScript的运行环境叫Node.</p><h1>第一次使用JavaScript测试</h1><p>按F12进入控制台<br><img src="/2023/12/10/Geek-JavaScript%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image.png" alt="Alt text"><br>输入console.log(“Hello World”)进行日志打印<br>输入alert(“Hello World”)可以在页面中弹窗输出Hello World</p><h1>搭建开发环境</h1><p>使用vscode</p><ol><li>安装第三方库需要使用nodejs,如果没有nodejs就去官网下载:<a href="https://nodejs.org/en">https://nodejs.org/en</a></li><li>创建一个文件夹,里面先放一个index.html文件</li><li>在index.html文件中输入!加上tab键即可生成html通用模板</li><li>下载live server插件,live server是一个非常轻量级的web服务器,可以使用它为web应用程序提供服务, 下载好以后在html文件上面右键,点击Open with live server即可在浏览器中预览html</li></ol><h1>第一个JavaScript脚本</h1><p>以下代码只需要关注body和/body中间的内容,其他的内容都是模板生成的.h1和/h1里的内容是浏览器的内容.script和/script中的内容是JavaScript脚本的内容,作用是输出HelloWorld日志,可以在浏览器网页中使用F12进入控制台中查看到.<br><img src="/2023/12/10/Geek-JavaScript%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/image-1.png" alt="Alt text"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 打印Hello World日志</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>将JavaScript脚本放到单独的js文件中</h1><p>刚才创建了index.html文件,然后将js代码写到了script字符段里面.还有另一种方法,那就是写到js文件中,然后在html文件中将js文件弄进来.<br>使用方法:<br>1.再创建一个index.js文件,文件名可以随意<br>2.将js代码放到index.js文件中<br>3.然后可以把</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 原html文件内容:</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>JavaScript的语法</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个字符串变量my_name1,并打印</span></span><br><span class="line"><span class="keyword">let</span> my_name1 = <span class="string">&#x27;chen&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(my_name);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个字符串常量my_name2</span></span><br><span class="line"><span class="keyword">const</span> my_name2 = <span class="string">&#x27;chen&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测变量的类型</span></span><br><span class="line"><span class="keyword">typeof</span> my_name2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个对象,并修改其内容</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;chen&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">22</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 修改对象内容方法一:</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;ruichen&#x27;</span>;</span><br><span class="line"><span class="comment">// 修改对象内容方法二:</span></span><br><span class="line">person[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&#x27;ruichen&#x27;</span>;</span><br><span class="line"><span class="comment">// 修改对象内容方法三:</span></span><br><span class="line">my_name = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">person[my_name] = <span class="string">&#x27;ruichen&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出对象的内容</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个数组,数组也是一个对象</span></span><br><span class="line"><span class="keyword">let</span> selectedColors = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">selectedColors[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(selectedColors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">greet</span>(<span class="string">&#x27;ruichen&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有返回值的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">square</span>(<span class="params">number</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> number * nember;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">square</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/2023/11/30/Geek-Docker/"/>
      <url>/2023/11/30/Geek-Docker/</url>
      
        <content type="html"><![CDATA[<h1>一些网站</h1><p>教程网站:<a href="https://www.bilibili.com/video/BV1og4y1q7M4/?p=1&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">狂神说JAVA Docker最新超详细版教程通俗易懂</a><br>linux命令搜索网站: <a href="https://www.yiibai.com/linux/ps.html">https://www.yiibai.com/linux/ps.html</a><br>vim编辑器的使用:<a href="https://www.runoob.com/linux/linux-vim.html">https://www.runoob.com/linux/linux-vim.html</a></p><h1>2023/12/20更新: 使用WSL在Windows上安装Linux</h1><h2 id="为什么使用WSL">为什么使用WSL</h2><p>通过虚拟机安装linux无法使用本机的gpu,对于一些需要gpu的开源项目无法很好的支持.因此改用WSL在Windows上安装Linux.<br>这样传文件,开发,都更加方便.</p><h2 id="WSL的安装步骤">WSL的安装步骤</h2><p>文档参考:<a href="https://learn.microsoft.com/zh-cn/windows/wsl/setup/environment">https://learn.microsoft.com/zh-cn/windows/wsl/setup/environment</a><br>前提:安装过程需要科学上网,配置清华镜像加速自行查阅.必须运行 Windows 10 版本 2004 及更高版本（内部版本 19041 及更高版本）或 Windows 11 才能使用以下命令。如果用的更早的版本,需要自行手动安装.</p><ol><li>右键通过管理员模式启动PowerShell或Windows命令提示符</li><li>安装wsl和Ubuntu</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl <span class="literal">--install</span></span><br><span class="line">wsl <span class="literal">--install</span> Ubuntu</span><br></pre></td></tr></table></figure><ol start="3"><li>重启计算机会自动进入Ubuntu,自行设置账号与密码<br><img src="/2023/11/30/Geek-Docker/image-14.png" alt="Alt text"></li><li>更新和升级包</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update &amp;&amp; sudo apt upgrade</span><br></pre></td></tr></table></figure><h2 id="vscode与wsl配合使用">vscode与wsl配合使用</h2><p>文档参考:<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-vscode">https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-vscode</a></p><ol><li>更新Ubuntu,添加wget和ca证书.</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install wget ca-certificates</span><br></pre></td></tr></table></figure><ol start="2"><li>在wsl中通过vscode打开项目</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure><ol start="3"><li>下载wsl扩展<br>下载好以后可以通过左下角与wsl进行连接<br><img src="/2023/11/30/Geek-Docker/image-15.png" alt="Alt text"><br>也可以新建终端,通过shell进行调试<br><img src="/2023/11/30/Geek-Docker/image-16.png" alt="Alt text"></li></ol><h2 id="使用Docker">使用Docker</h2><p>文档参考:<a href="https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers">https://learn.microsoft.com/zh-cn/windows/wsl/tutorials/wsl-containers</a><br><strong>通过文档参考中得到的可以查阅的网站:</strong><br>Docker的介绍文档:<a href="https://learn.microsoft.com/zh-cn/training/modules/intro-to-docker-containers/">https://learn.microsoft.com/zh-cn/training/modules/intro-to-docker-containers/</a><br>在Windows上安装Docker桌面:<a href="https://docs.docker.com/desktop/install/windows-install/">https://docs.docker.com/desktop/install/windows-install/</a><br>在vscode中安装Dev Containers:<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers">https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers</a><br>在vscode中安装Docker:<a href="https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker">https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker</a></p><h2 id="WSL的一些好用命令">WSL的一些好用命令</h2><p>WSL（Windows Subsystem for Linux）发行版是指在 Windows 上运行的 Linux 操作系统版本。每个 WSL 发行版都包含了一个完整的用户模式环境，就像真实运行的 Linux 一样，可以支持大多数原生 Linux 应用和工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有wsl发行版</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出一份wsl发行版(文件会放到用户文件夹中):</span></span><br><span class="line">wsl --export Ubuntu 备份名字.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入wsl发行版文件</span></span><br><span class="line">wsl --import 新名称 存储新发行版的系统目录 导入的wsl文件名称.tar</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入某一个wsl发行版</span></span><br><span class="line">wsl -d 环境名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭某一个wsl发行版(释放资源)(需要在shell中使用<span class="built_in">exit</span>命令)</span></span><br><span class="line">wsl --terminate 环境名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除某一个wsl发行版</span></span><br><span class="line">wsl --unregister 环境名 </span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>Docker的作用</h1><blockquote><p>Docker是一种轻量级的虚拟化技术，同时是一个开源的应用容器运行环境搭建平台，可以让开发者以便捷方式打包应用到一个可移植的容器中，然后安装至任何运行Linux或Windows等系统的服务器上。相较于传统虚拟机，Docker容器提供轻量化的虚拟化方式、安装便捷、启停速度快。</p></blockquote><h1>Docker的名词介绍</h1><p><img src="/2023/11/30/Geek-Docker/image.png" alt="Alt text"><br><strong>镜像(image)</strong>:通过镜像可以创建多个容器<br><strong>容器(container)</strong>:Docker创建出来的携带环境的应用,是通过镜像创建的<br><strong>仓库(repository)</strong>:存放镜像的地方,分为公有仓库和私有仓库</p><h1>从零开始安装Docker的过程</h1><ol><li>前往官网安装VMWareWorkstation: <a href="https://www.vmware.com/cn/products/workstation-player.html">https://www.vmware.com/cn/products/workstation-player.html</a></li><li>安装linux(centos):<a href="https://www.cnblogs.com/Dengv5/p/16386206.html">https://www.cnblogs.com/Dengv5/p/16386206.html</a></li><li>安装xshell(负责在本机操控linux):<a href="https://www.xshell.com/zh/free-for-home-school/">https://www.xshell.com/zh/free-for-home-school/</a></li><li>将xshell与虚拟机的linux进行连接:<a href="https://www.xshellcn.com/zhishi/guanli-xuniji.html">https://www.xshellcn.com/zhishi/guanli-xuniji.html</a></li><li>Docker的安装:<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></li><li>可选: DBeaver的安装(windows版即可,这个软件可以用来可视化查看数据库):<a href="https://dbeaver.io/download/">https://dbeaver.io/download/</a></li></ol><h1>Docker的常用命令</h1><p>Docker的帮助文档地址:<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a><br>什么是shell,bash,sh:<a href="https://blog.csdn.net/wht1995316/article/details/115837282">https://blog.csdn.net/wht1995316/article/details/115837282</a></p><h2 id="重启Docker服务">重启Docker服务</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启DOcker</span></span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启containerd</span></span><br><span class="line">sudo systemctl restart containerd</span><br></pre></td></tr></table></figure><h2 id="帮助命令">帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version # 显示docker的版本信息</span><br><span class="line">docker info # 显示docker的系统信息,包括镜像和容器的数量</span><br><span class="line">docker 命令名字 --help # 帮助命令</span><br></pre></td></tr></table></figure><h2 id="镜像命令">镜像命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker images # 查看所有本地的主机上的镜像</span><br><span class="line">docker images -q # 查看所有镜像ID</span><br><span class="line"></span><br><span class="line">docker search 镜像名 # 搜索镜像</span><br><span class="line">docker pull 镜像名 # 下载镜像</span><br><span class="line">docker pull 镜像名:镜像版本号 # 下载对应版本镜像</span><br><span class="line"></span><br><span class="line">docker rmi -f 镜像id  #删除指定id的镜像</span><br><span class="line">docker rmi -f 镜像id 镜像id 镜像id # 批量删除指定id镜像</span><br><span class="line">docker rmi -f $(docker images -aq) # 删除全部镜像</span><br></pre></td></tr></table></figure><h2 id="容器命令">容器命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并启动容器</span></span><br><span class="line">docker run -it 镜像名字 /bin/bash # 以bash的交互方式创建容器 -it意思是后面可以跟一个命令,这里跟/bin/bash意思是以bash方式进入容器</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台启动容器</span></span><br><span class="line">docker run -d 镜像名字 # 后台创建容器,如果容器发现没有应用就会自动停止</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询容器</span></span><br><span class="line">docker ps # 列出当前正在运行的容器</span><br><span class="line">docker ps -a # 列出当前正在运行的容器加上历史运行过的容器</span><br><span class="line">docker ps -n=数字 # 列出最近创建的对应数字的容器</span><br><span class="line">docker ps -q # </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出容器</span></span><br><span class="line">exit # 停止容器并退出</span><br><span class="line">快捷键:ctrl+p+q # 退出但不停止容器</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除容器</span></span><br><span class="line">docker rm 容器id # 删除容器</span><br><span class="line">docker rm -f 容器id # 强制删除容器</span><br><span class="line">docker rm -f $(docker ps -aq) # 强制删除所有容器</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动和停止已经创建好的容器</span></span><br><span class="line">docker start 容器id # 可以通过这个命令将之前退出的容器重新启动</span><br><span class="line">docker restart 容器id # 重启容器</span><br><span class="line">docker stop 容器id # 停止当前正在运行的容器</span><br><span class="line">docker kill 容器id # 强制停止当前容器</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看日志</span></span><br><span class="line">docker logs -tf --tail 查看日志条数 容器id # 查看日志</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器中进程信息</span></span><br><span class="line">docker top 容器id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器的元数据</span></span><br><span class="line">docker inspect 容器id # 查看容器的元数据</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入当前正在运行的容器</span></span><br><span class="line">docker exec -it 容器id /bin/bash # 进入容器后开启一个新的终端,可以在里面操作(常用)</span><br><span class="line">docker attach 容器id # 进入容器正在执行的终端,不会启动新的进程</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将容器的文件拷贝到主机上</span></span><br><span class="line">docker cp 容器id:容器内的文件路径 要拷贝到的主机文件路径</span><br></pre></td></tr></table></figure><h1>测试1:部署Nginx</h1><p>步骤:</p><ol><li>搜索镜像 docker search,虽然有命令,但更推荐前往dockerhub去搜索,里面内容更详细.<a href="https://hub.docker.com/">dockerhub链接</a></li><li>下载镜像 docker pull 镜像名 或者 docker pull 镜像名:版本号</li><li>查看镜像是否下载成功,docker images 查看所有已经下载的镜像</li><li>创建容器, docker run -d --name 容器名 -p 宿主机的端口号:容器的端口号 镜像名<br>举例: docker run -d --name nginx01 -p 3344:80 nginx</li><li>curl localhost:宿主机端口号 # 在linux中测试访问域名</li><li>通过xshell窗口上显示的192.168.***然后冒号端口号,进行浏览器上的访问<br><img src="/2023/11/30/Geek-Docker/image-1.png" alt="Alt text"></li></ol><h1>测试2:部署Tomcat</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">官方的使用</span></span><br><span class="line">docker run -it --rm tomcat:9.0 # 这里如果找不到tomcat镜像会自动下载,之前的启动都是后台,停止了容器之后,容器还是可以查到,加了--rm一般用来测试,因为退出容器后就自动删除了,查不到容器.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果 docker run 没有自动下载,就docker pull 去下载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行完以后可以使用ctrl+c或者ctrl+p+q退出</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载最新版本tomcat</span></span><br><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建并运行容器,提供公网访问端口,给容器取别名叫tomcat01,容器对应端口号可以通过docker ps 来查看</span></span><br><span class="line">docker run -d -p 3355:8080 --name tomcat01 tomcat # docker run -d -p 本机提供端口号:容器对应端口号 --name 容器名字 镜像名字</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it tomcat01 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试本地访问</span></span><br><span class="line">curl localhost:端口号</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试网站访问</span></span><br><span class="line">通过xshell窗口上显示的192.168.***然后冒号端口号,进行浏览器上的访问</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现显示404</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在容器中使用 docker <span class="built_in">ls</span> 列出容器的文件结构</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发现webapps里没有文件,但是webapps.dist中有文件</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将webapps.dist中的文件复制到webapps中</span></span><br><span class="line">cp -r webapps.dist/* webapps</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试浏览器访问,正常显示了.</span></span><br></pre></td></tr></table></figure><h1>Portainer可视化面板安装</h1><p>Portainer介绍: Docker图形化界面管理工具,提供一个后台面板来进行操作.<br>安装与运行:(8088是提供的让外网访问的端口号)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 \</span><br><span class="line">--restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=true portainer/portainer</span><br></pre></td></tr></table></figure><p>访问测试:<br>通过地址进入网站以后注册账号后得到的界面:<br><img src="/2023/11/30/Geek-Docker/image-2.png" alt="Alt text"></p><h1>镜像原理之联合文件系统</h1><h2 id="镜像是什么">镜像是什么</h2><blockquote><p>镜像是一种轻量级,可执行的独立软件包,用来打包软件运行环境和基于运行环境开发的软件,它包含运行某个软件所需的所有内容,包括代码,运行时,库,环境变量和配置文件.<br>所有的应用,直接打包docker镜像,就可以直接跑起来.<br><strong>如何得到镜像</strong>:</p><ul><li>从远程仓库下载</li><li>朋友拷贝给你</li><li>自己制作一个镜像DockerFile</li></ul></blockquote><h2 id="UnionFS-联合文件系统">UnionFS(联合文件系统)</h2><blockquote><p>我们下载的时候看到的一层层就是这个!<br>UnionFS(联合文件系统):Union文件系统(UnionFS)是一种分层、轻量级并目高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several diretories into a single virtualfilesystem)。Union 文件系统是 Docker 像的基础。镜像可以通过分层来进行继承，基于基础像(没有像 )可以制作各种具体的应用镜像。<br>特性:一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p></blockquote><h2 id="Docker镜像加载原理">Docker镜像加载原理</h2><blockquote><p>docker的镜像实际上由一层一层的文件系统组成,这种层级的文件系统叫UnionFS.<br>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel,Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux/Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root file system),在bootfs之上。包含的就是典型 Linux 系统中的 /dev,/proc,/bin,/etc等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。<br><img src="/2023/11/30/Geek-Docker/image-3.png" alt="Alt text"><br>对于一个精简的OS,rootfs可以很小,只需要包含最基本的命令,工具和程序库就可以了,因为底层直接用Host的kernel,自己只需要提供rootfs就可以了.由此可见对于不同的linux发行版,bootfs基本是一致的</p></blockquote><h2 id="分层理解">分层理解</h2><p>当下载一个镜像的时候,通过下载时的日志输出可以看到是一层一层的在下载.<br>由下图可以看到,当下载一个镜像时,这里下载了六层,其中第一层已经存在了就过滤,然后会只下载后面的五层.<br><img src="/2023/11/30/Geek-Docker/image-4.png" alt="Alt text"><br>所有的Docker镜像都起始于一个基础镜像层,当进行修改或添加新的内容时,就会在当前镜像层之上,创建新的镜像层.<br>Docker镜像都是只读的,当容器启动时,一个新的可写层被加载到镜像的顶部,这一层是叫容器层.</p><h1>Commit</h1><p>commit的作用举例:<br>例如之前部署的tomcat镜像,默认的tomcat的webapps文件夹下没有文件,将webapps.dist中的文件复制到webapps文件夹后才能正常使用.因此可以将经过修改的tomcat进行commit来创建一个属于自己的镜像.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker commit # 提交容器成为一个新的镜像</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令和git原理类似</span></span><br><span class="line">docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器id 目标镜像名:[版本号]</span><br></pre></td></tr></table></figure><h1>容器数据卷</h1><p>数据都在容器中,如果容器删除那么数据也会跟着丢失.需要将数据持久化,所以有了容器数据卷这个技术,将Docker容器中产生的数据同步到本地,将容器内的目录挂载到linux上面.还有一个好处就是其他容器也都能访问到这个本地的地址.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个容器并且设置容器数据卷</span></span><br><span class="line">docker run -it -v 主机目录:容器目录 镜像名字 /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器是否挂载</span></span><br><span class="line">docker inspect 容器id # 查看容器元数据,查看其中是否有Mounts</span><br></pre></td></tr></table></figure><h2 id="部署MySQL并实现数据挂载">部署MySQL并实现数据挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-d 后台启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p 端口映射</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v 卷挂载</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-e 环境配置,这里是设置mysql的密码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--name 容器别名</span></span><br><span class="line">docker run -d -p 3310:3306 -v /home/mysql:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql</span><br></pre></td></tr></table></figure><p>创建好名字叫mysql01的容器之后,通过DBeaver与数据库进行连接.<br><img src="/2023/11/30/Geek-Docker/image-5.png" alt="Alt text"></p><h2 id="具名挂载和匿名挂载">具名挂载和匿名挂载</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">匿名挂载:当使用docker run 的-v时不指定主机内路径</span></span><br><span class="line">docker run -d -P --name nginx01 -v /etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有的卷的情况</span></span><br><span class="line">docker volume ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出的像这种的都属于匿名挂载:<span class="built_in">local</span>     04e6ed9f31af8dc6768989d7d1c8db41d5ff61400a6d28d673db9aff5d2b396d</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">具名挂载:-v时使用卷名:容器路径 而不是 主机路径:容器路径</span></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所有的docker容器内的卷,没有指定目录的情况下都是再 <span class="string">&#x27;/var/lib/docker/volumes/卷名/_data下&#x27;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过具名挂载可以方便的找到我们的一个卷,大多数情况在使用具名挂载</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">总结:</span></span><br><span class="line">-v 容器内路径 # 匿名挂载</span><br><span class="line">-v 卷名:容器内路径 # 具名挂载</span><br><span class="line">-v /宿主机路径:容器内路径 # 指定路径挂载</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>扩展:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径: ro rw 改变读写权限</span></span><br><span class="line">ro :readonly</span><br><span class="line">rw :readwrite </span><br><span class="line"></span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginx</span><br><span class="line">docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ro 意思是说明这个路径只能通过宿主机来操作,容器内部是无法操作的.</span></span><br></pre></td></tr></table></figure><h2 id="初识Dockerfile">初识Dockerfile</h2><p>Dockerfile就是用来构建docker镜像的构建文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">去home目录下创建一个docker=test-volume文件夹并创建一个dockerfile文件</span></span><br><span class="line">cd /home</span><br><span class="line">mkdir docker-test-volume</span><br><span class="line">vim dockerfile1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入vim编辑文本按i进入写入操作</span></span><br><span class="line">FROM centos # 镜像名</span><br><span class="line"></span><br><span class="line">VOLUME [&quot;volume01&quot;,&quot;volume02&quot;] # 挂载卷,这里是匿名挂载两个</span><br><span class="line"></span><br><span class="line">CMD echo&quot;----end-----&quot; # 命令,打印</span><br><span class="line">CMD /bin/bash # 进入命令行操作模式</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写完以后按esc然后:wq完成写入保存与退出</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过dockerfile构建镜像</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-f 是指dockerfile文件的路径, -t 内容填 镜像名:镜像版本号 最后填个<span class="string">&quot;.&quot;</span>意思是在当前目录下生成镜像</span></span><br><span class="line">docker build -f dockerfile1 -t mycentos:1.0 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看所有镜像,查看自己构建的镜像是否成功</span></span><br><span class="line">docker images</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过自己的镜像创建容器</span></span><br><span class="line">docker run -it mycentos:1.0 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看通过镜像构建的容器里是否执行了dockfile文件中的命令,通过<span class="built_in">ls</span> -l 可以发现随着创建容器的同时实现了挂载volume01和volume02</span></span><br><span class="line">ls -l</span><br></pre></td></tr></table></figure><h2 id="数据卷容器">数据卷容器</h2><p>数据卷容器:可以让一个容器专门用来管理volume,然后其他需要使用这个volume的容器就通过–volumes-from 容器名,来访问volume.<br>也就是说,多个容器之间可以共享volume.</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个容器,这个容器可以共享另一个容器挂载的volume</span></span><br><span class="line">docker run -it --volumes-from 有挂载volume的容器名 镜像名</span><br></pre></td></tr></table></figure><h1>DockerFile</h1><p>dockerfile是用来构建docker镜像的文件,命令参数脚本<br>构建步骤:</p><ol><li>编写一个dockerfile文件</li><li>docker build 构建成为一个镜像</li><li>docker run 运行镜像</li><li>docker push 发布镜像(DockerHub)</li></ol><h2 id="DockerFile的构建过程">DockerFile的构建过程</h2><p>基础知识:</p><ol><li>每个保留关键字(指令)都是必须是大写字母</li><li>执行从上到下顺序执行</li><li>#表示注释</li><li>每一个指令都会创建提交一个新的镜像层并提交.<br><img src="/2023/11/30/Geek-Docker/image-6.png" alt="Alt text"></li><li>dockerfile是面向开发的,以后要发布项目,做镜像,就需要编写dockerfile文件,这个文件十分简单.</li></ol><h2 id="DockerFile的指令">DockerFile的指令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM                   # 基础镜像</span><br><span class="line">MAINTAINER             # 镜像是谁写的,姓名＋邮箱</span><br><span class="line">RUN                    # 镜像构建的时候需要运行的命令</span><br><span class="line">ADD                    # 除基础镜像外额外添加的镜像内容</span><br><span class="line">WORKDIR                # 镜像的工作目录,也就是说通过镜像创建容器后进入的目录</span><br><span class="line">VOLUME                 # 挂载的目录</span><br><span class="line">EXPOSE                 # 暴露的端口</span><br><span class="line">CMD                    # 通过镜像创建容器时执行的命令,如果创建容器的同时指定了命令则CMD不生效</span><br><span class="line">ENTRYPOINT             # 通过镜像创建容器时执行的命令,如果创建容器的同时指定了命令,ENTRYPOINT仍然生效</span><br><span class="line">ONBUILD                # ONBUILD中的内容只有当被FROM时才会执行,其他时候不会执行,ONBUILD指令对应的内容是其他指令以及内容.</span><br><span class="line">COPY                   # 类似ADD,将文件拷贝到镜像中</span><br><span class="line">ENV                    # 构建的时候设置环境变量</span><br></pre></td></tr></table></figure><h2 id="测试-构建自己的centos镜像">测试:构建自己的centos镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">前往/home目录创建一个my_dockerfiles目录,然后通过vim创建一个my_dockerfile_centos文件并写内容</span></span><br><span class="line">cd /home</span><br><span class="line">mkdir my_dockerfiles</span><br><span class="line">vim my_dockerfile_centos</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写dockerfile内容:</span></span><br><span class="line">FROM centos:7   # 之所以使用centos:7是因为centos最新版默认不支持网络不能直接使用yum -y install vim来进行安装了.</span><br><span class="line">MAINTAINER ruichen&lt;1505291171@qq.com&gt;</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line">RUN yum -y install net-tools</span><br><span class="line"></span><br><span class="line">EXPOSE 80</span><br><span class="line"></span><br><span class="line">CMD echo $MYPATH</span><br><span class="line">CMD echo &quot;-----end-----&quot;</span><br><span class="line">CMD /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写完内容以后构建镜像文件:-f意思是dockerfile文件的路径,我这里是相对路径直接填写名字也行,-t的意思是生成的镜像的镜像名和版本号</span></span><br><span class="line">docker -f my_dockerfile_centos -t mycentos:1.0 .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像的构建信息</span></span><br><span class="line">docker history 镜像id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以自己构建的centos镜像举例,内容如下:</span></span><br><span class="line">IMAGE          CREATED          CREATED BY                                       SIZE      COMMENT</span><br><span class="line">f6ed0ba1956f   10 minutes ago   CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin/bash&quot;]                 0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo \&quot;-----end-----\&quot;&quot;]    0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo $MYPATH&quot;]              0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   EXPOSE map[80/tcp:&#123;&#125;]                            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   RUN /bin/sh -c yum -y install net-tools # bu…   198MB     buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      10 minutes ago   RUN /bin/sh -c yum -y install vim # buildkit     285MB     buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      12 minutes ago   WORKDIR /usr/local                               0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      12 minutes ago   ENV MYPATH=/usr/local                            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      12 minutes ago   MAINTAINER ruichen&lt;1505291171@qq.com&gt;            0B        buildkit.dockerfile.v0</span><br><span class="line">&lt;missing&gt;      2 years ago      /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]             0B        </span><br><span class="line">&lt;missing&gt;      2 years ago      /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        </span><br><span class="line">&lt;missing&gt;      2 years ago      /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB </span><br></pre></td></tr></table></figure><h2 id="测试-Dockerfile制作tomcat镜像">测试:Dockerfile制作tomcat镜像</h2><p>前提:<br>需要准备两个压缩包<br>1.<a href="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.22/bin/apache-tomcat-9.0.22.tar.gz">apache-tomcat-9.0.22.tar.gz</a><br>2.<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html#license-lightbox">jdk-8u11-linux-x64.tar.gz</a><br>我是在windows上面下载的,因为本地有WinSCP这个远程传输文件的软件就直接用这个传到linux虚拟机上面的home目录下新建的文件夹上了,下载xshell的网站软件旁边有个叫Xftp 7的也可以用来传输文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在自定义的目录下编写Dockerfile文件,命名dockerfile文件为<span class="string">&quot;Dockerfile&quot;</span>好处是在build的时候会自动寻找这个名字叫<span class="string">&quot;Dockerfile&quot;</span>的文件,就不需要-f来指定了.</span></span><br><span class="line">mkdir /home/my_tomcat</span><br><span class="line">touch readme.txt</span><br><span class="line">vim Dockerfile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dockerfile内容:</span></span><br><span class="line">FROM centos:7</span><br><span class="line">MAINTAINER ruichen&lt;1505291171@qq.com&gt;</span><br><span class="line"></span><br><span class="line">COPY readme.txt /usr/local/readme.txt</span><br><span class="line"></span><br><span class="line">ADD jdk-8u11-linux-x64.tar.gz /usr/local/</span><br><span class="line">ADD apache-tomcat-9.0.22.tar.gz /usr/local/</span><br><span class="line"></span><br><span class="line">RUN yum -y install vim</span><br><span class="line"></span><br><span class="line">ENV MYPATH /usr/local</span><br><span class="line">WORKDIR $MYPATH</span><br><span class="line"></span><br><span class="line">ENV JAVA_HOME /usr/local/jdk1.8.0_11</span><br><span class="line">ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line">ENV CATALINA_HOME /usr/local/apache-tomcat-9.0.22</span><br><span class="line">ENV CATALINA_BASH /usr/local/apache-tomcat-9.0.22</span><br><span class="line">ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"></span><br><span class="line">EXPOSE 8080</span><br><span class="line"></span><br><span class="line">CMD /usr/local/apache-tomcat-9.0.22/bin/startup.sh &amp;&amp; tail -f /usr/local/apache-tomcat-9.0.22/logs/catalina.out</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建镜像:</span> </span><br><span class="line">docker build -t my_tomcat .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建容器</span></span><br><span class="line">docker run -d -p 9090:8080 --name mytomcat_container -v /home/my_tomcat/test:/usr/local/apache-tomcat-9.0.22/webapps/test -v /home/my_tomcat/tomcatlogs/:/usr/local/apache-tomcat-9.0.22/logs my_tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入容器</span></span><br><span class="line">docker exec -it 容器id /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl+p+q退出容器,访问域名</span></span><br><span class="line">curl localhost:9090</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没问题后,那么在浏览器上输入主机名然后:9090即可进入tomcat</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发布项目(由于做了卷挂载,直接在本地编写项目就可以发布了)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在本地进入my_tomcat的<span class="built_in">test</span>目录(这个<span class="built_in">test</span>目录是挂载的目录)</span></span><br><span class="line">cd test</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个WEB_INF目录并进入</span></span><br><span class="line">mkdir WEB_INF</span><br><span class="line">cd WEB_INF</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">写一个web.xml</span></span><br><span class="line">vim web.xml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内容:</span></span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span><br><span class="line">         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span><br><span class="line">         version=&quot;4.0&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;welcome-file-list&gt;</span><br><span class="line">        &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;</span><br><span class="line">    &lt;/welcome-file-list&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">再去<span class="built_in">test</span>目录写一个index.jsp</span></span><br><span class="line">cd ..</span><br><span class="line">vim index.jsp</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内容:</span></span><br><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Welcome to My Website&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Hello, this is the index.jsp page!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Current time: &lt;%= new java.util.Date() %&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">内容写好以后,当前浏览器地址是主机号:9090,接下来输入/test回车,也就是主机号:9090/test,回车后如果跳转网页正常跳转并显示即可证明成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>Docker网络</h1><p>ens33的话就是虚拟机的地址<br><img src="/2023/11/30/Geek-Docker/image-7.png" alt="Alt text"><br>两个容器通过Docker0可以进行连接<br><font color="red">注:如果这两个容器如果没有进行link,那么不可以直接通过容器名进行ping通,需要一个容器名对应ip地址才行</font><br><img src="/2023/11/30/Geek-Docker/image-8.png" alt="Alt text"><br>所有容器不指定网络的情况下,都是docker0路由的,docker会给容器分配一个默认的可用IP<br><img src="/2023/11/30/Geek-Docker/image-9.png" alt="Alt text"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载tomcat镜像并创建容器</span></span><br><span class="line">docker run -d -P --name tomcat01 tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看容器内部网络地址</span></span><br><span class="line">docker exec -it tomcat01 ip addr</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看到以后,使用ping 网络地址 的命令,发现linux可以ping通容器内部</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">每启动一个docker容器,docker就会给docker容器分配一个ip,我们只要安装了docker,就会有一个网关docker0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">桥接模式,使用的技术是veth-pair技术</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">veth-pair充当一个桥梁,连接各种虚拟设备.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器与容器之间是可以互相ping通的</span></span><br></pre></td></tr></table></figure><h1>自定义网络</h1><p>通过自定义网络可以实现容器互联,可以令不同的集群使用不同的网络,保证集群是安全和健康的.<br>查看所有docker网络:<br>docker network ls<br><img src="/2023/11/30/Geek-Docker/image-10.png" alt="Alt text"><br>网络模式:<br>bridge: 桥接 docker默认<br>none : 不配置网络<br>host: 和宿主机共享网络<br>container: 容器网络联通(用的少,局限很大)<br>测试:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用docker run -d -P --name tomcat01 tomcat命令是会有个默认参数 --net bridge也就是docker0</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker0特点: 默认,域名不能访问</span></span><br><span class="line">docker run -d -P --name tomcat01 --net bridge tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">自定义网络: 网络模式为桥接模式,子网为192.168.0.0/16(这里的16意思是指开头的16个二进制数字固定),网关为192.168.0.1</span></span><br><span class="line">docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过自己的自定义网络创建两个容器</span></span><br><span class="line">docker run -d -P --name tomcat-net-01 --net 自定义网络名字 tomcat</span><br><span class="line">docker run -d -P --name tomcat-net-02 --net 自定义网络名字 tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">令通过自定义网络创建的容器01去ping通过自定义网络创建的容器02是成功的</span></span><br><span class="line">docker exec -it 容器01 ping 容器02</span><br></pre></td></tr></table></figure><h1>网络联通</h1><p>举例,这里使用默认网关创建两个容器tomcat-01与tomcat-02,使用自定义网络创建两个容器tomcat-net-01与tomcat-net-02,如果想要让tomcat-01与tomcat-net-01之间相互访问是需要先将tomcat-01与mynet网关进行联通的<br><img src="/2023/11/30/Geek-Docker/image-11.png" alt="Alt text"><br>创建redis集群命令的解释:<br><img src="/2023/11/30/Geek-Docker/image-13.png" alt="Alt text"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">让mynet网关与tomcat01容器进行连通,将tomcat01放到了mynet网络下,一个容器两个ip地址</span></span><br><span class="line">docker network connect mynet tomcat01</span><br></pre></td></tr></table></figure><h1>部署Redis集群</h1><p>部署一个这样的集群:当r-m死掉的话,会有对应的r-s去进行替代<br><img src="/2023/11/30/Geek-Docker/image-12.png" alt="Alt text"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">清理所有容器</span></span><br><span class="line">docker rm -f &amp;(docker ps -aq)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建名字叫做redis的自定义网络</span></span><br><span class="line">docker network create redis --subnet 172.38.0.0/16</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过脚本创建6个redis配置</span></span><br><span class="line">for port in $(seq 1 6); \</span><br><span class="line">do \</span><br><span class="line">mkdir -p /mydata/redis/node-$&#123;port&#125;/conf</span><br><span class="line">touch /mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">cat &lt;&lt; EOF &gt;/mydata/redis/node-$&#123;port&#125;/conf/redis.conf</span><br><span class="line">port 6379 </span><br><span class="line">bind 0.0.0.0</span><br><span class="line">cluster-enabled yes </span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 5000</span><br><span class="line">cluster-announce-ip 172.38.0.1$&#123;port&#125;</span><br><span class="line">cluster-announce-port 6379</span><br><span class="line">cluster-announce-bus-port 16379</span><br><span class="line">appendonly yes</span><br><span class="line">EOF</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span>到/mydata查看redis是否创建出来</span></span><br><span class="line">cd /mydata/</span><br><span class="line">ls</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动redis-1服务</span></span><br><span class="line">docker run -p 6371:6379 -p 16371:16379 --name redis-1 \</span><br><span class="line">-v /mydata/redis/node-1/data:/data \</span><br><span class="line">-v /mydata/redis/node-1/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.11 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动redis-2服务,仿照redis-1,修改端口号,容器名,映射,ip</span></span><br><span class="line">docker run -p 6372:6379 -p 16372:16379 --name redis-2 \</span><br><span class="line">-v /mydata/redis/node-2/data:/data \</span><br><span class="line">-v /mydata/redis/node-2/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-d --net redis --ip 172.38.0.12 redis:5.0.9-alpine3.11 redis-server /etc/redis/redis.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">依次顺序启动redis-3,4,5,6服务</span></span><br><span class="line">...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入redis-1容器,redis容器只能使用sh解释器</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个Redis集群</span></span><br><span class="line">redis-cli --cluster create 172.38.0.11:6379 172.38.0.12:6379 172.38.0.13:6379 172.38.0.14:6379 172.38.0.15:6379 172.38.0.16:6379 --cluster-repli</span><br><span class="line">cas 1</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连接到redis集群模式</span></span><br><span class="line">redis-cli -c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取redis集群状态信息</span></span><br><span class="line">cluster info</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取集群所有系欸但的详细信息</span></span><br><span class="line">cluster nodes</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置键值对,a关联b,系统会自动分配一个主机器来进行这个配置,我这里显示的是ip为172.38.0.13的节点</span></span><br><span class="line">set a b</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">ctrl+p+q退出容器,停掉redis-3</span></span><br><span class="line">docker stop redis-3</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入集群,去获取a</span></span><br><span class="line">docker exec -it redis-1 /bin/sh</span><br><span class="line">redis-cli -c</span><br><span class="line">get a</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">最终可以看到返回结果是从14ip的节点中找到了b</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查所有节点,从返回中可以发现,13节点故障,14节点变成了主节点</span></span><br><span class="line">cluster nodes</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ComfyUI插件</title>
      <link href="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/"/>
      <url>/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1>工作流参考</h1><p><a href="https://comfyanonymous.github.io/ComfyUI_examples/">https://comfyanonymous.github.io/ComfyUI_examples/</a></p><h1>将工作流保存到png图像中</h1><p>方法一:</p><ol><li>下载插件https://github.com/pythongosssss/ComfyUI-Custom-Scripts</li><li>生成图片后,界面中会显示生成的图片的队列,将队列中的图片保存即可<br>方法二:<br>代码:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#@title Add Workflow to PNG</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, PngImagePlugin</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_workflow_png</span>(<span class="params">image_path, workflow_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(image_path):</span><br><span class="line">        ValueError(<span class="string">f&quot;Invalid image path `<span class="subst">&#123;image_path&#125;</span>`&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(workflow_path):</span><br><span class="line">        ValueError(<span class="string">f&quot;Invalid workflow path `<span class="subst">&#123;workflow_path&#125;</span>`&quot;</span>)</span><br><span class="line">    path = os.path.dirname(image_path)</span><br><span class="line">    filename = os.path.basename(image_path).rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(workflow_path, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = file.read()</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        Exception(<span class="string">&quot;There was an error reading the workflow JSON:&quot;</span>, e)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    info = PngImagePlugin.PngInfo()</span><br><span class="line">    info.add_text(<span class="string">&quot;workflow&quot;</span>, data)</span><br><span class="line">    new_path = os.path.join(path, filename+<span class="string">&#x27;_workflow.png&#x27;</span>)</span><br><span class="line">    image.save(new_path, <span class="string">&quot;PNG&quot;</span>, pnginfo=info)</span><br><span class="line">    <span class="keyword">return</span> new_path</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the workflow PNG</span></span><br><span class="line"></span><br><span class="line">image = <span class="string">&#x27;/content/Comparison_Workflow.png&#x27;</span> <span class="comment"># 在这里填写工作流生成的图片的路径</span></span><br><span class="line">workflow = <span class="string">&#x27;/content/PPF_Workflow.json&#x27;</span> <span class="comment"># 在这里填写工作流的Json文件路径</span></span><br><span class="line"></span><br><span class="line">workflow_png_path = make_workflow_png(image, workflow)</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Workflow added to image:&quot;</span>, workflow_png_path)</span><br></pre></td></tr></table></figure><p>使用方法:</p><ol><li>准备ComfyUI的工作流文件:workflow.json (名字任意)</li><li>工作流生成的图片:image.png  (名字任意)</li><li>在提供的代码中填写图片和工作流的文件路径</li><li>运行代码</li><li>在图片的路径下得到后缀为_workflow.png的携带工作流的图片</li><li>将携带工作流的图片拖入到ComfyUI中即可生成对应的工作流</li></ol><h1>ComfyUI Manager</h1><p>网站:<a href="https://github.com/ltdrdata/ComfyUI-Manager">https://github.com/ltdrdata/ComfyUI-Manager</a><br>作用:方便插件的安装,识别工作流中有哪些未安装的模型和插件<br>推荐的设置:<br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-4.png" alt="Alt text"><br>设置好这些以后,comfyui上能够显示节点对应的插件名,如果是🦊图标就是原生的,如果是不带🦊图标并且没有插件名的就是识别不出来的.<br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-5.png" alt="Alt text"></p><h1>AnimateDiff Evolved(生成动画的工作流相关)</h1><p>网站:<a href="https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved">https://github.com/Kosinkadink/ComfyUI-AnimateDiff-Evolved</a><br>额外需要的模型:参考github说明,有lora,有model.<br>作用:生成带动作的视频<br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-2.png" alt="Alt text"></p><h1>FizzNodes(生成动画的工作流相关)</h1><p>网站:<a href="https://github.com/FizzleDorf/ComfyUI_FizzNodes">https://github.com/FizzleDorf/ComfyUI_FizzNodes</a><br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-3.png" alt="Alt text"><br>作用:</p><blockquote><p>Scheduled prompts, scheduled float/int values and wave function nodes for animations and utility. compatable with framesync and keyframe-string-generator for audio synced animations in Comfyui.<br>用于动画和实用程序的预定提示、预定浮点/整数值和波函数节点。与 Comfyui 中的音频同步动画的帧同步和关键帧字符串生成器兼容。</p></blockquote><h1>ComfyUI-VideoHelperSuite(生成动画的工作流相关)</h1><p>网站:<a href="https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite">https://github.com/Kosinkadink/ComfyUI-VideoHelperSuite</a><br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image.png" alt="Alt text"><br>作用:视频工作流相关节点</p><h1>ComfyUI_Custom_Nodes_AlekPet(实时绘画的工作流相关)</h1><p>网站:<a href="https://github.com/AlekPet/ComfyUI_Custom_Nodes_AlekPet">https://github.com/AlekPet/ComfyUI_Custom_Nodes_AlekPet</a></p><h1>ComfyUI_IPAdapter_plus</h1><p>网站:<a href="https://github.com/cubiq/ComfyUI_IPAdapter_plus">https://github.com/cubiq/ComfyUI_IPAdapter_plus</a><br>注意:<font color="red">这个需要下载对应的需要模型,因此需要前往github查看需要的内容</font><br>作用:</p><blockquote><p>The IPAdapter are very powerful models for image-to-image conditioning. Given a reference image you can do variations augmented by text prompt, controlnets and masks. Think of it as a 1-image lora.<br>IPAdapter 是非常强大的图像到图像调节模型。给定参考图像，您可以通过文本提示、控制网和遮罩进行增强的变化。将其视为单幅图像 lora。</p></blockquote><h1>ComfyUI-Custom-Scripts</h1><p>网站:<a href="https://github.com/pythongosssss/ComfyUI-Custom-Scripts">https://github.com/pythongosssss/ComfyUI-Custom-Scripts</a><br>作用举例:可以扩展comfyUI的界面,令生成的图片都显示在界面上,然后可以拖拽复现工作流.<br>像这种带蟒蛇图标的都属于这个插件<br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-1.png" alt="Alt text"></p><h1>comfyui_controlnet_aux</h1><p>网站:<a href="https://github.com/Fannovel16/comfyui_controlnet_aux">https://github.com/Fannovel16/comfyui_controlnet_aux</a><br>注意:<font color="red">此自定义节点与comfyui_controlnet_preprocessors相冲突</font><br>作用:可以将图片进行预处理,生成ControlNet模型需要的图片.</p><h1>Masquerade Nodes</h1><p>网站:<a href="https://github.com/BadCafeCode/masquerade-nodes-comfyui">https://github.com/BadCafeCode/masquerade-nodes-comfyui</a><br>作用: 提供了很多与mask处理有关的节点</p><h1>Allor</h1><p>网站:<a href="https://github.com/Nourepide/ComfyUI-Allor?tab=readme-ov-file">https://github.com/Nourepide/ComfyUI-Allor?tab=readme-ov-file</a><br>作用: 提供了很多调节图像的节点<br>使用文档:<a href="https://nourepide.github.io/ComfyUI-Allor-Doc/image-text.html">https://nourepide.github.io/ComfyUI-Allor-Doc/image-text.html</a></p><h2 id="ImageTransformCropAbsolute">ImageTransformCropAbsolute</h2><p>可以将图片进行裁切<br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-7.png" alt="Alt text"></p><h1>ComfyUI Segment Anything</h1><p>网站:<a href="https://github.com/storyicon/comfyui_segment_anything">https://github.com/storyicon/comfyui_segment_anything</a><br>作用: 通过算法进行生成遮罩与图像</p><h1>efficiency-nodes-comfyui</h1><p>网站:<a href="https://github.com/LucianoCirino/efficiency-nodes-comfyui?tab=readme-ov-file">https://github.com/LucianoCirino/efficiency-nodes-comfyui?tab=readme-ov-file</a><br>作用:提供了一些自定义节点,例如xyplot.然后提供了一些用于简化工作流程而减少节点总数的节点,将一些流程汇总到了一个节点上面.</p><h1>ComfyUI_tinyterraNodes</h1><p>网站:<a href="https://github.com/TinyTerra/ComfyUI_tinyterraNodes">https://github.com/TinyTerra/ComfyUI_tinyterraNodes</a><br>作用:这个也有xyplot,也提供了一些精简工作流的节点.<br>实测:通过自定义节点实现只需要一个节点就能够添加多个lora的效果.并实测跟原生工作流生成图片相同.<br>将此图片拖入comfyui复刻工作流<br><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/comfyui_ttn.png" alt="Alt text"></p><h1>ComfyUI_ADV_CLIP_emb</h1><p>网站:<a href="https://github.com/BlenderNeko/ComfyUI_ADV_CLIP_emb">https://github.com/BlenderNeko/ComfyUI_ADV_CLIP_emb</a><br>作用:让comfyui的提示词的跟webui的提示词对于权重分配的方式一样.</p><h2 id="BNK-CLIPTextEncodeAdvanced">BNK_CLIPTextEncodeAdvanced</h2><p><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-6.png" alt="Alt text"></p><h1>ComfyUI-Inspire-Pack</h1><p>网站:<a href="https://github.com/ltdrdata/ComfyUI-Inspire-Pack">https://github.com/ltdrdata/ComfyUI-Inspire-Pack</a><br>作用:这也有A1111 兼容性支持有助于在 ComfyUI 中精确复制 A1111 的创建。</p><h2 id="KSampler-Inspire">KSampler //Inspire</h2><p><img src="/2023/11/28/AI-ComfyUI%E6%8F%92%E4%BB%B6/image-8.png" alt="Alt text"></p><h1>ComfyUI_Dave_CustomNode(manage中搜索Davemane42)</h1><p>网站:<a href="https://github.com/Davemane42/ComfyUI_Dave_CustomNode">https://github.com/Davemane42/ComfyUI_Dave_CustomNode</a><br>作用:线稿上色latent couple(sdwebui上面叫latent couple),注:这个不能够通过api进行调用</p><h1>ComfyUI-Impact-Pack</h1><p>网站:<a href="https://github.com/ltdrdata/ComfyUI-Impact-Pack">https://github.com/ltdrdata/ComfyUI-Impact-Pack</a><br>作用:脸部修复</p><h1>was-node-suite-comfyui(manage中搜索WAS_Node_Suite)</h1><p>网站:<a href="https://github.com/WASasquatch/was-node-suite-comfyui">https://github.com/WASasquatch/was-node-suite-comfyui</a><br>作用:提供了很多不同类型的节点,个人主要用到的:各种switch节点.方便一个工作流来实现不同需求.</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ComfyUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE_工具蓝图</title>
      <link href="/2023/11/21/UE%E5%BC%80%E5%8F%91-UE%E5%B7%A5%E5%85%B7%E8%93%9D%E5%9B%BE/"/>
      <url>/2023/11/21/UE%E5%BC%80%E5%8F%91-UE%E5%B7%A5%E5%85%B7%E8%93%9D%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1>好用的快捷键</h1><p>q ：选中蓝图按Q一键排列<br>shift+鼠标点击：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661931418121-555dc6c5-d667-4f57-921f-b5f58d49c9af.png#averageHue=%234c4639&amp;clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=425&amp;id=u5c67b221&amp;originHeight=425&amp;originWidth=415&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145631&amp;status=error&amp;style=none&amp;taskId=ueae8edeb-bbdf-4fcb-bc98-12718067ad3&amp;title=&amp;width=415" alt="image.png">当制作好一个工具蓝图之后通过shift加鼠标点击可以跳转到蓝图界面。</p><h1>UI界面制作</h1><h2 id="使用UE自带的界面嵌入到自己的UI里面">使用UE自带的界面嵌入到自己的UI里面</h2><p><a href="https://filipsivak.medium.com/unreal-how-to-use-details-view-and-single-property-view-in-editor-utility-widget-38c47ba8dfe5">https://filipsivak.medium.com/unreal-how-to-use-details-view-and-single-property-view-in-editor-utility-widget-38c47ba8dfe5</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663578872293-443eac28-c118-41df-97bc-65e0ec0de268.png#averageHue=%234e4e4e&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;id=u20327ccf&amp;originHeight=545&amp;originWidth=593&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52455&amp;status=done&amp;style=none&amp;taskId=uff11847c-a6f0-4067-8fbe-22c5c917da6&amp;title=" alt="image.png"><br><strong>Details view</strong><br>这个是可以折叠的<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663578904714-d722fb8e-f0de-4200-8505-de0c3a868d17.png#averageHue=%235c5b5b&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=186&amp;id=u2b66c50e&amp;originHeight=186&amp;originWidth=514&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11567&amp;status=done&amp;style=none&amp;taskId=u05d00600-bff2-419f-9549-2805956803b&amp;title=&amp;width=514" alt="image.png">，并且可以创建多个可以折叠的控件。<br><strong>SinglePropertyView</strong><br>这个是单个的，当只需要一个，并且不需要折叠时使用。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663579003446-98d1b919-8d19-418b-ad31-ee4a82b65b38.png#averageHue=%23515151&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=81&amp;id=ue551f0fa&amp;originHeight=81&amp;originWidth=589&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8283&amp;status=done&amp;style=none&amp;taskId=u0e75b50f-a9ff-4c9f-9a76-0a9d21b7dda&amp;title=&amp;width=589" alt="image.png">。<br><strong>如何创建</strong><br>首先介绍一下singlePropertyView：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663579088716-a09dffc9-9cff-40fc-901e-261e4955dbb1.png#averageHue=%233f3c3b&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=86&amp;id=ufb7650a0&amp;originHeight=86&amp;originWidth=600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5439&amp;status=done&amp;style=none&amp;taskId=uc2fc1768-f2bf-42f1-b5c2-8241bf30ef9&amp;title=&amp;width=600" alt="image.png">在控件属性中决定开头的名字<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663579192780-01df89db-c659-4077-bf05-a075c3de450b.png#averageHue=%232c2828&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=130&amp;id=ub4ef9b01&amp;originHeight=130&amp;originWidth=471&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8507&amp;status=done&amp;style=none&amp;taskId=u04224dea-6c31-4ddd-899f-7e16caf93cb&amp;title=&amp;width=471" alt="image.png">，然后在蓝图中创建相同名字的变量，并指定类型<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663579221908-1928b458-d948-4204-a3bf-6ace5afe8ce2.png#averageHue=%232b2625&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=161&amp;id=ua3ac6f7a&amp;originHeight=161&amp;originWidth=550&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14669&amp;status=done&amp;style=none&amp;taskId=u0bcb3376-9fc8-48d5-bf6f-0aca150d5a4&amp;title=&amp;width=550" alt="image.png">。指定类型之后在蓝图中设置object使其显示<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663579270140-82b1da43-d6e5-49cb-b4fd-1050b81c5699.png#averageHue=%232b2929&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=241&amp;id=u11d0a447&amp;originHeight=241&amp;originWidth=842&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55077&amp;status=done&amp;style=none&amp;taskId=u1475fc4a-2e07-4b7a-990a-c2af5633450&amp;title=&amp;width=842" alt="image.png">。<br>再介绍一下detailsView：在categories to show控件中设置要显示的组<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663579355405-23b5bd82-c3a3-40a5-bf61-993f6b736250.png#averageHue=%23272626&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=408&amp;id=ucb23b0e7&amp;originHeight=408&amp;originWidth=621&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32705&amp;status=done&amp;style=none&amp;taskId=u418a60c9-a3a6-48d6-bd75-0eee3986e52&amp;title=&amp;width=621" alt="image.png">设置完以后，在事件图表中设置变量并分配组<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663580122614-cbdf7483-39a1-4b08-b277-285a34257d20.png#averageHue=%23252323&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=834&amp;id=u536c492a&amp;originHeight=834&amp;originWidth=627&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62036&amp;status=done&amp;style=none&amp;taskId=uaac31b5d-b093-468a-a1b8-df664cc0a67&amp;title=&amp;width=627" alt="image.png">，然后依然设置object<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663580194430-2ce6b6df-e95f-4aee-b331-f02d9b41155b.png#averageHue=%232a2828&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=335&amp;id=u8dbc32c0&amp;originHeight=335&amp;originWidth=949&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=68356&amp;status=done&amp;style=none&amp;taskId=u40d4ec96-935f-4ee7-a403-901ca52732e&amp;title=&amp;width=949" alt="image.png">最后显示效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663580016690-683c5e19-1611-4294-b412-b63695cb6388.png#averageHue=%23252323&amp;clientId=u82361329-ec78-4&amp;from=paste&amp;height=311&amp;id=uuGog&amp;originHeight=311&amp;originWidth=968&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14527&amp;status=done&amp;style=none&amp;taskId=u7e1dd347-d2e7-4f97-8e51-fc1d554220c&amp;title=&amp;width=968" alt="image.png"></p><h1>官方教育直播</h1><p>官方教育直播链接：<a href="https://www.bilibili.com/video/BV1Kg411M7o3?spm_id_from=333.880.my_history.page.click&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1Kg411M7o3?spm_id_from=333.880.my_history.page.click&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a></p><h2 id="初始设置：">初始设置：</h2><p>需要打开的插件：这个插件包含了制作UE工具所需要的函数。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661911833222-fb075e80-c9cc-43a2-8514-2e13e2a3da77.png#averageHue=%233f3c3c&amp;clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=183&amp;id=u58dbd09f&amp;originHeight=183&amp;originWidth=830&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19675&amp;status=error&amp;style=none&amp;taskId=ue1fd311f-f772-416c-9a4b-4facd10386b&amp;title=&amp;width=830" alt="image.png"></p><h2 id="批量设置资产的LOD">批量设置资产的LOD</h2><h3 id="工具蓝图的制作">工具蓝图的制作</h3><p>虽然是制作这个功能的工具蓝图，但是其实ue官方有自带的方法可以设置，可以通过这个来批量设置LOD<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635070283740-8ae8d579-81c3-4672-87d2-da6cfcda9a19.png?x-oss-process=image%2Fresize%2Cw_458%2Climit_0#averageHue=%233e3a33&amp;from=url&amp;id=imwbV&amp;originHeight=395&amp;originWidth=458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661912602844-2a7618f6-6860-4175-9320-b8c4c197416e.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=264&amp;id=ucfae7bad&amp;originHeight=264&amp;originWidth=365&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22929&amp;status=error&amp;style=none&amp;taskId=u671b5b41-ce14-4f57-9113-dd712bf81dd&amp;title=&amp;width=365" alt="image.png">右键创建工具蓝图<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661913305895-a9544bb7-7604-445a-82c8-9a37a2fb0f71.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=461&amp;id=u25184aa4&amp;originHeight=461&amp;originWidth=544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54357&amp;status=error&amp;style=none&amp;taskId=ube79177a-5988-456d-ba08-4ff9b6ae623&amp;title=&amp;width=544" alt="image.png">Acotor是关卡中的所有物体，Asset是内容管理器（资产）中的所有物体。</p><p>蓝图介绍：其中setlods是一个函数，逻辑：获得选中的资产，遍历这些资产，指向资产的staticmesh，设置资产的Lod，设置lod的细节由结构体指定。   蓝图链接中的这个红线（布尔值）连接以后可以在调用工具蓝图时询问是否勾选（是否根据屏幕大小自动设置LOD距离）。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940223846-8f7823ad-d1b2-4d47-9cf8-cc4cd6326f3b.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=624&amp;id=u3358132b&amp;originHeight=624&amp;originWidth=1539&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=213407&amp;status=error&amp;style=none&amp;taskId=u4dad998c-9ae4-4a54-94c8-a8deb1c4ab8&amp;title=&amp;width=1539" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661941175787-13dada01-a24d-498c-8cb9-d53a3a0c796a.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=234&amp;id=uca55f7a7&amp;originHeight=234&amp;originWidth=410&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30892&amp;status=error&amp;style=none&amp;taskId=u5869f8a1-b4cf-4199-a898-51ba276ffe2&amp;title=&amp;width=410" alt="image.png"></p><h3 id="创建好后的使用方法：">创建好后的使用方法：</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940452299-ed118ce1-5822-4451-a4be-518ae9be1e9e.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=425&amp;id=uaa91e175&amp;originHeight=425&amp;originWidth=708&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=285822&amp;status=error&amp;style=none&amp;taskId=u7601f935-c485-432a-b9e4-18804b6f693&amp;title=&amp;width=708" alt="image.png"></p><h3 id="设置工具蓝图中的函数针对的类型">设置工具蓝图中的函数针对的类型</h3><p>例如这里我们只需要设置staticmesh类型的LOD，不是staticmesh类型的就不需要显示这个工具，因此我们可以重载函数来达到这个目的：<br>选择函数，override<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940652571-a291adb9-22eb-4dc3-bde2-e0bf2e13f047.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=132&amp;id=u80fa3ce5&amp;originHeight=132&amp;originWidth=661&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25489&amp;status=error&amp;style=none&amp;taskId=u2fb60fdc-7e58-47a9-8eec-314daba2ad6&amp;title=&amp;width=661" alt="image.png"><br>设置返回类型为staticmesh<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940697865-5a4b48c0-85d9-419c-a693-1c81d8ae9f01.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=471&amp;id=ue1af49e2&amp;originHeight=471&amp;originWidth=1016&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80279&amp;status=error&amp;style=none&amp;taskId=u7b040ff4-5c8d-415a-9bcb-d8274266ffd&amp;title=&amp;width=1016" alt="image.png"></p><h2 id="随机设置关卡中选中物体的缩放和旋转">随机设置关卡中选中物体的缩放和旋转</h2><h3 id="带UI控件的工具蓝图">带UI控件的工具蓝图</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940800911-5edc3fec-220b-414d-8a44-9fd7e2a44d5a.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=313&amp;id=u77679664&amp;originHeight=313&amp;originWidth=725&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58489&amp;status=error&amp;style=none&amp;taskId=u77ec5849-92a2-4160-9c59-1e10643e2fc&amp;title=&amp;width=725" alt="image.png"><br>设计好UI以后前往图表<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940829480-23cc7ab3-e4b8-40b1-b1ae-53eff5d92585.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=875&amp;id=u4c452c32&amp;originHeight=875&amp;originWidth=3440&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=193890&amp;status=error&amp;style=none&amp;taskId=u55fdec6b-a2aa-4e8e-b5ea-1294818191e&amp;title=&amp;width=3440" alt="image.png"></p><p>通过选择UI生成对应事件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940876656-bf79896f-0062-42a4-93c3-03469a5ac474.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=821&amp;id=u20c984c7&amp;originHeight=821&amp;originWidth=608&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54983&amp;status=error&amp;style=none&amp;taskId=u4ca80c03-7654-483f-9e13-4072a2453ec&amp;title=&amp;width=608" alt="image.png"></p><p>其中transact 的作用是使蓝图的操作可以撤回，这里就是当点击按钮时开始记录事件，每经过一次循环记录一次，最后循环完毕之后结束记录，然后就可以一键撤销这些记录的事件了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661940907849-ad57c55e-0854-4b80-9eec-5693ee79f848.png#clientId=ue7509f0e-1736-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=1201&amp;id=u266ca0a2&amp;originHeight=1201&amp;originWidth=2077&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=364072&amp;status=error&amp;style=none&amp;taskId=u5eb5b0d0-8d20-42ad-8213-098cadc038b&amp;title=&amp;width=2077" alt="image.png"></p><h1>沿样条生成网格体</h1><p>蓝图名字：BP_SplineLayoutTool<br>构造函数：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662354387305-a1cc6f8b-f3df-4cd1-9fe1-47a19a315e78.png#clientId=ub167d71c-7bdb-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=731&amp;id=u2fbfecc1&amp;originHeight=731&amp;originWidth=4283&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=415024&amp;status=error&amp;style=none&amp;taskId=ub33dce84-8110-4082-af4d-54ef422a5b5&amp;title=&amp;width=4283" alt="image.png"><br>自定义函数：LoacationAtIndex<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662354434038-51adf46a-b7ee-4105-8648-2912fee03ea2.png#clientId=ub167d71c-7bdb-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=431&amp;id=u6569d9dc&amp;originHeight=431&amp;originWidth=1413&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=94131&amp;status=error&amp;style=none&amp;taskId=u343d5834-5cd6-4f47-a172-cbde9f37d23&amp;title=&amp;width=1413" alt="image.png"><br>因为自定义函数不会改变关于蓝图的任何东西也不会调用其他函数，因此选择函数勾选Pure将函数设置为纯函数。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662354468655-8b368362-3dad-47c3-a133-9df4a1431cb3.png#clientId=ub167d71c-7bdb-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=245&amp;id=fXfeU&amp;originHeight=245&amp;originWidth=579&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14991&amp;status=error&amp;style=none&amp;taskId=u5dbe9501-5b06-40d3-be10-abea6ca4ee3&amp;title=&amp;width=579" alt="image.png"></p><h1>将选择的物体沿坐标轴复制粘贴</h1><p>注意：这个工具只针对蓝图类型的，不支持staticMeshActor<br>一个小知识点：宏和函数的区别是宏可以有多个输出执行引脚<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662539901115-da92c353-8786-43d5-bea3-45152277067e.png#clientId=u9c96ba5d-7280-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=314&amp;id=uedff2ff7&amp;originHeight=314&amp;originWidth=402&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25028&amp;status=error&amp;style=none&amp;taskId=u0f7b091b-cd4d-475e-8fe9-178071b46dc&amp;title=&amp;width=402" alt="image.png"><br>事件图表：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662539915505-834516d2-8115-4bb3-9845-7129c4faa3b1.png#clientId=u9c96ba5d-7280-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=2050&amp;id=u1c0df55a&amp;originHeight=2050&amp;originWidth=1529&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=535266&amp;status=error&amp;style=none&amp;taskId=u9a8b82b5-1616-4317-bc97-35aaf0522af&amp;title=&amp;width=1529" alt="image.png"><br>宏：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662539928697-86058214-efe7-4f97-ac27-60d8ccf494cd.png#clientId=u9c96ba5d-7280-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=366&amp;id=ufb05fc5c&amp;originHeight=366&amp;originWidth=1016&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62645&amp;status=error&amp;style=none&amp;taskId=uca1554cc-feb8-4bff-9418-ec41f96acc7&amp;title=&amp;width=1016" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662539937636-bbc9b977-5ade-4733-978e-a58b7ed22971.png#clientId=u9c96ba5d-7280-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=400&amp;id=ub0918bfa&amp;originHeight=400&amp;originWidth=1096&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66514&amp;status=error&amp;style=none&amp;taskId=u0b1e7a96-bae5-4693-8466-a41362f3516&amp;title=&amp;width=1096" alt="image.png"><br>自定义函数：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662539946786-b48fd023-9d68-4574-90aa-8ac0f33bc803.png#clientId=u9c96ba5d-7280-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=606&amp;id=u98ff73f0&amp;originHeight=606&amp;originWidth=2804&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=289212&amp;status=error&amp;style=none&amp;taskId=ufc3aa8bd-53ca-49ff-916d-451b8c01e03&amp;title=&amp;width=2804" alt="image.png"></p><h2 id="将函数改为能够复制staticMeshActor">将函数改为能够复制staticMeshActor</h2><p>因为spawn actor from object 生成的actor是空的，除非object是蓝图类型的才可以，然后我改了一下使其能够复制生成staticMeshActor并且设置staticMeshComponent的内容了。<br>很简单，前面的不变就是改了下后面的，就是生成actor后使用staticMeshActor中的设置静态网格体和设置actor的缩放功能。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662714796161-6e086a23-a1fb-43ac-91da-e31175574dc3.png#clientId=u0dfe74d5-8808-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=646&amp;id=uf397176d&amp;originHeight=646&amp;originWidth=3635&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=417968&amp;status=error&amp;style=none&amp;taskId=udc323732-7e31-414c-83fa-9a3e03cb895&amp;title=&amp;width=3635" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UE蓝图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE开发总结</title>
      <link href="/2023/10/20/UE%E5%BC%80%E5%8F%91-UE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93-UE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/"/>
      <url>/2023/10/20/UE%E5%BC%80%E5%8F%91-UE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93-UE%E5%BC%80%E5%8F%91%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1>一些名词解释</h1><p>actor: level中的所有物体都可以称为actor<br>asset: contentBrowser中的所有物体都可以称为asset<br>assetName:     SM_Ramp<br>objectPath:    /Game/LevelPrototyping/Meshes/SM_Ramp.SM_Ramp<br>packageName:   /Game/LevelPrototyping/Meshes/SM_Ramp<br>packagePath:   /Game/LevelPrototyping/Meshes/<br>referencePath: /Script/Engine.StaticMesh’/Game/LevelPrototyping/Meshes/SM_Ramp.SM_Ramp’ (左边是Class,右边是objectPath)<br>property: 对象的属性名,pythonAPI的文档中凡是带有property提示的属性都可以直接通过obj.propertyName的形式来读取,不带的就只能通过get_editor_property方法来读了.<br>staticMesh对应的lod所对应的sections: sections是静态网格体对应的lod对应的网格体组成数量,因为静态网格体可能会是由多个网格组成的,因此有了sections这个名词.通常和id数相同.</p><h1>各个对象通用的方法</h1><p>get_calss: 得到对应类<br>get_name: 得到AssetName<br>get_editor_property: 提供属性名,得到编辑器上显示的属性值<br>get_path_name: 得到objectPath</p><h1>unreal自身的方法</h1><p>load_asset: 提供Asset的objectPath或者packageName,然后将得到对应Asset类型的对象.<br>get_editor_subsystem: 提供EditorActorSubsystem的引用(就像这样:unreal.EditorActorSubsystem),然后就能得到EditorActorSubsystem的对象.<br>log:将给定的参数作为信息记录在LogPython类别中<br>log_error:将给定的参数记录为LogPython类别中的错误<br>log_warning: 将给定的参数作为警告记录在LogPython类别中</p><h1>没有模块</h1><p>ScopedSlowTask: 用于制作进度条.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line">totalFrames = <span class="number">1000000</span></span><br><span class="line">textDisplay = <span class="string">&quot;i love python, an i guess i&#x27;ll be using this for a while!&quot;</span></span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(totalFrames, textDisplay) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(totalFrames):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.log(<span class="string">&quot;one step!!!!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1>ToolMenus模块</h1><h2 id="ToolMenus">ToolMenus</h2><p>get: 得到ToolMenus类型的对象</p><h1>CoreUObject模块</h1><h2 id="AssetData">AssetData</h2><p><strong>属性:</strong><br>asset_class: assetData对象所对应的类名,举例:StaticMesh(已知UE5.3已经弃用)<br>asset_class_path: 返回的类型为TopLevelAssetPath,这个类型有一个asset_name属性可以得到类名(作为asset_class的替代)</p><p><strong>方法:</strong><br>get_asset: 得到assetData对应的Asset对象</p><h1>Engine模块</h1><h2 id="StaticMeshActor">StaticMeshActor</h2><p><strong>属性:</strong><br>static_mesh_component: 得到staticMesh组件,类型为StaticMeshComponent</p><h2 id="StaticMeshComponent">StaticMeshComponent</h2><p><strong>属性:</strong><br>static_mesh 得到静态网格体对象,类型为StaticMesh</p><p><strong>方法:</strong><br>get_num_materials: 得到材质的数量(这个方法是PrimitiveComponent的方法,但是StaticMeshComponent继承自它,因此可以使用)<br>set_material: 设置材质,需要提供序号(int)和材质实例的对象(MaterialInterface),这个方法同样是PrimitiveComponent的方法</p><h2 id="StaticMesh">StaticMesh</h2><p><strong>属性:</strong><br>asset_import_data: 导入网格体时的数据和选项,返回对象类型为AssetImportData<br>lod_group: 网格体的lod组,返回类型为Name</p><p><strong>方法:</strong><br>get_num_lods: 得到静态网个体的lod数量,返回类型为int<br>get_num_sections: 提供lod序号(int值),得到网格体对应lod的对应分段数,分段数是指网格对应lod对应的</p><h2 id="AssetImportData">AssetImportData</h2><p><strong>属性:</strong><br>extract_filenames: 得到资产导入时的路径,类型为字符串数组</p><p><strong>方法:</strong><br>get_export_text_name: 提供packageName得到其所对应的referencePath<br>get_asset: 得到assetData对应的asset对象</p><h1>EditorScriptingUtilities模块</h1><h2 id="EditorAssetLibrary">EditorAssetLibrary</h2><blockquote><p>此类提供针对内容浏览器的资产的相关方法</p></blockquote><p><strong>方法:</strong><br>list_assets: 提供文件夹路径然后得到文件夹路径下的所有objectPath<br>find_asset_data: 接收资产路径得到assetData(这个资产路径需要是packageName而不是objectPath)<br>duplicate_directory:接收两个packagePath,将第一个文件夹复制一份来得到第二个文件夹<br>delete_directory: 接收一个packagePath,删除文件夹<br>rename_directory: 接收两个packagePath,重命名文件夹<br>duplicate_asset: 接收两个packageName,将第一个Asset复制一份来得到第二个Asset<br>delete_asset: 接收一个packageName,删除对应asset<br>does_asset_exist: 接收一个packageName,检测对应Asset是否存在,返回布尔值<br>rename_asset: 接收两个packageName,重命名Asset<br>save_loaded_asset: 接收一个asset对象,用于保存<br>find_package_referencers_for_asset: 提供一个asset的packageName,然后得到其引用项的packageName的数组</p><h2 id="EditorLevelLibrary">EditorLevelLibrary</h2><blockquote><p>此模块在4.27中可以使用,但是在UE5以后将要废弃,改用EditorActorSubsystem</p></blockquote><p><strong>方法:</strong><br>get_all_level_actors : 获取关卡中的所有Actor<br>spawn_actor_from_object: 生成一个Actor到关卡中,需要提供Object,Vector,Rotator.</p><h1>MaterialEditor模块</h1><h2 id="MaterialEditingLibrary">MaterialEditingLibrary</h2><p>set_material_instance_texture_parameter_value:设置材质实例的贴图纹理参数,需提供MaterialInstanceConstant类型的材质实例,Name类型的材质参数的名字,Texture类型的值.<strong>注意:通过代码设置参数不能够在编辑器中实时看到,需要关闭编辑器然后打开才行.</strong><br>set_material_instance_static_switch_parameter_value: 设置材质实例的贴图纹理参数是否启用,需提供MaterialInstanceConstant类型的材质实例,Name类型的材质参数的名字,Texture类型的值.</p><h1>Blutility模块</h1><h2 id="EditorUtilityLibrary">EditorUtilityLibrary</h2><blockquote><p>此类提供针对内容浏览器的相关方法</p></blockquote><p><strong>方法:</strong><br>get_selected_assets: 得到内容浏览器种所选择的资产</p><h1>UnrealEd模块</h1><h2 id="EditorActorSubsystem">EditorActorSubsystem</h2><blockquote><p>此类提供针对关卡中的Actor的方法,在UE5.3中更改了得到EditorActorSubsystem对象的方法,需要通过unreal.get_editor_subsystem(unreal.EditorActorSubsystem)来得到<br>举例:<br>EAS = unreal.get_editor_subsystem(unreal.EditorActorSubsystem)<br>all_actors = EAS.get_all_level_actors()</p></blockquote><p><strong>方法:</strong><br>get_all_level_actors: 获取关卡中的所有Actor</p><h2 id="AssetImportTask">AssetImportTask</h2><blockquote><p>资产导入的任务,包含了资产导入时的相关数据设置,<strong>只有属性,没有方法</strong></p></blockquote><p><strong>属性:</strong><br>automated: 布尔类型,设置为True时,不会弹出对话框<br>destination_name: 字符串类型,用来定义资产导入时的名称,当为空字符串时导入的资产以文件名称命名<br>destination_path: 字符串类型,用于设置导入的资产在引擎中的路径<br>filename: 字符串类型,导入的资产在本地硬盘上的的<strong>路径</strong><br>replace_existing: 布尔类型,导入的资产是否强制覆盖引擎已有资产<br>save: 布尔类型,导入资产后是否自动保存<br>imported_object_paths: 字符串数组类型,导入后的路径</p><h2 id="FbxImportUI">FbxImportUI</h2><p><strong>属性:</strong><br>import_mesh: 布尔类型,是否导入mesh<br>import_textures : 布尔类型,是否导入贴图<br>import_materials: 布尔类型,如果没有找到对应的相关材质,是否自动创建材质球<br>import_as_skeletal: 布尔类型,是否将FBX作为骨架对象导入<br>import_animations: 布尔类型,是否导入动画<br>static_mesh_import_data:  FbxStaticMeshImportData类型,导入静态网格体时使用的数据<br>skeletal_mesh_import_data: FbxSkeletalMeshImportData类型,导入骨架网格体时使用的数据<br>anim_sequence_import_data: FbxAnimSequenceImportData类型,导入动画时使用的数据<br>skeleton: Skeleton类型,导入动画时,需要指定骨架</p><h2 id="FbxStaticMeshImportData">FbxStaticMeshImportData</h2><p><strong>属性:</strong><br>import_translation: Vector类型,导入时的位移<br>import_rotation: Rotator类型,导入时的旋转<br>import_uniform_scale: float类型,导入时的统一缩放值<br>combine_meshes: 布尔类型,导入时是否将多个mesh合并成一个mesh<br>generate_lightmap_u_vs: 布尔类型,是否生成用于光照贴图的UV<br>auto_generate_collision: 布尔类型,是否自动生成碰撞</p><h2 id="FbxSkeletalMeshImportData">FbxSkeletalMeshImportData</h2><p><strong>属性:</strong><br>import_translation: Vector类型,导入时的位移<br>import_rotation: Rotator类型,导入时的旋转<br>import_uniform_scale: float类型,导入时的统一缩放值<br>import_morph_targets: 布尔类型,是否导入变形目标(blendshape)<br>update_skeleton_reference_pose: 布尔类型,是否导入的时候更新骨架参考姿势</p><h2 id="anim-sequence-import-data">anim_sequence_import_data</h2><p><strong>属性:</strong><br>import_translation: Vector类型,导入时的位移<br>import_rotation: Rotator类型,导入时的旋转<br>import_uniform_scale: float类型,导入时的统一缩放值<br>animation_length: FBXAnimationLengthImportType类型,导入动画的长度,有FBXALIT_ANIMATED_KEY,FBXALIT_EXPORTED_TIME,FBXALIT_SET_RANGE三种长度类型,具体见:<a href="https://docs.unrealengine.com/5.3/en-US/PythonAPI/class/FBXAnimationLengthImportType.html#unreal.FBXAnimationLengthImportType">FBXAnimationLengthImportType</a><br>remove_redundant_keys: 布尔类型,是否删除冗余帧</p><h2 id="MaterialFactoryNew">MaterialFactoryNew</h2><p>用于创建一个用于Material工厂对象,用在assetTool的createAsset上面</p><h2 id="WorldFactory">WorldFactory</h2><p>用于创建一个World工厂对象,用在assetTool的createAsset上面</p><h2 id="ParticleSystemFactoryNew">ParticleSystemFactoryNew</h2><p>用于创建一个Particle System工厂对象,用在assetTool的createAsset上面</p><h2 id="BlueprintFactory">BlueprintFactory</h2><p>用于创建一个Blueprint工厂对象,用在assetTool的createAsset上面</p><h2 id="MaterialInstanceConstantFactoryNew">MaterialInstanceConstantFactoryNew</h2><p>用于创建一个材质实例工厂对象</p><h1>ProceduralMeshComponent模块</h1><h2 id="ProceduralMeshLibrary">ProceduralMeshLibrary</h2><p><strong>方法:</strong><br>get_section_from_static_mesh: 提供StaticMesh对象,lod索引,section索引得到对应的section的几何数据(vertices,triangles,normals,u_vs,tangents).</p><h1>AssetTools模块</h1><h2 id="AssetToolsHelpers">AssetToolsHelpers</h2><blockquote><p>只有一个作用,就是通过get_asset_tools方法得到AssetTools</p></blockquote><p>get_asset_tools: 得到AssetTools类型对象</p><h2 id="AssetTools">AssetTools</h2><blockquote><p>AssetTools模块提供了针对Asset的一些功能,例如导入,导出,创建,复制,打开</p></blockquote><p><strong>方法:</strong><br>import_asset_tasks: 根据提供的AssetImportTask类型的对象的数组,进行导入资产操作.<br>duplicate_asset_with_dialog: 复制资产并带有对话框,提供三个参数,第一个是新复制出来的资产的AssetName,第二个是新复制出来的资产的PackageName,第三个是源资产的<strong>object</strong>,可以通过unreal.load_asset来得到对应Asset对象.<br>duplicate_asset: 复制资产但不带有对话框,参数跟duplicate_asset_with_dialog相同<br>rename_assets_with_dialog: 提供AssetRenameData类型的数据,批量对AssetRenameData中的数据进行重命名.<br>rename_assets: 不显示对话框的情况下重命名一组资产,与rename_assets_with_dialog使用方法相同<br>open_editor_for_assets: 提供Asset对象,从编辑器中打开对应资产<br>create_asset: 提供asset_name,package_path,asset_class,factory,创建Asset</p><h2 id="AssetRenameData">AssetRenameData</h2><p>在使用AssetTools类中的rename_assets_with_dialog与rename_assets时需要.<br>通过unreal.AssetRenameData(source_object,new_package_path,new_asset_name)来创建一个AssetRenameData对象.<br>source_object为原资产的对象,new_package_path为新资产的文件夹路径,new_asset_name为新资产的名字.</p><h1>LevelSequenceEditor模块</h1><h2 id="LevelSequenceFactoryNew">LevelSequenceFactoryNew</h2><p>用于创建一个用于ULevelSequence的工厂对象,用在assetTool的createAsset上面</p><h1>Paper2DEditor模块</h1><h2 id="PaperFlipbookFactory">PaperFlipbookFactory</h2><p>用于创建flipbooks的工厂对象,用在assetTool的createAsset上面</p>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UE开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maya后台执行脚本</title>
      <link href="/2023/10/09/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-Maya%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/"/>
      <url>/2023/10/09/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-Maya%E5%90%8E%E5%8F%B0%E6%89%A7%E8%A1%8C%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1>不带界面的后台执行脚本方法</h1><p>这里提供一下后台执行python脚本的脚本模板<br>使用方法:</p><ol><li>将想要对maya后台执行的操作的命令写到模板文件的 # TODO:function content下面</li><li>win+r然后输入cmd打开命令行窗口</li><li>找到maya程序文件夹下的mayapy.exe文件,拖入到命令行窗口</li><li>打个空格,将后台执行的python脚本拖入到命令行窗口</li><li>因为模板里有通过sys.argv[1]来得到参数,模板的main函数中想要得到的参数是存放maya文件的文件夹路径,因此打个空格让后把文件夹拖入到命令行窗口中</li><li>按下回车,就可以遍历文件夹下的所有maya文件,然后执行你写的操作命令.</li><li>成功打开maya的列表信息会放到存放maya文件夹下的successful_open_files.json中,没有后台打开的maya文件信息会放到unsuccessful_open_files.json中.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> maya.standalone</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">maya.standalone.initialize()</span><br><span class="line"></span><br><span class="line">logging.basicConfig(<span class="built_in">format</span>=<span class="string">&quot;%(asctime)s %(levelname)-8s %(message)s&quot;</span>,</span><br><span class="line">                    level=logging.WARNING, datefmt=<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">maya_file_dir_path</span>):</span><br><span class="line">    <span class="comment"># create json file.</span></span><br><span class="line">    successful_json_info = &#123;&#125;</span><br><span class="line">    unsuccessful_json_info = &#123;&#125;</span><br><span class="line">    successful_json_path = os.path.join(maya_file_dir_path,<span class="string">&quot;successful_open_files.json&quot;</span>).replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    unsuccessful_json_path = os.path.join(maya_file_dir_path,<span class="string">&quot;unsuccessful_open_files.json&quot;</span>).replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">    load_successful_files = []</span><br><span class="line">    load_unsuccessful_files = []</span><br><span class="line">    <span class="comment"># get maya file path list.</span></span><br><span class="line">    maya_file_path_list = []</span><br><span class="line">    maya_file_name_list = os.listdir(maya_file_dir_path)</span><br><span class="line">    <span class="keyword">if</span> maya_file_name_list:</span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> maya_file_name_list:</span><br><span class="line">            <span class="keyword">if</span> file_name.endswith(<span class="string">&quot;.ma&quot;</span>):</span><br><span class="line">                maya_file_path = os.path.join(maya_file_dir_path,file_name).replace(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                maya_file_path_list.append(maya_file_path)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> maya_file_path <span class="keyword">in</span> maya_file_path_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmds.file(maya_file_path, <span class="built_in">open</span>=<span class="literal">True</span>, pmt=<span class="literal">False</span>)</span><br><span class="line">            logging.info(<span class="string">&quot;load file:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(maya_file_path))</span><br><span class="line">            load_successful_files.append(maya_file_path)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            load_unsuccessful_files.append(maya_file_path)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># <span class="doctag">TODO:</span>function content</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    successful_json_info[<span class="string">&quot;load_file&quot;</span>] = load_successful_files</span><br><span class="line">    unsuccessful_json_info[<span class="string">&quot;unload_file&quot;</span>] = load_unsuccessful_files</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(successful_json_path,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(successful_json_info,f,indent=<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(unsuccessful_json_path,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        json.dump(unsuccessful_json_info,f,indent=<span class="number">4</span>)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># maya.standalone.uninitialize()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main(sys.argv[<span class="number">1</span>])</span><br></pre></td></tr></table></figure><hr><h1>带界面的后台执行脚本方法</h1><h2 id="需要注意的点">需要注意的点:</h2><ol><li>不能直接在脚本文件的顶部导入maya的模块(导入的其他模块中也不能包含maya的模块)</li><li>需要通过mayapy来执行窗口的建立，不然用其他解释器没有maya的模块</li><li>不能通过多线程的start功能来进行后台任务具体的步骤</li><li>通过窗口类来创建启动任务的子线程（可以用start），然后通过启动任务的子线程来执行后台操作（不可以用start，需要用run）</li><li>在用于启动后台操作的类中导入 maya.standalone 并执行 maya.standalone.initialize()</li><li>后台打开文件需要用pymel模块的openFile方法并且加上force=True，例如：pm.openFile(file_path,open=True,force=True)</li></ol><h2 id="大概步骤">大概步骤</h2><ol><li>先正常通过pyside2写窗口的代码.</li><li>当需要调用后台执行操作的时候,就通过多线程来进行.</li><li>所有东西写完以后可以将所用东西进行打包成程序即可使用了.</li></ol><h2 id="子线程的类的定义">子线程的类的定义:</h2><p>这里的import MainWork as mainWork 是自定义的执行后台操作内容的脚本模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">StartWork</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,path_item_dict,thread_lock</span>):</span><br><span class="line">        threading.Thread.__init__(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.path_item_dict = path_item_dict</span><br><span class="line">        <span class="variable language_">self</span>.thread_lock = thread_lock</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.thread_lock.acquire()</span><br><span class="line">        <span class="variable language_">self</span>.startWork()</span><br><span class="line">        <span class="variable language_">self</span>.thread_lock.release()</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startWork</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">import</span> maya.standalone</span><br><span class="line">        maya.standalone.initialize()</span><br><span class="line">        <span class="keyword">import</span> MainWork <span class="keyword">as</span> mainWork</span><br><span class="line">        <span class="keyword">for</span> path,item <span class="keyword">in</span> <span class="variable language_">self</span>.path_item_dict.items():</span><br><span class="line">            thread_lock = threading.Lock()</span><br><span class="line">            work_thread = mainWork.MainWork(path,thread_lock,item,my_signals)</span><br><span class="line">            work_thread.run()</span><br></pre></td></tr></table></figure><h2 id="调用子线程">调用子线程</h2><p>这里的StartWork就是刚才定义的线程类</p><p>thread_lock = threading.Lock()<br>work_th = StartWork(path_item_dict, thread_lock)<br>work_th.start()</p>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyside2的一些归纳</title>
      <link href="/2023/10/07/PySide2-PySide2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BD%92%E7%BA%B3/"/>
      <url>/2023/10/07/PySide2-PySide2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BD%92%E7%BA%B3/</url>
      
        <content type="html"><![CDATA[<h1>各种文件对话框</h1><p><strong>选择文件:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_name,filetype = QFileDialog.getOpenFileName(<span class="variable language_">self</span>,<span class="string">&quot;这里是对话框的标题&quot;</span>,<span class="string">&quot;这里文件对话框的起始路径&quot;</span>,<span class="string">&quot;所有文件(*);;文本文件(*.txt);;maya文件(*.ma)&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> file_name:</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>选择多个文件:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">files,filetype = QFileDialog.getOpenFileNames(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框起始路径&quot;</span>,<span class="string">&quot;所有文件(*);;文本文件(*.txt);;maya文件(*.ma)&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(files) == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>保存文件:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file_name,filetype = QFileDialog.getSaveFileName(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框起始路径&quot;</span>,<span class="string">&quot;所有文件(*);;文本文件(*.txt);;maya文件(*.ma)&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> file_name:</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><p><strong>选择文件夹:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">folder_name = QFileDialog.getExistingDirectory(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框起始路径&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> folder_name:</span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure><hr><h1>各种信息对话框</h1><p><strong>提示对话框:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">reply = QMessageBox.infomation(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框内容&quot;</span>,QMessageBox.Ok | QMessageBox.Close, QMessageBox.Close)</span><br><span class="line"><span class="keyword">if</span> reply == QMessageBox.Ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选择了Ok&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;选择了Close&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>询问对话框:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reply = QMessageBox.question(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框内容&quot;</span>,QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel, QMessageBox.No)</span><br></pre></td></tr></table></figure><p><strong>警告对话框:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reply = QMessageBox.warning(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框内容&quot;</span>,QMessageBox.Save | QMessageBox.Discard | QMessageBox.Cancel, QMessageBox.Save)</span><br></pre></td></tr></table></figure><p><strong>错误对话框:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reply = QMessageBox.critical(<span class="variable language_">self</span>,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框内容&quot;</span>,QMessageBox.Retry | QMessageBox.About | QMessageBox.Ignore, QMessageBox.Retry)</span><br></pre></td></tr></table></figure><p><strong>自定义对话框</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">message_box = QMessageBox(QMessageBox.NoIcon,<span class="string">&quot;对话框标题&quot;</span>,<span class="string">&quot;对话框内容&quot;</span>)</span><br><span class="line">message_box.setIconPixmap(QPixmap(<span class="string">&quot;这里填图片路径&quot;</span>))</span><br><span class="line">save_btn = message_box.addButton(<span class="string">&quot;保存&quot;</span>,QMessageBox.AcceptRole)</span><br><span class="line">cancel_btn = message_box.addButton(<span class="string">&quot;取消&quot;</span>,QMessageBox.RejectRole)</span><br><span class="line">no_save_btn = message_box.addButton(<span class="string">&quot;不保存&quot;</span>,QMessageBox.DestructiveRole)</span><br><span class="line">cb = QCheckBox(<span class="string">&quot;自定义的控件&quot;</span>)</span><br><span class="line">message_box.setCheckBox(cb)</span><br><span class="line">message_box.setDetailedText(<span class="string">&#x27;通过点击ShowDetails按钮可以展开的详细信息&#x27;</span>)</span><br><span class="line">reply = message_box.<span class="built_in">exec</span>()</span><br></pre></td></tr></table></figure><hr><h1>添加分割线</h1><p><img src="/2023/10/07/PySide2-PySide2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BD%92%E7%BA%B3/image.png" alt="Alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">self</span>.line1 = QFrame()</span><br><span class="line"><span class="variable language_">self</span>.line1.setFrameShape(QFrame.HLine) <span class="comment"># 横线，竖线是QFrame.VLine</span></span><br><span class="line"><span class="variable language_">self</span>.line1.setFrameShadow(QFrame.Sunken) <span class="comment"># 设置阴影</span></span><br></pre></td></tr></table></figure><hr><h1>添加GroupBox(将不同模块区分开)</h1><p><img src="/2023/10/07/PySide2-PySide2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BD%92%E7%BA%B3/image-1.png" alt="Alt text"></p><hr><h1>设置ListWidget的选择模式</h1><p>单选模式：setSelectionMode(QAbstractItemView.SingleSelection)<br>多选模式：setSelectionMode(QAbstractItemView.ExtendedSelection)</p><h1>给QListWidget的item添加自定义右键上下文菜单并支持往里面拖入文件添加item的例子</h1><p>代码解析:</p><ol><li>self.customContextMenuRequested.connect(self.show_context_menu)定义了item右键时显示的上下文菜单,在调用show_context_menu方法时会自动传入一个参数,这个参数是item的位置信息,因此就可以通过这个位置信息定义上下文菜单的位置</li><li>set_drop_enabled,dragEnterEvent,dragMoveEvent,dropEvent通过重写父类的方法来支持拖拽,并设置了拖入时执行的方法,其中dragMoveEvent函数内容虽然是pass,但是不能够不写,不然不行.</li><li>show_error_log函数之所以这样写,是因为我在使用item的同时我会通过item的setData的方法来对item写数据,其中error_role = Qt.UserRole + 1中的Qt.UserRole可以理解为Qt提供的一个固定的数值,它是一个整数值,方便用在使用item的setData方法时将数据放到item的哪个地方,因为放入item的数据不一定就放一个,可能会放很多个.因此我这里就以Qt.UserRole + 1当作起始点,然后通过while循环找到item对应的所有数据,有了数据以后就可以显示出来数据内容了.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DropListWidget</span>(<span class="title class_ inherited__">QListWidget</span>):</span><br><span class="line">    WIDGET_ITEMS = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(DropListWidget, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line">        <span class="variable language_">self</span>.customContextMenuRequested.connect(<span class="variable language_">self</span>.show_context_menu)        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_drop_enabled</span>(<span class="params">self, enabled</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setAcceptDrops(enabled)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dragEnterEvent</span>(<span class="params">self, drag_event</span>):</span><br><span class="line"></span><br><span class="line">        mime_data = drag_event.mimeData()</span><br><span class="line">        <span class="keyword">if</span> mime_data.hasText() <span class="keyword">or</span> mime_data.hasUrls():</span><br><span class="line">            drag_event.acceptProposedAction()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dragMoveEvent</span>(<span class="params">self, drag_event</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dropEvent</span>(<span class="params">self, drop_event</span>):</span><br><span class="line">        mime_data = drop_event.mimeData()</span><br><span class="line">        urls = mime_data.urls()</span><br><span class="line">        paths = [url.toLocalFile() <span class="keyword">for</span> url <span class="keyword">in</span> urls <span class="keyword">if</span> (url.toLocalFile().endswith(<span class="string">&quot;.ma&quot;</span>) <span class="keyword">or</span> os.path.isdir(url.toLocalFile()))]</span><br><span class="line">        paths.sort()</span><br><span class="line">        icon = QIcon(os.path.join(SCRIPT_DIR,<span class="string">&quot;icons&quot;</span>,<span class="string">&quot;add.png&quot;</span>))</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> paths:</span><br><span class="line">            item = QListWidgetItem(icon,path)</span><br><span class="line">            <span class="variable language_">self</span>.addItem(item)</span><br><span class="line">            <span class="variable language_">self</span>.WIDGET_ITEMS.append(item)</span><br><span class="line">        drop_event.acceptProposedAction()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, pos</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 让列表项能够右键显示菜单的内容 &quot;&quot;&quot;</span></span><br><span class="line">        selected_item = <span class="variable language_">self</span>.itemAt(pos)</span><br><span class="line">        <span class="keyword">if</span> selected_item:</span><br><span class="line">            load_location_action = QAction(<span class="string">u&quot;进入本地路径&quot;</span>,<span class="variable language_">self</span>)</span><br><span class="line">            load_location_action.triggered.connect(<span class="keyword">lambda</span>:<span class="variable language_">self</span>.enter_local_path(selected_item))</span><br><span class="line">            error_log_action = QAction(<span class="string">u&quot;列出检查错误原因&quot;</span>,<span class="variable language_">self</span>)</span><br><span class="line">            error_log_action.triggered.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.show_error_log(selected_item))</span><br><span class="line">            context_menu = QMenu()</span><br><span class="line">            context_menu.addAction(load_location_action)</span><br><span class="line">            context_menu.addSeparator()  <span class="comment"># 分割线</span></span><br><span class="line">            context_menu.addAction(error_log_action)</span><br><span class="line"></span><br><span class="line">            context_menu.exec_(<span class="variable language_">self</span>.mapToGlobal(pos))  <span class="comment"># 右键显示菜单</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_error_log</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 显示检查发现的错误项 &quot;&quot;&quot;</span></span><br><span class="line">        error_roles = []</span><br><span class="line">        error_role = Qt.UserRole + <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> error_role:</span><br><span class="line">            <span class="keyword">if</span> item.data(error_role):</span><br><span class="line">                error_roles.append(error_role)</span><br><span class="line">                error_role += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> error_roles:</span><br><span class="line">            error_logs = []</span><br><span class="line">            <span class="keyword">for</span> role <span class="keyword">in</span> error_roles:</span><br><span class="line">                error_logs.append(item.data(role))</span><br><span class="line">            message_box = QMessageBox(<span class="variable language_">self</span>)</span><br><span class="line">            message_box.setWindowTitle(<span class="string">u&#x27;错误项&#x27;</span>)</span><br><span class="line">            err_log = <span class="string">&quot;\n&quot;</span>.join(error_logs)</span><br><span class="line">            message_box.setText(err_log)</span><br><span class="line">            message_box.show()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enter_local_path</span>(<span class="params">self,item</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 如果item对应路径是文件夹就进入文件夹,如果是路径就进入路径对应的文件目录 &quot;&quot;&quot;</span></span><br><span class="line">        item_path = item.text()</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(item_path):</span><br><span class="line">            local_path = os.path.dirname(item_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            local_path = item_path</span><br><span class="line">        QDesktopServices.openUrl(QUrl.fromLocalFile(local_path))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PySide2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PySide2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MayaPy的一些补充(积累)</title>
      <link href="/2023/09/26/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-MayaPy%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85-%E7%A7%AF%E7%B4%AF/"/>
      <url>/2023/09/26/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-MayaPy%E7%9A%84%E4%B8%80%E4%BA%9B%E8%A1%A5%E5%85%85-%E7%A7%AF%E7%B4%AF/</url>
      
        <content type="html"><![CDATA[<h1>获得需要的内容</h1><h2 id="列举场景中的所有材质还有SG名称">列举场景中的所有材质还有SG名称</h2><p>mats = cmds.lsThroughFilter( ‘DefaultMaterialsAndShaderGlowFilter’, na=True, sort=‘byName’, reverse=True )<br>sgs = cmds.lsThroughFilter(‘DefaultShadingGroupsFilter’, na=True, sort=‘byName’, reverse=True )</p><h2 id="获取时间滑块的最大最小值">获取时间滑块的最大最小值</h2><p>max_time = cmds.playbackOptions(maxTime=True,q=True)<br>min_time = cmds.playbackOptions(minTime=True,q=True)</p><h2 id="查询当前场景的引用的资产的路径">查询当前场景的引用的资产的路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ref_node <span class="keyword">in</span> cmds.ls(<span class="built_in">type</span>=<span class="string">&quot;reference&quot;</span>):</span><br><span class="line">    <span class="keyword">try</span>:                                                         </span><br><span class="line">        ref_path = cmds.referenceQuery(ref_node, f=<span class="literal">True</span>, un=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:                                                      </span><br><span class="line">        ref_path = <span class="string">&#x27;&#x27;</span>                                            </span><br><span class="line">    <span class="keyword">if</span> ref_path:                                                 </span><br><span class="line">        <span class="built_in">print</span>(ref_path)</span><br></pre></td></tr></table></figure><h2 id="通过命令得到Maya的一些目录-应用程序目录-脚本目录-布局目录等">通过命令得到Maya的一些目录(应用程序目录,脚本目录,布局目录等)</h2><p>internalVar</p><h2 id="输出maya自带的所有png图片的名称">输出maya自带的所有png图片的名称</h2><p>for item in cmds.resourceManager(nameFilter=“*png”): print(item)<br>知道了png图片的名字以后就可以通过这两个语句设置控件的图片:<br>select_file_path_btn = QtWidgets.QPushButton()<br>select_file_path_btn.setIcon(QtGui.QIcon(‘:fileOpen.png’))</p><h2 id="得到当前使用的摄像机名字">得到当前使用的摄像机名字</h2><p>cmds.lookThru(q=True)</p><h2 id="得到当前maya文件使用的声音文件的名字与路径">得到当前maya文件使用的声音文件的名字与路径</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gPlayBackSlider = mel.<span class="built_in">eval</span>(<span class="string">&#x27;$tmpVar=$gPlayBackSlider&#x27;</span>)</span><br><span class="line">sound_name = cmds.timeControl(gPlayBackSlider, q=<span class="literal">True</span>, sound=<span class="literal">True</span>) <span class="comment"># 声音文件的名字</span></span><br><span class="line">sound_path = cmds.sound(sound, q=<span class="literal">True</span>, file=<span class="literal">True</span>) <span class="comment"># 声音文件的路径</span></span><br></pre></td></tr></table></figure><h2 id="得到maya插件的路径">得到maya插件的路径</h2><p>cmds.pluginInfo(“mtoa.mll”,path=True,q=True)</p><h2 id="得到userSetup-mel的路径">得到userSetup.mel的路径</h2><p>在mel里面运行 whatIs “userSetup.mel”</p><h2 id="列出场景中所有的灯光-包括arnold和redshift的灯光">列出场景中所有的灯光(包括arnold和redshift的灯光)</h2><p><strong>defaultNavigation这个命令也可以用来连接节点后面会有举例</strong><br>cmds.defaultNavigation(dtv=True,d=“defaultLightSet.dagSetMembers”)</p><h2 id="获取灯光链接的信息">获取灯光链接的信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">all_lighting_list = cmds.defaultNavigation(dtv=<span class="literal">True</span>, d=<span class="string">&quot;defaultLightSet.dagSetMembers&quot;</span>)</span><br><span class="line">cmds.editRenderLayerGlobals(currentRenderLayer=<span class="string">&#x27;defaultRenderLayer&#x27;</span>)</span><br><span class="line">link_dic = &#123;&#125;</span><br><span class="line">all_shapes = [s <span class="keyword">for</span> s <span class="keyword">in</span> cmds.ls(<span class="built_in">type</span>=<span class="string">&#x27;geometryShape&#x27;</span>, ni=<span class="number">1</span>) <span class="keyword">if</span></span><br><span class="line">             <span class="keyword">not</span> s <span class="keyword">in</span> all_lighting_list]</span><br><span class="line">use_lighting_list = []</span><br><span class="line"><span class="keyword">for</span> lgt <span class="keyword">in</span> all_lighting_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cmds.referenceQuery(lgt, rfn=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        use_lighting_list.append(lgt)</span><br><span class="line"><span class="keyword">for</span> lgt <span class="keyword">in</span> use_lighting_list:</span><br><span class="line">    light_link_shapes = cmds.lightlink(query=<span class="literal">True</span>, light=lgt, shp=<span class="number">1</span>, t=<span class="number">0</span>, <span class="built_in">set</span>=<span class="number">0</span>, h=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h2 id="得到所有非默认摄像机的摄像机名字">得到所有非默认摄像机的摄像机名字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cameras = cmds.ls(<span class="built_in">type</span>=(<span class="string">&#x27;camera&#x27;</span>), l=<span class="literal">True</span>)</span><br><span class="line">startup_cameras = [cam <span class="keyword">for</span> cam <span class="keyword">in</span> cameras <span class="keyword">if</span> cmds.camera(cmds.listRelatives(cam,p=<span class="literal">True</span>), startupCamera=<span class="literal">True</span>, q=<span class="literal">True</span>)]</span><br><span class="line">non_startup_cameras = [cmds.listRelatives(cam,p=<span class="literal">True</span>,f=<span class="literal">True</span>)[<span class="number">0</span>] <span class="keyword">for</span> cam <span class="keyword">in</span> <span class="built_in">list</span>(<span class="built_in">set</span>(cameras)-<span class="built_in">set</span>(startup_cameras))]</span><br></pre></td></tr></table></figure><hr><h1>maya渲染相关设置</h1><h2 id="设置场景的渲染摄像机">设置场景的渲染摄像机</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmds.setAttr(<span class="string">&#x27;perspShape.renderable&#x27;</span>,<span class="number">0</span>) <span class="comment"># 先将原来的渲染摄像机对应属性设置为0</span></span><br><span class="line">cmds.setAttr(<span class="string">&#x27;cameraShape1.renderable&#x27;</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="设置场景的渲染分辨率">设置场景的渲染分辨率</h2><p>cmds.setAttr(“defaultResolution.width”, 1920)<br>cmds.setAttr(“defaultResolution.height”, 1080)</p><h2 id="设置场景的渲染文件输出路径">设置场景的渲染文件输出路径</h2><p>cmds.setAttr(‘defaultRenderGlobals.imageFilePrefix’)</p><h2 id="设置redshift的aov">设置redshift的aov</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除所有AOVs</span></span><br><span class="line">all_aovs = cmds.ls(<span class="built_in">type</span>=<span class="string">&#x27;RedshiftAOV&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> aov <span class="keyword">in</span> all_aovs:</span><br><span class="line">    enabled = cmds.getAttr(<span class="string">&#x27;%s.enabled&#x27;</span> % aov)</span><br><span class="line">    <span class="keyword">if</span> enabled:</span><br><span class="line">        cmds.delete(aov)</span><br><span class="line"><span class="comment"># 新增AOV的过程：        </span></span><br><span class="line"><span class="comment">## 新增一个 Beauty 通道 </span></span><br><span class="line">mel.<span class="built_in">eval</span>(<span class="string">&#x27;redshiftCreateAov &quot;Beauty&quot;&#x27;</span>)</span><br><span class="line"><span class="comment">## 刷新Aov显示的列表</span></span><br><span class="line">mel.<span class="built_in">eval</span>(<span class="string">&quot;redshiftUpdateActiveAovList&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="列举材质编辑器中的节点的所有上游节点">列举材质编辑器中的节点的所有上游节点</h2><p>cmds.hyperShade(lun=‘lambert1’)</p><h2 id="切换渲染层">切换渲染层</h2><p>cmds.editRenderLayerGlobals(currentRenderLayer)</p><h2 id="得到渲染层下的所有对象">得到渲染层下的所有对象</h2><p>cmds.editRenderLayerMembers(render_layer,q=True,fn=True)</p><h2 id="得到渲染层的所有渲染属性覆盖">得到渲染层的所有渲染属性覆盖</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">overrides = cmds.listConnections(render_layer + <span class="string">&#x27;.adjustments&#x27;</span>,p=<span class="literal">True</span>, c=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> overrides:</span><br><span class="line">    attr_value = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(overrides), <span class="number">2</span>):</span><br><span class="line">        conn = overrides[i] <span class="comment"># returns &#x27;layer.adjustments[#].plug&#x27;</span></span><br><span class="line">        attr_name = overrides[i+<span class="number">1</span>]</span><br><span class="line">        override_index = conn.split(<span class="string">&#x27;]&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&#x27;[&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        override_value = cmds.getAttr(render_layer + <span class="string">&#x27;.adjustments[&#123;&#125;].value&#x27;</span>.<span class="built_in">format</span>(override_index))</span><br><span class="line">        attr_value.append([attr_name,override_value])      </span><br><span class="line">    render_layer_info_dic[render_layer][<span class="string">&quot;attrOverride&quot;</span>] = attr_value</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    render_layer_info_dic[render_layer][<span class="string">&quot;attrOverride&quot;</span>] = []</span><br></pre></td></tr></table></figure><h2 id="设置当前渲染器的使用">设置当前渲染器的使用</h2><p>cmds.setAttr(“defalutRenderGlobals.currentRenderer”,“redshift”,typ=“string”)</p><hr><h1>Maya的节点操作</h1><h2 id="锁定和解锁节点">锁定和解锁节点</h2><p>lockNode</p><h2 id="清理场景中未使用的节点">清理场景中未使用的节点</h2><p>mel.eval(‘hyperShadePanelMenuCommand(“hyperShadePanel1”,“deleteUnusedNodes”);’)</p><h2 id="清理未知节点">清理未知节点</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">unknownNodes = cmds.ls(typ=<span class="string">&#x27;unknown&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> unknownNodes:</span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> unknownNodes:</span><br><span class="line">        <span class="keyword">if</span> cmds.objExists(node):</span><br><span class="line">            lockState = cmds.lockNode(node, q=<span class="literal">True</span>, l=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">if</span> lockState[<span class="number">0</span>] == <span class="number">1</span>:</span><br><span class="line">                cmds.lockNode(node, l=<span class="literal">False</span>)</span><br><span class="line">            cmds.delete(node)</span><br></pre></td></tr></table></figure><hr><h1>Maya材质编辑器中的相关操作</h1><h2 id="通过命令创建aiStandardSurface材质">通过命令创建aiStandardSurface材质</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line">aiStandardSurfaceMat = cmds.shadingNode(<span class="string">&#x27;aiStandardSurface&#x27;</span>, asShader=<span class="literal">True</span>)</span><br><span class="line">aiStandardSurfaceSG  = cmds.sets(renderable=<span class="literal">True</span>, noSurfaceShader=<span class="literal">True</span>, empty=<span class="literal">True</span>, name=aiStandardSurfaceMat + <span class="string">&quot;SG&quot;</span>)</span><br><span class="line">cmds.connectAttr(aiStandardSurfaceMat+<span class="string">&#x27;.outColor&#x27;</span>, aiStandardSurfaceSG+<span class="string">&#x27;.surfaceShader&#x27;</span> )</span><br></pre></td></tr></table></figure><h2 id="通过SG节点的名字找到它对应的材质名字">通过SG节点的名字找到它对应的材质名字</h2><p>mat = cmds.listConnections(sg节点的名字 + ‘.surfaceShader’)[0]</p><h2 id="通过材质名字找到它上游所有类型为file的节点">通过材质名字找到它上游所有类型为file的节点</h2><p>fileNodes = [x for x in cmds.hyperShade(lun=材质名字) if cmds.nodeType(x) == ‘file’]</p><h2 id="让maya判断节点类型并自动进行连接">让maya判断节点类型并自动进行连接</h2><p>例如创建两个节点,一个文件节点,一个纹理节点,让它们两个进行连接.以此来复现将图片拖入到材质编辑器的操作.<br>file_node = cmds.shadingNode(“file”,asTexture=True,isColorManaged=True)<br>tex_node = cmds.shadingNode(“place2dTexture”,asUtility=True)<br>cmds.defaultNavigation(connectToExisting=True, source=tex_node, destination=file_node)<br>通过使用这个命令就可以一个命令就将需要连接的属性连好.不需要一个个通过属性名字连接</p><hr><h1>Maya文件操作</h1><h2 id="abc缓存导入导出">abc缓存导入导出</h2><p>AbcImport与AbcExport，这两个命令无法在帮助文档中找到，但是可以在maya脚本编辑器中通过命令中的help方法来得到命令的帮助信息。</p><hr><h1>Maya模型相关</h1><h2 id="模型细分的命令">模型细分的命令</h2><p>这里的smthRes不是细分后的模型名字而是细分的命令节点，mesh_name是要细分的模型:<br>smthRes = cmds.polySmooth(mesh_name, mth=0, sdt=2, ovb=1, ofb=3, ofc=0, ost=0, ocr=0, dv=1, bnr=1, c=1, kb=1,<br>ksb=1, khe=0, kt=1, kmb=1, suv=1, peh=0, sl=1, dpe=1, ps=0.1, ro=1, ch=1)[0]</p><hr><h1>Maya本身的设置</h1><h2 id="接触引用的锁定">接触引用的锁定</h2><p>mel.eval(“referenceEdUnlockCB”)</p><h2 id="无法切换渲染层时使用的命令">无法切换渲染层时使用的命令</h2><p>mel.eval(“fixRenderLayerOutAdjustmentErrors”)</p><h2 id="设置maya的场景单位和轴向">设置maya的场景单位和轴向</h2><p>(<a href="https://blog.csdn.net/weixin_30908707/article/details/96321064">https://blog.csdn.net/weixin_30908707/article/details/96321064</a>)<br>cmds.currentUnit( linear=‘in’ )</p><hr><h1>其他代码编写相关</h1><h2 id="通过命令将一连串的命令执行只需要一次ctrl-z就可以全部返回到未进行命令过程的状态">通过命令将一连串的命令执行只需要一次ctrl+z就可以全部返回到未进行命令过程的状态</h2><p>cmds.undoInfo(ock=1, cn=‘test’)<br>执行的代码<br>cmds.undoInfo(cck=1, cn=‘test’)</p><h2 id="解决搜索不到当前文件路径的问题">解决搜索不到当前文件路径的问题</h2><p>有时候通过cmds.file(q=True,sn=True)得到的是个空的路径，为了解决这个问题可以通过这个命令替代：<br>cmds.file(query=True, l=True)[0]<br>但是这个命令也不是最优解,有遇到一使用这个命令就崩溃的情况所以获取文件路径推荐两个一起用:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">current_file_path = cmds.file(q=<span class="literal">True</span>,sn=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> current_file_path:</span><br><span class="line">    current_file_path = cmds.file(q=<span class="literal">True</span>,l=<span class="literal">True</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h2 id="确保加载对应的插件的命令">确保加载对应的插件的命令</h2><p>cmds.loadPlugin(“animImportExport.mll”, qt=True)</p><hr><h1>Maya界面UI相关命令</h1><h2 id="创建一个显示一段时间后消失的弹窗-方便用于提示信息">创建一个显示一段时间后消失的弹窗(方便用于提示信息)</h2><p>cmds.inViewMessage( amg=“不高亮的部分: <hl style="color: red;">” + “内容内容内容内容内容内容” +  “</hl>.”, pos=‘midCenter’, fade=True )</p><h2 id="通过menuItem的名字找到对应menu">通过menuItem的名字找到对应menu</h2><p>主要方法: cmds.menuItem(_menuItem, query=True,label=True)<br>也可以直接找menu的名字: cmds.menu(menu_name, query=True,label=True)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getParentMenu</span>(<span class="params">menuItemName</span>):</span><br><span class="line">    menuBars = cmds.lsUI(menus=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> _menu <span class="keyword">in</span> menuBars:</span><br><span class="line">        menuItemList = cmds.menu(_menu,query=<span class="literal">True</span>,itemArray=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> menuItemList:</span><br><span class="line">            <span class="keyword">for</span> _menuItem <span class="keyword">in</span> menuItemList: </span><br><span class="line">                <span class="keyword">if</span> menuItemName == cmds.menuItem(_menuItem, query=<span class="literal">True</span>,label=<span class="literal">True</span>):</span><br><span class="line">                    <span class="keyword">return</span> _menu</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"><span class="comment"># 通过Wireframe找到对应menu的名字</span></span><br><span class="line">shading_menu = getParentMenu(<span class="string">&quot;Wireframe&quot;</span>)</span><br><span class="line"><span class="comment"># 在menu下创建新的menuItem</span></span><br><span class="line">cmds.menuItem(parent=shading_menu,label=<span class="string">&#x27;my_menu&#x27;</span>)  </span><br></pre></td></tr></table></figure><h2 id="创建自定义菜单">创建自定义菜单</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> cmds.menu(<span class="string">&#x27;myMenu&#x27;</span>, exists=<span class="literal">True</span>):</span><br><span class="line">    cmds.deleteUI(<span class="string">&#x27;myMenu&#x27;</span>)</span><br><span class="line">my_menu = cmds.menu(<span class="string">&#x27;myMenu&#x27;</span>,parent=<span class="string">&quot;MayaWindow&quot;</span>,tearOff=<span class="literal">True</span>,label=<span class="string">&quot;MyCustomMenu&quot;</span>)</span><br><span class="line">cmds.menuItem(parent=my_menu,subMenu=<span class="literal">True</span>,label=<span class="string">&#x27;menu1&#x27;</span>)</span><br><span class="line">cmds.menuItem(label=<span class="string">&#x27;submenu1&#x27;</span>,command=<span class="string">&#x27;print(&quot;submenu1&quot;)&#x27;</span>)</span><br><span class="line">cmds.menuItem(label=<span class="string">&#x27;submenu2&#x27;</span>,command=<span class="string">&#x27;print(&quot;submenu2&quot;)&#x27;</span>)</span><br><span class="line">cmds.menuItem(parent=my_menu,label=<span class="string">&#x27;menu2&#x27;</span>)</span><br><span class="line">cmds.menuItem(parent=my_menu,subMenu=<span class="literal">True</span>,label=<span class="string">&#x27;menu3&#x27;</span>)</span><br><span class="line">cmds.menuItem(label=<span class="string">&#x27;submenu3&#x27;</span>,command=<span class="string">&#x27;print(&quot;submenu3&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="兼容maya低版本和高版本的UI一些设置">兼容maya低版本和高版本的UI一些设置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> sys.version_info.major &lt; <span class="number">3</span>:</span><br><span class="line">    maya_main_window = wrapInstance(long(omui.MQtUtil.mainWindow()), QtWidgets.QWidget)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    maya_main_window = wrapInstance(<span class="built_in">int</span>(omui.MQtUtil.mainWindow()), QtWidgets.QWidget)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEC++Plugin</title>
      <link href="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/"/>
      <url>/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/</url>
      
        <content type="html"><![CDATA[<hr><h1>关于有讨论的UE5.2右键不显示脚本化资本行为的解决办法</h1><p><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-16.png" alt="Alt text"><br><strong>解决办法:</strong><br>首先在内容管理器里创建两个蓝图类,分别继承的父类选择AssetActionUtility,和自己创建的继承AssetActionUtility的C++类,然后再创建一个编辑器工具蓝图继承AssetActionUtility(如果不行就继承自己创建的类)<br>然后自己创建的C++类就会出现在脚本化资本行为里面了.<br><strong>过程截图:</strong><br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-19.png" alt="Alt text"></p><hr><h1>VS与UE进行实时编码的过程</h1><p>在VS里面敲好代码以后,运行调试后会弹出UE编辑器,然后通过UE编辑器可以进行代码功能的验证,但是如果验证过程中发现了需要修改代码的情况时,不需要关闭UE编辑器再进行代码修改然后再次调试.<strong>VS与UE是可以进行实时编码的</strong><br>例如当调试代码发现有问题时,可以直接在VS里面进行代码修改,修改完成以后按ctrl+shift+s保存代码的修改,然后按ctrl+alt+F11即可完成代码修改与UE编辑器的实时连接.然后再次对功能进行调试即可.</p><hr><h1>module模块的介绍</h1><blockquote><p>官网的解释:<br><a href="https://docs.unrealengine.com/5.2/zh-CN/unreal-engine-modules/">https://docs.unrealengine.com/5.2/zh-CN/unreal-engine-modules/</a><br><a href="https://docs.unrealengine.com/5.3/zh-CN/module-properties-in-unreal-engine/">https://docs.unrealengine.com/5.3/zh-CN/module-properties-in-unreal-engine/</a></p></blockquote><p>总结而讲就是:</p><ul><li>模块实现了良好的代码分离</li><li>模块都需要一个[模块名]Build.cs的构建文件.</li><li>外部的模块的包含是通过加入到Build.cs文件来实现的,加入到Build.cs后就可以通过头文件来包含.</li></ul><hr><h1>创建一个空的针对editor的plugin</h1><p>点击创建后即可在VS里面创建相关plugin文件.<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image.png" alt="Alt text"><br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-1.png" alt="Alt text"></p><hr><p>修改Plugin的设置:<br>双击进入SuperManager.uplugin文件<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-2.png" alt="Alt text"></p><hr><p>修改其中的模块的类型和加载阶段<br>修改类型为Editor意思是它不会对游戏模块产生影响,它是针对编辑器的.<br>修改加载阶段为PreDefault意思是它会在游戏模块之前加载.<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-3.png" alt="Alt text"></p><hr><h1>plugin内容的简介</h1><p><strong>plugin类型:</strong><br>plugin分为针对Asset的和针对Acotr的.<br>Asset意思是在(Content Browser)内容浏览器里面的资产<br>Actor意思是在关卡里面放置的资产<br>要创建针对Asset的插件就需要继承AssetActionUtility类<br>要创建针对Actor的插件就需要继承ActorActionUtility类<br><strong>plugin相关的宏:</strong><br>UFUNCTION(CallInEditor),加入这个宏以后,当我们右键单击资产时,将添加一个按钮,我们可以使用这个按钮来触发自定义编辑器的功能.通过这个宏可以节省自己注册所有菜单项的所有时间和麻烦.</p><hr><h1>为刚才的Plugin添加一个向屏幕打印debug信息的功能</h1><p>首先为刚才创建的空Plugin(自定义的名字叫SuperManager)创建一个类,并且选择继承AssetActionUtility<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-4.png" alt="Alt text"><br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-5.png" alt="Alt text"><br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-6.png" alt="Alt text"></p><hr><p>创建好以后在VS中会生成如下结构:<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-7.png" alt="Alt text"><br>QuickAssetAction本身具备一定量的初始代码,在其基础上添加新的功能.<br>由于是继承UAssetActionUtility,因此包含了头文件,需要知道其位置在哪里,不然无法编译.</p><h2 id="寻找UAssetActionUtility头文件的位置">寻找UAssetActionUtility头文件的位置</h2><p>首先在解决方案资源管理器中搜索AssetActionUtility的位置,由下图可以得知它是属于Blutility模块的,在PublicDependencyModuleNames中添加Blutility进行生成,生成时发现依然不成功,那么就代表它是一个私有的路径,因此需要在PrivateIncludePaths中添加它的详细路径<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-9.png" alt="Alt text"><br>也可以通过番茄助手使用alt+shift+o来进行搜索得到路径.<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-11.png" alt="Alt text"><br>因此在SuperManager.Build.cs文件中的PrivateIncludePaths与PublicDependencyModuleNames添加一些代码:</p><h2 id="SuperManager-Build-cs">SuperManager.Build.cs</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PrivateIncludePaths.<span class="built_in">AddRange</span>(</span><br><span class="line">    <span class="keyword">new</span> string[] &#123;</span><br><span class="line">        System.IO.Path.<span class="built_in">GetFullPath</span>(Target.RelativeEnginePath) + <span class="string">&quot;/Source/Editor/Blutility/Private&quot;</span></span><br><span class="line">        <span class="comment">// ... add other private include paths required here ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br><span class="line">PublicDependencyModuleNames.<span class="built_in">AddRange</span>(</span><br><span class="line">    <span class="keyword">new</span> string[]</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Core&quot;</span>,<span class="string">&quot;Blutility&quot;</span></span><br><span class="line">        <span class="comment">// ... add other public dependencies that you statically link with here ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h2 id="QuickAssetAction-h">QuickAssetAction.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AssetActionUtility.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;QuickAssetAction.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SUPERMANAGER_API</span> UQuickAssetAction : <span class="keyword">public</span> UAssetActionUtility</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(CallInEditor) <span class="comment">//使用这个宏来让此函数能够在编辑器中访问</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestFunc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="QuickAssetAction-cpp">QuickAssetAction.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AssetActions/QuickAssetAction.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UQuickAssetAction::TestFunc</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(GEngine)</span><br><span class="line">&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">8.0f</span>, FColor::Cyan, <span class="built_in">TEXT</span>(<span class="string">&quot;Working&quot;</span>)); <span class="comment">// 向屏幕打印信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>创建负责方便调试的头文件</h1><p>在plugin的新建的SuperManager功能的public文件夹下新建一个头文件<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-8.png" alt="Alt text"></p><hr><p>新建头文件并写好代码以后,include这个头文件就可以使用头文件里定义的方法.<br>头文件代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">(<span class="type">const</span> FString&amp; Message, <span class="type">const</span> FColor&amp; Color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (GEngine)</span><br><span class="line">&#123;</span><br><span class="line">GEngine-&gt;<span class="built_in">AddOnScreenDebugMessage</span>(<span class="number">-1</span>, <span class="number">8.0f</span>, Color, Message); <span class="comment">// 向屏幕打印信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintLog</span><span class="params">(<span class="type">const</span> FString&amp; Message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Warning, <span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), *Message); <span class="comment">// 向日志打印信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>资产批量复制</h1><p><strong>实现效果:</strong><br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-13.png" alt="Alt text"><br><strong>用到的两个库以及对应的常用的函数:</strong><br>通过代码能够得知这几个静态函数的作用以及类型,其中FAssetData类型的数据比UObject*类型的数据包含的内容更多.<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-10.png" alt="Alt text"></p><hr><p><strong>UE数据的一些名词解释:</strong></p><p>由图可知ObjectPath的结尾是BP_NewBlueprint.BP_NewBlueprint,是需要在AssetName的基础上多加一个AssetName的格式<br>除了AssetName和ObjectPath和PackagePath以外还有个叫PackageName<br>PackageName:/Game/MyFolder/BP_NewBlueprint<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-12.png" alt="Alt text"></p><hr><h2 id="代码编写">代码编写</h2><p>首先由于要使用UEditorUtilityLibrary和UEditorAssetLibrary,所以要包含这两个头文件,然后通过查询头文件路径可以得知需要额外包含的模块为EditorScriptingUtilities,因此在build.cs里面的PublicDependencyModuleNames中进行添加.<br>然后开始实现功能,从UE编辑器中接收一个int32类型的值,然后通过值的大小进行asset的复制粘贴,命名和保存.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UQuickAssetAction::DuplicateAssets</span><span class="params">(int32 NumOfDuplicates)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (NumOfDuplicates &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Please enter a VALID number&quot;</span>), FColor::Red);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> TArray&lt;FAssetData&gt; SelectedAssetsData = UEditorUtilityLibrary::<span class="built_in">GetSelectedAssetData</span>();</span><br><span class="line">uint32 Counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FAssetData&amp; SelectedAssetData: SelectedAssetsData)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (int32 i = <span class="number">0</span>; i &lt; NumOfDuplicates; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FString SourceAssetPath = SelectedAssetData.ObjectPath.<span class="built_in">ToString</span>();</span><br><span class="line"><span class="type">const</span> FString NewDuplicatedAssetName = SelectedAssetData.AssetName.<span class="built_in">ToString</span>() + <span class="built_in">TEXT</span>(<span class="string">&quot;_&quot;</span>) + FString::<span class="built_in">FromInt</span>(i + <span class="number">1</span>);</span><br><span class="line"><span class="type">const</span> FString NewPathName = FPaths::<span class="built_in">Combine</span>(SelectedAssetData.PackagePath.<span class="built_in">ToString</span>(), NewDuplicatedAssetName);</span><br><span class="line"><span class="keyword">if</span> (UEditorAssetLibrary::<span class="built_in">DuplicateAsset</span>(SourceAssetPath, NewPathName))</span><br><span class="line">&#123;</span><br><span class="line">UEditorAssetLibrary::<span class="built_in">SaveAsset</span>(NewPathName,<span class="literal">false</span>); <span class="comment">// 保存复制的资产,false是指无论是否对资产进行了修改都保存</span></span><br><span class="line">++Counter;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Counter &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Successfully duplicated &quot;</span> + FString::<span class="built_in">FromInt</span>(Counter) + <span class="string">&quot; files&quot;</span>), FColor::Green);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>消息框与通知框</h1><h2 id="消息框">消息框:</h2><p><strong>需要包含头文件:</strong> “Misc/MessageDialog.h”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FText MsgTitle = FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Warning&quot;</span>));</span><br><span class="line">FText WarningMsg = FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Please enter a VALID number&quot;</span>));</span><br><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok,WarningMsg, &amp;MsgTitle);</span><br></pre></td></tr></table></figure><p><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-14.png" alt="Alt text"><br><strong>可以把它写成函数:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">EAppReturnType::Type <span class="title">ShowMsgDialog</span><span class="params">(EAppMsgType::Type MsgType, <span class="type">const</span> FString&amp; Message, <span class="type">bool</span> bShowMsgAsWarning = <span class="literal">true</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (bShowMsgAsWarning)</span><br><span class="line">&#123;</span><br><span class="line">FText MsgTitle = FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Warning&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FMessageDialog::<span class="built_in">Open</span>(MsgType, FText::<span class="built_in">FromString</span>(Message), &amp;MsgTitle);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> FMessageDialog::<span class="built_in">Open</span>(MsgType, FText::<span class="built_in">FromString</span>(Message));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用:</strong><br>ShowMsgDialog(EAppMsgType::Ok, TEXT(“Please enter a VALID number”));</p><hr><h2 id="通知框-右下角弹出">通知框(右下角弹出):</h2><p><strong>用到的头文件:</strong><br>“Widgets/Notifications/SNotificationList.h”<br>“Framework/Notifications/NotificationManager.h”<br><strong>写成自定义函数:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ShowNotifyInfo</span><span class="params">(<span class="type">const</span> FString&amp; Message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">FNotificationInfo <span class="title">NotifyInfo</span><span class="params">(FText::FromString(Message))</span></span>;</span><br><span class="line">NotifyInfo.bUseLargeFont = <span class="literal">true</span>;</span><br><span class="line">NotifyInfo.FadeOutDuration = <span class="number">7.f</span>;</span><br><span class="line">FSlateNotificationManager::<span class="built_in">Get</span>().<span class="built_in">AddNotification</span>(NotifyInfo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用:</strong><br>ShowNotifyInfo(TEXT(“Successfully duplicated &quot; + FString::FromInt(Counter) + &quot; files”));<br>结果:<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-15.png" alt="Alt text"></p><hr><h1>自动判断资产类型并添加命名前缀</h1><blockquote><p>命名规范参考:<a href="https://docs.unrealengine.com/5.2/zh-CN/recommended-asset-naming-conventions-in-unreal-engine-projects/">资产命名规范</a><br>资产类型与前缀的对应的数据结构主要靠TMap进行存取<br>举例:</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">TMap&lt;UClass*, FString&gt;PrefixMap =</span><br><span class="line">&#123;</span><br><span class="line">&#123;UBlueprint::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;BP_&quot;</span>)&#125;,</span><br><span class="line">&#123;UStaticMesh::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;SM_&quot;</span>)&#125;,</span><br><span class="line">&#123;UMaterial::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;M_&quot;</span>)&#125;,</span><br><span class="line">&#123;UMaterialInstanceConstant::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;MI&quot;</span>)&#125;,</span><br><span class="line">&#123;UMaterialFunctionInterface::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;MF_&quot;</span>)&#125;,</span><br><span class="line">&#123;UParticleSystem::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;PS_&quot;</span>)&#125;,</span><br><span class="line">&#123;USoundCue::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;SC_&quot;</span>)&#125;,</span><br><span class="line">&#123;USoundWave::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;SW_&quot;</span>)&#125;,</span><br><span class="line">&#123;UTexture::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;T_&quot;</span>)&#125;,</span><br><span class="line">&#123;UTexture2D::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;T_&quot;</span>)&#125;,</span><br><span class="line">&#123;UUserWidget::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;WBP_&quot;</span>)&#125;,</span><br><span class="line">&#123;USkeletalMeshComponent::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;SK_&quot;</span>)&#125;,</span><br><span class="line">&#123;UNiagaraSystem::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;NS_&quot;</span>)&#125;,</span><br><span class="line">&#123;UNiagaraEmitter::<span class="built_in">StaticClass</span>(),<span class="built_in">TEXT</span>(<span class="string">&quot;NE_&quot;</span>)&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong>添加前缀的思路:</strong><br>获得选择的资产的object,然后遍历这些object,通过TMap的Find方法找TMap里面是否有object对应的前缀,如果有就通过UEditorUtilityLibrary的RenameAsset方法来修改object的名字.<br><strong>后来添加的补充:</strong><br>老师有提到材质球创建材质示例时会自动地在后面添加_inst名字,现在有个需求时,碰到材质实例时要更改一下添加前缀地步骤,添加前缀前需要先去除掉开头的M_和结尾的_inst,然后再添加前缀MI_<br>我个人是通过这个代码来判断选择的资产是否是材质实例类型:<br>SelectedObject-&gt;GetClass() == UMaterialInstanceConstant::StaticClass()<br>老师给的代码是object有一个自己的方法用来判断object是否是某一种类型:<br>SelectedObject-&gt;IsA&lt;UMaterialInstanceConstant&gt;()<br><strong>添加前缀的代码:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UQuickAssetAction::AddPrefixName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray&lt;UObject*&gt; SelectedObjects = UEditorUtilityLibrary::<span class="built_in">GetSelectedAssets</span>();</span><br><span class="line">uint32 Counter = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (UObject* SelectedObject : SelectedObjects)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (!SelectedObject) <span class="keyword">continue</span>;</span><br><span class="line">FString* PrefixFound = PrefixMap.<span class="built_in">Find</span>(SelectedObject-&gt;<span class="built_in">GetClass</span>());</span><br><span class="line"><span class="keyword">if</span> (!PrefixFound || PrefixFound-&gt;<span class="built_in">IsEmpty</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Failed to find prefix for class &quot;</span>) + SelectedObject-&gt;<span class="built_in">GetClass</span>()-&gt;<span class="built_in">GetName</span>(), FColor::Red);</span><br><span class="line">&#125;</span><br><span class="line">FString OldName = SelectedObject-&gt;<span class="built_in">GetName</span>();</span><br><span class="line"><span class="keyword">if</span> (OldName.<span class="built_in">StartsWith</span>(*PrefixFound))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Print</span>(OldName + <span class="built_in">TEXT</span>(<span class="string">&quot; already has prefix added&quot;</span>), FColor::Red);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SelectedObject-&gt;<span class="built_in">IsA</span>&lt;UMaterialInstanceConstant&gt;())</span><br><span class="line">&#123;</span><br><span class="line">OldName.<span class="built_in">RemoveFromStart</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;M_&quot;</span>));</span><br><span class="line">OldName.<span class="built_in">RemoveFromEnd</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;_inst&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">FString NewNameWithPrefix = *PrefixFound + OldName;</span><br><span class="line">UEditorUtilityLibrary::<span class="built_in">RenameAsset</span>(SelectedObject, NewNameWithPrefix);</span><br><span class="line">++Counter;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (Counter &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowNotifyInfo</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Successfully renamed &quot;</span>) + FString::<span class="built_in">FromInt</span>(Counter) + <span class="string">&quot; assets&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>移除未放置在关卡里的资产</h1><p>修复重定向器的思路:<br>首先修复重定向器使用的是AssetTools模块的FixupReferencers方法,它需要接收的是UObjectRedirectors<em>的数组,也就是重定向器的指针的数组.为了得到UObjectRedirectors</em>的数组可以通过AssetRegistry模块的GetAssets方法得到重定向器的FAssetData(需要借助FARFilter过滤器),得到FAssetData以后再使用FAssetData的GetAsset()来得到UObject*,然后通过Cast将其转换为UObjectRedirectors*,最后使用AssetTools模块的FixupReferencers方法来修复重定向器.<br><strong>有一个需要提到的是:</strong> 在定义过滤器时教程中使用的是Filter.ClassNames.Emplace(“ObjectRedirector”);但是这个方法在UE5.1中就不能用了,替代方法是使用:Filter.ClassPaths.Emplace(FTopLevelAssetPath(UObjectRedirector::StaticClass()));或者Filter.ClassPaths.Emplace(TEXT(“/Script/Engine.ObjectRedirector”))</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UQuickAssetAction::RemoveUnusedAssets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray&lt;FAssetData&gt; SelectedAssetsData = UEditorUtilityLibrary::<span class="built_in">GetSelectedAssetData</span>();</span><br><span class="line">TArray&lt;FAssetData&gt; UnusedAssetsData;</span><br><span class="line"><span class="built_in">FixUpRedirectors</span>(); <span class="comment">// 修复重定向器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FAssetData&amp; SelectedAssetData : SelectedAssetsData)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 先找资产的所有引用</span></span><br><span class="line">TArray&lt;FString&gt; AssetReferencers =</span><br><span class="line">UEditorAssetLibrary::<span class="built_in">FindPackageReferencersForAsset</span>(SelectedAssetData.<span class="built_in">GetObjectPathString</span>());</span><br><span class="line"><span class="comment">// 如果此资产没有引用就放到UnusedAssetsData数组中</span></span><br><span class="line"><span class="keyword">if</span> (AssetReferencers.<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">UnusedAssetsData.<span class="built_in">Add</span>(SelectedAssetData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果UnusedAssetsData数组数量为0</span></span><br><span class="line"><span class="keyword">if</span> (UnusedAssetsData.<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowMsgDialog</span>(EAppMsgType::Ok, <span class="built_in">TEXT</span>(<span class="string">&quot;No unused asset found among selected assets&quot;</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果UnusedAssetsData数组数量不为0就尝试删除里面的所有内容</span></span><br><span class="line"><span class="comment">// ObjectTools::DeleteAssets不是强制删除,而是弹窗交给用户自己确定是否删除</span></span><br><span class="line"><span class="type">const</span> int32 NumOfAssetsDeleted = ObjectTools::<span class="built_in">DeleteAssets</span>(UnusedAssetsData);</span><br><span class="line"><span class="comment">/*由于最终删除选择权在用户手上, 因此如果用户不选择删除那就不执行后面的*/</span></span><br><span class="line"><span class="keyword">if</span> (NumOfAssetsDeleted == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">ShowNotifyInfo</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Successfully deleted&quot;</span>) + FString::<span class="built_in">FromInt</span>(NumOfAssetsDeleted) + <span class="built_in">TEXT</span>(<span class="string">&quot; unused assets&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UQuickAssetAction::FixUpRedirectors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray&lt;UObjectRedirector*&gt; RedirectorsToFixArray; <span class="comment">// 定义用来修复的重定向器的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载并获取AssetRegistry模块,用于操作资产注册信息</span></span><br><span class="line">FAssetRegistryModule&amp; AssetRegistryModule =</span><br><span class="line">FModuleManager::<span class="built_in">Get</span>().<span class="built_in">LoadModuleChecked</span>&lt;FAssetRegistryModule&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AssetRegistry&quot;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建过滤器</span></span><br><span class="line">FARFilter Filter;</span><br><span class="line">Filter.bRecursivePaths = <span class="literal">true</span>; <span class="comment">// 设定过滤器为递归查找资产</span></span><br><span class="line">Filter.PackagePaths.<span class="built_in">Emplace</span>(<span class="string">&quot;/Game&quot;</span>); <span class="comment">// 设定过滤器寻找的包的路径</span></span><br><span class="line">Filter.ClassPaths.<span class="built_in">Emplace</span>(<span class="built_in">FTopLevelAssetPath</span>(UObjectRedirector::<span class="built_in">StaticClass</span>()));<span class="comment">// 设定过滤器只需要类名为ObjectRedirector(重定向器)的</span></span><br><span class="line"><span class="comment">// 或者这样:Filter.ClassPaths.Emplace(TEXT(&quot;/Script/Engine.ObjectRedirector&quot;));</span></span><br><span class="line"></span><br><span class="line">TArray&lt;FAssetData&gt; OutRedirectors;</span><br><span class="line"><span class="comment">// 通过AssetRegistry模块的GetAssets方法配合过滤器得到所有重定向器的FAssetData</span></span><br><span class="line">AssetRegistryModule.<span class="built_in">Get</span>().<span class="built_in">GetAssets</span>(Filter, OutRedirectors);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历所有重定向器的FAssetData得到FAssetData所表示的UObjectRedirector*</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FAssetData&amp; RedirectorData:OutRedirectors)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Cast是强制类型转换,通过FAssetData对象的GetAsset方法得到UObject*,然后通过Cast得到UObjectRedirector*</span></span><br><span class="line"><span class="keyword">if</span> (UObjectRedirector* RedirectorToFix = <span class="built_in">Cast</span>&lt;UObjectRedirector&gt;(RedirectorData.<span class="built_in">GetAsset</span>()))</span><br><span class="line">&#123;</span><br><span class="line">RedirectorsToFixArray.<span class="built_in">Add</span>(RedirectorToFix);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载AssetToos模块,用来修复引用关系</span></span><br><span class="line">FAssetToolsModule&amp; AssetToolsModule =</span><br><span class="line">FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetToolsModule&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AssetTools&quot;</span>));</span><br><span class="line"><span class="comment">// 调用AssetTools模块的FixupReferencers函数来修复引用关系</span></span><br><span class="line">AssetToolsModule.<span class="built_in">Get</span>().<span class="built_in">FixupReferencers</span>(RedirectorsToFixArray);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>delegate(委托)</h1><p><strong>委托的介绍:</strong></p><ul><li>委托可以调用C++对象上的成员函数</li><li>一旦绑定到函数,函数就可以在以后的时间被调用</li><li>如果想要实现例如点击按钮触发函数就需要将委托与成员函数进行绑定</li><li>虚幻引擎支持三种委托: 单播委托,多播委托,动态委托</li></ul><p><strong>定义委托:</strong><br>定义委托可以使用虚幻引擎提供的宏,这里介绍三种定义委托的方式(<strong>图片中的蓝色为名字或类型举例</strong>)<br>第一种是定义一个委托,它调用的是一个没有返回值的名字叫Function的函数<br>第二种是定义一个委托,它调用的函数没有返回值并且需要接收一个参数,参数类型为自定义的.<br>第三种是定义一个委托,它调用的函数有返回值并且需要接收一个参数,参数类型与返回类型为自定义的.<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-20.png" alt="Alt text"></p><hr><h1>创建自定义菜单项</h1><blockquote><p>在这篇内容中,教程中导入之前为了调试而创建的头文件(DebugHeader.h)后再编译会出错,因此把DebugHeader.h的函数前面都加上了static,然后把所有函数都放在了一个命名空间里面.<br>但是我自己在使用过程中,并没有出现编译报错的情况,因此没有添加static.<br><strong>但是在后面的使用过程中,没有添加static遇到的编译错误,因此还是加上static吧.最好再把它们放到命名空间里面</strong><br><strong>如果不加的话可能会遇到:找到一个或多个多重定义的符号的问题,也就是说名字重复了.</strong></p></blockquote><h2 id="创建自定义菜单项的思路">创建自定义菜单项的思路</h2><p>目前创建的功能都是需要在资产里面右键然后在点击脚本化资产行为中的功能来使用的.<br>这里介绍一下将功能放到对文件夹右键显示的创建自定义菜单项的思路:</p><ol><li>首先在Visual Studio找到以我们创建的插件命名的头文件(也就是前面的SuperManager),在其中可以看到虚幻为它创建了两个纯虚函数:<strong>StartupModule</strong>和<strong>ShutdownModule</strong>.<br>进入其定义可以看到注释:<br><strong>StartupModule</strong>中的代码将在模块加载到内存后执行;确切的时间在每个模块的.uplugin文件中指定(也就是前面创建plugin时首先做的设置PreDefault<img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-3.png" alt="Alt text">).<br><strong>ShutdownModule</strong>中的代码对于支持动态重载的模块可以在关闭期间被调用来清理模块,以及卸载模块之前会进行调用.</li><li>将创建自定义菜单项的代码放到StartupModule函数里面.</li><li>加载ContentBrowser模块:FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::LoadModuleChecked<FContentBrowserModule>(TEXT(“ContentBrowser”));</FContentBrowserModule></li><li>通过ContentBrowser模块的GetAllPathViewContextMenuExtenders得到UE的用于路径视图内容的扩展的所有委托数组</li><li>在得到的UE的委托数组里添加自己的委托</li><li>将委托与自己的函数进行绑定</li></ol><hr><h2 id="一键删除未使用的资产">一键删除未使用的资产</h2><h3 id="头文件代码">头文件代码</h3><p><strong>插件的头文件SuperManager.h:</strong><br>其中#pragma region ContentBrowserMenuExtension和#pragma endregion的意思是将这两行之间的内容包裹起来,加了这两行以后,就可以把这两行之内的代码进行压缩和展开,方便整理代码,其中ContentBrowserMenuExtension是自定义的内容的概况名字.<br>压缩之后的样子:<img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-21.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Modules/ModuleManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FSuperManagerModule</span> : <span class="keyword">public</span> IModuleInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">/** IModuleInterface implementation */</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">StartupModule</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">ShutdownModule</span><span class="params">()</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region ContentBrowserMenuExtension</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">InitCBMenuExtension</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">TSharedRef&lt;FExtender&gt; <span class="title">CustomCBMenuExtender</span><span class="params">(<span class="type">const</span> TArray&lt;FString&gt;&amp; SelectedPaths)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AddCBMenuEntry</span><span class="params">(FMenuBuilder&amp; MenuBuilder)</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">OnDeleteUnusedAssetButtonClicked</span><span class="params">()</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h3 id="委托的创建和绑定">委托的创建和绑定</h3><p>这里代码展示的委托类型有:FContentBrowserMenuExtender_SelectedPaths,FMenuExtensionDelegate,FExecuteAction,这三种是虚幻自己定义的委托类型,可以通过源码看到其定义,以及委托类型是否有返回值,绑定的函数是否需要接收参数.<br>快速创建某委托类型的委托,并且将这个委托与某个函数进行绑定的例子:<br>这里创建了一个FContentBrowserMenuExtender_SelectedPaths类型的委托,只是并没有给创建的委托定义名字,然后把这个委托跟FSuperManagerModule::CustomCBMenuExtender函数进行了绑定.<br>FContentBrowserMenuExtender_SelectedPaths::CreateRaw(this, &amp;FSuperManagerModule::CustomCBMenuExtender)<br><strong>三个绑定函数:</strong><br><strong>FSuperManagerModule::CustomCBMenuExtender:</strong> 这个函数负责定义菜单的位置,这里是放在了Delete的后面,Delete这个名字可以通过在编辑器偏好设置中开启显示UI扩展点来看到<br><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-22.png" alt="Alt text"><img src="/2023/09/19/UE%E5%BC%80%E5%8F%91-UEC-Plugin/image-23.png" alt="Alt text"><br><strong>FSuperManagerModule::AddCBMenuEntry:</strong> 这个函数负责定义菜单的名字的提示条和图标和当点击时对应的委托.<br><strong>FSuperManagerModule::OnDeleteUnusedAssetButtonClicked:</strong> 这个函数负责定义当点击菜单时对应的执行内容.<br><strong>void FSuperManagerModule::FixUpRedirectors:</strong> 修复重定向器,跟前面的教程内容一样的.<br><strong>代码详情:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SuperManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ContentBrowserModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;DebugHeader.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;EditorAssetLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ObjectTools.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AssetRegistryModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;AssetToolsModule.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOCTEXT_NAMESPACE <span class="string">&quot;FSuperManagerModule&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::StartupModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">InitCBMenuExtension</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> region ContentBrowserMenuExtension</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::InitCBMenuExtension</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 加载模块并取别名</span></span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule =</span><br><span class="line">FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;ContentBrowser&quot;</span>));</span><br><span class="line"><span class="comment">// 得到UE的用于路径视图内容的扩展的所有委托</span></span><br><span class="line">TArray&lt;FContentBrowserMenuExtender_SelectedPaths&gt;&amp; ContentBrowserModuleMenuExtenders =</span><br><span class="line">ContentBrowserModule.<span class="built_in">GetAllPathViewContextMenuExtenders</span>();</span><br><span class="line"><span class="comment">/* 这是第一种创建委托并绑定函数的方法:</span></span><br><span class="line"><span class="comment">// 创建一个委托(FContentBrowserMenuExtender_SelectedPaths是一个委托类型,用于在路径上右键单击时请求菜单)</span></span><br><span class="line"><span class="comment">FContentBrowserMenuExtender_SelectedPaths CustomCBMenuDelegate;</span></span><br><span class="line"><span class="comment">// 将委托与自己创建的成员函数进行绑定</span></span><br><span class="line"><span class="comment">// 通过查看FContentBrowserMenuExtender_SelectedPaths类型可以得知</span></span><br><span class="line"><span class="comment">// 它需要绑定函数的返回类型是TSharedRef&lt;FExtender&gt;,接收参数类型是const TArray&lt;FString&gt;&amp;</span></span><br><span class="line"><span class="comment">CustomCBMenuDelegate.BindRaw(this, &amp;FSuperManagerModule::CustomCBMenuExtender);</span></span><br><span class="line"><span class="comment">// 在UE的用于路径视图内容的委托中加入自己的委托</span></span><br><span class="line"><span class="comment">ContentBrowserModuleMenuExtenders.Add(CustomCBMenuDelegate);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 第二种创建委托并绑定函数的方法,好处是不需要定义委托的名字</span></span><br><span class="line">ContentBrowserModuleMenuExtenders.<span class="built_in">Add</span>(FContentBrowserMenuExtender_SelectedPaths::</span><br><span class="line"><span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FSuperManagerModule::CustomCBMenuExtender));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义菜单的位置</span></span><br><span class="line"><span class="function">TSharedRef&lt;FExtender&gt; <span class="title">FSuperManagerModule::CustomCBMenuExtender</span><span class="params">(<span class="type">const</span> TArray&lt;FString&gt;&amp; SelectedPaths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">TSharedRef&lt;FExtender&gt; <span class="title">MenuExtender</span><span class="params">(<span class="keyword">new</span> FExtender())</span></span>;</span><br><span class="line"><span class="keyword">if</span> (SelectedPaths.<span class="built_in">Num</span>() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">MenuExtender-&gt;<span class="built_in">AddMenuExtension</span>(</span><br><span class="line"><span class="built_in">FName</span>(<span class="string">&quot;Delete&quot;</span>), <span class="comment">// 找到已经存在的Delete菜单</span></span><br><span class="line">EExtensionHook::After, <span class="comment">// 把自定义的菜单放到Delete菜单后面</span></span><br><span class="line"><span class="built_in">TSharedPtr</span>&lt;FUICommandList&gt;(), <span class="comment">// 定义快捷键,这里为空</span></span><br><span class="line">FMenuExtensionDelegate::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FSuperManagerModule::AddCBMenuEntry) <span class="comment">// 创建委托并绑定成员函数</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">FolderPathsSelected = SelectedPaths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MenuExtender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义菜单的名字的提示条和图标和当点击时对应的委托</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::AddCBMenuEntry</span><span class="params">(FMenuBuilder&amp; MenuBuilder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MenuBuilder.<span class="built_in">AddMenuEntry</span>(</span><br><span class="line">FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Delete Unused Assets&quot;</span>)), <span class="comment">// 自定义的菜单名字</span></span><br><span class="line">FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Safely delete all unused assets under folder&quot;</span>)), <span class="comment">// 菜单的提示条</span></span><br><span class="line"><span class="built_in">FSlateIcon</span>(), <span class="comment">// 菜单的图标</span></span><br><span class="line">FExecuteAction::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FSuperManagerModule::OnDeleteUnusedAssetButtonClicked) <span class="comment">// 创建点击时触发的委托并与成员函数进行绑定</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除未使用的资产</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::OnDeleteUnusedAssetButtonClicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (FolderPathsSelected.<span class="built_in">Num</span>() &gt; <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowMsgDialog</span>(EAppMsgType::Ok, <span class="built_in">TEXT</span>(<span class="string">&quot;You can only do this to one folder&quot;</span>));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">TArray&lt;FString&gt; AssetPathNames = UEditorAssetLibrary::<span class="built_in">ListAssets</span>(FolderPathsSelected[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (AssetPathNames.<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowMsgDialog</span>(EAppMsgType::Ok, <span class="built_in">TEXT</span>(<span class="string">&quot;No asset found under selected folder&quot;</span>, <span class="literal">false</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">EAppReturnType::Type ConfirmResult = <span class="built_in">ShowMsgDialog</span>(EAppMsgType::YesNo, <span class="built_in">TEXT</span>(<span class="string">&quot;A total of &quot;</span>) + FString::<span class="built_in">FromInt</span>(AssetPathNames.<span class="built_in">Num</span>()) + <span class="built_in">TEXT</span>(<span class="string">&quot; found.\nWoudle you like to procceed?&quot;</span>));</span><br><span class="line"><span class="keyword">if</span> (ConfirmResult == EAppReturnType::No) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">FixUpRedirectors</span>();</span><br><span class="line"></span><br><span class="line">TArray&lt;FAssetData&gt; UnusedAssetDataArray;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FString&amp; AssetPathName : AssetPathNames)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 如果选择的文件夹内容包含这些,那么就不进行处理,因为这些文件夹是不能改变的</span></span><br><span class="line"><span class="keyword">if</span> (AssetPathName.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Developers&quot;</span>))</span><br><span class="line">|| AssetPathName.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Collections&quot;</span>))</span><br><span class="line">|| AssetPathName.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;__ExternalActors__&quot;</span>))</span><br><span class="line">|| AssetPathName.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;__ExternalObjects__&quot;</span>))) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">TArray&lt;FString&gt; AssetReferencers = UEditorAssetLibrary::<span class="built_in">FindPackageReferencersForAsset</span>(AssetPathName);</span><br><span class="line"><span class="keyword">if</span> (AssetReferencers.<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">FAssetData UnusedAssetData = UEditorAssetLibrary::<span class="built_in">FindAssetData</span>(AssetPathName);</span><br><span class="line">UnusedAssetDataArray.<span class="built_in">Add</span>(UnusedAssetData);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (UnusedAssetDataArray.<span class="built_in">Num</span>() &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ObjectTools::<span class="built_in">DeleteAssets</span>(UnusedAssetDataArray);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowMsgDialog</span>(EAppMsgType::Ok, <span class="built_in">TEXT</span>(<span class="string">&quot;No unused asset found under selected folder&quot;</span>),<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修复重定向器</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::FixUpRedirectors</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray&lt;UObjectRedirector*&gt; RedirectorsToFixArray;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAssetRegistryModule&amp; AssetRegistryModule =</span><br><span class="line">FModuleManager::<span class="built_in">Get</span>().<span class="built_in">LoadModuleChecked</span>&lt;FAssetRegistryModule&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AssetRegistry&quot;</span>));</span><br><span class="line"></span><br><span class="line">FARFilter Filter;</span><br><span class="line">Filter.bRecursivePaths = <span class="literal">true</span>;</span><br><span class="line">Filter.PackagePaths.<span class="built_in">Emplace</span>(<span class="string">&quot;/Game&quot;</span>);</span><br><span class="line"><span class="comment">// Filter.ClassNames.Emplace(&quot;ObjectRedirector&quot;); // UE5.0版本用这个还可以,UE5.1版本就不可以了,需要用ClassPaths来代替</span></span><br><span class="line">Filter.ClassPaths.<span class="built_in">Add</span>(<span class="built_in">FTopLevelAssetPath</span>(UObjectRedirector::<span class="built_in">StaticClass</span>()));</span><br><span class="line"></span><br><span class="line">TArray&lt;FAssetData&gt; OutRedirectors;</span><br><span class="line">AssetRegistryModule.<span class="built_in">Get</span>().<span class="built_in">GetAssets</span>(Filter, OutRedirectors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FAssetData&amp; RedirectorData : OutRedirectors)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (UObjectRedirector* RedirectorToFix = <span class="built_in">Cast</span>&lt;UObjectRedirector&gt;(RedirectorData.<span class="built_in">GetAsset</span>()))</span><br><span class="line">&#123;</span><br><span class="line">RedirectorsToFixArray.<span class="built_in">Add</span>(RedirectorToFix);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FAssetToolsModule&amp; AssetToolsModule =</span><br><span class="line">FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetToolsModule&gt;(<span class="built_in">TEXT</span>(<span class="string">&quot;AssetTools&quot;</span>));</span><br><span class="line"></span><br><span class="line">AssetToolsModule.<span class="built_in">Get</span>().<span class="built_in">FixupReferencers</span>(RedirectorsToFixArray);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> endregion </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::ShutdownModule</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,</span></span><br><span class="line"><span class="comment">// we call this function before unloading the module.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> LOCTEXT_NAMESPACE</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_MODULE</span>(FSuperManagerModule, SuperManager)</span><br></pre></td></tr></table></figure><h2 id="一键删除空的文件夹">一键删除空的文件夹</h2><p>在已经做好了一个自定义菜单项的情况下,可以在那个的基础上添加新的菜单,只需要在之前创建的FSuperManagerModule::AddCBMenuEntry函数中添加第二个菜单,然后再创建委托绑定函数即可.<br>代码举例:<br><strong>添加新的菜单</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义菜单的名字的提示条和图标和当点击时对应的委托</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::AddCBMenuEntry</span><span class="params">(FMenuBuilder&amp; MenuBuilder)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 添加第一个菜单</span></span><br><span class="line">MenuBuilder.<span class="built_in">AddMenuEntry</span>(</span><br><span class="line">FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Delete Unused Assets&quot;</span>)), <span class="comment">// 自定义的菜单名字</span></span><br><span class="line">FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Safely delete all unused assets under folder&quot;</span>)), <span class="comment">// 菜单的提示条</span></span><br><span class="line"><span class="built_in">FSlateIcon</span>(), <span class="comment">// 菜单的图标</span></span><br><span class="line">FExecuteAction::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FSuperManagerModule::OnDeleteUnusedAssetButtonClicked) <span class="comment">// 创建点击时触发的委托并与成员函数进行绑定</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 添加第二个菜单</span></span><br><span class="line">MenuBuilder.<span class="built_in">AddMenuEntry</span>(</span><br><span class="line">FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Delete Empty Folders&quot;</span>)), <span class="comment">// 自定义的菜单名字</span></span><br><span class="line">FText::<span class="built_in">FromString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Safely delete all empty folders&quot;</span>)), <span class="comment">// 菜单的提示条</span></span><br><span class="line"><span class="built_in">FSlateIcon</span>(), <span class="comment">// 菜单的图标</span></span><br><span class="line">FExecuteAction::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;FSuperManagerModule::OnDeleteEmptyFoldersButtonClicked) <span class="comment">// 创建点击时触发的委托并与成员函数进行绑定</span></span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除空文件夹的函数</strong><br>思路:删除前先调用之前创建的FixUpRedirectors();来进行重定向器的修复.然后通过ListAssets得到所有文件夹下的文件与文件夹路径(ListrAssets的第三个参数为true即可得到包括文件夹路径),然后排除掉不能修改的文件内容,通过UEditorAssetLibrary::DoesDirectoryExist()判断是否为文件夹,通过UEditorAssetLibrary::DoesDirectoryHaveAssets()判断文件夹是否存在内容,通过UEditorAssetLibrary::DeleteDirectory()来删除文件夹.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">FSuperManagerModule::OnDeleteEmptyFoldersButtonClicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">FixUpRedirectors</span>();</span><br><span class="line"></span><br><span class="line">TArray&lt;FString&gt; FolderPathsArray = UEditorAssetLibrary::<span class="built_in">ListAssets</span>(FolderPathsSelected[<span class="number">0</span>],<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line">uint32 Counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">FString EmptyFolderPathsNames;</span><br><span class="line">TArray&lt;FString&gt; EmptyFoldersPathsArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FString&amp; FolderPath : FolderPathsArray)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (FolderPath.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Developers&quot;</span>))</span><br><span class="line">|| FolderPath.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Collections&quot;</span>))</span><br><span class="line">|| FolderPath.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;__ExternalActors__&quot;</span>))</span><br><span class="line">|| FolderPath.<span class="built_in">Contains</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;__ExternalObjects__&quot;</span>))) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!UEditorAssetLibrary::<span class="built_in">DoesDirectoryExist</span>(FolderPath)) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!UEditorAssetLibrary::<span class="built_in">DoesDirectoryHaveAssets</span>(FolderPath))</span><br><span class="line">&#123;</span><br><span class="line">EmptyFolderPathsNames.<span class="built_in">Append</span>(FolderPath);</span><br><span class="line">EmptyFolderPathsNames.<span class="built_in">Append</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">EmptyFoldersPathsArray.<span class="built_in">Add</span>(FolderPath);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (EmptyFoldersPathsArray.<span class="built_in">Num</span>() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowMsgDialog</span>(EAppMsgType::Ok, <span class="built_in">TEXT</span>(<span class="string">&quot;No empty folder found under selected folder&quot;</span>), <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">EAppReturnType::Type ConfirmResult = <span class="built_in">ShowMsgDialog</span>(EAppMsgType::OkCancel,</span><br><span class="line"><span class="built_in">TEXT</span>(<span class="string">&quot;Empty folders found in:\n&quot;</span>) + EmptyFolderPathsNames + <span class="built_in">TEXT</span>(<span class="string">&quot;\nWould you like to delete all?&quot;</span>), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ConfirmResult == EAppReturnType::Cancel) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> FString&amp; EmptyFolderPath : EmptyFoldersPathsArray)</span><br><span class="line">&#123;</span><br><span class="line">UEditorAssetLibrary::<span class="built_in">DeleteDirectory</span>(EmptyFolderPath) ?</span><br><span class="line">++Counter : <span class="built_in">Print</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Failed to delete &quot;</span>) + EmptyFolderPath, FColor::Red);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Counter &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">ShowNotifyInfo</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Successfully deleted &quot;</span>) + FString::<span class="built_in">FromInt</span>(Counter) + <span class="built_in">TEXT</span>(<span class="string">&quot; folders&quot;</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>智能指针</h1><blockquote><p><a href="https://docs.unrealengine.com/5.2/zh-CN/smart-pointers-in-unreal-engine/">UE官方文档对智能指针的介绍</a></p></blockquote><p><strong>智能指针的作用:</strong> 减轻内存分配和跟踪的负担<br><strong>UE的四种智能指针类型:</strong></p><ol><li>SharedPointers: TSharedPtr</li><li>SharedReferences: TSharedRef</li><li>WeakPointers: TWeakPtr</li><li>UniquePointers<br>TSharedPtr: 拥有其引用的对象,能防止对象被删除(通过ReferenceCounting计数,为0时自动删除),可以指向空白.<br>TSharedRef: 拥有其引用的对象,能防止对象被删除,引用的对象必须为非空.(因为必须为非空,所以Slate经常使用它)<br>TWeakPtr: 不拥有引用的对象,用于中断引用循环.(当只想保留对象的引用时有用,可以通过检查它来确定它是否有对象)</li></ol><p><strong>智能指针和垃圾回收:</strong> 智能指针无法与UObject系统同时使用。UObject系统有自己的一套内存管理系统,叫垃圾回收,使用UPROPERTY()宏来定义一个指针就能够对UObject指针进行垃圾回收.<br><strong>创建智能指针:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统上的创建一个指针的方式:</span></span><br><span class="line">FExtender* MenuExtender = <span class="keyword">new</span> <span class="built_in">FExtender</span>(); <span class="comment">// 在堆上开辟一个空间存放FExtender的对象,并创建一个MenuExtender指针指向它</span></span><br><span class="line"><span class="comment">// 进行一系列操作</span></span><br><span class="line"><span class="keyword">delete</span> MenuExtender; <span class="comment">// 使用完以后必须手动删除掉,不然会造成内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建智能指针方法一</span></span><br><span class="line"><span class="function">TSharedRef&lt;FExtender&gt; <span class="title">MenuExtender</span> <span class="params">(<span class="keyword">new</span> FExtender())</span></span>;</span><br><span class="line"><span class="comment">// 创建智能指针方法二</span></span><br><span class="line">TSharedRef&lt;FExtender&gt; MenuExtender = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FExtender</span>());</span><br><span class="line"><span class="comment">// 创建智能指针方法三(已经有对象的情况下)</span></span><br><span class="line"><span class="type">const</span> FAssetData Data = UEditorAssetLibrary::<span class="built_in">FindAssetData</span>(AssetPathName);</span><br><span class="line">TSharedPtr&lt;FAssetData&gt; AssetDataSharedPtr = <span class="built_in">MakeShared</span>&lt;FAssetData&gt;(Data);</span><br></pre></td></tr></table></figure><hr><h1></h1>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEC++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE_Slate</title>
      <link href="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/"/>
      <url>/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/</url>
      
        <content type="html"><![CDATA[<h1>学习的视频</h1><p><a href="https://www.bilibili.com/video/BV19L411L7XA/?p=2&amp;spm_id_from=pageDriver&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">第一个独立程序_哔哩哔哩_bilibili</a></p><h1>对于UE编译系统总结的文章推荐：</h1><p><a href="https://zhuanlan.zhihu.com/p/458435453">虚幻引擎编译系统总结</a></p><h1>下载并编译源码版UE</h1><p>去github下载源码版：<a href="https://github.com/EpicGames/UnrealEngine">https://github.com/EpicGames/UnrealEngine</a><br></p><h1>第一个程序</h1><h2 id="处理UE源码版的文件的过程中需要注意的点">处理UE源码版的文件的过程中需要注意的点</h2><p><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(1).png" alt="Alt text"><br>通过文章里的这些描述得知，如果我们需要新建第一个程序就需要全程再本地资源管理器中进行操作，不能够在VS里面进行操作。<br>当进行完新建文件的操作完以后，通过双击运行GenerateProjectFiles.bat文件即可更新UE的结构，同时VS里面也会同步更新。<br>当更改build.cs文件时也需要双击运行GenerateProjectFiles.bat文件。</p><h2 id="过程">过程</h2><p>去源码的Source文件夹中的Programs目录里面找到BlankProgram文件夹（这个文件夹是一个空白程序文件夹，因此可以通过这个来创建自己的程序）：UnrealEngine-release\Engine\Source\Programs&lt;br /&gt;选中BlankProgram文件夹ctrl+c和ctrl+v创建一个副本<br>改名为自己想要的名字<br>以FirstProgram举例：<br>改文件夹的名字以后，更改文件夹里面的文件以及文件内容的名字，把BlankProgram都改为自己的名字(FirstProgram)<br>这四个文件除了文件名，文件的内容里的BlankProgram也都改为FirstProgram</p><p><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(2).png" alt="Alt text"><br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(3).png" alt="Alt text"><br>更改完以后运行bat文件来重新生成工程文件。<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(4).png" alt="Alt text"><br>生成以后打开slh文件，将我们的FirstProgram设置为启动项目并进行编译<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(5).png" alt="Alt text"><br>编译完成之后进入cpp文件打上断点然后进行调试，然后就得到了打印helloworld的程序。<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(6).png" alt="Alt text"></p><hr><h1>SWindow</h1><h2 id="主要参考程序：SlateViewer">主要参考程序：SlateViewer</h2><p>首先可以参考一下自带的SlateViewer程序，将其设为启动项目然后进行调试即可查看内容结果。如下：<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(7).png" alt="Alt text"></p><h2 id="模块更改">模块更改</h2><h3 id="两个模块的作用：">两个模块的作用：</h3><p><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(8).png" alt="Alt text"><br>补充: 写代码时会include其他头文件,之所以不需要写全路径,只需要写public或者private后面的路径,应该就是因为在build.cs里面包括了那个模块名.如果没有就需要添加.这也就是模块由build.cs确定相互依赖关系的意思.</p><h3 id="build模块：">build模块：</h3><p>新增三个<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(9).png" alt="Alt text"></p><h3 id="target模块：">target模块：</h3><p>更改三个：<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(10).png" alt="Alt text"></p><h2 id="cpp文件的内容：">cpp文件的内容：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FirstProgram.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RequiredProgramMainCPPInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StandaloneRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Application/SlateApplication.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY_STATIC</span>(LogFirstProgram, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_APPLICATION</span>(FirstProgram, <span class="string">&quot;FirstProgram&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// INT32_MAIN_INT32_ARGC_TCHAR_ARGV()</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">// GEngineLoop.PreInit(ArgC, ArgV);</span></span><br><span class="line"><span class="comment">// UE_LOG(LogFirstProgram, Display, TEXT(&quot;Hello World&quot;));</span></span><br><span class="line"><span class="comment">// FEngineLoop::AppExit();</span></span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WinMain, called when the application is started</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR, _In_ <span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// start up the main loop</span></span><br><span class="line">    GEngineLoop.<span class="built_in">PreInit</span>(<span class="built_in">GetCommandLineW</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// crank up a normal Slate application using the platform&#x27;s standalone renderer</span></span><br><span class="line">    FSlateApplication::<span class="built_in">InitializeAsStandaloneApplication</span>(<span class="built_in">GetStandardStandaloneRenderer</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个窗口</span></span><br><span class="line">    TSharedPtr&lt;SWindow&gt; MainWindow = <span class="built_in">SNew</span>(SWindow)</span><br><span class="line">    .<span class="built_in">ClientSize</span>(<span class="built_in">FVector2D</span>(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">    [</span><br><span class="line">    SNullWidget::NullWidget</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">AddWindow</span>(MainWindow.<span class="built_in">ToSharedRef</span>());</span><br><span class="line">    <span class="comment">// loop while the server does the rest</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">IsEngineExitRequested</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">PumpMessages</span>();</span><br><span class="line">            FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">Tick</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    FSlateApplication::<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中只有下面这些是自己写的，其他的都是复制粘贴并删除部分代码的SlateViewerMainWindows.cpp和SlateViewerApp.cpp的内容<br>这里涉及到智能指针的使用<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image(11).png" alt="Alt text"></p><hr><h1>SButton 按钮</h1><blockquote><p>这节主要讲了如何给窗口添加一个按钮,并且给按钮添加一个点击事件.<br>参考的SButton路径:<strong>\UnrealEngine-release\Engine\Source\Runtime\Slate\Public\Widgets\Input\SButton.h</strong></p></blockquote><h2 id="创建文件">创建文件</h2><p>首先通过在资源管理器上在第一个新建的程序旁新建按钮的头文件和源文件(因为虚幻引擎不是靠sln来管理文件架构的,所以不要在VS里面进行文件的添加和删除).<br>创建好按钮的头文件和源文件以后使用bat文件重新生成一下项目.<br>这里我自定义文件名字叫SMybutton.</p><h2 id="SMybutton-h">SMybutton.h</h2><blockquote><p>声明了一个继承SButton的类,叫SMyButton,模仿SButton中的代码,声明一个Construct(初始化)和返回类型为FReply的按钮点击时执行的函数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Input/SButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyButton</span> : <span class="keyword">public</span> SButton</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Construct this widget</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @paramInArgsThe declaration data for this widget</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">FReply <span class="title">ButtonClicked</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMybutton-cpp">SMybutton.cpp</h2><blockquote><p>实现初始化方法,首先调用父类的初始化的方法,然后在此基础上设置点击事件,当点击时执行SMyButton的ButtonClicked函数来返回一个信息窗口</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyButton::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SButton::<span class="built_in">Construct</span>(InArgs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;<span class="built_in">SetOnClicked</span>(FOnClicked::<span class="built_in">CreateRaw</span>(<span class="keyword">this</span>, &amp;SMyButton::ButtonClicked));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FReply <span class="title">SMyButton::ButtonClicked</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok, FText::<span class="built_in">FromString</span>(<span class="string">&quot;Button is clicked!&quot;</span>));</span><br><span class="line"><span class="keyword">return</span> FReply::<span class="built_in">Handled</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FirstProgram-cpp">FirstProgram.cpp</h2><blockquote><p>自定义的按钮已经完成了,现在将其放到我们的第一个程序里创建的窗口里面.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建自定义的SButton</span></span><br><span class="line">TSharedPtr&lt;SMyButton&gt; MyButton = <span class="built_in">SNew</span>(SMyButton);</span><br><span class="line">   <span class="comment">// 创建一个窗口</span></span><br><span class="line">TSharedPtr&lt;SWindow&gt; MainWindow = <span class="built_in">SNew</span>(SWindow)</span><br><span class="line">.<span class="built_in">ClientSize</span>(<span class="built_in">FVector2D</span>(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">[</span><br><span class="line">        <span class="comment">// 窗口上放入自定义的SButton</span></span><br><span class="line">MyButton.<span class="built_in">ToSharedRef</span>()</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h1>SCanvas 画布</h1><blockquote><p>SCanva翻译叫画布,学过UE的UMG就很好理解.</p></blockquote><p>依然在本地新建一个头文件和源文件,新建完以后构建一下.我这里命名为SMyCanvas.h与SMycanvas.cpp</p><h2 id="SMycanvas-h">SMycanvas.h</h2><blockquote><p>通过继承SCanvas,和SButton一样定义一个初始化的函数</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/SCanvas.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyCanvas</span> : <span class="keyword">public</span> SCanvas</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMycanvas-cpp">SMycanvas.cpp</h2><blockquote><p>除了执行父类的初始化函数之外,新增两个槽用来放上一章创建的SButton类.<br>这里的槽和Qt的槽还不是一个概念,Slate的槽是用来放控件的.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCanvas.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyButton.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyCanvas::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCanvas::<span class="built_in">Construct</span>(InArgs);</span><br><span class="line"></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">100</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">40</span>))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SMyButton)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2d</span>(<span class="number">300</span>, <span class="number">100</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">40</span>))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SMyButton)</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FirstProgram-cpp-2">FirstProgram.cpp</h2><blockquote><p>在窗口下放刚才定义的SCanvas</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建自定义的Scanvas</span></span><br><span class="line">TSharedPtr&lt;SMyCanvas&gt; MyCanvas = <span class="built_in">SNew</span>(SMyCanvas);</span><br><span class="line"><span class="comment">// 创建一个窗口</span></span><br><span class="line">TSharedPtr&lt;SWindow&gt; MainWindow = <span class="built_in">SNew</span>(SWindow)</span><br><span class="line">.<span class="built_in">ClientSize</span>(<span class="built_in">FVector2D</span>(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">[</span><br><span class="line">MyCanvas.<span class="built_in">ToSharedRef</span>()</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h1>SComboBox下拉框</h1><blockquote><p>在画布里面添加下拉框</p></blockquote><h2 id="SMyCanvas-h">SMyCanvas.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/SCanvas.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyCanvas</span> : <span class="keyword">public</span> SCanvas</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line"></span><br><span class="line">TArray&lt;TSharedPtr&lt;FString&gt;&gt; Options; <span class="comment">// ComboBox的项</span></span><br><span class="line">int32 CurrentSelected = <span class="number">-1</span>; <span class="comment">// ComboBox的项的索引</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMycanvas-cpp-2">SMycanvas.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCanvas.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyCanvas::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCanvas::<span class="built_in">Construct</span>(InArgs);</span><br><span class="line"></span><br><span class="line">Options.<span class="built_in">Empty</span>();</span><br><span class="line">Options.<span class="built_in">Add</span>(<span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FString</span>(<span class="string">&quot;Apple&quot;</span>)));</span><br><span class="line">Options.<span class="built_in">Add</span>(<span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FString</span>(<span class="string">&quot;Banana&quot;</span>)));</span><br><span class="line">Options.<span class="built_in">Add</span>(<span class="built_in">MakeShareable</span>(<span class="keyword">new</span> <span class="built_in">FString</span>(<span class="string">&quot;Orange&quot;</span>)));</span><br><span class="line"></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2D</span>(<span class="number">500</span>, <span class="number">100</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">40</span>))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SComboBox&lt;TSharedPtr&lt;FString&gt;&gt;)</span><br><span class="line"><span class="comment">// ComboBox的内容</span></span><br><span class="line">.<span class="built_in">OptionsSource</span>(&amp;Options)</span><br><span class="line"><span class="comment">// 当生成ComboBox时执行,作用是显示ComboBox下拉框选项值的文本块</span></span><br><span class="line">.<span class="built_in">OnGenerateWidget_Lambda</span>([](TSharedPtr&lt;FString&gt; InValue) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(STextBlock).<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(*InValue));</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 当ComboBox的选择发生改变时执行</span></span><br><span class="line">.<span class="built_in">OnSelectionChanged_Lambda</span>([<span class="keyword">this</span>](TSharedPtr&lt;FString&gt; NewOption,ESelectInfo::Type SelectType) &#123;</span><br><span class="line">CurrentSelected = Options.<span class="built_in">Find</span>(NewOption);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// SComboBox中嵌套的显示的文本块,负责显示SComboBox中选择的内容</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock).<span class="built_in">Text_Lambda</span>([<span class="keyword">this</span>]() &#123;</span><br><span class="line"><span class="keyword">if</span> (CurrentSelected &lt; <span class="number">0</span> || CurrentSelected &gt; Options.<span class="built_in">Num</span>() - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> FText::<span class="built_in">FromString</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> FText::<span class="built_in">FromString</span>(*Options[CurrentSelected]);</span><br><span class="line">&#125;)</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>SHorizontalBox,SVerticalBox 水平布局和垂直布局</h1><blockquote><p>在Scanvas(画布)上面直接添加一个水平布局和一个垂直布局来举例</p></blockquote><p>最终结果:<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCanvas.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyCanvas::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">SCanvas::<span class="built_in">Construct</span>(InArgs);</span><br><span class="line"><span class="comment">// 添加一个水平布局</span></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">200</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">400</span>, <span class="number">40</span>))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">+SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line"><span class="comment">// 设置这个槽宽度占两个</span></span><br><span class="line">.<span class="built_in">FillWidth</span>(<span class="number">2.0f</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">+SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 添加一个垂直布局</span></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">300</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">100</span>, <span class="number">160</span>))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">FillHeight</span>(<span class="number">2.0</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>STreeView</h1><blockquote><p>新建SMyTreeView.cpp和SMyTreeView.h然后重新构建一下</p></blockquote><p>生成结果:<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-1.png" alt="Alt text"></p><h2 id="SMyTreeView-h">SMyTreeView.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 树状图的Item数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UTreeItemData</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// Item的内容</span></span><br><span class="line">FString MyName;</span><br><span class="line"><span class="type">float</span> MyHeight = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 每个item的子项数组</span></span><br><span class="line">TArray&lt;TSharedPtr&lt;UTreeItemData&gt;&gt; Children;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 树状图</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyTreeView</span> : <span class="keyword">public</span> STreeView&lt;TSharedPtr&lt;UTreeItemData&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line"><span class="comment">// 树状图的item的数组</span></span><br><span class="line">TArray&lt;TSharedPtr&lt;UTreeItemData&gt;&gt; TreeItemDatas;</span><br><span class="line"><span class="comment">// 声明生成树状图的函数</span></span><br><span class="line"><span class="function">TSharedRef&lt;ITableRow&gt; <span class="title">GenerateRowItem</span><span class="params">(TSharedPtr&lt;UTreeItemData&gt; InTreeItemData, <span class="type">const</span> TSharedRef&lt;STableViewBase&gt;&amp; OwnerTable)</span></span>;</span><br><span class="line"><span class="comment">// 声明获取项的子项的方法</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetChildrenForItem</span><span class="params">(TSharedPtr&lt;UTreeItemData&gt; InTreeItem, TArray&lt;TSharedPtr&lt;UTreeItemData&gt;&gt;&amp; OutChildren)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMyTreeView-cpp">SMyTreeView.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyTreeView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyTreeView::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FArguments Arguments = InArgs;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建item与设置item与数据与子项</span></span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; ZhangSan = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">ZhangSan-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;zhangSan&quot;</span>);</span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; ZhangSan1 = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">ZhangSan1-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;ZhangSan1&quot;</span>);</span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; ZhangSan2 = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">ZhangSan2-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;ZhangSan2&quot;</span>);</span><br><span class="line"></span><br><span class="line">ZhangSan-&gt;Children.<span class="built_in">Add</span>(ZhangSan1);</span><br><span class="line">ZhangSan-&gt;Children.<span class="built_in">Add</span>(ZhangSan2);</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; LiSi = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">LiSi-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;LiSi&quot;</span>);</span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; LiSi1 = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">LiSi1-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;LiSi1&quot;</span>);</span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; LiSi2 = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">LiSi2-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;LiSi2&quot;</span>);</span><br><span class="line">TSharedPtr&lt;UTreeItemData&gt; LiSi3 = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UTreeItemData);</span><br><span class="line">LiSi3-&gt;MyName = <span class="built_in">FString</span>(<span class="string">&quot;LiSi3&quot;</span>);</span><br><span class="line"></span><br><span class="line">LiSi-&gt;Children.<span class="built_in">Add</span>(LiSi1);</span><br><span class="line">LiSi-&gt;Children.<span class="built_in">Add</span>(LiSi2);</span><br><span class="line">LiSi-&gt;Children.<span class="built_in">Add</span>(LiSi3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将item添加到数组</span></span><br><span class="line">TreeItemDatas.<span class="built_in">Add</span>(ZhangSan);</span><br><span class="line">TreeItemDatas.<span class="built_in">Add</span>(LiSi);</span><br><span class="line"><span class="comment">// 通过三个必须具备的委托来生成树状图</span></span><br><span class="line">Arguments.<span class="built_in">TreeItemsSource</span>(&amp;TreeItemDatas); <span class="comment">//指认树状图的item</span></span><br><span class="line">Arguments.<span class="built_in">OnGenerateRow_Raw</span>(<span class="keyword">this</span>, &amp;SMyTreeView::GenerateRowItem); <span class="comment">// 指认生成的树状图每一行的内容</span></span><br><span class="line">Arguments.<span class="built_in">OnGetChildren_Raw</span>(<span class="keyword">this</span>, &amp;SMyTreeView::GetChildrenForItem); <span class="comment">// 指认如何获取item的子项</span></span><br><span class="line"></span><br><span class="line">STreeView::<span class="built_in">Construct</span>(Arguments);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">TSharedRef&lt;ITableRow&gt; <span class="title">SMyTreeView::GenerateRowItem</span><span class="params">(TSharedPtr&lt;UTreeItemData&gt; InTreeItemData, <span class="type">const</span> TSharedRef&lt;STableViewBase&gt;&amp; OwnerTable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(STableRow&lt;TSharedPtr&lt;UTreeItemData&gt;&gt;, OwnerTable)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(InTreeItemData-&gt;MyName))</span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(FString::<span class="built_in">SanitizeFloat</span>(InTreeItemData-&gt;MyHeight)))</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyTreeView::GetChildrenForItem</span><span class="params">(TSharedPtr&lt;UTreeItemData&gt; InTreeItem, TArray&lt;TSharedPtr&lt;UTreeItemData&gt;&gt;&amp; OutChildren)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">OutChildren = InTreeItem-&gt;Children;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>SlistView</h1><blockquote><p>跟STreeView差不多 就不加注释了</p></blockquote><h2 id="SMylistView-h">SMylistView.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UListViewItemData</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">FString MyName = <span class="string">&quot;ZhangSan&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyListView</span> :<span class="keyword">public</span> SListView&lt;TSharedPtr&lt;UListViewItemData&gt;&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line"></span><br><span class="line">TArray&lt;TSharedPtr&lt;UListViewItemData&gt;&gt; ListItemDatas;</span><br><span class="line"></span><br><span class="line"><span class="function">TSharedRef&lt;ITableRow&gt; <span class="title">GenerateRowItem</span><span class="params">(TSharedPtr&lt;UListViewItemData&gt; InListViewItemData, <span class="type">const</span> TSharedRef&lt;STableViewBase&gt;&amp; OwnerTable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="SMyListView-cpp">SMyListView.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyListView.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyListView::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FArguments Arguments = InArgs;</span><br><span class="line"></span><br><span class="line">ListItemDatas.<span class="built_in">Add</span>(<span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UListViewItemData));</span><br><span class="line">ListItemDatas.<span class="built_in">Add</span>(<span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UListViewItemData));</span><br><span class="line">ListItemDatas.<span class="built_in">Add</span>(<span class="built_in">MakeShareable</span>(<span class="keyword">new</span> UListViewItemData));</span><br><span class="line"></span><br><span class="line">Arguments.<span class="built_in">ListItemsSource</span>(&amp;ListItemDatas);</span><br><span class="line">Arguments.<span class="built_in">OnGenerateRow_Raw</span>(<span class="keyword">this</span>, &amp;SMyListView::GenerateRowItem);</span><br><span class="line"></span><br><span class="line">SListView::<span class="built_in">Construct</span>(Arguments);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TSharedRef&lt;ITableRow&gt; <span class="title">SMyListView::GenerateRowItem</span><span class="params">(TSharedPtr&lt;UListViewItemData&gt; InListViewItemData, <span class="type">const</span> TSharedRef&lt;STableViewBase&gt;&amp; OwnerTable)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(STableRow&lt;TSharedPtr&lt;UListViewItemData&gt;&gt;, OwnerTable)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(InListViewItemData-&gt;MyName))</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>SImage</h1><blockquote><p>在之前的SMyCanvas.cpp里面添加新的槽并加入SImage控件<br>其中Icons.Warning使用的是UE自带的图片</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加图像</span></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2D</span>(<span class="number">400</span>, <span class="number">200</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Icons.Warning&quot;</span>))</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h1>SGridPanel</h1><blockquote><p>在之前的SMyCanvas.cpp里面添加新的槽并加入SGridPanel布局</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加网格布局</span></span><br><span class="line"><span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">Position</span>(<span class="built_in">FVector2D</span>(<span class="number">400</span>, <span class="number">500</span>))</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SGridPanel)</span><br><span class="line"><span class="comment">// 设置每个网格的行和列上的控件都占一份</span></span><br><span class="line">.<span class="built_in">FillColumn</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">.<span class="built_in">FillColumn</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">.<span class="built_in">FillRow</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">.<span class="built_in">FillRow</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">+ SGridPanel::<span class="built_in">Slot</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Icons.Warning&quot;</span>))</span><br><span class="line">]</span><br><span class="line">+ SGridPanel::<span class="built_in">Slot</span>(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Icons.Warning&quot;</span>))</span><br><span class="line">]</span><br><span class="line">+ SGridPanel::<span class="built_in">Slot</span>(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Icons.Warning&quot;</span>))</span><br><span class="line">]</span><br><span class="line">+ SGridPanel::<span class="built_in">Slot</span>(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Icons.Warning&quot;</span>))</span><br><span class="line">]</span><br><span class="line">];</span><br></pre></td></tr></table></figure><hr><h1>FTabManage</h1><blockquote><p>在FirstProgram.cpp里面直接添加FTabManage来体现FTabManage的使用方法,首先先把之前生成SWindow的代码注释掉.</p></blockquote><p>生成的结果如下图所示<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-2.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FirstProgram.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RequiredProgramMainCPPInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StandaloneRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Application/SlateApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCanvas.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY_STATIC</span>(LogFirstProgram, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_APPLICATION</span>(FirstProgram, <span class="string">&quot;FirstProgram&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WinMain, called when the application is started</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR, _In_ <span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// start up the main loop</span></span><br><span class="line">GEngineLoop.<span class="built_in">PreInit</span>(<span class="built_in">GetCommandLineW</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// crank up a normal Slate application using the platform&#x27;s standalone renderer</span></span><br><span class="line">FSlateApplication::<span class="built_in">InitializeAsStandaloneApplication</span>(<span class="built_in">GetStandardStandaloneRenderer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// FTabManager</span></span><br><span class="line">TArray&lt;FName&gt; TabName = &#123; <span class="string">&quot;LeftTab1&quot;</span>,<span class="string">&quot;LeftTab2&quot;</span>,<span class="string">&quot;RightTopTab&quot;</span>,<span class="string">&quot;RightBottomTab&quot;</span> &#125;;</span><br><span class="line"><span class="type">const</span> TSharedRef&lt;FTabManager::FLayout&gt; Layout = FTabManager::<span class="built_in">NewLayout</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Layout&quot;</span>)) <span class="comment">// 新建Layout</span></span><br><span class="line">-&gt;<span class="built_in">AddArea</span>( <span class="comment">// 为Layout添加Area</span></span><br><span class="line">FTabManager::<span class="built_in">NewArea</span>(<span class="number">800</span>, <span class="number">600</span>) <span class="comment">// 新建Area</span></span><br><span class="line">-&gt;<span class="built_in">SetOrientation</span>(EOrientation::Orient_Horizontal) <span class="comment">// 设置方向为左右分割</span></span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置左边的区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>() <span class="comment">// 新增可堆叠在一起的栈</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">0</span>],ETabState::OpenedTab) <span class="comment">// 在这个栈里面添加一个Tab</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">1</span>], ETabState::OpenedTab) <span class="comment">// 在这个栈里面再添加一个Tab</span></span><br><span class="line">)</span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置右边的区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewSplitter</span>() <span class="comment">// 在右边的区域新增一个分割块</span></span><br><span class="line">-&gt;<span class="built_in">SetOrientation</span>(EOrientation::Orient_Vertical) <span class="comment">// 设置分割块为上下分割</span></span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置右边上方的分割区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>() <span class="comment">// 新增可堆叠在一起的栈</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">2</span>],ETabState::OpenedTab) <span class="comment">// 添加Tab</span></span><br><span class="line">)</span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置右边下方的分割区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>()<span class="comment">// 新增可堆叠在一起的栈</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">3</span>],ETabState::OpenedTab)<span class="comment">// 添加Tab</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RestoreFrom</span>(Layout, <span class="built_in">TSharedPtr</span>&lt;SWindow&gt;()); <span class="comment">// 将Layout放到SWindow里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// loop while the server does the rest</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">IsEngineExitRequested</span>())</span><br><span class="line">&#123;</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">PumpMessages</span>();</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">Tick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>SDockTab(给Tab添加内容并令Tab能够进行拖拽与停靠)</h1><blockquote><p>要实现这样的Tab,需要通过FGlobalTabmanager::Get()-&gt;RegisterTabSpawner来注册SDockTab</p></blockquote><ul><li>这里解释一下工厂函数FOnSpawnTab::CreateLambda配合C++的lambda语法是怎么样的:</li><li>FOnSpawnTab::CreateLambda([&amp;](const FSpawnTabArgs&amp; Args)-&gt;TSharedRef<SDockTab> {})</SDockTab></li><li>首先工厂函数FOnSpawnTab::CreateLambda的作用是接收一个lambda表达式来生成一个tab</li><li>[&amp;](const FSpawnTabArgs&amp; Args)-&gt;TSharedRef<SDockTab> {}就是一个lambda语法,语法为:[捕获列表](参数列表)-&gt;返回类型{函数体}</SDockTab></li><li>捕获列表意思是函数体可以使用的外部的参数,&amp;表示所有外部的参数都能使用,参数列表为传入函数体的参数,-&gt;后是返回的类型<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-3.png" alt="Alt text"><br>通过以下代码将名字叫LeftTab1的Tab定义成DockTab并且定义Tab的内容</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">TArray&lt;FName&gt; TabName = &#123; <span class="string">&quot;LeftTab1&quot;</span>,<span class="string">&quot;LeftTab2&quot;</span>,<span class="string">&quot;RightTopTab&quot;</span>,<span class="string">&quot;RightBottomTab&quot;</span>&#125;;</span><br><span class="line"><span class="comment">// 注册一个Tab,并使Tab可以被拖拽和停靠边缘,tab下存在一个按钮.</span></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterTabSpawner</span>(TabName[<span class="number">0</span>], FOnSpawnTab::<span class="built_in">CreateLambda</span>(</span><br><span class="line">[&amp;](<span class="type">const</span> FSpawnTabArgs&amp; Args)-&gt;TSharedRef&lt;SDockTab&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">0</span>]))</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure><hr><h1>制作菜单栏</h1><blockquote><p>制作如图所示菜单栏<br>其中MyMenu为菜单栏,OpenFile和CloseFile,SaveFile这些都是菜单栏下对应的命令.<br>MyEditor是负责控制总UI的,想要显示这个UI就需要在FirstProgram.cpp(自己创建的程序)里面创建一个MyEditor对象就可以了.</p></blockquote><p><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-4.png" alt="Alt text"></p><hr><h2 id="FMenuBarBuilder-生成菜单栏">FMenuBarBuilder 生成菜单栏</h2><p>生成菜单栏也就是创建FMenuBarBuilder这个类,创建这个类有一个必须要的参数是FUICommandList类型的智能指针<br>菜单栏的类型为SWidget,因此有了FMenuBarBuilder的对象以后就可以通过MakeWidget函数来得到菜单栏.</p><hr><h2 id="TCommands-设置菜单栏下对应的命令">TCommands 设置菜单栏下对应的命令</h2><p>通过继承TCommands创建一个属于自己的命令,然后通过UI_COMMAND定义命令的信息</p><hr><h2 id="FUICommandList">FUICommandList</h2><p>通过FNewMenuDelegate::CreateLambda来将命令添加到菜单栏上,通过FUICommandList的对象的MapAction方法可以将菜单栏上的命令对应的执行功能.</p><hr><h2 id="总的代码">总的代码</h2><h3 id="MyCommands-h">MyCommands.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Commands/Commands.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCommands</span> : <span class="keyword">public</span> TCommands&lt;MyCommands&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">MyCommands</span>();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">RegisterCommands</span><span class="params">()</span> <span class="keyword">override</span></span>; <span class="comment">// 声明重载父类的注册命令函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明三个命令</span></span><br><span class="line">TSharedPtr&lt; FUICommandInfo &gt; OpenFileCommand; </span><br><span class="line">TSharedPtr&lt; FUICommandInfo &gt; CloseFileCommand;</span><br><span class="line">TSharedPtr&lt; FUICommandInfo &gt; SaveFileCommand;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="MyCommands-cpp">MyCommands.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCommands.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOCTEXT_NAMESPACE <span class="string">&quot;MyCommands&quot;</span></span></span><br><span class="line"></span><br><span class="line">MyCommands::<span class="built_in">MyCommands</span>()</span><br><span class="line">:<span class="built_in">TCommands</span>&lt;MyCommands&gt;(</span><br><span class="line"><span class="built_in">TEXT</span>(<span class="string">&quot;MyCommands&quot;</span>), <span class="comment">// Context name for fast lookup</span></span><br><span class="line"><span class="built_in">NSLOCTEXT</span>(<span class="string">&quot;Contexts&quot;</span>, <span class="string">&quot;MyEditor&quot;</span>, <span class="string">&quot;My Editor&quot;</span>), <span class="comment">// Localized context name for displaying</span></span><br><span class="line">NAME_None,</span><br><span class="line">FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetStyleSetName</span>() <span class="comment">// Icon Style Set</span></span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MyCommands::RegisterCommands</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 定义三个命令的信息</span></span><br><span class="line"><span class="built_in">UI_COMMAND</span>(OpenFileCommand, <span class="string">&quot;OpenFile&quot;</span>, <span class="string">&quot;This is OpenFile command.&quot;</span>, EUserInterfaceActionType::Button, <span class="built_in">FInputChord</span>(EModifierKey::Control,EKeys::O));</span><br><span class="line"><span class="built_in">UI_COMMAND</span>(CloseFileCommand, <span class="string">&quot;CloseFile&quot;</span>, <span class="string">&quot;This is CloseFile command.&quot;</span>, EUserInterfaceActionType::Button, <span class="built_in">FInputChord</span>(EModifierKey::Control, EKeys::C));</span><br><span class="line"><span class="built_in">UI_COMMAND</span>(SaveFileCommand, <span class="string">&quot;SaveFile&quot;</span>, <span class="string">&quot;This is SaveFile command.&quot;</span>, EUserInterfaceActionType::Button, <span class="built_in">FInputChord</span>(EModifierKey::Control, EKeys::S));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> LOCTEXT_NAMESPACE</span></span><br></pre></td></tr></table></figure><h3 id="MyEditor-h">MyEditor.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyEditor</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="built_in">MyEditor</span>();</span><br><span class="line"><span class="function">TSharedRef&lt;SWidget&gt; <span class="title">MakeMenuBar</span><span class="params">()</span></span>; <span class="comment">// 声明生成菜单栏的函数.</span></span><br><span class="line">TSharedPtr&lt;FUICommandList&gt; CommandList;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="MyEditor-cpp">MyEditor.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyEditor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyCommands.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOCTEXT_NAMESPACE <span class="string">&quot;MyEditor&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyEditor::<span class="built_in">MyEditor</span>()</span><br><span class="line">&#123;</span><br><span class="line">CommandList = <span class="built_in">MakeShareable</span>(<span class="keyword">new</span> FUICommandList);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进行注册命令</span></span><br><span class="line">MyCommands::<span class="built_in">Register</span>();</span><br><span class="line"><span class="comment">// 添加命令执行时对应的功能</span></span><br><span class="line">CommandList-&gt;<span class="built_in">MapAction</span>(MyCommands::<span class="built_in">Get</span>().OpenFileCommand,</span><br><span class="line">FExecuteAction::<span class="built_in">CreateLambda</span>([]() &#123;</span><br><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok, FText::<span class="built_in">FromString</span>(<span class="string">&quot;OpenFileCommand!&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">CommandList-&gt;<span class="built_in">MapAction</span>(MyCommands::<span class="built_in">Get</span>().CloseFileCommand,</span><br><span class="line">FExecuteAction::<span class="built_in">CreateLambda</span>([]() &#123;</span><br><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok, FText::<span class="built_in">FromString</span>(<span class="string">&quot;CloseFileCommand!&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line">CommandList-&gt;<span class="built_in">MapAction</span>(MyCommands::<span class="built_in">Get</span>().SaveFileCommand,</span><br><span class="line">FExecuteAction::<span class="built_in">CreateLambda</span>([]() &#123;</span><br><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok, FText::<span class="built_in">FromString</span>(<span class="string">&quot;SaveFileCommand!&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// FTabManager</span></span><br><span class="line">TArray&lt;FName&gt; TabName = &#123; <span class="string">&quot;LeftTab&quot;</span>,<span class="string">&quot;RightTopTab&quot;</span>,<span class="string">&quot;RightBottomTab&quot;</span> &#125;;</span><br><span class="line"><span class="comment">// 注册一个Tab,并使Tab可以被拖拽和停靠边缘,tab下存在一个按钮.</span></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterTabSpawner</span>(TabName[<span class="number">0</span>], FOnSpawnTab::<span class="built_in">CreateLambda</span>(</span><br><span class="line">[&amp;](<span class="type">const</span> FSpawnTabArgs&amp; Args)-&gt;TSharedRef&lt;SDockTab&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">AutoHeight</span>() <span class="comment">// 设置菜单栏为合适的高度</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">MakeMenuBar</span>()</span><br><span class="line">]</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">FillHeight</span>(<span class="number">1.f</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">0</span>]))</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterTabSpawner</span>(TabName[<span class="number">1</span>], FOnSpawnTab::<span class="built_in">CreateLambda</span>(</span><br><span class="line">[&amp;](<span class="type">const</span> FSpawnTabArgs&amp; Args)-&gt;TSharedRef&lt;SDockTab&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">1</span>]))</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RegisterTabSpawner</span>(TabName[<span class="number">2</span>], FOnSpawnTab::<span class="built_in">CreateLambda</span>(</span><br><span class="line">[&amp;](<span class="type">const</span> FSpawnTabArgs&amp; Args)-&gt;TSharedRef&lt;SDockTab&gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">SNew</span>(SDockTab)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">2</span>]))</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">));</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> TSharedRef&lt;FTabManager::FLayout&gt; Layout = FTabManager::<span class="built_in">NewLayout</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;Layout&quot;</span>)) <span class="comment">// 新建Layout</span></span><br><span class="line">-&gt;<span class="built_in">AddArea</span>( <span class="comment">// 为Layout添加Area</span></span><br><span class="line">FTabManager::<span class="built_in">NewArea</span>(<span class="number">800</span>, <span class="number">600</span>) <span class="comment">// 新建Area</span></span><br><span class="line">-&gt;<span class="built_in">SetOrientation</span>(EOrientation::Orient_Horizontal) <span class="comment">// 设置方向为左右分割</span></span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置左边的区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>() <span class="comment">// 新增可堆叠在一起的栈</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">0</span>], ETabState::OpenedTab) <span class="comment">// 在这个栈里面添加一个Tab</span></span><br><span class="line">)</span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置右边的区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewSplitter</span>() <span class="comment">// 在右边的区域新增一个分割块</span></span><br><span class="line">-&gt;<span class="built_in">SetOrientation</span>(EOrientation::Orient_Vertical) <span class="comment">// 设置分割块为上下分割</span></span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置右边上方的分割区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>() <span class="comment">// 新增可堆叠在一起的栈</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">1</span>], ETabState::OpenedTab) <span class="comment">// 添加Tab</span></span><br><span class="line">)</span><br><span class="line">-&gt;<span class="built_in">Split</span>( <span class="comment">// 设置右边下方的分割区域</span></span><br><span class="line">FTabManager::<span class="built_in">NewStack</span>()<span class="comment">// 新增可堆叠在一起的栈</span></span><br><span class="line">-&gt;<span class="built_in">AddTab</span>(TabName[<span class="number">2</span>], ETabState::OpenedTab)<span class="comment">// 添加Tab</span></span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">RestoreFrom</span>(Layout, <span class="built_in">TSharedPtr</span>&lt;SWindow&gt;()); <span class="comment">// 将Layout放到SWindow里面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负责生成菜单栏的函数</span></span><br><span class="line"><span class="function">TSharedRef&lt;SWidget&gt; <span class="title">MyEditor::MakeMenuBar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">FMenuBarBuilder <span class="title">MenuBuilder</span><span class="params">(CommandList)</span></span>; <span class="comment">// 生成一个FMenuBarBuilder对象,传入FUICommandList类型的智能指针</span></span><br><span class="line">MenuBuilder.<span class="built_in">AddPullDownMenu</span>(</span><br><span class="line"><span class="built_in">LOCTEXT</span>(<span class="string">&quot;MyMenu&quot;</span>, <span class="string">&quot;MyMenu&quot;</span>), <span class="comment">// 菜单名</span></span><br><span class="line"><span class="built_in">LOCTEXT</span>(<span class="string">&quot;MyMenu&quot;</span>, <span class="string">&quot;This is my menu&quot;</span>), <span class="comment">// 菜单提示词</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将命令添加到菜单栏上</span></span><br><span class="line">FNewMenuDelegate::<span class="built_in">CreateLambda</span>(</span><br><span class="line">[](FMenuBuilder&amp; MenuBuilder)&#123;</span><br><span class="line">MenuBuilder.<span class="built_in">AddMenuEntry</span>(MyCommands::<span class="built_in">Get</span>().OpenFileCommand);</span><br><span class="line">MenuBuilder.<span class="built_in">AddMenuEntry</span>(MyCommands::<span class="built_in">Get</span>().CloseFileCommand);</span><br><span class="line">MenuBuilder.<span class="built_in">AddMenuEntry</span>(MyCommands::<span class="built_in">Get</span>().SaveFileCommand);</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> MenuBuilder.<span class="built_in">MakeWidget</span>(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">undef</span> LOCTEXT_NAMESPACE</span></span><br></pre></td></tr></table></figure><hr><h1>FToolBarBuilder 创建工具架</h1><p>这次通过上一节创建菜单栏需要的TCommand添加到工具架上.<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-5.png" alt="Alt text"><br>思路就是仿照上一节的MakeMenuBar函数来创建一个MakeToolBar函数.然后通过这个函数返回一个SWidget,然后将这个函数放到布局里面就可以了.<br>函数代码如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TSharedRef&lt;SWidget&gt; <span class="title">MyEditor::MakeToolBar</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">FToolBarBuilder <span class="title">ToolBarBuilder</span><span class="params">(CommandList,FMultiBoxCustomization::None)</span></span>;</span><br><span class="line">ToolBarBuilder.<span class="built_in">BeginSection</span>(<span class="string">&quot;MySection&quot;</span>);</span><br><span class="line">ToolBarBuilder.<span class="built_in">AddToolBarButton</span>(MyCommands::<span class="built_in">Get</span>().OpenFileCommand);</span><br><span class="line">ToolBarBuilder.<span class="built_in">AddToolBarButton</span>(MyCommands::<span class="built_in">Get</span>().CloseFileCommand);</span><br><span class="line">ToolBarBuilder.<span class="built_in">AddToolBarButton</span>(MyCommands::<span class="built_in">Get</span>().SaveFileCommand);</span><br><span class="line">ToolBarBuilder.<span class="built_in">EndSection</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ToolBarBuilder.<span class="built_in">MakeWidget</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>SEditableText 文本编辑框</h1><h2 id="添加文本编辑框">添加文本编辑框</h2><p>其中<strong>EditableText</strong>是在头文件中声明的SEditableText类型的智能指针:TSharedPtr<SEditableText> EditableText;</SEditableText></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SAssignNew</span>(EditableText,SEditableText)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="获取文本编辑框中的文字">获取文本编辑框中的文字</h2><p>这里展示通过按钮点击弹出消息框,消息框内容是文本编辑框中的文字的演示:<br>主要代码为:<strong>EditableText-&gt;GetText()</strong>,其中EditableText为添加文本编辑框时创建的SEditableText类型的智能指针.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">1</span>]))</span><br><span class="line">.<span class="built_in">OnClicked_Lambda</span>(</span><br><span class="line">[<span class="keyword">this</span>]() &#123;</span><br><span class="line">FMessageDialog::<span class="built_in">Open</span>(EAppMsgType::Ok, EditableText-&gt;<span class="built_in">GetText</span>());</span><br><span class="line"><span class="keyword">return</span> FReply::<span class="built_in">Handled</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1>SSplitter</h1><blockquote><p>添加分割左右两边的分割条,左边为一个button,右边为一个button,左边的button大小是右边的button大小的二倍</p></blockquote><p><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-6.png" alt="Alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SNew</span>(SSplitter)</span><br><span class="line">+SSplitter::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">Value</span>(<span class="number">2.0f</span>) <span class="comment">// 设置这个槽占两份</span></span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">2</span>]))</span><br><span class="line">]</span><br><span class="line">+SSplitter::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">2</span>]))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><p>#Sborder 填充</p><blockquote><p>填充类型分为颜色填充和图像填充和九宫格填充<br>其中颜色填充需要新建一个<strong>static</strong>成员变量</p></blockquote><p>效果如下:<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-7.png" alt="Alt text"><br>添加方法如下:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> FSlateColorBrush ColorBrush = <span class="built_in">FSlateColorBrush</span>(<span class="built_in">FLinearColor</span>(<span class="number">1.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>));</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">FillHeight</span>(<span class="number">1.f</span>)</span><br><span class="line">[</span><br><span class="line"><span class="comment">// 颜色填充</span></span><br><span class="line"><span class="built_in">SNew</span>(SBorder)</span><br><span class="line">.<span class="built_in">BorderImage</span>(&amp;ColorBrush)</span><br><span class="line">]</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="comment">// 图像填充</span></span><br><span class="line"><span class="built_in">SNew</span>(SBorder)</span><br><span class="line">.<span class="built_in">BorderImage</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Icons.Warning&quot;</span>))</span><br><span class="line">]</span><br><span class="line">+SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="comment">// Box填充(九宫格)</span></span><br><span class="line"><span class="built_in">SNew</span>(SBorder)</span><br><span class="line">.<span class="built_in">BorderImage</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(<span class="string">&quot;Debug.Border&quot;</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h1>SOverlay</h1><blockquote><p>SOverlay属于布局,用法也跟布局一样,这个布局的显示效果为:布局下的后创建的槽会覆盖前面创建的槽,就跟PS的图层一样,后创建的图层会覆盖之前的图层.</p></blockquote><hr><h1>SLeafWidget</h1><blockquote><p>可以通过继承SLeafWidget来创建自己的较简单的控件(这个控件不能够作为容器来包含其他控件).</p></blockquote><p>具体代码参考：</p><h2 id="SMyLeafWidget-h">SMyLeafWidget.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/SLeafWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyLeafWidget</span> : <span class="keyword">public</span> SLeafWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">// 定义在SNew(SMyLeafWidget)时可以设置的属性(步骤参考SLATE_BEGIN_ARGS这个宏)</span></span><br><span class="line"><span class="built_in">SLATE_BEGIN_ARGS</span>(SMyLeafWidget) </span><br><span class="line">: _StartPoint(<span class="built_in">FVector2D</span>(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">, _EndPoint(<span class="built_in">FVector2D</span>(<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">SLATE_ATTRIBUTE</span>(FVector2D, StartPoint);</span><br><span class="line"><span class="built_in">SLATE_ATTRIBUTE</span>(FVector2D, EndPoint);</span><br><span class="line"><span class="built_in">SLATE_END_ARGS</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">TArray&lt;FVector2D&gt; Points;</span><br><span class="line">    <span class="comment">// 这两个函数是SLeafWidget声明的纯虚函数,因此必须定义</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> FVector2D <span class="title">ComputeDesiredSize</span><span class="params">(<span class="type">float</span>)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> int32 <span class="title">OnPaint</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FPaintArgs&amp; Args,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FGeometry&amp; AllottedGeometry,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FSlateRect&amp; MyCullingRect,</span></span></span><br><span class="line"><span class="params"><span class="function">FSlateWindowElementList&amp; OutDrawElements,</span></span></span><br><span class="line"><span class="params"><span class="function">int32 LayerId,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FWidgetStyle&amp; InWidgetStyle,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">bool</span> bParentEnabled)</span> <span class="type">const</span> <span class="keyword">override</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMyLeafWidget-cpp">SMyLeafWidget.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyLeafWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyLeafWidget::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 因为_StartPoint和_EndPoint都是属性，因此需要通过Get()来获取属性的值</span></span><br><span class="line">Points.<span class="built_in">Add</span>(InArgs._StartPoint.<span class="built_in">Get</span>());</span><br><span class="line">Points.<span class="built_in">Add</span>(InArgs._EndPoint.<span class="built_in">Get</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FVector2D <span class="title">SMyLeafWidget::ComputeDesiredSize</span><span class="params">(<span class="type">float</span>)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">FVector2D</span>(<span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">SMyLeafWidget::OnPaint</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FPaintArgs&amp; Args,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FGeometry&amp; AllottedGeometry,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FSlateRect&amp; MyCullingRect,</span></span></span><br><span class="line"><span class="params"><span class="function">FSlateWindowElementList&amp; OutDrawElements,</span></span></span><br><span class="line"><span class="params"><span class="function">int32 LayerId,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">const</span> FWidgetStyle&amp; InWidgetStyle,</span></span></span><br><span class="line"><span class="params"><span class="function"><span class="type">bool</span> bParentEnabled)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 绘制一条线</span></span><br><span class="line">FSlateDrawElement::<span class="built_in">MakeLines</span>(OutDrawElements, LayerId, AllottedGeometry.<span class="built_in">ToPaintGeometry</span>(), Points);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> LayerId++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FirstProgram-cpp-最终生成窗口使用控件的程序">FirstProgram.cpp(最终生成窗口使用控件的程序)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FirstProgram.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RequiredProgramMainCPPInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StandaloneRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Application/SlateApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyleafWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY_STATIC</span>(LogFirstProgram, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_APPLICATION</span>(FirstProgram, <span class="string">&quot;FirstProgram&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WinMain, called when the application is started</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR, _In_ <span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// start up the main loop</span></span><br><span class="line">GEngineLoop.<span class="built_in">PreInit</span>(<span class="built_in">GetCommandLineW</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// crank up a normal Slate application using the platform&#x27;s standalone renderer</span></span><br><span class="line">FSlateApplication::<span class="built_in">InitializeAsStandaloneApplication</span>(<span class="built_in">GetStandardStandaloneRenderer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建SMyLeafWidget控件的共享指针</span></span><br><span class="line">TSharedPtr&lt;SMyLeafWidget&gt; MyLeafWidget = </span><br><span class="line"><span class="built_in">SNew</span>(SMyLeafWidget)</span><br><span class="line">.<span class="built_in">StartPoint</span>(<span class="built_in">FVector2D</span>(<span class="number">0.f</span>,<span class="number">0.f</span>))</span><br><span class="line">.<span class="built_in">EndPoint</span>(<span class="built_in">FVector2D</span>(<span class="number">200.f</span>,<span class="number">200.f</span>));</span><br><span class="line"><span class="comment">// 创建一个窗口</span></span><br><span class="line">TSharedPtr&lt;SWindow&gt; MainWindow = <span class="built_in">SNew</span>(SWindow)</span><br><span class="line">.<span class="built_in">ClientSize</span>(<span class="built_in">FVector2D</span>(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">[</span><br><span class="line">MyLeafWidget.<span class="built_in">ToSharedRef</span>() <span class="comment">// 共享指针转共享引用</span></span><br><span class="line"></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">AddWindow</span>(MainWindow.<span class="built_in">ToSharedRef</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*MyEditor::MyEditor();*/</span></span><br><span class="line"><span class="comment">// loop while the server does the rest</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">IsEngineExitRequested</span>())</span><br><span class="line">&#123;</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">PumpMessages</span>();</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">Tick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>SCompoundWidget</h1><blockquote><p>可以通过继承SCompoundWidget来创建自己的较复杂的控件(这个控件能够作为容器来包含其他控件,这是它与SLeafWidget的不同).</p></blockquote><h2 id="SMyCompoundWidget-h">SMyCompoundWidget.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyCompoundWidget</span> : <span class="keyword">public</span> SCompoundWidget</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SLATE_BEGIN_ARGS</span>(SMyCompoundWidget)</span><br><span class="line">: _Content()</span><br><span class="line">, _HAlign(HAlign_Fill)</span><br><span class="line">, _VAlign(VAlign_Fill)</span><br><span class="line">&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SLATE_DEFAULT_SLOT</span>(FArguments, Content) <span class="comment">// 这个CompoundWidget有一个槽</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(EHorizontalAlignment, HAlign) <span class="comment">// 可以通过HAlign调整左右对齐</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(EVerticalAlignment, VAlign) <span class="comment">// 可以通过VAlign调整上下对齐</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">SLATE_END_ARGS</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMyCompoundWidget-cpp">SMyCompoundWidget.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCompoundWidget.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyCompoundWidget::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ChildSlot</span><br><span class="line">.<span class="built_in">HAlign</span>(InArgs._HAlign)</span><br><span class="line">.<span class="built_in">VAlign</span>(InArgs._VAlign)</span><br><span class="line">[</span><br><span class="line">InArgs._Content.Widget</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>SCustomDialog</h1><blockquote><p><strong>由于CustomDialog是编辑器使用的模块,因此不能够直接include来使用,所以找到其源文件复制到程序文件夹中进行使用.</strong><br>将其复制到自己程序的文件夹中后改一下自己想要定义的名字,然后将其内容修改一下使其能够自己使用.</p></blockquote><h2 id="SMyCustomDialog-h">SMyCustomDialog.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/SWindow.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** This is a custom dialog class, which allows any Slate widget to be used as the contents,</span></span><br><span class="line"><span class="comment"> * with any number of buttons that have any text. </span></span><br><span class="line"><span class="comment"> * It also supports adding a custom icon to the dialog.</span></span><br><span class="line"><span class="comment"> * Usage:</span></span><br><span class="line"><span class="comment"> * TSharedRef&lt;SCustomDialog&gt; HelloWorldDialog = SNew(SCustomDialog)</span></span><br><span class="line"><span class="comment">.Title(FText(LOCTEXT(&quot;HelloWorldTitleExample&quot;, &quot;Hello, World!&quot;)))</span></span><br><span class="line"><span class="comment">.DialogContent( SNew(SImage).Image(FName(TEXT(&quot;Hello&quot;))))</span></span><br><span class="line"><span class="comment">.Buttons(&#123;</span></span><br><span class="line"><span class="comment">SCustomDialog::FButton(LOCTEXT(&quot;OK&quot;, &quot;OK&quot;)),</span></span><br><span class="line"><span class="comment">SCustomDialog::FButton(LOCTEXT(&quot;Cancel&quot;, &quot;Cancel&quot;))</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   // returns 0 when OK is pressed, 1 when Cancel is pressed, -1 if the window is closed</span></span><br><span class="line"><span class="comment">   const int ButtonPressed = HelloWorldDialog-&gt;ShowModal();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyCustomDialog</span> : <span class="keyword">public</span> SWindow</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">FButton</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">FButton</span>(<span class="type">const</span> FText&amp; InButtonText, <span class="type">const</span> FSimpleDelegate&amp; InOnClicked = <span class="built_in">FSimpleDelegate</span>())</span><br><span class="line">: <span class="built_in">ButtonText</span>(InButtonText),</span><br><span class="line"><span class="built_in">OnClicked</span>(InOnClicked)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FText ButtonText;</span><br><span class="line">FSimpleDelegate OnClicked;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">SLATE_BEGIN_ARGS</span>(SMyCustomDialog)</span><br><span class="line">: _UseScrollBox(<span class="literal">true</span>)</span><br><span class="line">, _ScrollBoxMaxHeight(<span class="number">300</span>)</span><br><span class="line">&#123;</span><br><span class="line">_AccessibleParams = <span class="built_in">FAccessibleWidgetData</span>(EAccessibleBehavior::Auto);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** Title to display for the dialog. */</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(FText, Title)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Optional icon to display in the dialog. (default: none) */</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(FName, IconBrush)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Should this dialog use a scroll box for over-sized content? (default: true) */</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(<span class="type">bool</span>, UseScrollBox)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Max height for the scroll box (default: 300) */</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(int32, ScrollBoxMaxHeight)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The buttons that this dialog should have. One or more buttons must be added.*/</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(TArray&lt;FButton&gt;, Buttons)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Content for the dialog */</span></span><br><span class="line"><span class="built_in">SLATE_ARGUMENT</span>(TSharedPtr&lt;SWidget&gt;, DialogContent)</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Event triggered when the dialog is closed, either because one of the buttons is pressed, or the windows is closed. */</span></span><br><span class="line"><span class="built_in">SLATE_EVENT</span>(FSimpleDelegate, OnClosed)</span><br><span class="line"></span><br><span class="line"><span class="built_in">SLATE_END_ARGS</span>()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Show the dialog.</span></span><br><span class="line"><span class="comment"> * This method will return immediately.</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Show</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Show a modal dialog. Will block until an input is received.</span></span><br><span class="line"><span class="comment"> * Returns the index of the button that was pressed.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">int32 <span class="title">ShowModal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function">FReply <span class="title">OnButtonClicked</span><span class="params">(FSimpleDelegate OnClicked, int32 ButtonIndex)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** The index of the button that was pressed last. */</span></span><br><span class="line">int32 LastPressedButton = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">FSimpleDelegate OnClosed;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMyCustomDialog-cpp">SMyCustomDialog.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCustomDialog.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;HAL/PlatformApplicationMisc.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Application/SlateApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Docking/TabManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Logging/LogMacros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Styling/SlateBrush.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Images/SImage.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Input/SButton.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Text/STextBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Layout/SSpacer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Layout/SBox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Layout/SScrollBox.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Layout/SUniformGridPanel.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/SBoxPanel.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY_STATIC</span>(LogCustomDialog, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyCustomDialog::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogCustomDialog, Log, <span class="built_in">TEXT</span>(<span class="string">&quot;Dialog displayed:&quot;</span>), *InArgs._Title.<span class="built_in">ToString</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">check</span>(InArgs._Buttons.<span class="built_in">Num</span>() &gt; <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">OnClosed = InArgs._OnClosed;</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;SHorizontalBox&gt; ContentBox;</span><br><span class="line">TSharedPtr&lt;SHorizontalBox&gt; ButtonBox;</span><br><span class="line"></span><br><span class="line">SWindow::<span class="built_in">Construct</span>( SWindow::<span class="built_in">FArguments</span>()</span><br><span class="line">.<span class="built_in">Title</span>(InArgs._Title)</span><br><span class="line">.<span class="built_in">SizingRule</span>(ESizingRule::Autosized)</span><br><span class="line">.<span class="built_in">SupportsMaximize</span>(<span class="literal">false</span>)</span><br><span class="line">.<span class="built_in">SupportsMinimize</span>(<span class="literal">false</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBorder)</span><br><span class="line">.<span class="built_in">Padding</span>(<span class="number">4.f</span>)</span><br><span class="line">.<span class="built_in">BorderImage</span>(FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>( <span class="string">&quot;ToolPanel.GroupBorder&quot;</span> ))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">FillHeight</span>(<span class="number">1.0f</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SAssignNew</span>(ContentBox, SHorizontalBox)</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">.<span class="built_in">AutoHeight</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SAssignNew</span>(ButtonBox, SHorizontalBox)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">] );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (InArgs._IconBrush.<span class="built_in">IsValid</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FSlateBrush* ImageBrush = FCoreStyle::<span class="built_in">Get</span>().<span class="built_in">GetBrush</span>(InArgs._IconBrush);</span><br><span class="line"><span class="keyword">if</span> (ImageBrush != <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line">ContentBox-&gt;<span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">AutoWidth</span>()</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">.<span class="built_in">HAlign</span>(HAlign_Left)</span><br><span class="line">.<span class="built_in">Padding</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">0</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SImage)</span><br><span class="line">.<span class="built_in">Image</span>(ImageBrush)</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (InArgs._UseScrollBox)</span><br><span class="line">&#123;</span><br><span class="line">ContentBox-&gt;<span class="built_in">AddSlot</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBox)</span><br><span class="line">.<span class="built_in">MaxDesiredHeight</span>(InArgs._ScrollBoxMaxHeight)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SScrollBox)</span><br><span class="line">+SScrollBox::<span class="built_in">Slot</span>()</span><br><span class="line">[</span><br><span class="line">InArgs._DialogContent.<span class="built_in">ToSharedRef</span>()</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ContentBox-&gt;<span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">.<span class="built_in">HAlign</span>(HAlign_Left)</span><br><span class="line">[</span><br><span class="line">InArgs._DialogContent.<span class="built_in">ToSharedRef</span>()</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ButtonBox-&gt;<span class="built_in">AddSlot</span>()</span><br><span class="line">.<span class="built_in">AutoWidth</span>()</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SSpacer)</span><br><span class="line">.<span class="built_in">Size</span>(<span class="built_in">FVector2D</span>(<span class="number">20.0f</span>, <span class="number">1.0f</span>))</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;SUniformGridPanel&gt; ButtonPanel;</span><br><span class="line"></span><br><span class="line">ButtonBox-&gt;<span class="built_in">AddSlot</span>() </span><br><span class="line">.<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">.<span class="built_in">HAlign</span>(HAlign_Right)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SAssignNew</span>(ButtonPanel, SUniformGridPanel) <span class="comment">// 控制按钮的大小</span></span><br><span class="line">.<span class="built_in">SlotPadding</span>(<span class="number">0</span>)</span><br><span class="line">.<span class="built_in">MinDesiredSlotWidth</span>(<span class="number">100</span>)</span><br><span class="line">.<span class="built_in">MinDesiredSlotHeight</span>(<span class="number">30</span>)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (int32 i = <span class="number">0</span>; i &lt; InArgs._Buttons.<span class="built_in">Num</span>(); ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">const</span> FButton&amp; Button = InArgs._Buttons[i];</span><br><span class="line"></span><br><span class="line">ButtonPanel-&gt;<span class="built_in">AddSlot</span>(ButtonPanel-&gt;<span class="built_in">GetChildren</span>()-&gt;<span class="built_in">Num</span>(), <span class="number">0</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">OnClicked</span>(FOnClicked::<span class="built_in">CreateSP</span>(<span class="keyword">this</span>, &amp;SMyCustomDialog::OnButtonClicked, Button.OnClicked, i))</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">VAlign</span>(VAlign_Center)</span><br><span class="line">.<span class="built_in">HAlign</span>(HAlign_Center)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(STextBlock)</span><br><span class="line">.<span class="built_in">Text</span>(Button.ButtonText)</span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">int32 <span class="title">SMyCustomDialog::ShowModal</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">AddModalWindow</span>(<span class="built_in">StaticCastSharedRef</span>&lt;SWindow&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">AsShared</span>()), FGlobalTabmanager::<span class="built_in">Get</span>()-&gt;<span class="built_in">GetRootWindow</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> LastPressedButton;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyCustomDialog::Show</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TSharedRef&lt;SWindow&gt; Window = FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">AddWindow</span>(<span class="built_in">StaticCastSharedRef</span>&lt;SWindow&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">AsShared</span>()), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (OnClosed.<span class="built_in">IsBound</span>())</span><br><span class="line">&#123;</span><br><span class="line">Window-&gt;<span class="built_in">GetOnWindowClosedEvent</span>().<span class="built_in">AddLambda</span>([<span class="keyword">this</span>](<span class="type">const</span> TSharedRef&lt;SWindow&gt;&amp; Window) &#123; OnClosed.<span class="built_in">Execute</span>(); &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Handle the button being clicked */</span></span><br><span class="line"><span class="function">FReply <span class="title">SMyCustomDialog::OnButtonClicked</span><span class="params">(FSimpleDelegate OnClicked, int32 ButtonIndex)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">LastPressedButton = ButtonIndex;</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">RequestDestroyWindow</span>(<span class="built_in">StaticCastSharedRef</span>&lt;SWindow&gt;(<span class="keyword">this</span>-&gt;<span class="built_in">AsShared</span>()));</span><br><span class="line"></span><br><span class="line">OnClicked.<span class="built_in">ExecuteIfBound</span>();</span><br><span class="line"><span class="keyword">return</span> FReply::<span class="built_in">Handled</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="FirstProgram-cpp-3">FirstProgram.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FirstProgram.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RequiredProgramMainCPPInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StandaloneRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Application/SlateApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCanvas.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;MyEditor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyleafWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCompoundWidget.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyCustomDialog.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Input/SButton.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY_STATIC</span>(LogFirstProgram, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_APPLICATION</span>(FirstProgram, <span class="string">&quot;FirstProgram&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WinMain, called when the application is started</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR, _In_ <span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// start up the main loop</span></span><br><span class="line">GEngineLoop.<span class="built_in">PreInit</span>(<span class="built_in">GetCommandLineW</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// crank up a normal Slate application using the platform&#x27;s standalone renderer</span></span><br><span class="line">FSlateApplication::<span class="built_in">InitializeAsStandaloneApplication</span>(<span class="built_in">GetStandardStandaloneRenderer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建SMyCompoundWidget的共享指针</span></span><br><span class="line">TSharedPtr&lt;SMyCompoundWidget&gt; MyCompoundWidget =</span><br><span class="line"><span class="built_in">SNew</span>(SMyCompoundWidget)</span><br><span class="line">.<span class="built_in">HAlign</span>(EHorizontalAlignment::HAlign_Center)</span><br><span class="line">.<span class="built_in">VAlign</span>(EVerticalAlignment::VAlign_Bottom)</span><br><span class="line">[</span><br><span class="line"><span class="comment">// SNew(STextBlock).Text(FText::FromString(FString(&quot;Hello&quot;)))</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"> <span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="built_in">FString</span>(<span class="string">&quot;ShowDialog&quot;</span>))) <span class="comment">// UE5里面测试不加Text的话无法显示</span></span><br><span class="line">  .<span class="built_in">OnClicked_Lambda</span>([]() &#123;</span><br><span class="line">  <span class="comment">// 弹出自定义对话框</span></span><br><span class="line">  TSharedRef&lt;SMyCustomDialog&gt; MyCustomDialog = <span class="built_in">SNew</span>(SMyCustomDialog)</span><br><span class="line">  .<span class="built_in">Title</span>(FText::<span class="built_in">FromString</span>(<span class="built_in">FString</span>(<span class="string">&quot;DialogTitle&quot;</span>))) <span class="comment">// 定义标题</span></span><br><span class="line">  .<span class="built_in">DialogContent</span>( <span class="comment">// 定义dialog的内容</span></span><br><span class="line">  <span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">  +SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">  [</span><br><span class="line">  <span class="built_in">SNew</span>(STextBlock).<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="built_in">FString</span>(<span class="string">&quot;FirstRowText&quot;</span>)))</span><br><span class="line">  ]</span><br><span class="line">  +SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">  [</span><br><span class="line">  <span class="built_in">SNew</span>(STextBlock).<span class="built_in">Text</span>(FText::<span class="built_in">FromString</span>(<span class="built_in">FString</span>(<span class="string">&quot;SecondRowText&quot;</span>)))</span><br><span class="line">  ]</span><br><span class="line">  )</span><br><span class="line">  .<span class="built_in">Buttons</span></span><br><span class="line">  (&#123;</span><br><span class="line">  SMyCustomDialog::<span class="built_in">FButton</span>(FText::<span class="built_in">FromString</span>(<span class="built_in">FString</span>(<span class="string">&quot;Ok&quot;</span>)))</span><br><span class="line">  &#125;);</span><br><span class="line">  MyCustomDialog-&gt;<span class="built_in">ShowModal</span>();</span><br><span class="line">  <span class="keyword">return</span> FReply::<span class="built_in">Handled</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个窗口</span></span><br><span class="line">TSharedPtr&lt;SWindow&gt; MainWindow = <span class="built_in">SNew</span>(SWindow)</span><br><span class="line">.<span class="built_in">ClientSize</span>(<span class="built_in">FVector2D</span>(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">[</span><br><span class="line">MyCompoundWidget.<span class="built_in">ToSharedRef</span>() <span class="comment">// 共享指针转共享引用</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">AddWindow</span>(MainWindow.<span class="built_in">ToSharedRef</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*MyEditor::MyEditor();*/</span></span><br><span class="line"><span class="comment">// loop while the server does the rest</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">IsEngineExitRequested</span>())</span><br><span class="line">&#123;</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">PumpMessages</span>();</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">Tick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>SMultiLineEditableText</h1><blockquote><p>SMultiLineEditableText是可以直接用的,它的作用是多行文本编辑器,这一节的教程中并没有介绍其所具有的其他方法(下一节会将为其添加滚动条).只介绍了通过继承前面所讲的SCompoundWidget,然后把它放里面,然后加了个SBorder,给SBorder设置颜色填充并添加SMultiLineEditableText的例子.这里展示一下.</p></blockquote><h2 id="SMyMultiLineEditableText-h">SMyMultiLineEditableText.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Text/SMultiLineEditableText.h&quot;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SMyMultiLineEditableText</span> : <span class="keyword">public</span> SCompoundWidget</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">SLATE_BEGIN_ARGS</span>(SMyMultiLineEditableText)</span><br><span class="line">&#123;&#125;</span><br><span class="line"><span class="built_in">SLATE_END_ARGS</span>()</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="SMyMultiLineEditableText-cpp">SMyMultiLineEditableText.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyMultiLineEditableText.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyMultiLineEditableText::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> FSlateColorBrush ColorBrush = <span class="built_in">FSlateColorBrush</span>(<span class="built_in">FLinearColor</span>(<span class="number">0.25f</span>, <span class="number">0.25f</span>, <span class="number">0.25f</span>, <span class="number">0.25f</span>));</span><br><span class="line">ChildSlot</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBorder)</span><br><span class="line">.<span class="built_in">BorderImage</span>(&amp;ColorBrush)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SMultiLineEditableText)</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FirstProgram-cpp-4">FirstProgram.cpp</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;FirstProgram.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;RequiredProgramMainCPPInclude.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;StandaloneRenderer.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Application/SlateApplication.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyMultiLineEditableText.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEFINE_LOG_CATEGORY_STATIC</span>(LogFirstProgram, Log, All);</span><br><span class="line"></span><br><span class="line"><span class="built_in">IMPLEMENT_APPLICATION</span>(FirstProgram, <span class="string">&quot;FirstProgram&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WinMain, called when the application is started</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="type">int</span> WINAPI <span class="title">WinMain</span><span class="params">(_In_ HINSTANCE hInInstance, _In_opt_ HINSTANCE hPrevInstance, _In_ LPSTR, _In_ <span class="type">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// start up the main loop</span></span><br><span class="line">GEngineLoop.<span class="built_in">PreInit</span>(<span class="built_in">GetCommandLineW</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// crank up a normal Slate application using the platform&#x27;s standalone renderer</span></span><br><span class="line">FSlateApplication::<span class="built_in">InitializeAsStandaloneApplication</span>(<span class="built_in">GetStandardStandaloneRenderer</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建SMyMultiLineEditableText的共享指针</span></span><br><span class="line">TSharedPtr&lt;SMyMultiLineEditableText&gt; MyMultiLineEditableText = <span class="built_in">SNew</span>(SMyMultiLineEditableText);</span><br><span class="line"><span class="comment">// 创建一个窗口</span></span><br><span class="line">TSharedPtr&lt;SWindow&gt; MainWindow = <span class="built_in">SNew</span>(SWindow)</span><br><span class="line">.<span class="built_in">ClientSize</span>(<span class="built_in">FVector2D</span>(<span class="number">800</span>, <span class="number">600</span>))</span><br><span class="line">[</span><br><span class="line">MyMultiLineEditableText.<span class="built_in">ToSharedRef</span>() <span class="comment">// 共享指针转共享引用</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">AddWindow</span>(MainWindow.<span class="built_in">ToSharedRef</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*MyEditor::MyEditor();*/</span></span><br><span class="line"><span class="comment">// loop while the server does the rest</span></span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">IsEngineExitRequested</span>())</span><br><span class="line">&#123;</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">PumpMessages</span>();</span><br><span class="line">FSlateApplication::<span class="built_in">Get</span>().<span class="built_in">Tick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FSlateApplication::<span class="built_in">Shutdown</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>SScrollBar 滚动条</h1><p>在上一节SMyMultiLineEditableText.cpp的基础上为文本编辑器添加滚动条<br><em><strong>SMyMultiLineEditableText.cpp</strong></em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SMyMultiLineEditableText.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SMyMultiLineEditableText::Construct</span><span class="params">(<span class="type">const</span> FArguments&amp; InArgs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> FSlateColorBrush ColorBrush = <span class="built_in">FSlateColorBrush</span>(<span class="built_in">FLinearColor</span>(<span class="number">0.25f</span>, <span class="number">0.25f</span>, <span class="number">0.25f</span>, <span class="number">0.25f</span>));</span><br><span class="line"></span><br><span class="line">TSharedPtr&lt;SScrollBar&gt; HorizontalScrollBar = <span class="built_in">SNew</span>(SScrollBar).<span class="built_in">Orientation</span>(EOrientation::Orient_Horizontal);</span><br><span class="line">TSharedPtr&lt;SScrollBar&gt; VerticalScrollBar = <span class="built_in">SNew</span>(SScrollBar).<span class="built_in">Orientation</span>(EOrientation::Orient_Vertical);</span><br><span class="line">ChildSlot</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SBorder)</span><br><span class="line">.<span class="built_in">BorderImage</span>(&amp;ColorBrush)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SHorizontalBox)</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">FillWidth</span>(<span class="number">1.0f</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SVerticalBox)</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">FillHeight</span>(<span class="number">1.0f</span>)</span><br><span class="line">[</span><br><span class="line"><span class="built_in">SNew</span>(SMultiLineEditableText)</span><br><span class="line">.<span class="built_in">HScrollBar</span>(HorizontalScrollBar)</span><br><span class="line">.<span class="built_in">VScrollBar</span>(VerticalScrollBar)</span><br><span class="line">]</span><br><span class="line">+ SVerticalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">AutoHeight</span>()</span><br><span class="line">[</span><br><span class="line">HorizontalScrollBar.<span class="built_in">ToSharedRef</span>() <span class="comment">// 教程中是在这里使用SAssignNew来传递给智能指针的,但是在UE5里面没有成功,改成在定义的时候SNew就好了.</span></span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">+ SHorizontalBox::<span class="built_in">Slot</span>()</span><br><span class="line">.<span class="built_in">AutoWidth</span>()</span><br><span class="line">[</span><br><span class="line">VerticalScrollBar.<span class="built_in">ToSharedRef</span>() <span class="comment">// 同上注释</span></span><br><span class="line">]</span><br><span class="line">]</span><br><span class="line">];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>FNotificationInfo 通知框</h1><p>这里实现一个功能,当点击按钮时屏幕右下角会弹出通知框然后消失<br><img src="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-Slate/image-8.png" alt="Alt text"><br>由于不需要额外创建类,这里只贴出关键代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Widgets/Notifications/SNotificationList.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Framework/Notifications/NotificationManager.h&quot;</span></span></span><br><span class="line"><span class="built_in">SNew</span>(SButton)</span><br><span class="line">.<span class="built_in">Text</span>(FText::<span class="built_in">FromName</span>(TabName[<span class="number">1</span>]))</span><br><span class="line">.<span class="built_in">OnClicked_Lambda</span>(</span><br><span class="line">[&amp;]() &#123;</span><br><span class="line">FNotificationInfo <span class="built_in">Info</span>(<span class="built_in">NSLOCTEXT</span>(<span class="string">&quot;MainFrame&quot;</span>, <span class="string">&quot;RecompileInProgress&quot;</span>, <span class="string">&quot;Compiling C++ Code&quot;</span>));</span><br><span class="line">Info.ExpireDuration = <span class="number">5.0f</span>;</span><br><span class="line">Info.bFireAndForget = <span class="literal">false</span>;</span><br><span class="line">FSlateNotificationManager::<span class="built_in">Get</span>().<span class="built_in">AddNotification</span>(Info).<span class="built_in">Get</span>()-&gt;<span class="built_in">Fadeout</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FReply::<span class="built_in">Handled</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UE_Slate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UEC++</title>
      <link href="/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-C/"/>
      <url>/2023/09/13/UE%E5%BC%80%E5%8F%91-UE-C/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这里是UEC++的学习记录.<br>初次接触UEC++,特别是基础还不是太好时,首先可以看一下这个知乎文章<a href="https://zhuanlan.zhihu.com/p/458435453">虚幻引擎编译系统总结</a>.<br>其他遇到的相关知识点就可以先看C++的笔记中的记录.</p></blockquote><h1>常见的命名约定前缀</h1><ul><li>U开头：通常表示继承自 UObject 的类或类的实例，它们是虚幻引擎的对象。UObject 是UE中所有对象的基类，它提供了一些通用的功能，如引用计数、反射系统等。因此，以&quot;U&quot;开头的类通常是虚幻引擎的核心对象。例如：UActorComponent, UStaticMeshComponent, UCharacterMovementComponent。</li><li>A开头：通常表示继承自 AActor 的类或类的实例，表示游戏中的一个实体或角色。AActor 是UE中表示游戏实体的基类。例如：ACharacter, APlayerController, AProjectile.</li><li>F开头：通常表示代理（Delegate）或结构体（Struct），用于在代码中定义事件、回调和数据结构。例如：FVector, FRotator, FOnClicked.</li><li>S开头：通常表示继承自 SWidget 的类或类的实例，表示UI小部件。SWidget 是Slate框架中用于构建用户界面的基类。例如：SButton, SImage, STextBlock.</li><li>I开头：通常表示接口（Interface），用于定义一组要被其他类实现的方法。例如：IInteractionInterface, IMovementInterface.</li><li>E开头：通常表示枚举类型（Enum），用于定义一组相关的命名常数。例如：ECharacterState, EWeaponType, EMovementDirection.</li><li>T开头：通常表示模板类（Template class），用于创建可以在多种数据类型上操作的通用代码。例如：TArray, TMap, TSharedPtr.</li><li>b开头: 布尔变量必须以b为前缀（例如 bPendingDestruction 或 bHasFadedIn）。</li></ul><h1>常见的C++宏以及定义</h1><h2 id="对象声明和属性">对象声明和属性</h2><ul><li>UCLASS：用于声明一个类，使其能够在Unreal Engine中使用，自动生成蓝图类的功能，并继承自UObject。</li><li>USTRUCT：用于声明一个结构体，使其能够在UE中使用，与UCLASS类似，但用于结构体。</li><li>UENUM：用于声明一个枚举类型，使其能够在UE中使用，允许在蓝图和代码中使用。</li><li>UPROPERTY：用于声明类的属性（成员变量），使其可以在编辑器中显示和编辑。</li><li>UFUNCTION：用于声明成员函数，使其能够在蓝图中调用，绑定到事件，并支持远程过程调用（RPC）。</li><li>UDELEGATE：用于声明委托类型，用于处理事件、回调和通信。</li><li>UINTERFACE：用于声明一个接口，允许类实现相应的功能。</li><li>GENERATED_BODY：用于类声明内部，表示自动生成的C++代码的开始。</li><li>GENERATED_UCLASS_BODY：类似于GENERATED_BODY，但用于旧版本的代码生成。</li><li>GENERATED_USTRUCT_BODY：类似于GENERATED_BODY，但用于结构体。</li></ul><h2 id="日志和断言">日志和断言</h2><ul><li>DEFINE_LOG_CATEGORY：定义一个日志类别，用于记录日志消息。</li><li>DECLARE_LOG_CATEGORY_EXTERN：声明一个外部的日志类别，通常在不同文件中共享日志类别。</li><li>UE_LOG：用于在代码中记录日志消息。</li><li>CHECK / VERIFY：用于在运行时进行断言检查，如果条件不满足，则触发断言失败。</li></ul><h2 id="模块和应用程序">模块和应用程序</h2><ul><li>IMPLEMENT_PRIMARY_GAME_MODULE：实现主游戏模块，指定游戏模块的入口点和初始化代码。</li><li>IMPLEMENT_MODULE：实现一个模块，允许扩展UE的功能。</li></ul><h2 id="平台和翻译">平台和翻译</h2><ul><li>PLATFORM_XXX：用于在特定平台上编译代码块，如PLATFORM_WINDOWS、PLATFORM_MAC等。</li><li>WITH_EDITOR：用于在编辑器环境下编译代码块。</li><li>WITH_EDITORONLY：用于在编辑器环境下编译代码块，运行时被忽略。</li></ul><h2 id="蓝图和脚本">蓝图和脚本</h2><ul><li>UE_DEPRECATED：标记已弃用的函数、变量或类，用于向后兼容。</li><li>TEXT：创建FText本地化字符串字面值。</li><li>NSLOCTEXT：创建本地化字符串，支持多语言。</li><li>LOCTEXT_NAMESPACE：设置本地化命名空间，用于区分不同的本地化字符串。</li></ul><h2 id="Slate相关">Slate相关</h2><ul><li>SNew: 用于创建 Slate 控件的实例</li><li>SLATE_BEGIN_ARGS / SLATE_END_ARGS：用于定义 Slate 控件的构造参数，允许在构造时设置初始属性。</li><li>SLATE_ATTRIBUTE：用于创建一个属性对象，使得可以将数据源（如属性或委托）绑定到控件属性。</li><li>SLATE_ARGUMENT：用于在构造参数中定义控件的属性，使得可以在创建控件时传递值。</li><li>SLATE_NAMED_SLOT：用于在控件内部定义一个命名插槽，使得可以在使用时填充内容。</li><li>SLATE_EVENT: 用于定义委托事件，以便在控件上绑定和触发事件。</li><li>BEGIN_SLATE_FUNCTION_BUILD_OPTIMIZATION / END_SLATE_FUNCTION_BUILD_OPTIMIZATION：用于标记一段代码，以进行 Slate 控件构建优化，以提高性能。</li><li>IMPLEMENT_SIMPLE_AUTOMATION_TEST：用于实现一个简单的自动化测试，以验证 Slate 控件的行为。</li></ul>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEC++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++面向对象</title>
      <link href="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1>VisualStudio的最佳设置</h1><ol><li>新建项目<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-7.png" alt="alt text"></li><li>点击显示所有文件,右键新建src文件夹用来放源码<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-8.png" alt="alt text"></li><li>修改解决方案的属性<br>输出目录改为: $(SolutionDir)bin$(Platform)$(Configuration)<br>中间目录改为: $(SolutionDir)intermediates\bin$(Platform)$(Configuration)<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-9.png" alt="alt text"></li></ol><h1>通过两个类的定义来快速学习与回顾C++的知识点</h1><blockquote><p>包含的知识点有:<br><strong>防卫式声明</strong><br><strong>成员初始化列表</strong><br><strong>this关键字</strong><br><strong>符号重载</strong><br><strong>友元函数</strong><br><strong>内联函数</strong><br><strong>拷贝赋值与拷贝构造</strong></p></blockquote><hr><h2 id="complex-h-没有传指针的类">complex.h(没有传指针的类)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 防卫式声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYCOMPLEX__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYCOMPLEX__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">complex</span>;  <span class="comment">// 声明类</span></span><br><span class="line"><span class="comment">//声明三个函数,返回类型为complex的引用</span></span><br><span class="line">complex&amp;</span><br><span class="line">  __doapl (complex* ths, <span class="type">const</span> complex&amp; r);</span><br><span class="line">complex&amp;</span><br><span class="line">  __doami (complex* ths, <span class="type">const</span> complex&amp; r);</span><br><span class="line">complex&amp;</span><br><span class="line">  __doaml (complex* ths, <span class="type">const</span> complex&amp; r);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="built_in">complex</span> (<span class="type">double</span> r = <span class="number">0</span>, <span class="type">double</span> i = <span class="number">0</span>): <span class="built_in">re</span> (r), <span class="built_in">im</span> (i) &#123; &#125; <span class="comment">// 以初值列的形式定义构造函数,接收r和i两个参数,将r参数给变量re,i给变量im,函数体为空</span></span><br><span class="line">  <span class="comment">// 重载各种运算符号</span></span><br><span class="line">  complex&amp; <span class="keyword">operator</span> += (<span class="type">const</span> complex&amp;); </span><br><span class="line">  complex&amp; <span class="keyword">operator</span> -= (<span class="type">const</span> complex&amp;);</span><br><span class="line">  complex&amp; <span class="keyword">operator</span> *= (<span class="type">const</span> complex&amp;);</span><br><span class="line">  complex&amp; <span class="keyword">operator</span> /= (<span class="type">const</span> complex&amp;);</span><br><span class="line">  <span class="comment">// 定义real和imag函数,因为这两个函数里没有改动data,所以要加const</span></span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">real</span> <span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> re; &#125;</span><br><span class="line">  <span class="function"><span class="type">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="type">double</span> re, im;</span><br><span class="line">  <span class="comment">// 将这三个函数作为complex这个类的友元函数,这样的话这三个函数就可以取得complex这个类的私有的成员</span></span><br><span class="line">  <span class="keyword">friend</span> complex&amp; __doapl (complex *, <span class="type">const</span> complex&amp;);</span><br><span class="line">  <span class="keyword">friend</span> complex&amp; __doami (complex *, <span class="type">const</span> complex&amp;);</span><br><span class="line">  <span class="keyword">friend</span> complex&amp; __doaml (complex *, <span class="type">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义__doapl函数,因为这个函数比较简单,所以定义为inline(内联函数),内联函数更快. 如果一个函数在类中定义的话,那么编辑器会自动尝试将其作为内联函数.</span></span><br><span class="line"><span class="comment">// 定义为内敛函数并不代表它就一定会成为内联函数,编辑器会根据inline的添加而尝试将其作为内联函数,因为编辑器需要判断函数是否复杂.</span></span><br><span class="line"><span class="keyword">inline</span> complex&amp;</span><br><span class="line">__doapl (complex* ths, <span class="type">const</span> complex&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">  ths-&gt;re += r.re;</span><br><span class="line">  ths-&gt;im += r.im;</span><br><span class="line">  <span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// complex&amp;是返回值的类型</span></span><br><span class="line"><span class="comment">// complex::意思是这个是complex这个类的成员函数</span></span><br><span class="line"><span class="comment">// 重载+=运算符,a+=b的话a会作为this来传递进来,this是一个指向a的指针.</span></span><br><span class="line"><span class="comment">// 因为返回的东西不是local变量,不会执行完函数以后就消失,因此可以返回引用类型.</span></span><br><span class="line"><span class="comment">// 因为参数r是不会改变的,所以前面加const</span></span><br><span class="line"><span class="comment">// 传进来的参数设定为引用类型和值类型的区别: 传值的话就是传这个值的全部,这个值的空间大小有多大就传多大,但是传引用的话是传地址,占用的空间大小是通常是比较小的,所以通常建议传引用.</span></span><br><span class="line"><span class="comment">// 将重载+=这个函数设定为complex的成员函数是因为这个+=是只针对complex这个类的,如果是想要非complex类能够使用这个运算符就需要将其定义为全局函数</span></span><br><span class="line"><span class="keyword">inline</span> complex&amp;</span><br><span class="line">complex::<span class="keyword">operator</span> += (<span class="type">const</span> complex&amp; r)</span><br><span class="line">&#123; </span><br><span class="line">  <span class="keyword">return</span> __doapl (<span class="keyword">this</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> complex&amp;</span><br><span class="line">__doami (complex* ths, <span class="type">const</span> complex&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">  ths-&gt;re -= r.re;</span><br><span class="line">  ths-&gt;im -= r.im;</span><br><span class="line">  <span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> complex&amp;</span><br><span class="line">complex::<span class="keyword">operator</span> -= (<span class="type">const</span> complex&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __doami (<span class="keyword">this</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">inline</span> complex&amp;</span><br><span class="line">__doaml (complex* ths, <span class="type">const</span> complex&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">double</span> f = ths-&gt;re * r.re - ths-&gt;im * r.im;</span><br><span class="line">  ths-&gt;im = ths-&gt;re * r.im + ths-&gt;im * r.re;</span><br><span class="line">  ths-&gt;re = f;</span><br><span class="line">  <span class="keyword">return</span> *ths;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> complex&amp;</span><br><span class="line">complex::<span class="keyword">operator</span> *= (<span class="type">const</span> complex&amp; r)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> __doaml (<span class="keyword">this</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span></span></span><br><span class="line"><span class="function"><span class="title">imag</span> <span class="params">(<span class="type">const</span> complex&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="built_in">imag</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span></span></span><br><span class="line"><span class="function"><span class="title">real</span> <span class="params">(<span class="type">const</span> complex&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="built_in">real</span> ();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> complex</span><br><span class="line"><span class="keyword">operator</span> + (<span class="type">const</span> complex&amp; x, <span class="type">const</span> complex&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">complex</span> (<span class="built_in">real</span> (x) + <span class="built_in">real</span> (y), <span class="built_in">imag</span> (x) + <span class="built_in">imag</span> (y)); <span class="comment">// 通过此语法来返回complex的临时对象,不需要给对象起名字.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> complex</span><br><span class="line"><span class="keyword">operator</span> + (<span class="type">const</span> complex&amp; x, <span class="type">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">complex</span> (<span class="built_in">real</span> (x) + y, <span class="built_in">imag</span> (x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> complex</span><br><span class="line"><span class="keyword">operator</span> + (<span class="type">double</span> x, <span class="type">const</span> complex&amp; y)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">complex</span> (x + <span class="built_in">real</span> (y), <span class="built_in">imag</span> (y));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> complex</span></span><br><span class="line"><span class="function"><span class="title">polar</span> <span class="params">(<span class="type">double</span> r, <span class="type">double</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">complex</span> (r * <span class="built_in">cos</span> (t), r * <span class="built_in">sin</span> (t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> complex</span></span><br><span class="line"><span class="function"><span class="title">conj</span> <span class="params">(<span class="type">const</span> complex&amp; x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">complex</span> (<span class="built_in">real</span> (x), -<span class="built_in">imag</span> (x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">double</span></span></span><br><span class="line"><span class="function"><span class="title">norm</span> <span class="params">(<span class="type">const</span> complex&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">real</span> (x) * <span class="built_in">real</span> (x) + <span class="built_in">imag</span> (x) * <span class="built_in">imag</span> (x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防卫式声明</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>   <span class="comment">//__MYCOMPLEX__  </span></span></span><br></pre></td></tr></table></figure><hr><h2 id="string-h-传指针的类">string.h(传指针的类)</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MYSTRING__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MYSTRING__</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">String</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:                                 </span><br><span class="line">   <span class="built_in">String</span>(<span class="type">const</span> <span class="type">char</span>* cstr=<span class="number">0</span>);  <span class="comment">// 类接收的是指针                   </span></span><br><span class="line">   <span class="built_in">String</span>(<span class="type">const</span> String&amp; str);   <span class="comment">// 因为有指针,因此需要声明拷贝构造函数,接收的是自己</span></span><br><span class="line">   String&amp; <span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str); <span class="comment">// 因为有指针,因此需要声明拷贝赋值函数,接收的是自己</span></span><br><span class="line">   ~<span class="built_in">String</span>(); <span class="comment">// 析构函数,对象的生命结束时使用                                 </span></span><br><span class="line">   <span class="function"><span class="type">char</span>* <span class="title">get_c_str</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_data; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">   <span class="type">char</span>* m_data; <span class="comment">// 因为字符串的大小是不固定的,因此将去设为指针,就可以通过动态分配内存的方式来存了.</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="title">String::String</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* cstr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (cstr) &#123;</span><br><span class="line">      m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="built_in">strlen</span>(cstr)<span class="number">+1</span>]; <span class="comment">// 分配空间传给指针,结尾有/0来表示结束,因此需要加1</span></span><br><span class="line">      <span class="built_in">strcpy</span>(m_data, cstr); <span class="comment">// strcpy是&lt;cstring&gt;头文件中带有的函数,通过strcpy将源字符串复制到m_data 中</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;   </span><br><span class="line">      m_data = <span class="keyword">new</span> <span class="type">char</span>[<span class="number">1</span>];</span><br><span class="line">      *m_data = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 析构函数的定义</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String::~<span class="built_in">String</span>()</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">delete</span>[] m_data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝赋值函数的定义</span></span><br><span class="line"><span class="comment">// 之所以需要有拷贝赋值函数,是因为如果使用默认的赋值操作会造成内存泄漏,为什么会内存泄漏:一开始有指针ptra指向a内容,指针ptrb指向b内容,如果是默认的赋值操作,那么最终结果就是ptra和ptrb同时指向其中一个内容,那么另一个内容就没有被指向了,指针丢失,就没办法释放内存,就造成了内存泄漏.</span></span><br><span class="line"><span class="keyword">inline</span></span><br><span class="line">String&amp; String::<span class="keyword">operator</span>=(<span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;str) <span class="comment">// 如果是自我赋值就不能delete了.</span></span><br><span class="line">      <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">delete</span>[] m_data; <span class="comment">// 因为赋值本身指针已经指向了一个数据,因此需要先delete,避免内存泄漏</span></span><br><span class="line">   m_data = <span class="keyword">new</span> <span class="type">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ];</span><br><span class="line">   <span class="built_in">strcpy</span>(m_data, str.m_data); <span class="comment">// 将来源端拷贝到目的端</span></span><br><span class="line">   <span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">// 为了能够连续的使用重载的赋值,因此返回*this,不然不能够连续使用重载的赋值,因为这个重载的赋值是string类型使用的.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝构造函数的定义</span></span><br><span class="line"><span class="comment">// 跟拷贝赋值函数的作用是一样的,避免两个指针指向同一个东西而造成内存泄露.</span></span><br><span class="line"><span class="comment">// 默认编辑器的拷贝是浅拷贝,这是深拷贝</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="title">String::String</span><span class="params">(<span class="type">const</span> String&amp; str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   m_data = <span class="keyword">new</span> <span class="type">char</span>[ <span class="built_in">strlen</span>(str.m_data) + <span class="number">1</span> ]; <span class="comment">// 分配空间</span></span><br><span class="line">   <span class="built_in">strcpy</span>(m_data, str.m_data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 由于这个对于&lt;&lt;的重载是全局的,不是在类中的,所以它的参数是没有this指针的.</span></span><br><span class="line"><span class="comment">// ostream&amp; os对应的是输出流对象,比如std::cout</span></span><br><span class="line"><span class="comment">// 所以这个重载&lt;&lt;相当于支持cout&lt;&lt; String类型.</span></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt;(ostream&amp; os, <span class="type">const</span> String&amp; str)</span><br><span class="line">&#123;</span><br><span class="line">   os &lt;&lt; str.<span class="built_in">get_c_str</span>();</span><br><span class="line">   <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>防卫式声明</h1><blockquote><p>在头文件中添加防卫式声明后可以防止程序多次包含这个头文件。<br>这个防卫式声明的作用跟#program once作用差不多,目前个人喜欢用#program once。</p></blockquote><p><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image.png" alt="Alt text"></p><hr><h1>模板</h1><h2 id="类模板">类模板</h2><p>假如我们现在定义一个名字叫做complex的类，然后它是有实部和虚部的，因此它就需要定义两个变量来充当它的实部和虚部。但是这个实部和虚部的类型可能是int也可能是float等等，这是不一定的。<br>像这种需要定义变量意义是一样的，但是类型不一定的时候，就可以借助模板了。</p><blockquote><p>向下方这些代码一样，我们可以以T来代替类型然后当使用时就可以通过&quot;&lt;&gt;&quot;来指定类型了。</p></blockquote><p>举例一： complex&lt;double&gt; c1(2.5,1.5);与 complex&lt;int&gt; c2(2,6)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="comment">// 告诉编辑器这个T是一个模板</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">complex</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">complex</span> (T r=<span class="number">0</span>, T i=<span class="number">0</span>)</span><br><span class="line">      : <span class="built_in">re</span> (r), <span class="built_in">im</span> (i)</span><br><span class="line">    &#123; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T re, im;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>举例二:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T,<span class="type">int</span> N&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T m_array[N];</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetSize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> N; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Array&lt;std::string, <span class="number">5</span>&gt; array1;</span><br><span class="line">Array&lt;<span class="type">int</span>, <span class="number">50</span>&gt; array2;</span><br><span class="line">std::cout &lt;&lt; array<span class="number">1.</span><span class="built_in">GetSize</span>() &lt;&lt; std::endl;</span><br><span class="line">std::cout &lt;&lt; array<span class="number">2.</span><span class="built_in">GetSize</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数模板">函数模板</h2><p>函数模板跟类模板的区别是函数模板在使用时<strong>不强制</strong>需要通过&lt;&gt;来指定类型是什么,编译器会自动的根据调用函数时传进来的参数类型来进行使用.<br>只有当调用这个函数时,这个函数才会被实际创建.</p><blockquote><p>例如这里定义一个函数min,调用时直接 c = min(a,b)即可,编译器会根据a和b的类型自动替代模板T</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span></span></span><br><span class="line"><span class="function"><span class="type">const</span> T&amp; <span class="title">min</span><span class="params">(<span class="type">const</span> T&amp; a, <span class="type">const</span> T&amp; b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b &lt; a ? b : a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>inline(内联)函数</h1><blockquote><p>在class的本体里面进行定义的函数会自动成为inline函数的<strong>候选人</strong>,之所以是候选人是因为编译器会根据函数的内容的复杂程度来将函数变成inline函数，如果太复杂就无法变成inline函数。<br>在类外面进行定义的函数可以通过添加inline关键字来让编辑器<strong>尽量</strong>将函数变成inline函数</p></blockquote><p>inline函数的好处是比较快。</p><hr><h1>构造函数</h1><blockquote><p>构造函数的作用是当类的对象被创建出来时会自动的进行调用</p></blockquote><p>构造函数的名字需要跟类的名字一样。</p><hr><h2 id="构造函数的特殊语法：initialization-list-初值列，初始列">构造函数的特殊语法：initialization list(初值列，初始列)</h2><blockquote><p>构造函数可以后面可以加:来写赋值的操作，例如下图中将形参r和形参i赋予类的自定义变量re和im<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-1.png" alt="Alt text"></p></blockquote><hr><h1>重载</h1><blockquote><p>重载的意思是： 允许创建多个名称相同的函数，但是函数所需要的参数需要不同，这样就可以在调用的时候根据传入的参数的个数与类型的不同来调用不同的对应函数</p></blockquote><h2 id="操作符重载">操作符重载</h2><p>操作符是+,-,*,+=,-=,==,!=这些符号.<br>操作符也可以被重载,只需要在定义与声明的操作符前面加上operator即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x;</span><br><span class="line"><span class="type">float</span> y;</span><br><span class="line"><span class="built_in">Vector2</span>(<span class="type">float</span> X, <span class="type">float</span> Y) :<span class="built_in">x</span>(X), <span class="built_in">y</span>(Y) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector2 <span class="title">Add</span><span class="params">(<span class="type">const</span> Vector2 other)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector2</span>(x + other.x, y + other.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector2 <span class="keyword">operator</span> +(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Add</span>(other);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Vector2 <span class="title">multiply</span><span class="params">(<span class="type">const</span> Vector2 other)</span> <span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector2</span>(x * other.x, y * other.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector2 <span class="keyword">operator</span> *(<span class="type">const</span> Vector2 other) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">multiply</span>(other);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> ==(<span class="type">const</span> Vector2 other) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x == other.x &amp;&amp; y == other.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span> &lt;&lt;(ostream&amp; stream, <span class="type">const</span> Vector2&amp; vector)  &#123;</span><br><span class="line">stream &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; vector.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vector.y &lt;&lt; <span class="string">&quot;)&quot;</span>;</span><br><span class="line"> <span class="keyword">return</span> stream;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Vector2 <span class="title">a</span><span class="params">(<span class="number">1.0f</span>, <span class="number">2.0f</span>)</span></span>;</span><br><span class="line"><span class="function">Vector2 <span class="title">b</span><span class="params">(<span class="number">3.0f</span>, <span class="number">4.0f</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a==&quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;b==&quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a+b==&quot;</span> &lt;&lt; a + b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a*b==&quot;</span> &lt;&lt; a * b &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;a==b:&quot;</span> &lt;&lt; (a == b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>const</h1><blockquote><p>const可以用来针对函数也可以用来针对变量.<br>const用在类的成员函数上表示这个函数不会修改对象(*this)内部的数据成员.<br>const用在对象上表示这个对象不会被进行修改.</p></blockquote><p><strong>基础类型不需要添加const,因为他们是等效的</strong><br>例如const int 与 int是等效的.<br>基础类型有int,char,bool,float,void这些.</p><p><strong>const针对指针的不同写法的区别:</strong><br>const放到<em>号前面代表,指针指向的内容是不能改变的<br>const放到</em>号后面代表,指针的指向是不能改变的(不能够给ptr一个其他的地址),但是指针指向的内容(<em>ptr)是可以改变的<br>const int</em> ptr = int const* ptr != int* const ptr</p><p><strong>如果一个函数不针对参数进行修改一定要记得加上const</strong>.<br>原因是因为如果一个对象被定义为const,那么这个对象就不能够使用没有被const定义的函数.</p><ul><li>const用在函数上:  函数类型 函数名() const {}</li><li>const用在变量上: const 类名 对象名();</li></ul><h1>mutable</h1><blockquote><p>mutable有两种不同的用途,其中之一是与const一起使用,另一种是用在lambda表达式中,或同时覆盖这两种情况.<br>mutable绝大部分情况下是用在类中使用的,不会使用在lambda上面</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enitity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string m_Name = <span class="string">&quot;TestName&quot;</span>;</span><br><span class="line"><span class="keyword">mutable</span> <span class="type">int</span> m_Debug_num = <span class="number">0</span>; <span class="comment">// 添加mutable可以让const函数中改变</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">const</span> std::string&amp; <span class="title">Get_Name</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_Debug_num++;</span><br><span class="line">std::cout &lt;&lt; m_Debug_num &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> m_Name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> Enitity e;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span> ; i++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; e.<span class="built_in">Get_Name</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>friend友元函数</h1><blockquote><p>类中被定义为private的成员只能被类的函数所访问,但是通过友元函数打开封装的大门.<br>友元函数可以在类中进行声明,声明以后这个被声明为友元函数的函数就可以访问类的private里的参数了.<br><strong>友元函数只需要在类中声明即可,友元函数的定义不需要在类中定义.</strong><br><strong>相同class的各个object互为友元</strong>,也就是说相同类的obj1和obj2可以互相访问对方的私有成员.</p></blockquote><hr><h1>static 静态</h1><blockquote><p>可以把函数和变量设定为静态的,静态的函数和变量是属于类的,无论创建多少个对象,这个设定为静态的函数和变量都只有一份.</p></blockquote><h2 id="静态变量">静态变量</h2><p>静态变量只有一份,属于类,不同的对象都是使用的这一份.如果不是静态变量,那么创建多少个对象就会有多少个对应的变量</p><h2 id="静态函数">静态函数</h2><p>静态函数不像其他的类的函数一样有this指针,静态函数是没有this指针的,因此静态函数的定义中是不能够访问类中的其他变量的,静态函数只能够访问静态变量.<br>静态函数可以通过类名来调用</p><hr><h1>继承与多态与虚函数表</h1><h2 id="继承">继承</h2><blockquote><p>继承代表了 is a 关系<br>子类的范围大小是要比父类要大的<br>构造是由内而外的,先执行父类的构造函数,再执行子类的构造函数.<br>析构是由外而内的,先执行子类的析构函数,再执行父类的析构函数.<br><strong>父类的析构函数必须是virtual</strong>,否则会出现undefined behavior</p></blockquote><p>用下图来表示, Base这个类是父类,Derived这个类是子类.<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-5.png" alt="Alt text"></p><h2 id="多态与虚函数表与虚析构函数">多态与虚函数表与虚析构函数</h2><blockquote><p>多态是面向对象编程中的一种特性，它允许同一个接口调用的不同实现。这种特性使得一个基类指针或引用可以指向派生类的对象，并且可以调用派生类的重载方法，而不需要知道具体的派生类。这种机制主要有两种类型：<br>1.编译时多态（静态多态性）：通过函数重载和模板实现。<br>2.运行时多态（动态多态性）：通过虚函数（virtual functions）和继承实现。<br>在C++中，运行时多态通过虚函数来实现。当基类的一个方法被声明为虚函数，派生类可以重写（override）这个方法。当通过基类指针或引用调用这个方法时，会执行指向对象的实际类型的版本。</p></blockquote><blockquote><p>函数表是由编译器实现的一种机制，用来支持C++的运行时多态性。它是一个指针表，其中包含类的虚函数的地址。每个拥有虚函数的类都有一个虚函数表。具体来说：<br>虚函数表（vtable）：每个包含虚函数的类都有一个虚函数表，表中包含该类的所有虚函数的地址。<br>虚指针（vptr）：每个对象包含一个指向该类的虚函数表的指针。当对象创建时，这个指针被初始化指向相应的虚函数表。<br>当通过基类指针或引用调用虚函数时，程序会通过对象的虚指针找到对应的虚函数表，然后从表中找到实际要调用的函数地址，并进行调用。</p></blockquote><h2 id="代码举例">代码举例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;进行父类构造函数&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"><span class="keyword">virtual</span> ~<span class="built_in">Parent</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;进行父类析构函数&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123; std::cout &lt;&lt; <span class="string">&quot;执行父类的Print函数&quot;</span>&lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> : <span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span>* m_Array;</span><br><span class="line"><span class="keyword">public</span>: </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;执行子类的Print函数&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line"><span class="built_in">Child</span>() &#123; m_Array = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>]; std::cout &lt;&lt; <span class="string">&quot;创建内存并进行子类构造函数&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">~<span class="built_in">Child</span>() &#123; <span class="keyword">delete</span>[] m_Array; std::cout &lt;&lt; <span class="string">&quot;删除创建的内存并进行子类析构函数&quot;</span> &lt;&lt; std::endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Parent* parent = <span class="keyword">new</span> <span class="built_in">Parent</span>(); </span><br><span class="line">parent-&gt;<span class="built_in">Print</span>();</span><br><span class="line"><span class="keyword">delete</span> parent;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">Child* child = <span class="keyword">new</span> <span class="built_in">Child</span>();</span><br><span class="line">child-&gt;<span class="built_in">Print</span>();</span><br><span class="line"><span class="keyword">delete</span> child;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">Parent* poly = <span class="keyword">new</span> <span class="built_in">Child</span>(); <span class="comment">// 基于多态的特性,申请子类的内存去创建指向Parent类型的指针</span></span><br><span class="line">poly-&gt;<span class="built_in">Print</span>(); <span class="comment">// 因为虚函数表的存在,实际调用的将会是子类的Print函数</span></span><br><span class="line"><span class="keyword">delete</span> poly; <span class="comment">// 如果父类的析构函数没有设置成virtual,那么将不会调用子类的析构函数.将会造成内存泄漏</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>复合</h1><blockquote><p>复合代表了 has a 关系<br>一个类中可以包含其他类,然后可以使用包含的其他类的东西,这种情况叫做复合<br>包含其他类的这个大类可以称之为container(容器),其所包含的类称之为component(组件)<br>构造是由内而外的,先执行component的<strong>默认</strong>构造函数,再执行container的构造函数<br>析构是由外而内的,先执行container的析构函数,再执行component的析构函数</p></blockquote><p>用下图来表示,<strong>菱形是实心的黑色</strong><br>意思是Container这个类包含了Component这个类<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-3.png" alt="Alt text"></p><hr><h1>委托(又称代理) delegation</h1><blockquote><p>委托跟复合的区别是,它包含的是其他类的指针,</p></blockquote><p>用下图来表示,<strong>菱形是空心的</strong>,空心可以这样解释:一个拥有其他类,但是因为是指针,不是实实在在的,所以是空心.<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-4.png" alt="Alt text"></p><hr><h1>virtual&amp;pure virtual 虚函数和纯虚函数</h1><blockquote><p>虚函数的概念:父类的函数声明前加上virtual,即可将父类的这个函数设定为虚函数,设定为虚函数以后,这个函数就能够被父类的子类重新定义,并且父类本身要有对于这个函数的定义.<br>纯虚函数的概念: 父类的函数声明前加上virtual,然后后面加上&quot;=0&quot;,即可将父类的这个函数设定为纯虚函数,纯虚函数必须被父类的子类重新定义,并且父类本身一般没有进行这个函数的定义.</p></blockquote><h1>转换函数</h1><p>如图中所示红框黄底的代码就是转换函数,有了这个转换函数后,就可以在进行运算时编译器能够自动地寻找合适的类型来进行运算.<br><strong>转换函数是没有返回类型的</strong><br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-6.png" alt="Alt text"></p><hr><h1>三元操作符</h1><p>三元操作符可以实现一行代码就能实现if else功能</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> b = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">std::string c = a &gt; b ? <span class="string">&quot;a大于b&quot;</span> : <span class="string">&quot;a小于b&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*等同于</span></span><br><span class="line"><span class="comment">std::string c;</span></span><br><span class="line"><span class="comment">if (a &gt; b)</span></span><br><span class="line"><span class="comment"> c = &quot;a大于b&quot;;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment"> c = &quot;a小于b&quot;;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  std::cout &lt;&lt; c &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>new和delete</h1><p><strong>new与delete</strong><br>new是用于在堆上动态分配内存的关键字,它会返回一个指向分配的内存的指针<br>delete用于释放由new分配的动态内存<br>当使用new时要配合使用delete,当使用new[]时要配合使用delete[]<br>语法1:<br>type* ptr = new type<br>delete ptr<br>语法2 分配指定大小:<br>type* arrayPtr = new type[size]<br>delete[] arrayPtr</p><h1>堆与栈</h1><p>栈与堆,它们是我们可以存储数据的地方,它们的工作原理非常不同,但本质上它们做的事情是一样的.<br><strong>栈:</strong><br>在函数调用时,函数的局部变量和参数会被存储在栈中.当函数执行完成后,这些数据会被自动释放.<br>栈的内容分配速度更快,但是大小有限.<br>栈是由编译器自动管理的,在栈上分配内存就是一条cpu指令<br>栈分配的内存地址是连续的.<br><strong>堆:</strong><br>堆是一种动态分配的内存池,是由程序员负责管理的.<br>堆分配的内存地址不是连续的.<br>在堆上分配的内存需要手动释放,否则会导致内存泄漏.</p><hr><h1>智能指针</h1><h2 id="智能指针的概念">智能指针的概念</h2><p>已知,在堆上分配内存需要手动使用delete来删除内存.而智能指针的作用是为了实现分配内存和释放内存这一过程自动化的一种方式.<br>智能指针本质上是一个原始指针的包装.<br>当创建一个智能指针,它会调用new来分配内存,然后基于智能指针的使用方式,这些内存会在某一时刻被自动释放.</p><h2 id="智能指针的类型">智能指针的类型</h2><p>智能指针有很多种类型.分别是unique_ptr,shared_ptr,weak_ptr.<br>智能指针中最简单的是unique_ptr,unique_ptr是作用域指针,当代码执行超过作用域时,它会被销毁并调用delete来释放内存.<br>unique_ptr这种类型的智能指针不能够进行拷贝,因为如果两个智能指针同时指向一个内存,当释放内存后,其中一个智能指针会指向一个已经被删除的内存.<br>shared_ptr多了一个控制块来存储引用计数,因此shared_ptr能够进行拷贝,可以多个shared_ptr指向同一个对象,当引用计数为0时,内存将进行释放(调用析构函数).<br>weak_ptr负责与shared_ptr一起使用,</p><h2 id="为了便于理解unique-ptr-所做的举例">为了便于理解unique_ptr,所做的举例:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>() &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;创建了一个Entity对象&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>() &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;释放了Entity对象的空间&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 定义一个unique_ptr智能指针,负责管理Entity这个类的对象</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScopedPtr</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Entity* m_ptr;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">ScopedPtr</span>(Entity* ptr) : <span class="built_in">m_ptr</span>(ptr) &#123;&#125;;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">ScopedPtr</span>() &#123;</span><br><span class="line"><span class="keyword">delete</span> m_ptr;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">ScopedPtr <span class="title">e1</span><span class="params">(<span class="keyword">new</span> Entity())</span></span>;</span><br><span class="line">ScopedPtr e2 = <span class="keyword">new</span> <span class="built_in">Entity</span>(); <span class="comment">//因为使用了隐式转换,因此这一行相当于:ScopedPtr e2(new Entity());</span></span><br><span class="line">&#125;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实际上使用智能指针时的举例以及不同智能指针种类的对比">实际上使用智能指针时的举例以及不同智能指针种类的对比:</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>() &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;创建了一个Entity对象&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>() &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;释放了Entity对象的空间&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::weak_ptr&lt;Entity&gt; weakPtr; <span class="comment">// 创建一个std::weak_ptr类型的智能指针但它尚未指向任何对象</span></span><br><span class="line">&#123;</span><br><span class="line">std::unique_ptr&lt;Entity&gt; uniquePtr = std::<span class="built_in">make_unique</span>&lt;Entity&gt;(); <span class="comment">// 创建一个std::unique_ptr类型的智能指针指向Entity的对象.这里&lt;&gt;符号涉及到了模板.</span></span><br><span class="line"><span class="comment">// std::unique_ptr&lt;Entity&gt; uniquePtr2 = uniquePtr; 这一句会失败,因为unique_ptr类型的智能指针不能够进行拷贝.</span></span><br><span class="line">std::shared_ptr&lt;Entity&gt; sharedPtr = std::<span class="built_in">make_shared</span>&lt;Entity&gt;(); <span class="comment">// 创建一个std::shared_ptr类型的智能指针指向Entity的对象,它可以进行拷贝.</span></span><br><span class="line">weakPtr = sharedPtr; <span class="comment">// 现在weakPtr和sharedPtr指向同一个内容,但是weakPtr不会增加sharedPtr的引用计数</span></span><br><span class="line">&#125; <span class="comment">// 当执行到这里时,sharedPtr的引用计数已经为0了,uniquePtr和sharedPtr都已经销毁，,释放了内存,现在weakPtr指向的对象已经被销毁,并且可以通过weakPtr.expired()来判断weakPtr指向的对象是否已经被销毁</span></span><br><span class="line"><span class="keyword">if</span> (weakPtr.<span class="built_in">expired</span>()) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;weakPtr 指向的对象已被销毁&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>动态数组</h1><p>动态数组std::vector是标准库的一部分,要想使用它,需要#include &lt;vector&gt;<br>std::vector可以根据需要自动调整其大小。这意味着你可以在运行时添加或删除元素，而不需要手动管理内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line"><span class="built_in">Vertex</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z) :<span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z) &#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; stream, <span class="type">const</span> Vertex&amp; vertex) &#123;</span><br><span class="line"><span class="keyword">return</span> stream &lt;&lt; vertex.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex.y &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex.z &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态数组相关的函数的写法:</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">(<span class="type">const</span> std::vector&lt;Vertex&gt;&amp; vertices)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Vertex&gt; vertices;</span><br><span class="line"><span class="comment">// 定义vertices的初始大小为3.(定义一个初始大小对于优化有好处,因为动态数组的动态扩展是依靠复制实现的)</span></span><br><span class="line">vertices.<span class="built_in">reserve</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向动态数组添加内容的第一种方式</span></span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>( <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> ));</span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>( <span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> ));</span><br><span class="line">vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>( <span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> ));</span><br><span class="line"><span class="comment">// 向动态数组添加内容的第二种方式(更高效,推荐,减少了动态数组在动态扩展时不必要的复制)</span></span><br><span class="line"><span class="comment">// emplace_back允许将参数直接传递给Vertex的构造函数中,而不需要创建一个临时对象</span></span><br><span class="line">vertices.<span class="built_in">emplace_back</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">vertices.<span class="built_in">emplace_back</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">vertices.<span class="built_in">emplace_back</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种遍历vector动态数组的方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; vertices.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; vertices[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除动态数组的第二个元素,vertices.begin()返回第一个元素的迭代器</span></span><br><span class="line">vertices.<span class="built_in">erase</span>(vertices.<span class="built_in">begin</span>() + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种遍历vector动态数组的方式(使用引用的话更节省内存空间,因为不会涉及到复制)</span></span><br><span class="line"><span class="keyword">for</span> (Vertex&amp; i : vertices) &#123;</span><br><span class="line">std::cout &lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>C++中使用库</h1><blockquote><p>预编译二进制文件（pre-compiled binaries）是已经编译好的可执行文件或库，它们可以直接在目标系统上运行或使用，而无需进行源码编译。使用预编译二进制文件的主要优点是节省了用户自己编译源码所需的时间和资源。<br>#include &lt;&gt;：用于标准库和第三方库头文件<br>#include “”：用于项目内部头文件<br>静态链接是在编译时将库的代码复制到生成的可执行文件中，从而生成一个独立的、包含所有代码的可执行文件。<br>动态链接是在程序运行时将库加载到内存中。可执行文件只包含对库的引用，而不包含库的实际代码。</p></blockquote><h2 id="静态链接">静态链接</h2><p>以glfw静态链接举例:</p><ol><li>前往glfw网站下载预编译二进制文件https://www.glfw.org/download.html</li><li>将其中的include文件夹和lib文件夹放到项目中.<br>类似这种,在HelloWorld项目文件夹中新建一个Dependencies文件夹,里面再创建一个glfw文件夹,然后将glfw的include文件夹和lib文件夹放到这里面.<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-10.png" alt="alt text"></li><li>修改项目配置中附加包含目录<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-11.png" alt="alt text"></li><li>修改链接器对应的附加库目录<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-12.png" alt="alt text"></li><li>添加glfw3.lib;到附加依赖项<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-13.png" alt="alt text"></li><li>使用以下代码编译测试</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="built_in">glfwInit</span>();</span><br><span class="line">std::cout &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态链接">动态链接</h2><p>在glfw静态链接的基础上举例:</p><ol><li>将链接器对应的附加库目录的glfw3.lib修改为flfw3dll.lib<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-14.png" alt="alt text"></li><li>将glfw3.dll文件放到可执行文件exe的旁边,不然会因为动态链接找不到对应的dll文件.<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-15.png" alt="alt text"></li></ol><h2 id="创建与使用库">创建与使用库</h2><ol><li>在解决方案处右键新建项目<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-16.png" alt="alt text"></li><li>在库项目处右键属性,修改配置类型为静态库<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-17.png" alt="alt text"></li><li>在主项目处右键属性,修改附加包含目录,使其可以include库中的头文件<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-18.png" alt="alt text"></li><li><strong>通过引用的方式实现自动的静态链接</strong><br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-19.png" alt="alt text"></li></ol><hr><h1>宏,macro</h1><blockquote><p>C++中的宏（Macros）是一种预处理指令，使用#define关键字来定义。在编译之前，预处理器会扫描代码中的宏定义，并用宏的具体内容替换掉代码中的宏调用。这一过程在编译器实际编译代码之前进行。宏可以用于定义常量、简化复杂的表达式、创建内联函数等。</p></blockquote><h2 id="编译器中定义宏">编译器中定义宏</h2><p><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20.png" alt="alt text"></p><h2 id="无参数宏与有参数宏与多行宏">无参数宏与有参数宏与多行宏</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在项目属性设置中的预处理器定义中设置的Debug模式下MY_DEBUG=1,MY_RELEASE=0,Release模式下MY_DEBUG=0,MY_RELEASE=1</span></span><br><span class="line"><span class="comment">// 判断宏的值是否为1</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> MY_DEBUG == 1</span></span><br><span class="line"><span class="comment">// 定义带参数的宏和多行的宏</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(x) std::cout &lt;&lt; x &lt;&lt; std::endl</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD int add(int x,int y)\</span></span><br><span class="line"><span class="meta">&#123;\</span></span><br><span class="line"><span class="meta">return x+y;\</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"><span class="comment">// 在MY_RELEASE被定义不为0的情况下才会执行下面这些</span></span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> defined(MY_RELEASE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOG(x)</span></span><br><span class="line"><span class="comment">// 结束宏定义</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">ADD</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">LOG</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"><span class="built_in">LOG</span>(<span class="built_in">add</span>(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>auto关键字</h1><blockquote><p>auto 关键字是C++11引入的一种类型推导机制，用于让编译器根据初始化表达式自动推导变量的类型。<br>auto适合用在迭代器上,用于避免繁琐的类型声明.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::unordered_map&lt;std::string, <span class="type">int</span>&gt; myUnorderedMap1 = &#123; &#123;<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&quot;banana&quot;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&quot;cherry&quot;</span>, <span class="number">3</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显式声明迭代器类型</span></span><br><span class="line"><span class="keyword">for</span> (std::unordered_map&lt;std::string, <span class="type">int</span>&gt;::iterator it = myUnorderedMap<span class="number">1.</span><span class="built_in">begin</span>(); it != myUnorderedMap<span class="number">1.</span><span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::unordered_map&lt;std::string, <span class="type">int</span>&gt; myUnorderedMap2 = &#123; &#123;<span class="string">&quot;auto_apple&quot;</span>, <span class="number">1</span>&#125;, &#123;<span class="string">&quot;auto_banana&quot;</span>, <span class="number">2</span>&#125;, &#123;<span class="string">&quot;auto_cherry&quot;</span>, <span class="number">3</span>&#125; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 auto 声明迭代器</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = myUnorderedMap<span class="number">2.</span><span class="built_in">begin</span>(); it != myUnorderedMap<span class="number">2.</span><span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">std::cout &lt;&lt; it-&gt;first &lt;&lt; <span class="string">&quot;: &quot;</span> &lt;&lt; it-&gt;second &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>Array</h1><blockquote><p>std::array 是 C++ 标准库中的一个容器类，定义在 &lt;array&gt; 头文件中。它提供了与内置数组类似的功能，但具有更多的标准库容器的特性和接口。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::array&lt;<span class="type">int</span>, 5&gt; arr = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用范围 for 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span>&amp; elem : arr) &#123;</span><br><span class="line">std::cout &lt;&lt; elem &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用传统 for 循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); ++i) &#123;</span><br><span class="line">std::cout &lt;&lt; arr[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1>函数指针与lambda表达式</h1><blockquote><p>函数指针是一个指向函数的指针，它允许你通过指针调用函数，而不仅仅是通过函数名直接调用。函数指针在C和C++中非常有用，因为它们使得编写更灵活和模块化的代码成为可能。例如，可以将函数指针作为参数传递给另一个函数，或者在运行时决定调用哪个函数。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintValue</span><span class="params">(<span class="type">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; values, <span class="type">void</span>(*func)(<span class="type">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line"><span class="built_in">func</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span> &#125;;</span><br><span class="line"><span class="comment">/*显式定义函数指针。</span></span><br><span class="line"><span class="comment">void(*funcPtr)(int);</span></span><br><span class="line"><span class="comment">funcPtr = PrintValue;</span></span><br><span class="line"><span class="comment">ForEach(values, funcPtr);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*使用 typedef 定义函数指针类型别名。</span></span><br><span class="line"><span class="comment">typedef void(*PrintValueFunction)(int);</span></span><br><span class="line"><span class="comment">PrintValueFunction func = PrintValue;</span></span><br><span class="line"><span class="comment">ForEach(values, func);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*直接使用函数名作为参数。</span></span><br><span class="line"><span class="comment">ForEach(values, PrintValue);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用lambda表达式创建匿名函数来代替函数指针</span></span><br><span class="line"><span class="comment">// []中的内容是匿名函数可以访问的外部的参数,当[]中的值是&quot;=&quot;号时,代表外部的参数都传递值进来,当[]中的值时&quot;&amp;&quot;时,代表外部的参数都传递引用进来,</span></span><br><span class="line"><span class="comment">// ()中的内容是匿名函数接收的参数</span></span><br><span class="line"><span class="comment">// &#123;&#125;中的内容是匿名函数的代码块</span></span><br><span class="line"><span class="built_in">ForEach</span>(values, [](<span class="type">int</span> value) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; std::endl; </span><br><span class="line">&#125;);</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>线程</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> is_thread_working = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ThreadFunc</span><span class="params">(<span class="type">const</span> std::string name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std::literals::chrono_literals; <span class="comment">// 使能够直接输入1s</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;这个子线程的id是:&quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">while</span>(is_thread_working)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Thread name : &quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;Working... &quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::this_thread::<span class="built_in">sleep_for</span>(<span class="number">1</span>s); <span class="comment">// 线程睡眠1s</span></span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;不再循环输出Working...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;这个主线程的id是:&quot;</span> &lt;&lt; std::this_thread::<span class="built_in">get_id</span>() &lt;&lt; std::endl;</span><br><span class="line"><span class="built_in">void</span>(*ThreadFuncPtr)(std::string);</span><br><span class="line">ThreadFuncPtr = ThreadFunc;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;开始执行子线程id&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="function">std::thread <span class="title">worker</span><span class="params">(ThreadFunc,<span class="string">&quot;Test&quot;</span>)</span></span>;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">is_thread_working = <span class="literal">false</span>;</span><br><span class="line">worker.<span class="built_in">join</span>(); <span class="comment">// woker.join()的意思是只有当worker这个线程结束后才会执行后面的语句</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;线程结束了&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>定义计时器</h1><p>如下代码所示,通过chrono来定义Timer结构体,放到自定义函数中配合构造函数和析构函数来计算函数的执行时间.</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Timer</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">std::chrono::time_point&lt;std::chrono::steady_clock&gt; start, end;</span><br><span class="line">std::chrono::duration&lt;<span class="type">float</span>&gt; duration;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Timer</span>() </span><br><span class="line">&#123;</span><br><span class="line">start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">duration = std::chrono::duration&lt;<span class="type">float</span>&gt;::<span class="built_in">zero</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Timer</span>() </span><br><span class="line">&#123;</span><br><span class="line">end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">duration = end - start;</span><br><span class="line"><span class="type">float</span> ms = duration.<span class="built_in">count</span>() * <span class="number">1000.0f</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;执行时间为:&quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;毫秒&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">TestFunc</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Hello World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">TestFunc</span>();</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>排序</h1><p>下面介绍了三种使用std::sort对std::vector进行排序的过程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span> <span class="comment">// 使用std::sort排序需要包含算法库</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span> <span class="comment">// 使用std::greater需要包含函数库</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;<span class="type">int</span>&gt; values = &#123;<span class="number">3</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="comment">// std::sort(values.begin(), values.end()); // 默认是按照升序进行排序</span></span><br><span class="line"><span class="comment">// std::sort(values.begin(), values.end(), std::greater&lt;int&gt;()); // 按照降序进行排序</span></span><br><span class="line"><span class="comment">// 使用lambda表达式进行排序</span></span><br><span class="line">std::<span class="built_in">sort</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (a == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> a &lt; b;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>隐式转换和explicit</h1><p>隐式转换是在没有显式指示的情况下，由编译器自动进行的类型转换。<br>explicit关键字用于防止构造函数或转换运算符进行隐式转换，仅允许显式转换。这在防止意外的类型转换错误方面非常有用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">string m_name;</span><br><span class="line"><span class="type">int</span> m_age;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Entity</span><span class="params">(<span class="type">const</span> string&amp; name)</span></span></span><br><span class="line"><span class="function">: m_name(name), m_age(<span class="number">-1</span>) &#123;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Entity</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function">: m_name(<span class="string">&quot;Unknown&quot;</span>), m_age(age) &#123;</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">void</span> <span class="title">PrintEntity</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; m_name &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; m_age &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">e.<span class="built_in">PrintEntity</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Entity e1 = <span class="built_in">Entity</span>(<span class="string">&quot;TestName&quot;</span>);</span><br><span class="line">Entity e2 = <span class="built_in">Entity</span>(<span class="number">23</span>);</span><br><span class="line"><span class="built_in">printEntity</span>(e1);</span><br><span class="line"><span class="built_in">printEntity</span>(e2);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果构造函数没有explicit的话这些是可以执行的,因为允许隐式转换</span></span><br><span class="line"><span class="comment">Entity e3 = &quot;TestName2&quot;;</span></span><br><span class="line"><span class="comment">Entity e4 = 23;</span></span><br><span class="line"><span class="comment">printEntity(22);</span></span><br><span class="line"><span class="comment">printEntity(string(&quot;Name&quot;));</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>类型双关</h1><blockquote><p>类型双关（type punning）是指在编程中通过不同的类型来访问同一块内存。换句话说，就是使用一种类型的变量或指针来访问另一种类型的数据。这通常通过类型转换和指针运算来实现。</p></blockquote><p>在这个例子中，我们将一个 float 类型的变量 x 的内存解释为 int 类型。这就是类型双关，因为我们用 int 类型的指针来访问原本是 float 类型的数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">float</span> x = <span class="number">3.14</span>;</span><br><span class="line">    <span class="type">int</span> y = *(<span class="type">int</span>*)&amp;x; <span class="comment">// 将 float 的内存解释为 int</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Float value: &quot;</span> &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Interpreted as int: &quot;</span> &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1>类型转换</h1><blockquote><p>C++的转换操作符有四种，分别是static_cast,reinterpret_cast,dynamic_cast,const_cast<br>C语言风格的类型转换: float a = 3.5f; int b = (int)a;<br>使用C++的转换操作符相比使用C语言风格的类型转换的好处是：通过转换操作符可以使用搜索功能快速定位到进行了类型转换的代码区域，同时它也帮助减少了强制转换时发生的意外错误。</p></blockquote><ol><li>static_cast: 常用的转换操作符，它会做一些其他的编译时检查来确定转换是否真的可能。</li><li>reinterpret_cast: 把内存重新解释成别的东西，类似于类型双关。</li><li>const_cast: 用于移除或添加变量的const</li><li>dynamic_cast: 用于基类和派生类之间的转换，转换失败时返回nullptr</li></ol><p>使用方法：<br>float f = 3.14;int i = static_cast<int>(f);<br>其他类型转换同static_cast.</int></p><hr><h1>union(联合体)</h1><blockquote><p>在C++中，union（联合体）是一种特殊的数据结构，它允许你在同一个内存位置存储不同类型的变量。也就是说，union中的所有成员共享同一块内存，因此一个union实例在任何时候只能存储其中一个成员的数据。<br>如果想要给同一个类型取两个不同的名字时,它非常有用.<br>举例: 这里是把Vector4可以看成由两个Vector2组成的类型.</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">struct</span>  </span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y, z, w;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span>  </span><br><span class="line">&#123;</span><br><span class="line">Vector2 a, b;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector2</span><span class="params">(<span class="type">const</span> Vector2&amp; vector)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; vector.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vector.y &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Vector4 vector = &#123; <span class="number">1.0f</span>,<span class="number">2.0f</span>,<span class="number">3.0f</span>,<span class="number">4.0f</span> &#125;;</span><br><span class="line"><span class="built_in">PrintVector2</span>(vector.a); <span class="comment">// 输出1,2</span></span><br><span class="line"><span class="built_in">PrintVector2</span>(vector.b); <span class="comment">// 输出3,4</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;--------------------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">vector.z = <span class="number">500.0f</span>;</span><br><span class="line"><span class="built_in">PrintVector2</span>(vector.a); <span class="comment">// 输出1,2</span></span><br><span class="line"><span class="built_in">PrintVector2</span>(vector.b); <span class="comment">// 输出500,4</span></span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>预编译头文件</h1><blockquote><p>C++ 的预编译头文件（Precompiled Headers，简称 PCH）是一种优化编译过程的技术。通过将项目中常用且不经常变动的头文件预先编译成一个二进制文件，下次编译时可以直接使用这个二进制文件，而不需要重新编译这些头文件，从而显著减少编译时间。</p></blockquote><p>如何使用预编译头文件：<br>应用到整个项目文件中：<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-22.png" alt="alt text"><br>应用到cpp文件中：<br>在要使用预编译头文件的cpp文件的属性设置中设置使用预编译头，并且将要预编译的头文件填上去<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-21.png" alt="alt text"></p><h1>基准测试</h1><blockquote><p>在C++中，基准测试（benchmarking）是指评估和比较不同实现方式或算法性能的过程。基准测试通常用于衡量代码片段或整个程序在特定条件下的性能表现，如执行时间、内存使用等。其主要目的是找出代码中可能存在的性能瓶颈或改进空间。</p></blockquote><p>举例：<br>通过定义计时器timer来计算代码运行消耗时间，测试make shared和new shared和make unique谁更快。<br>最终测试结果是make unique最快。<br>需要注意的是：<br>在测试中VisualStudio的设置中release和debug的编译方式是不一样的。<br><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-23.png" alt="alt text"></p><blockquote><p>Debug 配置适合于开发和调试阶段，因为它提供了详细的调试信息，并且程序行为更接近于源码，便于发现和修复问题。<br>Release 配置适合于程序发布阶段，因为它生成的代码经过优化，执行效率更高，适合最终用户使用。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">m_StartTimepoint = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Stop</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> endTimepoint = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将时间转换为微秒</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> start = std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(m_StartTimepoint).<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>(); </span><br><span class="line"><span class="keyword">auto</span> end = std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(endTimepoint).<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> duration = end - start;</span><br><span class="line"><span class="type">double</span> ms = duration * <span class="number">0.001</span>;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; duration &lt;&lt; <span class="string">&quot;us(&quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms)\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; m_StartTimepoint;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; sharedPtrs;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Make Shared&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sharedPtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">sharedPtrs[i] = std::<span class="built_in">make_shared</span>&lt;Vector2&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; sharedPtrs;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;New Shared&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sharedPtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">sharedPtrs[i] = std::<span class="built_in">shared_ptr</span>&lt;Vector2&gt;(<span class="keyword">new</span> <span class="built_in">Vector2</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::unique_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; uniquePtrs;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Make Unique&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; uniquePtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">uniquePtrs[i] = std::<span class="built_in">make_unique</span>&lt;Vector2&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__debugbreak();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>Optional的使用</h1><blockquote><p>在C++中，std::optional 是一个模板类，用于表示一个可能包含值的对象，或者不包含值（即为空）。它可以用来表达那些可以有“缺失”状态的情况。std::optional 是C++17标准引入的。</p></blockquote><p><img src="/2023/08/31/Geek-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1-C-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-24.png" alt="alt text"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">std::optional&lt;std::string&gt; <span class="title">ReadFileAsString</span><span class="params">(<span class="type">const</span> std::string&amp; filepath)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">stream</span><span class="params">(filepath)</span></span>;</span><br><span class="line">std::string result;</span><br><span class="line"><span class="keyword">if</span> (stream)</span><br><span class="line">&#123;</span><br><span class="line">std::stringstream buffer;</span><br><span class="line">buffer &lt;&lt; stream.<span class="built_in">rdbuf</span>();</span><br><span class="line">result = buffer.<span class="built_in">str</span>();</span><br><span class="line">stream.<span class="built_in">close</span>();</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::string filepath = <span class="string">&quot;data.txt&quot;</span>;</span><br><span class="line">std::optional&lt;std::string&gt; data = <span class="built_in">ReadFileAsString</span>(filepath);</span><br><span class="line">std::string result = data.<span class="built_in">value_or</span>(<span class="string">&quot;没有读取到文件&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>单一变量存放多种类型的数据</h1><blockquote><p>std::variant 是 C++17 引入的一个标准库类型，它允许在一个变量中存储多个不同类型之一。换句话说，std::variant 是一个类型安全的联合体（union），可以在编译时确定可以存储的类型集合，并在运行时存储其中的一个类型的值。<br>主要特点：<br>1.类型安全：std::variant 确保了访问变量时的类型安全，不会出现传统 C++ 中联合体（union）中未定义行为的问题。你可以使用 std::get 和 std::visit 访问和操作 variant 中的值，这些方法都提供了类型检查。<br>2.可以存储多个类型之一：std::variant 可以存储多个可能的类型，但在任何时候只能存储其中的一个类型。例如，std::variant&lt;int, std::string&gt; 可以存储一个 int 或者一个 std::string，但不能同时存储两者。<br>类型索引：std::variant 内部跟踪当前存储的类型的索引，可以使用 index() 方法获取当前存储类型在模板参数中的索引。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;variant&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::variant&lt;<span class="type">int</span>, std::string&gt; data1;</span><br><span class="line">std::variant&lt;<span class="type">int</span>, std::string&gt; data2;</span><br><span class="line">data1 = <span class="string">&quot;StringName&quot;</span>;</span><br><span class="line">data2 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> value = std::<span class="built_in">get_if</span>&lt;std::string&gt;(&amp;data1))</span><br><span class="line">&#123;</span><br><span class="line">std::string&amp; v = *value;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;data1的值是: &quot;</span>&lt;&lt; v &lt;&lt; <span class="string">&quot; data1 的类型是string&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> value2 = std::<span class="built_in">get_if</span>&lt;<span class="type">int</span>&gt;(&amp;data2))</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;data2的值是: &quot;</span> &lt;&lt; *value2 &lt;&lt; <span class="string">&quot; data2 的类型是int&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;data 不是string类型&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;data1的类型序号为:&quot;</span> &lt;&lt; data<span class="number">1.</span><span class="built_in">index</span>() &lt;&lt; <span class="string">&quot; data2的类型序号为: &quot;</span> &lt;&lt; data<span class="number">2.</span><span class="built_in">index</span>();</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>std::async与互斥锁</h1><blockquote><ol><li>std::async 是 C++11 中引入的一个函数模板，用于启动异步任务。它可以在后台线程中异步执行一个函数，并返回一个 std::future 对象，通过该对象可以获取异步操作的结果。</li><li>互斥锁:如果异步任务访问了共享数据，并且至少一个线程修改了这些数据，那么你需要使用锁来保护这些数据，防止出现数据竞争的情况。数据竞争可能导致未定义行为，包括程序崩溃或产生错误的结果。</li></ol></blockquote><ol><li>std::launch 标志：控制异步任务的执行策略,std::launch::async：强制创建新线程执行任务。std::launch::deferred：任务延迟执行，直到调用 get() 或 wait()，这时任务才在调用线程中执行。</li><li>std::async 返回一个 std::future 对象，通过它可以：<br>获取结果：调用 future.get() 会返回异步任务的结果。<br>等待完成：调用 future.wait() 可以阻塞线程，直到异步任务完成。</li><li>std::mutex 是 C++11 标准库中提供的一种互斥锁（mutex），用于保护共享资源，使得同一时刻只有一个线程可以访问该资源。通过使用 std::mutex，可以防止多个线程同时修改共享数据，从而避免数据竞争。</li><li>std::lock_guard 是一个 RAII 风格的锁管理器，用来自动管理锁的获取和释放。当创建 lock 对象时，它会自动锁定 mtx，并在 lock 对象离开作用域时（即 for 循环的每次迭代结束后）自动释放锁。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;mutex&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::mutex mtx;</span><br><span class="line"><span class="type">int</span> shared_value = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">increment_shared_value</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; ++i) &#123;</span><br><span class="line">        <span class="function">std::lock_guard&lt;std::mutex&gt; <span class="title">lock</span><span class="params">(mtx)</span></span>; <span class="comment">// 使用锁保护共享数据</span></span><br><span class="line">        ++shared_value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 启动两个异步任务，增加共享变量的值</span></span><br><span class="line">    std::future&lt;<span class="type">void</span>&gt; f1 = std::<span class="built_in">async</span>(std::launch::async, increment_shared_value, <span class="number">10000</span>);</span><br><span class="line">    std::future&lt;<span class="type">void</span>&gt; f2 = std::<span class="built_in">async</span>(std::launch::async, increment_shared_value, <span class="number">10000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待任务完成</span></span><br><span class="line">    f<span class="number">1.</span><span class="built_in">get</span>();</span><br><span class="line">    f<span class="number">2.</span><span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Final shared value: &quot;</span> &lt;&lt; shared_value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>std::string_view(C++17支持的更快的string)</h1><blockquote><p>std::string_view 是 C++17 中引入的一种轻量级的、不可拥有的字符串视图类型。它提供了一种不需要拷贝或分配内存即可操作字符串的方式，非常适合用于只读字符串操作。</p></blockquote><h1>C++的单例模式(设计模式)</h1><blockquote><p>当我们想要拥有应用于某种全局数据集的功能,且我们只是想要重复使用时,单例是非常有用的.<br>例子:渲染器,渲染器通常是一个非常全局的东西,我们通常不会有一个渲染器的多个实例,我们有一个渲染器,我们向它提交所有这些渲染命令,本质上就是调用全局函数.<br>单例的行为就像命名空间,单例类可以像命名空间一样工作.<br><strong>C++中的单例只是一种组织一堆全局变量和静态函数的方式.</strong></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Random</span>(<span class="type">const</span> Random&amp;) = <span class="keyword">delete</span>;  <span class="comment">// 删除复制构造函数,防止对象被复制</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> Random&amp; <span class="title">Get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">static</span> Random instance;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">float</span> <span class="title">Float</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Get</span>().<span class="built_in">IFloat</span>(); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Random</span>() &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">const</span> <span class="type">float</span> <span class="title">IFloat</span><span class="params">()</span> <span class="type">const</span> </span>&#123; <span class="keyword">return</span> m_RandomGenerator; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> m_RandomGenerator = <span class="number">0.5f</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">float</span> random_float = Random::<span class="built_in">Float</span>();</span><br><span class="line">std::cout &lt;&lt; random_float &lt;&lt; std::endl;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RizomUV</title>
      <link href="/2023/08/29/DCC%E8%BD%AF%E4%BB%B6-RizmoUV/"/>
      <url>/2023/08/29/DCC%E8%BD%AF%E4%BB%B6-RizmoUV/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="ANtN6"></a></p><h1>快捷键</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615890223582-e3104734-2ec0-4edf-b433-c98a5e74f1bb.png#align=left&amp;display=inline&amp;height=423&amp;originHeight=423&amp;originWidth=583&amp;size=28255&amp;status=done&amp;style=none&amp;width=583" alt="image.png"><br>C键切割工具<br>1,2,3,4对应点线面多边形的选择（默认为F1F2F3F4，习惯上更改为1234）<br>快捷键Shift+方向键，可以更快的左右上下，移动UV一整个象限<br>U键是展开鼠标位置的模型UV<br>空格键+鼠标左键可以缩放UV<br>空格键+鼠标中间可以移动UV<br>空格键+鼠标右键可以旋转UV<br>按住TAB键+鼠标手动选择<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615949276702-f87a2bab-8004-4e48-96cb-6562b625e44a.png#align=left&amp;display=inline&amp;height=189&amp;originHeight=189&amp;originWidth=306&amp;size=9022&amp;status=done&amp;style=none&amp;width=306" alt="image.png">可以移动缩放旋转UV<br>反选：ctrl+i<br>shirt+r是恢复选中的物体的未展开状态（只有未展开的情况下才能够选择切割边）<br>i键：独立选择<br>p键：排布UV<br>O键：优化UV<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615886635952-838bc294-9f75-4203-a6d8-a640a1df4112.png#align=left&amp;display=inline&amp;height=69&amp;originHeight=69&amp;originWidth=55&amp;size=641&amp;status=done&amp;style=none&amp;width=55" alt="image.png"><br>G键：打组<br>ctrl+G键：取消打组</p><p>shift+alt+g：将重叠的UV堆在一起，使其在排布时不分开<br>ctrl+shift+鼠标拖动可以系统自动选择起点与终点之间最短的线<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615890316383-259e58b5-1736-472c-a121-67b3f04f3a48.png#align=left&amp;display=inline&amp;height=182&amp;originHeight=182&amp;originWidth=334&amp;size=14654&amp;status=done&amp;style=none&amp;width=334" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615890446219-4ebf2b67-3b53-4321-bb12-08e16fdac58d.png#align=left&amp;display=inline&amp;height=77&amp;originHeight=77&amp;originWidth=170&amp;size=4839&amp;status=done&amp;style=none&amp;width=170" alt="image.png">显示UV接缝处<br>魔术棒工具的快捷键：alt+鼠标滚轮调节<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891286020-4dcf1895-f732-4de6-b959-fba41fd7f9cd.png#align=left&amp;display=inline&amp;height=93&amp;originHeight=93&amp;originWidth=407&amp;size=6576&amp;status=done&amp;style=none&amp;width=407" alt="image.png">第二行的数值<br>shift+鼠标滚轮调节第一行的数值<br>+号：根据当前选择的面来自动扩展新增加选择的面<br>-号；与加号相反。对应这两个图标<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891974739-eaabcbcc-1d2f-43fd-aa27-f0163f22030b.png#align=left&amp;display=inline&amp;height=98&amp;originHeight=98&amp;originWidth=403&amp;size=5999&amp;status=done&amp;style=none&amp;width=403" alt="image.png"><br>alt+s开启对称模式</p><p><a name="i99yl"></a></p><h1>RizomUV的一些概念</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615791085606-a0e0f6ad-6a50-4cee-a068-4f160b11baf5.png#align=left&amp;display=inline&amp;height=363&amp;originHeight=363&amp;originWidth=574&amp;size=71678&amp;status=done&amp;style=none&amp;width=574" alt="image.png">这里红色代表UV有一些被拉伸，蓝色代表压缩<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615982435164-86181204-461f-45ca-9664-86d02adc8d91.png#align=left&amp;display=inline&amp;height=269&amp;originHeight=269&amp;originWidth=43&amp;size=4492&amp;status=done&amp;style=none&amp;width=43" alt="image.png">红色使用框中的第一个工具，蓝色使用第二个工具。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615797108905-b8313ca4-139f-4aa3-a73b-fe4c38f8d53e.png#align=left&amp;display=inline&amp;height=203&amp;originHeight=203&amp;originWidth=289&amp;size=13787&amp;status=done&amp;style=none&amp;width=289" alt="image.png">此图标作用是优化，选中展开的多边形然后点击图标可以优化。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615895981731-43fc3216-a846-457a-a627-3d8590666bc6.png#align=left&amp;display=inline&amp;height=151&amp;originHeight=151&amp;originWidth=399&amp;size=7299&amp;status=done&amp;style=none&amp;width=399" alt="image.png">在边选择模式下，选择Stop能够在多选时不跨越已经选过的边（Edge Loop Parameters属性栏中对应的是选择边的模式）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615896110616-f9a393b2-0b25-4f86-a077-1dcacbdb0414.png#align=left&amp;display=inline&amp;height=278&amp;originHeight=278&amp;originWidth=400&amp;size=22156&amp;status=done&amp;style=none&amp;width=400" alt="image.png">此图标可以拉直UV<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615896139108-ec45f356-545b-4f93-b89b-c1af5f59c741.png#align=left&amp;display=inline&amp;height=424&amp;originHeight=424&amp;originWidth=343&amp;size=140586&amp;status=done&amp;style=none&amp;width=343" alt="image.png">→<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615896147596-b095176d-b15e-409e-8de5-efdaa1bc24fb.png#align=left&amp;display=inline&amp;height=121&amp;originHeight=121&amp;originWidth=112&amp;size=13316&amp;status=done&amp;style=none&amp;width=112" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615896953316-e1911fb6-7885-4644-b980-46733fd18e94.png#align=left&amp;display=inline&amp;height=157&amp;originHeight=157&amp;originWidth=175&amp;size=4812&amp;status=done&amp;style=none&amp;width=175" alt="image.png">这里控制的是棋盘格的平铺数<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615948571565-86d9084f-0223-4c02-abf2-baa78937d722.png#align=left&amp;display=inline&amp;height=163&amp;originHeight=163&amp;originWidth=285&amp;size=9903&amp;status=done&amp;style=none&amp;width=285" alt="image.png">打开后作用是排布UV时自动填满象限<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615949547385-ca6e4c8f-f756-4bfd-8a70-9d9b069d6ef9.png#align=left&amp;display=inline&amp;height=149&amp;originHeight=149&amp;originWidth=447&amp;size=14726&amp;status=done&amp;style=none&amp;width=447" alt="image.png">方框中是拾取选取的UV组的密度<br>箭头指向的图标的作用是按照密度来改变选中的UV的密度</p><p><a name="kYWJ5"></a></p><h1>RizomUV桥接工具问题的解决方法</h1><p>RizomUV分好UV后按ctrl+s保存，然后才可以实现桥接功能。<br>导入RizomUV的模型的命名规范：不能使用maya命名空间产生的带冒号的名字（把冒号和冒号前面的字删除），<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615778559844-82e69fe4-0d71-4309-9896-eac5d6c9c314.png#align=left&amp;display=inline&amp;height=202&amp;originHeight=202&amp;originWidth=90&amp;size=20545&amp;status=done&amp;style=none&amp;width=90" alt="image.png">如果是这种命名，那么每个模型都需要后面带数字，比如这个的junying后面加个数字即可使用桥接工具。<br><a name="LJwhH"></a></p><h1>寻找相似的边，多边形（2020.1新版本）</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615775417788-79ec3935-9963-442c-ba36-37c2ee6b5073.png#align=left&amp;display=inline&amp;height=250&amp;originHeight=250&amp;originWidth=317&amp;size=12295&amp;status=done&amp;style=none&amp;width=317" alt="image.png"><br><a name="DYHpl"></a></p><h1>寻找相似的多边形并切割展开（2020.1新版本）</h1><p><a name="qzCq7"></a></p><h1><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615775881280-73174c10-3bab-468c-a561-7ad14856e3c1.png#align=left&amp;display=inline&amp;height=245&amp;originHeight=245&amp;originWidth=316&amp;size=11271&amp;status=done&amp;style=none&amp;width=316" alt="image.png"></h1><p>当需要切割并展开模型中相同的多边形时，可以只对其中一个进行切割展开，然后选中多边形使用此工具后，其余相同的多边形也会被切割展开<br>如果没有效果，原因就是它们的法线不同，解决办法：使用这个模式<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615776322099-896c898a-5589-400d-8b48-05bac8b3d8eb.png#align=left&amp;display=inline&amp;height=201&amp;originHeight=201&amp;originWidth=308&amp;size=8570&amp;status=done&amp;style=none&amp;width=308" alt="image.png">（也可以选择Both，来同时满足这两个模式）<br>如果出现这种情况<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615776343834-666b69e1-f853-45ca-9726-69ffaf9e2163.png#align=left&amp;display=inline&amp;height=271&amp;originHeight=271&amp;originWidth=524&amp;size=199160&amp;status=done&amp;style=none&amp;width=524" alt="image.png">，是因为软件的bug，解决办法是鼠标悬停在红色区域，然后按U键即可</p><p><a name="aWrA0"></a></p><h1>切割工具的设置</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615775706469-ee55065a-f4a9-453a-8510-598b7cce0d48.png#align=left&amp;display=inline&amp;height=144&amp;originHeight=144&amp;originWidth=229&amp;size=8367&amp;status=done&amp;style=none&amp;width=229" alt="image.png">第一个是只切割，第二个是切割并展开<br><a name="9TJRW"></a></p><h1>焊接工具的设置</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615976669087-43983504-6301-401c-8d03-51e895d4e230.png#align=left&amp;display=inline&amp;height=158&amp;originHeight=158&amp;originWidth=271&amp;size=8844&amp;status=done&amp;style=none&amp;width=271" alt="image.png">圈住的图标中第一个快捷键是shift+W，作用是将两个UV块自动进行缝补（无需选择缝补线）第二个快捷键是ctrl+w，作用是将一个UV块自动内部出现的切线缝补。<br>第三个是让系统自动焊接比较近的UV块，对于零碎的UV块可以先使用自动焊接工具然后再根据需要手动焊接。<br><a name="yZuyq"></a></p><h1>UDIM</h1><p><a name="AqSQw"></a></p><h2 id="一">一</h2><p>在maya中通过分IDmap或者在Rizom中烘焙IDmap，然后在RizomUV中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615789447176-8edd506e-1cc4-4884-a06e-e3df61791bcf.png#align=left&amp;display=inline&amp;height=133&amp;originHeight=133&amp;originWidth=393&amp;size=8140&amp;status=done&amp;style=none&amp;width=393" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615789491776-12530e76-c81c-495a-bf54-662b38a73ef3.png#align=left&amp;display=inline&amp;height=462&amp;originHeight=462&amp;originWidth=239&amp;size=11816&amp;status=done&amp;style=none&amp;width=239" alt="image.png"><br>这样软件会自动将对应的模型分配到每一个象限<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615789558776-6cad7441-8710-41cb-8eda-28583b4ac2df.png#align=left&amp;display=inline&amp;height=159&amp;originHeight=159&amp;originWidth=613&amp;size=22924&amp;status=done&amp;style=none&amp;width=613" alt="image.png"><br>然后继续<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615790105572-bcae3521-4532-4e6e-b0f9-42f4354941a6.png#align=left&amp;display=inline&amp;height=433&amp;originHeight=433&amp;originWidth=223&amp;size=10228&amp;status=done&amp;style=none&amp;width=223" alt="image.png">给每一个象限分组<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615790137995-858743ba-8390-4947-b931-3f4cad8ac4d6.png#align=left&amp;display=inline&amp;height=99&amp;originHeight=99&amp;originWidth=565&amp;size=21639&amp;status=done&amp;style=none&amp;width=565" alt="image.png"><br><a name="heofu"></a></p><h2 id="二">二</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615889833383-4ab988cd-469c-4791-9260-5de49be330c8.png#align=left&amp;display=inline&amp;height=143&amp;originHeight=143&amp;originWidth=79&amp;size=2161&amp;status=done&amp;style=none&amp;width=79" alt="image.png">在分好多边形的情况下选择<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615889852818-d970a73c-8e70-4f61-b89d-50d5418227c6.png#align=left&amp;display=inline&amp;height=181&amp;originHeight=181&amp;originWidth=201&amp;size=3292&amp;status=done&amp;style=none&amp;width=201" alt="image.png">来实现<br>在多边形模式下<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615790194307-49ca1c71-618f-47ad-b1ba-c14b4e9e9838.png#align=left&amp;display=inline&amp;height=346&amp;originHeight=346&amp;originWidth=334&amp;size=31129&amp;status=done&amp;style=none&amp;width=334" alt="image.png">可以按islands来选择整个UV块也可以在多边形模式下双击模型<br>分组后，在执行切割操作后，在选择组的情况下展开UV，那么模型会在那个组的框中展开而不是自动到1001处展开<br><a name="tgAoX"></a></p><h1>自动展UV工具</h1><p><a name="CW5Cr"></a></p><h2 id="硬表面物体展UV">硬表面物体展UV</h2><p>例如这些都是方正物体<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615793338648-cad012aa-8000-42f5-aa48-b727ce8a3896.png#align=left&amp;display=inline&amp;height=400&amp;originHeight=400&amp;originWidth=621&amp;size=81235&amp;status=done&amp;style=none&amp;width=621" alt="image.png"><br>在边的模式下点击<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615793422813-702d13f6-eb71-4320-86d1-6488f029221e.png#align=left&amp;display=inline&amp;height=317&amp;originHeight=317&amp;originWidth=398&amp;size=20469&amp;status=done&amp;style=none&amp;width=398" alt="image.png">即可快速的选择好要切割的边。<br><a name="q04M9"></a></p><h2 id="生物，人体，树枝，树干等物体的自动选择切割的边">生物，人体，树枝，树干等物体的自动选择切割的边</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615986566448-14b8e1c8-9831-4e81-86da-b44cadc93221.png#align=left&amp;display=inline&amp;height=93&amp;originHeight=93&amp;originWidth=183&amp;size=2774&amp;status=done&amp;style=none&amp;width=183" alt="image.png">针对圆柱体的模型（对于不是圆柱体的模型使用此功能若效果不好就关掉）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615796179546-81713de1-4a44-4c09-b6eb-18943b9dfc19.png#align=left&amp;display=inline&amp;height=493&amp;originHeight=493&amp;originWidth=422&amp;size=33204&amp;status=done&amp;style=none&amp;width=422" alt="image.png">在边模式下使用，如果展开的UV是这种分开的太碎的样子可以使用ReWeld（焊接）功能<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615796249622-4253f05c-c6fa-4433-8b4b-6d197005a19e.png#align=left&amp;display=inline&amp;height=408&amp;originHeight=408&amp;originWidth=455&amp;size=65239&amp;status=done&amp;style=none&amp;width=455" alt="image.png">→<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615796314537-91233d15-b0d3-47d8-acc4-dd5cba923feb.png#align=left&amp;display=inline&amp;height=280&amp;originHeight=280&amp;originWidth=326&amp;size=55675&amp;status=done&amp;style=none&amp;width=326" alt="image.png">。<br><a name="GAnJr"></a></p><h2 id="智能马赛克展UV工具（适用于比较零碎没有规则的模型）">智能马赛克展UV工具（适用于比较零碎没有规则的模型）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615896568118-e7ce4c27-5d3d-43c5-9b9e-8d476c356458.png#align=left&amp;display=inline&amp;height=172&amp;originHeight=172&amp;originWidth=410&amp;size=13048&amp;status=done&amp;style=none&amp;width=410" alt="image.png"><br>master seam tool options 中数字越大，自动展UV所生成的UV块越多。<br><a name="NmSBw"></a></p><h2 id="展box状物体">展box状物体</h2><p>硬表面效果不理想时，可以使用此工具<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615902931422-180c1916-7c34-4ac8-b8bc-9883b346fc91.png#align=left&amp;display=inline&amp;height=360&amp;originHeight=360&amp;originWidth=408&amp;size=23712&amp;status=done&amp;style=none&amp;width=408" alt="image.png"><br><a name="LGe0S"></a></p><h2 id="针对带洞的">针对带洞的</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615902472240-03047cb9-8771-43a2-a77a-ee8e0e2096f7.png#align=left&amp;display=inline&amp;height=177&amp;originHeight=177&amp;originWidth=405&amp;size=13825&amp;status=done&amp;style=none&amp;width=405" alt="image.png"><br><a name="RGdXM"></a></p><h2 id="针对类似圆环的">针对类似圆环的</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615902483179-648d4506-3eff-410b-a236-33518d2c1582.png#align=left&amp;display=inline&amp;height=155&amp;originHeight=155&amp;originWidth=402&amp;size=12471&amp;status=done&amp;style=none&amp;width=402" alt="image.png"><br><a name="d9ygp"></a></p><h1>使相同模型的UV重叠功能</h1><p>之所以使相同模型的UV重叠，是想让它们的渲染属性是一样的，如果想使它们有不同的效果则可以不使用UV重叠（比如链条，想让不同的链条圈的颜色不都相同，则不要让它们的UV重叠到一起）<br>选中需要重叠的多边形，然后点击图标，系统会自动将相似的多边形进行重叠<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615796988219-ca148036-f4bf-49e0-a43b-a0ac66a7ee7f.png#align=left&amp;display=inline&amp;height=249&amp;originHeight=249&amp;originWidth=408&amp;size=12286&amp;status=done&amp;style=none&amp;width=408" alt="image.png">右边的图标是堆叠并打组。<br>将UV块重叠后选中重叠的UV点击<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615887249739-46d2328e-56de-4c58-9844-d9c99a41e9e9.png#align=left&amp;display=inline&amp;height=167&amp;originHeight=167&amp;originWidth=322&amp;size=11997&amp;status=done&amp;style=none&amp;width=322" alt="image.png">（shift+alt+g）<br>可以将重叠的UV块堆在一起，这样排布的时候就不会分开了。<br><br><a name="0ZvZ7"></a></p><h1>魔术棒工具</h1><p>在选择面模式下<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615890848271-caea72e7-84d2-4864-bd70-2ea2f363ec69.png#align=left&amp;display=inline&amp;height=165&amp;originHeight=165&amp;originWidth=397&amp;size=10084&amp;status=done&amp;style=none&amp;width=397" alt="image.png">在这里可以使用魔术棒工具<br>第一行<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615890897945-ec6ec118-9b4c-48d0-a830-cff317ab6454.png#align=left&amp;display=inline&amp;height=32&amp;originHeight=32&amp;originWidth=389&amp;size=2488&amp;status=done&amp;style=none&amp;width=389" alt="image.png">的意思系统根据法线夹角的最大限度来自动选择面。例如<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615890929762-6be2ee78-2c46-4e37-be53-de392beaf2a1.png#align=left&amp;display=inline&amp;height=354&amp;originHeight=354&amp;originWidth=848&amp;size=107977&amp;status=done&amp;style=none&amp;width=848" alt="image.png">根据数值大小，会自动多选的面的限制。<br>第二行<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891139858-e9547c8d-9af6-47e2-965b-6c7e17c85b0d.png#align=left&amp;display=inline&amp;height=27&amp;originHeight=27&amp;originWidth=389&amp;size=1828&amp;status=done&amp;style=none&amp;width=389" alt="image.png">与第一行的区别是，会沿着线来选择面，例如<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891206744-6004d002-b641-4f43-ba32-89fa46dae72f.png#align=left&amp;display=inline&amp;height=431&amp;originHeight=431&amp;originWidth=372&amp;size=153736&amp;status=done&amp;style=none&amp;width=372" alt="image.png">          →             <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891196336-f8d06204-d10a-4042-a56e-c9579a0d21b5.png#align=left&amp;display=inline&amp;height=226&amp;originHeight=226&amp;originWidth=214&amp;size=84873&amp;status=done&amp;style=none&amp;width=214" alt="image.png"><br>第三行<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891458602-3a0c8618-eec7-4510-bb10-27be91bdc141.png#align=left&amp;display=inline&amp;height=35&amp;originHeight=35&amp;originWidth=381&amp;size=1809&amp;status=done&amp;style=none&amp;width=381" alt="image.png">的作用是根据平滑凹凸不平的面来选择（实际并没有平滑）适用于多选凹凸不平的面<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615891535939-580f5962-33e6-427f-92ba-0109808398f3.png#align=left&amp;display=inline&amp;height=230&amp;originHeight=230&amp;originWidth=319&amp;size=118031&amp;status=done&amp;style=none&amp;width=319" alt="image.png"><br>第四行不怎么使用无需了解含义<br><a name="EMCPZ"></a></p><h1>UV排布与优化<br></h1><p>首先开启这个模式<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615957811341-7232eed0-3994-44e9-afcd-54e6e88b2186.png#align=left&amp;display=inline&amp;height=124&amp;originHeight=124&amp;originWidth=377&amp;size=21116&amp;status=done&amp;style=none&amp;width=377" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615957946423-fdec888d-b901-475d-b166-e4e2d7b7a4a3.png#align=left&amp;display=inline&amp;height=117&amp;originHeight=117&amp;originWidth=414&amp;size=7254&amp;status=done&amp;style=none&amp;width=414" alt="image.png">这个图标自动识别反掉的法线并选择<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615957776475-2048eb11-5946-4a41-a7bc-23f81908710a.png#align=left&amp;display=inline&amp;height=271&amp;originHeight=271&amp;originWidth=472&amp;size=119229&amp;status=done&amp;style=none&amp;width=472" alt="image.png">黑色意思是法线反了。<br>数字可以看成贴图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615958277590-8daf7149-f2da-4f5a-baa0-5ef0c7d348f4.png#align=left&amp;display=inline&amp;height=67&amp;originHeight=67&amp;originWidth=412&amp;size=4644&amp;status=done&amp;style=none&amp;width=412" alt="image.png">这一栏的作用是让UV块对齐，圈住的图标的作用是使UV横着弄正，右边的图标是竖着弄正。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615982073977-69b364bf-42c5-4a8f-b675-018d753ae6f1.png#align=left&amp;display=inline&amp;height=172&amp;originHeight=172&amp;originWidth=939&amp;size=25330&amp;status=done&amp;style=none&amp;width=939" alt="image.png">，这一整个栏中是调整自动排布时的设置，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615958974281-7fc52b4e-e54a-4730-bee2-45f7c8298fd7.png#align=left&amp;display=inline&amp;height=122&amp;originHeight=122&amp;originWidth=180&amp;size=3288&amp;status=done&amp;style=none&amp;width=180" alt="image.png">这个可以选择让系统排布时是否使每个组的UV密度相同。圈住的是调整让软件自动排布UV时的方向规定，“/”代表在排布时不让选中的UV块旋转<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615982117836-32042124-0e22-4262-84ec-d871706d1edf.png#align=left&amp;display=inline&amp;height=136&amp;originHeight=136&amp;originWidth=185&amp;size=4966&amp;status=done&amp;style=none&amp;width=185" alt="image.png">这里选择Box的话，一个象限中的打组的UV块之间不会有交叉，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615982184562-438643e6-63e9-40cf-8264-55ca28000352.png#align=left&amp;display=inline&amp;height=592&amp;originHeight=592&amp;originWidth=575&amp;size=474568&amp;status=done&amp;style=none&amp;width=575" alt="image.png">这样将不同部位整合到一个个组里，方便之后工作的选择。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615976280520-57189ce6-e99e-467a-ac04-b0821b2d171b.png#align=left&amp;display=inline&amp;height=132&amp;originHeight=132&amp;originWidth=98&amp;size=27673&amp;status=done&amp;style=none&amp;width=98" alt="image.png">这种重叠在一起的UV要想分开可以启用<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615976345964-03255520-bc74-4b4e-b186-44616b88a03e.png#align=left&amp;display=inline&amp;height=175&amp;originHeight=175&amp;originWidth=531&amp;size=15974&amp;status=done&amp;style=none&amp;width=531" alt="image.png">，如果<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615976380649-3935b500-bc92-4897-85c0-d931ce1bccb2.png#align=left&amp;display=inline&amp;height=102&amp;originHeight=102&amp;originWidth=127&amp;size=27394&amp;status=done&amp;style=none&amp;width=127" alt="image.png">是这种带洞的重叠在一起的UV可以点击Fill，然后展开<br><br><a name="AZ0VZ"></a></p><h1>RizomUV脚本</h1><p>脚本使用方法：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615979616463-7f32e009-9633-4e6b-8191-06618c3d5a99.png#align=left&amp;display=inline&amp;height=151&amp;originHeight=151&amp;originWidth=227&amp;size=4709&amp;status=done&amp;style=none&amp;width=227" alt="image.png">点击下面的省略号，选中脚本可以将脚本分类成01234567，分类好后点击S01234567对应使用脚本<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615979353701-22f4d4cb-1a34-4321-bea8-a7bdc1c8f11c.png#align=left&amp;display=inline&amp;height=26&amp;originHeight=26&amp;originWidth=102&amp;size=878&amp;status=done&amp;style=none&amp;width=102" alt="image.png">这个脚本的作用是将UV还原成原始的模型模样（未切割未展开）。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615979555606-9c237f23-cfea-4829-b659-167967c5db54.png#align=left&amp;display=inline&amp;height=28&amp;originHeight=28&amp;originWidth=142&amp;size=1026&amp;status=done&amp;style=none&amp;width=142" alt="image.png">这个脚本的适用于多个模型几乎相同但又想要它们渲染后又有一些变化的情况，将这些模型按照大小分配多个stack（排布时不会重叠的分开）的组，例如：杂草，花瓣这种在自然环境下有变化的。<br>也可以使用的方法：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1616067841457-5b0bc80c-b610-488e-832d-a62f8bda5893.png#align=left&amp;display=inline&amp;height=86&amp;originHeight=259&amp;originWidth=482&amp;size=117282&amp;status=done&amp;style=none&amp;width=160.66666666666666" alt="image.png">使用这些图标，将堆叠好的UV块横着或者竖着（一般是选择横着）依次排列开（但在模型中并不是挨着的），然后手动选择相同的UV堆叠在一起。</p><p><a name="ZNvwU"></a></p><h1>RizomUV使用的一些技巧</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615986849704-c4961ad2-48a8-4f25-ad0b-4ce716812ce9.png#align=left&amp;display=inline&amp;height=73&amp;originHeight=73&amp;originWidth=285&amp;size=5624&amp;status=done&amp;style=none&amp;width=285" alt="image.png">Flats是显示已经展好UV的模型，可以利用这个功能将已经展好的UV的模型使用Hide隐藏，然后切换回Both继续展其他UV块，这个3Ds图标作用是显示还没展平的UV<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615984175026-a7100bf9-21fa-4467-b6c3-6855fde3d3df.png#align=left&amp;display=inline&amp;height=430&amp;originHeight=430&amp;originWidth=46&amp;size=6160&amp;status=done&amp;style=none&amp;width=46" alt="image.png">适用于分对称的模型的UV时（如果模型在绝对坐标为0的情况下可以直接使用），只需要对其一边的模型进行分UV的操作即可（如果另一侧对称的模型没有效果则按一下o键（优化）即可显示出效果）。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615985995529-68786c96-824a-4537-a343-50d62534a3ed.png#align=left&amp;display=inline&amp;height=102&amp;originHeight=102&amp;originWidth=49&amp;size=1860&amp;status=done&amp;style=none&amp;width=49" alt="image.png">是自己更改对称轴的位置。<br>像这种两个不同部分的模型UV密度不同，但是目的想让它们相同可以进行的操作是<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615988932031-13b05993-917b-4aa8-98f4-fa14cd4b87a8.png#align=left&amp;display=inline&amp;height=445&amp;originHeight=445&amp;originWidth=505&amp;size=431155&amp;status=done&amp;style=none&amp;width=505" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615989207612-23eeef62-d372-47ca-8ef6-ef66fad2d3c0.png#align=left&amp;display=inline&amp;height=260&amp;originHeight=260&amp;originWidth=482&amp;size=260065&amp;status=done&amp;style=none&amp;width=482" alt="image.png"><br>将UDIMs从2变成1，将UV Tile  Su由1变成2，然后解除其中一个的打组，然后重新排布，但是这样UV贴图会拉伸，接下来把UV Tile Su由2变成1，将UDIMs由1变成2，重新排布，最终效果为理想效果。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615989315308-4a4cbcc2-b3b6-4513-a339-64d6ec82892c.png#align=left&amp;display=inline&amp;height=322&amp;originHeight=322&amp;originWidth=626&amp;size=501234&amp;status=done&amp;style=none&amp;width=626" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615989121626-a53e4780-2fd7-4a04-92df-c2937b837ec0.png#align=left&amp;display=inline&amp;height=105&amp;originHeight=105&amp;originWidth=333&amp;size=5788&amp;status=done&amp;style=none&amp;width=333" alt="image.png"><br>对于已经展好UV的模型，如果在使用多边形的选择模式下再鼠标左键选择这些展好UV的模型将会根据分割开的结构来选择，可以使用鼠标中建双击，这样就可以忽略切割线而选择一个整体（在系统展UV效果不好的情况下，重新选择恢复成默认状态的操作流程中适用）</p>]]></content>
      
      
      <categories>
          
          <category> DCC软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RizomUV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpeedTree</title>
      <link href="/2023/08/29/DCC%E8%BD%AF%E4%BB%B6-SpeedTree/"/>
      <url>/2023/08/29/DCC%E8%BD%AF%E4%BB%B6-SpeedTree/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="tF6fK"></a></p><h1>SpeedTree涉及的英语</h1><p>classic  经典模式 <br>proportional  分支模式：<br>absolute  绝对模式 （trunk和leaf mesh默认模式）<br>phyllotaxy 叶序  （物理模式） <br>interval 间距 间隔  （branches和twig默认模式） <br>bifurcation  分叉 （bifurcating branches 默认模式）<br>deformation 变形中的boundary控制的是叶子的开始与结束的范围，curl控制的是叶子的合拢（卷曲），fold控制的是叶子的对折。<br>forces 场<br>gravity 重力场<br>Direction 方向场<br>Magnet磁力场<br>gnarl 扭力场<br>Twist 扭曲场<br>curl 卷曲场<br> return 返回场<br>ancestor聚合<br>straightness是否拉直<br>twist缠绕 扭曲<br>spread  散布 （此属性在调节数量的属性旁边，提高此数值可以使分支分散开）<br>segment 线段；节；区段<br><a name="VtdoR"></a></p><h1>SpeedTree功能介绍</h1><p>右键添加<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401390517-3f9a9be2-e5c2-4ba7-8f56-78ddc7e77f2f.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=425&amp;id=sQmC6&amp;originHeight=425&amp;originWidth=463&amp;originalType=binary&amp;ratio=1&amp;size=45040&amp;status=done&amp;style=none&amp;taskId=ua7d530b0-85fd-4b66-a91a-1bdecd47bba&amp;width=463" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401644610-ce24643f-26ee-4ed6-8ba4-2a2f67ea6a95.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=415&amp;id=tIcMN&amp;originHeight=415&amp;originWidth=182&amp;originalType=binary&amp;ratio=1&amp;size=10184&amp;status=done&amp;style=none&amp;taskId=u06c3710f-f2c6-4ff6-b7eb-54f52ef41b4&amp;width=182" alt="image.png"><br>fronds 和leaf mesh 的区别：fronds:<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633348108981-af0298c8-ca5b-4e34-84ad-f4fb7cb40a26.png#clientId=u5c1f7ce7-842e-4&amp;from=paste&amp;height=147&amp;id=ud007d15e&amp;originHeight=147&amp;originWidth=147&amp;originalType=binary&amp;ratio=1&amp;size=44014&amp;status=done&amp;style=none&amp;taskId=u0400ec18-74d1-4a20-ba40-d9a2a2468dd&amp;width=147" alt="image.png">leaf<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633348126439-f2f8470d-7abd-41eb-8102-b577a2b20451.png#clientId=u5c1f7ce7-842e-4&amp;from=paste&amp;height=167&amp;id=ud05f2dda&amp;originHeight=167&amp;originWidth=326&amp;originalType=binary&amp;ratio=1&amp;size=68790&amp;status=done&amp;style=none&amp;taskId=u370a1cab-ce83-46ec-b69b-66e1e344f21&amp;width=326" alt="image.png"><br>Fronds通常是配合Twigs来使用的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633346809594-dda652ee-6747-4931-bc78-d8a3fefd2827.png#clientId=u5c1f7ce7-842e-4&amp;from=paste&amp;height=55&amp;id=ufd0acaa9&amp;originHeight=55&amp;originWidth=360&amp;originalType=binary&amp;ratio=1&amp;size=4023&amp;status=done&amp;style=none&amp;taskId=u484074eb-f85e-4268-8f3f-077c2e9b7a0&amp;width=360" alt="image.png">这里操纵<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633346834706-55dc923a-7a72-49be-b9c8-1415fbdf45b4.png#clientId=u5c1f7ce7-842e-4&amp;from=paste&amp;height=216&amp;id=u6a0c9301&amp;originHeight=216&amp;originWidth=343&amp;originalType=binary&amp;ratio=1&amp;size=30441&amp;status=done&amp;style=none&amp;taskId=uc9384205-69a5-43bc-80a6-b6c0e5cc37b&amp;width=343" alt="image.png">当前选中的节点的属性<br>其中Gen是generation 可以理解为基础控制。spine 样条 shape 形状 <br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633347048155-3f77e360-3e72-496a-a923-7635ecb435f7.png#clientId=u5c1f7ce7-842e-4&amp;from=paste&amp;height=261&amp;id=ua875ea35&amp;originHeight=261&amp;originWidth=331&amp;originalType=binary&amp;ratio=1&amp;size=14833&amp;status=done&amp;style=none&amp;taskId=u151e9f4e-d7fc-4f0f-b2a1-8717cb697de&amp;width=331" alt="image.png">可以选择模式，而且不同节点默认模式可能是不同的。<br>不同模式下可调节的参数是不一样的。<br>classic  经典模式 <br>proportional  分支模式：此模式下树枝会随着树干的数量的增加而增加，并具有随机性<br>absolute  绝对模式 （trunk和leaf mesh默认模式）与分支模式的区别可能是可以手动控制随机性<br>phyllotaxy 叶序  （物理模式） 此模式更符合现实状况的调节，比如离地面越近的树枝越粗，可以做出这种效果<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633959994580-6f451bde-2a29-452b-bc34-7c11bdfec882.png#clientId=u21d5c65d-670d-4&amp;from=paste&amp;height=479&amp;id=uf4cfb8f1&amp;originHeight=479&amp;originWidth=1101&amp;originalType=binary&amp;ratio=1&amp;size=116609&amp;status=done&amp;style=none&amp;taskId=ucad6f37a-2210-44e1-87a0-04feb08dd67&amp;width=1101" alt="image.png"><br>interval 间距 间隔  （branches和twig默认模式） （做树根时使用这个模式，间距模式的意思是，控制的是每间隔多少距离有多少树枝（可以通过调节spread来使树枝的方向发生随机变化。））<br>bifurcation  分叉 （bifurcating branches 默认模式）<br>flood 洪水<br>parent 父子关系<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633348720404-0797cc12-1b74-45ea-969f-dc69ae770adb.png#clientId=u5c1f7ce7-842e-4&amp;from=paste&amp;height=370&amp;id=ud6e164d3&amp;originHeight=370&amp;originWidth=394&amp;originalType=binary&amp;ratio=1&amp;size=21957&amp;status=done&amp;style=none&amp;taskId=u7e3d3b97-5eb5-4278-bf7c-e306ee6fab7&amp;width=394" alt="image.png">这个意思是 有0.13的随机值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633364634063-5a702308-b7c2-4d3e-9d79-fee1cb2ab668.png#clientId=u1e39d269-63e9-4&amp;from=paste&amp;height=115&amp;id=u67e35e53&amp;originHeight=115&amp;originWidth=802&amp;originalType=binary&amp;ratio=1&amp;size=29616&amp;status=done&amp;style=none&amp;taskId=u5b0dfbfc-25e2-4931-aca0-06ff1c2b067&amp;width=802" alt="image.png"><br>使用Generators编辑模式时是控制整体<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633364664399-8db9c1c4-710b-4bec-b5ee-0951f57d1cde.png#clientId=u1e39d269-63e9-4&amp;from=paste&amp;height=512&amp;id=uf6909233&amp;originHeight=512&amp;originWidth=527&amp;originalType=binary&amp;ratio=1&amp;size=130382&amp;status=done&amp;style=none&amp;taskId=u472f4014-7f35-4bf9-bb2f-18f950c37b3&amp;width=527" alt="image.png"><br>使用Nodes编辑模式时可以控制单独的分支<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633364693511-bda2b216-f26b-4dfb-bd7b-e21f5c43f6b1.png#clientId=u1e39d269-63e9-4&amp;from=paste&amp;height=485&amp;id=u542baa24&amp;originHeight=485&amp;originWidth=524&amp;originalType=binary&amp;ratio=1&amp;size=120289&amp;status=done&amp;style=none&amp;taskId=ua0ec3c15-e210-47ed-b315-8b342e238ac&amp;width=524" alt="image.png"><br>Fronds的可调整属性：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633423222754-72cefc6a-c9b1-4743-bd1b-4af1897e064c.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=678&amp;id=u12e69987&amp;originHeight=678&amp;originWidth=421&amp;originalType=binary&amp;ratio=1&amp;size=48822&amp;status=done&amp;style=none&amp;taskId=u1ebb5ead-a5f8-4e57-9e8c-0fbe489e539&amp;width=421" alt="image.png">boundary控制的是叶子的开始与结束的范围，curl控制的是叶子的合拢（卷曲），fold控制的是叶子的对折。<br><a name="sTl82"></a></p><h2 id="场：">场：</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633364335902-34e21c80-b720-4c8e-a3bd-7066a4c5dd8f.png#clientId=u1e39d269-63e9-4&amp;from=paste&amp;height=180&amp;id=oc5Nu&amp;originHeight=180&amp;originWidth=404&amp;originalType=binary&amp;ratio=1&amp;size=11085&amp;status=done&amp;style=none&amp;taskId=u6c2bbfc3-fda0-4914-b2b1-7ce230ee743&amp;width=404" alt="image.png">这里是控制是否受到场的作用（在节点处添加场会默认启用此功能）<br>场的作用强度是由场本身的强度以及植被的接受程度共同决定的。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633416806712-b2c2ba25-ade9-4d0f-8229-3648e1c2e8ee.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=148&amp;id=u101b0f84&amp;originHeight=148&amp;originWidth=395&amp;originalType=binary&amp;ratio=1&amp;size=9300&amp;status=done&amp;style=none&amp;taskId=u47378938-e215-4d00-b958-3573d7ae142&amp;width=395" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633416847593-9dd7b26e-3f03-4145-93e4-e6b886c01eff.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=164&amp;id=u3a88dd8f&amp;originHeight=164&amp;originWidth=332&amp;originalType=binary&amp;ratio=1&amp;size=7707&amp;status=done&amp;style=none&amp;taskId=u1e55aa54-9ffb-4145-98ab-1ec323469e8&amp;width=332" alt="image.png"><br>gravity 重力场 ：重力场内置在节点的属性中，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633417931514-eb7cd439-fbfe-41d4-aa18-2a527c5166ea.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=249&amp;id=u9e18ac6d&amp;originHeight=249&amp;originWidth=365&amp;originalType=binary&amp;ratio=1&amp;size=13735&amp;status=done&amp;style=none&amp;taskId=u25fc22f2-c689-4207-af4f-46934e43c02&amp;width=365" alt="image.png">如果重力场的方向与植物的方向是相对的 那么重力场将不会起作用（可以通过更改start angle的数值使重力场起作用）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633360245029-d6065fad-3434-49da-b9a9-e1a00bc67773.png#clientId=u1e39d269-63e9-4&amp;from=paste&amp;height=322&amp;id=EjjBb&amp;originHeight=322&amp;originWidth=278&amp;originalType=binary&amp;ratio=1&amp;size=28979&amp;status=done&amp;style=none&amp;taskId=ue0598d54-7062-4f77-b1a9-8280833820b&amp;width=278" alt="image.png"><br>Direction 方向场<br> Magnet磁力场（磁铁的方向对树没有影响，它只会吸引至当前的中心点。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633414747828-ae9f4486-58bf-4420-887f-66a4c21cd730.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=327&amp;id=u52922b31&amp;originHeight=327&amp;originWidth=546&amp;originalType=binary&amp;ratio=1&amp;size=81354&amp;status=done&amp;style=none&amp;taskId=uadf95809-2d86-48df-a970-b47339d78b6&amp;width=546" alt="image.png">）<br>gnarl 扭力场（位置没有影响 方向有影响）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633416252474-5b2b25fe-c3e8-4dae-97f9-91acd0cf6019.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=251&amp;id=u66c8db80&amp;originHeight=251&amp;originWidth=261&amp;originalType=binary&amp;ratio=1&amp;size=51111&amp;status=done&amp;style=none&amp;taskId=u246d3629-b6d4-4af1-b55f-2f4601868cb&amp;width=261" alt="image.png">中心点对应着树干的顶部。<br>Twist 扭曲场 （位置没有影响 方向有影响）曲线不能调节首端的强度。<br>curl 旋转场    位置没有影响   方向有影响 <br>return 返回场    位置和方向都没有影响只有强度有影响，单一的返回场没有任何作用，返回场需要配合其他场一起作用。<br>mesh控制力场：使用mesh控制力场可以实现，导入外部模型，在speedtree中制作藤曼缠绕外部模型的效果。<br>过程：在mesh栏中导入一个外部模型<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633420242305-53db71f9-b37e-46d0-ae08-07864d9cccc1.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=78&amp;id=u35070057&amp;originHeight=78&amp;originWidth=511&amp;originalType=binary&amp;ratio=1&amp;size=6317&amp;status=done&amp;style=none&amp;taskId=u37808711-fd2c-48ad-9261-55962727095&amp;width=511" alt="image.png">使用这个模式<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633420266088-c03ccf12-284d-4854-aeed-90e343c3d874.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=265&amp;id=u25113846&amp;originHeight=265&amp;originWidth=239&amp;originalType=binary&amp;ratio=1&amp;size=53843&amp;status=done&amp;style=none&amp;taskId=u5c15bab5-3067-4063-abaf-fcc9cdf0553&amp;width=239" alt="image.png">。提前创建好多个细的树干，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633420559139-1dd0501c-59a4-4a7f-ae0c-c21da8ac921a.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=533&amp;id=u35ca3c82&amp;originHeight=533&amp;originWidth=399&amp;originalType=binary&amp;ratio=1&amp;size=77507&amp;status=done&amp;style=none&amp;taskId=uc9e29dd1-5377-437f-bd50-cdfbd06928c&amp;width=399" alt="image.png">调整forces的大小可以控制缠绕程度（不推荐开太大，不然会有穿插）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633420519316-4585378c-2f4a-410c-8058-41881fcc9086.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=95&amp;id=u239de4bb&amp;originHeight=95&amp;originWidth=398&amp;originalType=binary&amp;ratio=1&amp;size=5618&amp;status=done&amp;style=none&amp;taskId=u88642599-ae70-4388-8659-60a54037b00&amp;width=398" alt="image.png"></p><p><a name="F8UiX"></a></p><h1>节点介绍</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633419638152-58f92153-5fda-4284-a49a-a000cb63998a.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=77&amp;id=ub2c1b449&amp;originHeight=77&amp;originWidth=76&amp;originalType=binary&amp;ratio=1&amp;size=7841&amp;status=done&amp;style=none&amp;taskId=udcca4d5b-b3b8-470a-aaba-e5385e34160&amp;width=76" alt="image.png">中的<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633419660862-7c66f0b4-36b3-46c8-a7f1-e4c8723009bd.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=168&amp;id=u48dcf64b&amp;originHeight=168&amp;originWidth=404&amp;originalType=binary&amp;ratio=1&amp;size=7691&amp;status=done&amp;style=none&amp;taskId=u57f54c91-5ac6-4fa7-b1a5-fc72c8bc46e&amp;width=404" alt="image.png">可以提高半径，提高半径后可以扩大树干的移动范围<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633420115259-5764a878-2b86-4fb0-81ee-4eb3330cae1b.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=544&amp;id=u8a1e106c&amp;originHeight=544&amp;originWidth=692&amp;originalType=binary&amp;ratio=1&amp;size=115724&amp;status=done&amp;style=none&amp;taskId=ubc57d5a2-3a39-46b8-9f45-222cc9b9d4e&amp;width=692" alt="image.png"><br>generation中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633401142781-126b005c-5b0e-44c2-bdd6-1479b696b90d.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=295&amp;id=ua97be0c4&amp;originHeight=295&amp;originWidth=384&amp;originalType=binary&amp;ratio=1&amp;size=15298&amp;status=done&amp;style=none&amp;taskId=ub11d26f7-be3c-4716-8775-fb54b898e0a&amp;width=384" alt="image.png">更改为<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633401151847-1ee7c278-4726-4965-a13b-3a6422c7b622.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=34&amp;id=u8b8a7bba&amp;originHeight=34&amp;originWidth=293&amp;originalType=binary&amp;ratio=1&amp;size=1843&amp;status=done&amp;style=none&amp;taskId=ufaed63fe-a2f2-422d-8125-5edc39cd9ed&amp;width=293" alt="image.png">时的前后对比：<br>none:<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633401185060-326ff161-5e8a-4ae4-874e-c437806eaead.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=331&amp;id=u20f3f3de&amp;originHeight=331&amp;originWidth=393&amp;originalType=binary&amp;ratio=1&amp;size=57108&amp;status=done&amp;style=none&amp;taskId=uf9ea04d3-bc56-4438-a013-1179f7d4f64&amp;width=393" alt="image.png"><br>any:<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633401191128-e3db2020-a63e-481c-b0a3-00145c52451f.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=496&amp;id=u71bbf508&amp;originHeight=496&amp;originWidth=441&amp;originalType=binary&amp;ratio=1&amp;size=81826&amp;status=done&amp;style=none&amp;taskId=ud9ab3a92-90f8-4ea5-b000-02c7b8f8e89&amp;width=441" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633401357793-f30cfce0-7a19-4dae-8b63-2c0f25c4796e.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=129&amp;id=u7f712a89&amp;originHeight=129&amp;originWidth=412&amp;originalType=binary&amp;ratio=1&amp;size=7766&amp;status=done&amp;style=none&amp;taskId=ue186c093-5f4e-4ae8-b182-9e01acbb777&amp;width=412" alt="image.png">控制的是此节点是否受到场的作用<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402000803-24def14f-a875-4028-9fc2-c1d871e914ec.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=166&amp;id=u3a7ae387&amp;originHeight=166&amp;originWidth=391&amp;originalType=binary&amp;ratio=1&amp;size=8601&amp;status=done&amp;style=none&amp;taskId=u12f9a4e6-07b4-4590-aa42-07e08506eb8&amp;width=391" alt="image.png">控制的是精度大小 <br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402322602-bdd17324-cd22-4b75-8c93-13e9f926445d.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=182&amp;id=u461b6dc4&amp;originHeight=182&amp;originWidth=410&amp;originalType=binary&amp;ratio=1&amp;size=12309&amp;status=done&amp;style=none&amp;taskId=u3ca005b4-ebcc-45b5-ae15-519803bc7a6&amp;width=410" alt="image.png">分别控制的是 gravity重力（地心引力的大小）  ancestor聚合  straightness是否拉直  twist缠绕<br>Spine中的Break（）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402499926-72d13a3c-e85e-4939-9f3c-8fc00804842d.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=113&amp;id=u9326a85e&amp;originHeight=113&amp;originWidth=367&amp;originalType=binary&amp;ratio=1&amp;size=7573&amp;status=done&amp;style=none&amp;taskId=uf90f49cf-34ce-48c1-b79e-59f2a4b41e2&amp;width=367" alt="image.png">chance控制的是树枝打断的数量（被风吹断  砍断的数量）Spot控制的是打断的长度<br>Skin中的<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402720989-a0b65ec8-49df-4d9b-9f02-6b9af18b4903.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=96&amp;id=ufa2363e4&amp;originHeight=96&amp;originWidth=392&amp;originalType=binary&amp;ratio=1&amp;size=4650&amp;status=done&amp;style=none&amp;taskId=uefe7a700-bedb-494a-afdb-fbb968fa23d&amp;width=392" alt="image.png">控制的是是否扁平状<br>为0时<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402765714-56c2a523-ea24-4879-9e51-a27564083922.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=300&amp;id=ufe02b297&amp;originHeight=300&amp;originWidth=226&amp;originalType=binary&amp;ratio=1&amp;size=52470&amp;status=done&amp;style=none&amp;taskId=ub3ab7f0d-4288-45e2-9f3b-c42b29b17e9&amp;width=226" alt="image.png">为0.5时<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402811108-6d5fee9d-5395-48a4-a9ae-3f32bc2ebbf0.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=360&amp;id=u9bd23aa6&amp;originHeight=360&amp;originWidth=255&amp;originalType=binary&amp;ratio=1&amp;size=69528&amp;status=done&amp;style=none&amp;taskId=u051b94a8-7b5b-4034-b21a-820d97a9442&amp;width=255" alt="image.png">为1时<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402790419-ce9ba6bb-5759-49b9-bb89-ff199f38bdfe.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=372&amp;id=u21de3bb1&amp;originHeight=372&amp;originWidth=269&amp;originalType=binary&amp;ratio=1&amp;size=68923&amp;status=done&amp;style=none&amp;taskId=u020d6319-94dc-407c-a83a-d6df61f4abc&amp;width=269" alt="image.png"><br>ALL中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633402961581-39d32a72-7f55-4a6b-ac64-db9e63ada42a.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=109&amp;id=u708f41ac&amp;originHeight=109&amp;originWidth=402&amp;originalType=binary&amp;ratio=1&amp;size=6195&amp;status=done&amp;style=none&amp;taskId=ude5b4f28-035d-4fe1-9dcf-f1089f42e26&amp;width=402" alt="image.png">模拟的是植被一年四季生长的状况<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633403020705-f74f587f-7251-4f63-ad76-ded977885096.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=434&amp;id=u9f69bc3a&amp;originHeight=434&amp;originWidth=394&amp;originalType=binary&amp;ratio=1&amp;size=25895&amp;status=done&amp;style=none&amp;taskId=u700ddff8-b95f-4b33-b5f2-e9573ffde6c&amp;width=394" alt="image.png">用来制作生长动画</p><p><a name="ug02P"></a></p><h1>材质面板</h1><p><a name="yJvoa"></a></p><h2 id="添加材质">添加材质</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403355057-be6e3dcd-abab-4b05-83c6-42834b89a33f.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=506&amp;id=cMAfw&amp;originHeight=506&amp;originWidth=631&amp;originalType=binary&amp;ratio=1&amp;size=235923&amp;status=done&amp;style=none&amp;taskId=u6fba3f16-bd5b-4126-bc52-01a227360c9&amp;width=631" alt="image.png">例如为这些叶子添加材质，按<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403390877-2a5027fb-a51e-4bd0-82d2-2ae1b2c2f491.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=184&amp;id=Yiwji&amp;originHeight=184&amp;originWidth=385&amp;originalType=binary&amp;ratio=1&amp;size=30196&amp;status=done&amp;style=none&amp;taskId=u68f44192-74ba-4aa1-8a78-090ff4279b9&amp;width=385" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403409048-973e14ab-c806-4974-bd89-bc40c1f96578.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=101&amp;id=Yjj5o&amp;originHeight=101&amp;originWidth=323&amp;originalType=binary&amp;ratio=1&amp;size=5951&amp;status=done&amp;style=none&amp;taskId=uc21a3776-5b01-4cf3-91da-4244d6c5f97&amp;width=323" alt="image.png">添加一个材质，然后为材质添加SpeedTree自带的贴图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403469035-7011e7dd-5802-4ff0-8b7c-0b97344f106e.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=568&amp;id=hF1eX&amp;originHeight=568&amp;originWidth=400&amp;originalType=binary&amp;ratio=1&amp;size=56511&amp;status=done&amp;style=none&amp;taskId=uc81cff55-c26d-420c-b6d4-f73b42c6185&amp;width=400" alt="image.png">选择好后<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403566668-6df57b49-9415-4eb6-b702-b2f21a5a2916.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=293&amp;id=WKDUS&amp;originHeight=293&amp;originWidth=332&amp;originalType=binary&amp;ratio=1&amp;size=37797&amp;status=done&amp;style=none&amp;taskId=u2e14d17a-7e74-4423-bef3-cf7370f4a86&amp;width=332" alt="image.png">按住<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403523685-a332bf6e-a9f4-4530-8190-6906b5602c33.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=120&amp;id=sKBPX&amp;originHeight=120&amp;originWidth=265&amp;originalType=binary&amp;ratio=1&amp;size=18272&amp;status=done&amp;style=none&amp;taskId=u1ebc3137-d92b-440a-825a-290433c9667&amp;width=265" alt="image.png">拖拽到mesh上面，即可赋予材质<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623403559720-63092ca2-6391-491e-b7bd-3646caf0037e.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=480&amp;id=QlDjM&amp;originHeight=480&amp;originWidth=538&amp;originalType=binary&amp;ratio=1&amp;size=285216&amp;status=done&amp;style=none&amp;taskId=uac5330e5-2c60-47c9-b170-32b1b1b396a&amp;width=538" alt="image.png"><br><a name="zoExB"></a></p><h2 id="材质调整">材质调整</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633406225817-37a61954-b06c-4cc0-8f7c-8b75b348c40f.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=143&amp;id=u8f9917f9&amp;originHeight=143&amp;originWidth=252&amp;originalType=binary&amp;ratio=1&amp;size=3094&amp;status=done&amp;style=none&amp;taskId=ufef5c33c-93ee-41b3-ba29-dbbcaf75f84&amp;width=252" alt="image.png">可以使材质的颜色有一些变化，首先调整variations的颜色 然后通过提高amount的大小来控制变化程度。使材质颜色不单一。<br><a name="BJqCO"></a></p><h2 id="导入外部模型和贴图设置">导入外部模型和贴图设置</h2><p>首先不同材质的模型要分开导入，在speedtree中导入模型需要在<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633409874678-6d5fb322-6e4e-4e76-8685-98ea9a9fed49.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=746&amp;id=u2e49fd9b&amp;originHeight=746&amp;originWidth=535&amp;originalType=binary&amp;ratio=1&amp;size=89728&amp;status=done&amp;style=none&amp;taskId=u5aa2231c-9ba4-490a-8d01-86451c9817e&amp;width=535" alt="image.png">meshes面板中创建一个模型命名后导入高模。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633409924810-cba84d11-5518-4a3f-b44c-409d8bd1e565.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=241&amp;id=ufc21b7fb&amp;originHeight=241&amp;originWidth=522&amp;originalType=binary&amp;ratio=1&amp;size=20102&amp;status=done&amp;style=none&amp;taskId=ubc02d2fa-f40c-4e23-8f96-f1bc733f6ed&amp;width=522" alt="image.png"><br>使用模型时需要创建一个leafmesh节点，然后创建一个材质，为材质赋予模型<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633410036631-984e26f6-438b-4485-89de-6c33d6146d65.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=425&amp;id=u822fc6f6&amp;originHeight=425&amp;originWidth=521&amp;originalType=binary&amp;ratio=1&amp;size=59900&amp;status=done&amp;style=none&amp;taskId=ubc800378-066f-4ed0-9113-ce0b92a848d&amp;width=521" alt="image.png">然后将赋予模型的材质赋予leafmesh上就相当于导入外部模型了<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633411623392-b0b99b45-c3b4-412f-9558-514e719a2ad2.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=208&amp;id=u9edc7a33&amp;originHeight=208&amp;originWidth=401&amp;originalType=binary&amp;ratio=1&amp;size=11362&amp;status=done&amp;style=none&amp;taskId=uff7c725c-bd10-4843-8dff-3b1d12550da&amp;width=401" alt="image.png">勾选use actual size可以使导入的不同材质的模型都使用外部真实的尺寸，避免speedtree自动更改尺寸而导致的模型没有匹配衔接好。</p><p><a name="z3kcC"></a></p><h1>SpeedTree操作</h1><p><a name="LGJKJ"></a></p><h2 id="快捷键">快捷键</h2><p>选中节点按H可以隐藏节点<br>空格加鼠标左键点击快速创建可绘制的树桩，然后按住空格键然后鼠标点住树桩的图标并拖动可以快速绘制出树干。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634026117659-65a41613-6450-4347-acdc-557a56328699.png#clientId=uf54ee41c-899c-4&amp;from=paste&amp;height=194&amp;id=u22bcb387&amp;originHeight=194&amp;originWidth=275&amp;originalType=binary&amp;ratio=1&amp;size=22715&amp;status=done&amp;style=none&amp;taskId=uff091850-05d1-4b15-93e8-0bae1713cff&amp;width=275" alt="image.png"><br>A键控制此操纵图标的显示与隐藏。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634027396730-e6976caa-062e-4093-9f78-06d7d5cf0bf7.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=233&amp;id=u47d029b7&amp;originHeight=233&amp;originWidth=228&amp;originalType=binary&amp;ratio=1&amp;size=20896&amp;status=done&amp;style=none&amp;taskId=u70634a75-6904-4808-bc4b-6168b10cc77&amp;width=228" alt="image.png"><br>ctrl+2 切换为网格显示，可以用来观察面数的多少。<br><a name="z7pzV"></a></p><h2 id="节点编辑与生成器编辑">节点编辑与生成器编辑</h2><p>拖动节点A到节点B上可以使节点A成为节点B的子节点<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633359726064-4884d04c-75c2-4d2f-a203-432c6c0a1b0a.png#clientId=u1e39d269-63e9-4&amp;from=paste&amp;height=88&amp;id=ub96670b1&amp;originHeight=88&amp;originWidth=212&amp;originalType=binary&amp;ratio=1&amp;size=23260&amp;status=done&amp;style=none&amp;taskId=uf3cf7a49-2db8-4102-84fd-143b5804ba3&amp;width=212" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401995493-01b7de8c-a13b-4d72-9478-5b2465730d1d.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=86&amp;id=u67cc3472&amp;originHeight=86&amp;originWidth=142&amp;originalType=binary&amp;ratio=1&amp;size=2628&amp;status=done&amp;style=none&amp;taskId=uf1696eec-79bc-4e56-a0a2-f540451187f&amp;width=142" alt="image.png">例如创建分叉树枝，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623402123162-08091934-215c-4f81-afc6-b52849e43534.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=328&amp;id=u773eb9b8&amp;originHeight=328&amp;originWidth=385&amp;originalType=binary&amp;ratio=1&amp;size=44003&amp;status=done&amp;style=none&amp;taskId=u6ba92a2a-7368-433c-a5a6-7100464f5c3&amp;width=385" alt="image.png">使用Generators编辑会控制整体的分叉树枝，但是使用节点编辑可以控制单独一个树枝的长度，噪波，重力等属性。</p><p><a name="JJ8mi"></a></p><h2 id="手动控制树干的走向">手动控制树干的走向</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401390517-3f9a9be2-e5c2-4ba7-8f56-78ddc7e77f2f.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=425&amp;id=uaa898ed0&amp;originHeight=425&amp;originWidth=463&amp;originalType=binary&amp;ratio=1&amp;size=45040&amp;status=done&amp;style=none&amp;taskId=ua7d530b0-85fd-4b66-a91a-1bdecd47bba&amp;width=463" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401644610-ce24643f-26ee-4ed6-8ba4-2a2f67ea6a95.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=415&amp;id=ufc22a858&amp;originHeight=415&amp;originWidth=182&amp;originalType=binary&amp;ratio=1&amp;size=10184&amp;status=done&amp;style=none&amp;taskId=u06c3710f-f2c6-4ff6-b7eb-54f52ef41b4&amp;width=182" alt="image.png">在界面右键选择Trunk（树干）创建一个树干，然后<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401431976-f0131b08-a4b9-4c28-ba18-cef61c902a6e.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=317&amp;id=u45c7b0b8&amp;originHeight=317&amp;originWidth=791&amp;originalType=binary&amp;ratio=1&amp;size=77988&amp;status=done&amp;style=none&amp;taskId=u4562f9a8-f9a7-4947-8575-d8d8d1a0e9b&amp;width=791" alt="image.png"><br>转换成手绘模式，选中树干，按W或者按TAB键切换为nodes编辑模式可以移动树干的走向<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623401518842-3da72f47-64ba-4206-9333-820c46df0ce5.png#clientId=u81ec6932-2f78-4&amp;from=paste&amp;height=606&amp;id=ua727f3bd&amp;originHeight=606&amp;originWidth=503&amp;originalType=binary&amp;ratio=1&amp;size=94084&amp;status=done&amp;style=none&amp;taskId=uf196ca15-7f1b-47c6-ab55-6dcf70eb1e9&amp;width=503" alt="image.png"><br>选中树干的节点可以进行以下操作：例如通过选择多个节点来实现整体移动树干；在选择的节点处的前面或者后面新添加一个节点；平滑节点或者align<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634136171466-91e91d72-a7dd-4882-8735-49c891612fd8.png#clientId=u32ac9142-3687-4&amp;from=paste&amp;height=177&amp;id=u586db373&amp;originHeight=177&amp;originWidth=208&amp;originalType=binary&amp;ratio=1&amp;size=23392&amp;status=done&amp;style=none&amp;taskId=u783021d0-b5f2-463b-9097-a181ccd9f71&amp;width=208" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634135883247-3f5981f5-4a3b-4834-9706-48c8a21ed369.png#clientId=u32ac9142-3687-4&amp;from=paste&amp;height=707&amp;id=u2e961759&amp;originHeight=707&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;size=24306&amp;status=done&amp;style=none&amp;taskId=ucf5fecf7-f034-4014-8529-8179d546319&amp;width=316" alt="image.png"><br><a name="DJP6e"></a></p><h2 id></h2><p><a name="BAFxr"></a></p><h2 id="曲线编辑操作">曲线编辑操作</h2><p>在曲线处双击可以创建点 在点处双击可以调整贝塞尔曲线，而且点的位置是可以超出1的范围的。cao <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633411930805-21d7152f-3da6-4741-9ef6-ff5027fa6690.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=285&amp;id=u61854c9b&amp;originHeight=285&amp;originWidth=428&amp;originalType=binary&amp;ratio=1&amp;size=10824&amp;status=done&amp;style=none&amp;taskId=uc32ce76f-35de-4091-8759-357fc5bc2eb&amp;width=428" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633411973440-4937f38a-6ecf-4470-a3e8-ee3e80afee3f.png#clientId=uf125baf7-3029-4&amp;from=paste&amp;height=356&amp;id=uda9d7b2e&amp;originHeight=356&amp;originWidth=195&amp;originalType=binary&amp;ratio=1&amp;size=13738&amp;status=done&amp;style=none&amp;taskId=u76cb1823-35b9-447e-bb32-a1c3cd0b24b&amp;width=195" alt="image.png">这里可以使用预设<br><a name="D98qr"></a></p><h2 id="做树的一些操作细节">做树的一些操作细节</h2><p>分支的默认分布last不是1可以手动改为1使其在分支的末尾添加新的分支<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633447693417-9416903b-97c3-48c2-9405-c0fc34c55f29.png#clientId=u4acc60dd-ca2c-4&amp;from=paste&amp;height=170&amp;id=ub9fa8966&amp;originHeight=170&amp;originWidth=368&amp;originalType=binary&amp;ratio=1&amp;size=49672&amp;status=done&amp;style=none&amp;taskId=uc72792e3-07e4-488c-a4a6-875cf9b8419&amp;width=368" alt="image.png"><br><a name="cONWY"></a></p><h3 id="添加树根">添加树根</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634643567378-cddfa1bf-e3ac-4adb-a0df-4b22aa78cc03.png#clientId=u10de2d55-63d0-4&amp;from=paste&amp;height=506&amp;id=u56ea899c&amp;originHeight=506&amp;originWidth=594&amp;originalType=binary&amp;ratio=1&amp;size=74654&amp;status=done&amp;style=none&amp;taskId=u85182e09-c76f-4531-9746-aebe856c2ce&amp;width=594" alt="image.png"></p><p><a name="gQl1K"></a></p><h3 id="增加树的的多样性">增加树的的多样性</h3><p>deformation 变形 中的boundary控制的是叶子的开始与结束的范围，curl控制的是叶子的合拢（卷曲），fold控制的是叶子的对折。<br>调整模型的多边形数量<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634044753060-223b0185-e1b4-4bf1-8fa6-80f8ea77e845.png#clientId=ud067f1a7-a06d-4&amp;from=paste&amp;height=422&amp;id=u6c1e330b&amp;originHeight=422&amp;originWidth=362&amp;originalType=binary&amp;ratio=1&amp;size=20781&amp;status=done&amp;style=none&amp;taskId=ue0704bfa-288f-4abd-b47c-50aced1677d&amp;width=362" alt="image.png"><br>spread  散布 （此属性在调节数量的属性旁边，提高此数值可以使分支分散开）<br>调整<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634312813719-dd82ce4b-8a52-48d2-af22-f5ef85c56cff.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=344&amp;id=ufa6a9a25&amp;originHeight=344&amp;originWidth=369&amp;originalType=binary&amp;ratio=1&amp;size=19746&amp;status=done&amp;style=none&amp;taskId=ua3703c24-ec9d-48e5-8593-ea37b48558e&amp;width=369" alt="image.png">如果使Smooth提高到1，那么在不受到其他力其他场的情况下将得到一个笔直的树干（树枝）。可以通过调整尝试LateAmount的第二个曲线形式和数值获得不同的后期处理，最后选择一个效果较好的样子。<br><a name="NUhZL"></a></p><h3 id="两个调整曲线的区别">两个调整曲线的区别</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634309005188-369b2443-7a1f-4816-bc97-19beb31d0e27.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=58&amp;id=JdE7U&amp;originHeight=58&amp;originWidth=354&amp;originalType=binary&amp;ratio=1&amp;size=4590&amp;status=done&amp;style=none&amp;taskId=u46fa691c-7bfa-4e4d-8cfc-01d31faeeed&amp;width=354" alt="image.png">这两个调整曲线的区别：<br>第一个是调整整体分布情况，第二个是调节每一个生成的模型的分布情况，例如这个控制树枝radius的调整，第一个是调整从上到下树枝的radius的大小，第二个是调整每一个树枝的从根到尾的radius的大小。<br><a name="fH9Ip"></a></p><h3 id="叶子有穿插的解决办法">叶子有穿插的解决办法</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634310579799-8e60c555-5eb0-4630-b986-7f79bcae7faf.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=175&amp;id=ua8aa1ca1&amp;originHeight=175&amp;originWidth=425&amp;originalType=binary&amp;ratio=1&amp;size=18741&amp;status=done&amp;style=none&amp;taskId=u7a623a5b-bb0c-4616-b6dd-dbb66e45c79&amp;width=425" alt="image.png">使用碰撞检测。<br><a name="QGE9l"></a></p><h3 id="制作树干褶皱">制作树干褶皱</h3><p>如果要做这种褶皱<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634642503384-3e18a678-1002-4e64-b32a-689c29f90ab9.png#clientId=u10de2d55-63d0-4&amp;from=paste&amp;height=594&amp;id=fGLfs&amp;originHeight=594&amp;originWidth=518&amp;originalType=binary&amp;ratio=1&amp;size=303235&amp;status=done&amp;style=none&amp;taskId=ufdbec97f-a852-4c5d-9ddd-bf3b2641aee&amp;width=518" alt="image.png"><br>可以通过调整树干的displacement的数值（调整使用此数值如果达不到好的效果可以通过增加树干的分段数（segments中的数值））<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634642919154-aced8c1c-b45e-4e1a-9fd5-40c8cc1a6606.png#clientId=u10de2d55-63d0-4&amp;from=paste&amp;height=329&amp;id=BmdLB&amp;originHeight=329&amp;originWidth=389&amp;originalType=binary&amp;ratio=1&amp;size=20675&amp;status=done&amp;style=none&amp;taskId=u8de3fc95-022a-4930-a6bf-82d28508b7c&amp;width=389" alt="image.png"><br><a name="PzYj4"></a></p><h2 id="导出设置">导出设置</h2><p>如果导出的模型要导入到引擎中就勾选Unwrap UVs 如果是导入到maya 3dmax就不需要勾选Unwrap UVs（勾选的话导出时间会很长），<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633535772136-eef29385-2f87-4c99-8762-4c0885e34dbf.png#clientId=u52309603-bec0-4&amp;from=paste&amp;height=546&amp;id=u401b84a5&amp;originHeight=546&amp;originWidth=456&amp;originalType=binary&amp;ratio=1&amp;size=61946&amp;status=done&amp;style=none&amp;taskId=u3ac5b422-a82d-400f-a5a3-f4085ae3b60&amp;width=456" alt="image.png"><br><a name="fBoUc"></a></p><h3 id="风力动画的调整导出">风力动画的调整导出</h3><p>启用风力动画后，可以通过timeline来调整风力的大小。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634312110943-badb9e56-3169-4466-ba54-96d982ecf87a.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=97&amp;id=u930b62da&amp;originHeight=97&amp;originWidth=444&amp;originalType=binary&amp;ratio=1&amp;size=10002&amp;status=done&amp;style=none&amp;taskId=u9d1a1c79-7cf0-456c-8044-0cda5d7e55f&amp;width=444" alt="image.png"><br>调整好FPS和帧的长度后，可以在导出abc格式中<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634312231044-9e94a055-f5a3-4fc8-804e-02b3852229d0.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=548&amp;id=u351329a7&amp;originHeight=548&amp;originWidth=456&amp;originalType=binary&amp;ratio=1&amp;size=61300&amp;status=done&amp;style=none&amp;taskId=uad34e471-a3f1-4f80-b7bd-fdea079b6bd&amp;width=456" alt="image.png"><br>如果无法使用导出动画那么可以通过调整格式来解决<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634312303274-62d1ab71-27f3-4be2-97c0-59f1c6447c5d.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=548&amp;id=u00802aca&amp;originHeight=548&amp;originWidth=456&amp;originalType=binary&amp;ratio=1&amp;size=61276&amp;status=done&amp;style=none&amp;taskId=ufe608cf2-715a-444d-9498-07338032d9b&amp;width=456" alt="image.png"><br><a name="lP2DM"></a></p><h2 id="如何在精度和面数上取得平衡">如何在精度和面数上取得平衡</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634307843842-759452c8-6c84-4369-8432-afea2c4fa4d3.png#clientId=u619c4f67-05e2-4&amp;from=paste&amp;height=364&amp;id=uf4a460bc&amp;originHeight=364&amp;originWidth=368&amp;originalType=binary&amp;ratio=1&amp;size=19204&amp;status=done&amp;style=none&amp;taskId=ua38dc4c0-bef4-4a47-92a5-45d504f5fa7&amp;width=368" alt="image.png">这个optimization是优化的意思，提高这个数值。不同节点调节的参数可能有些区别，但是都是调整Segments里的数值，树叶只能通过减少数量来优化。<br>也可以通过这个来实现减面操作。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634310422550-332e02f9-1f48-4426-8962-4f3763653f7d.png#clientId=u38ab8620-ffb9-4&amp;from=paste&amp;height=87&amp;id=u41bdd0e0&amp;originHeight=87&amp;originWidth=403&amp;originalType=binary&amp;ratio=1&amp;size=7404&amp;status=done&amp;style=none&amp;taskId=uf4688959-fb4c-4e56-8a95-da2cf2f2377&amp;width=403" alt="image.png"><br><a name="osQML"></a></p><h2 id="手绘风格化树的操作">手绘风格化树的操作</h2><p>空格加鼠标左键点击快速创建可绘制的树桩，然后按住空格键然后鼠标点住树桩的图标并拖动可以快速绘制出树干。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634026117659-65a41613-6450-4347-acdc-557a56328699.png#clientId=uf54ee41c-899c-4&amp;from=paste&amp;height=194&amp;id=v1uX0&amp;originHeight=194&amp;originWidth=275&amp;originalType=binary&amp;ratio=1&amp;size=22715&amp;status=done&amp;style=none&amp;taskId=uff091850-05d1-4b15-93e8-0bae1713cff&amp;width=275" alt="image.png"> 此绘制是基于当前屏幕的，确定好一个面的位置后，然后再绘制另一个面的树干的位置。<br>例如制作这种树的过程：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634026573860-f19b194f-eee9-45be-97a5-25c5c74e235f.png#clientId=uf54ee41c-899c-4&amp;from=paste&amp;height=419&amp;id=u07ad0a53&amp;originHeight=419&amp;originWidth=276&amp;originalType=binary&amp;ratio=1&amp;size=321039&amp;status=done&amp;style=none&amp;taskId=u62d7225c-6527-4bbf-bffd-cd91a748ea4&amp;width=276" alt="image.png"><br>首先创建出手绘的树干<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634026620976-a6e7a3a9-15d4-4ac1-9b27-b54413c2a443.png#clientId=uf54ee41c-899c-4&amp;from=paste&amp;height=770&amp;id=u79c5ae7c&amp;originHeight=770&amp;originWidth=569&amp;originalType=binary&amp;ratio=1&amp;size=271219&amp;status=done&amp;style=none&amp;taskId=uaae2d91e-68c6-4476-9744-32c38249296&amp;width=569" alt="image.png"><br>控制好树干的走向和粗细后，添加大分支，（使用absolute steps模式更方便控制大分支）大分支的数量由树团的数量的大小决定（一个大的树团由多个大分支构成）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634026900453-c4e00c64-c9e2-498b-a748-c5d833d1781c.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=335&amp;id=uda6b49a5&amp;originHeight=335&amp;originWidth=270&amp;originalType=binary&amp;ratio=1&amp;size=266838&amp;status=done&amp;style=none&amp;taskId=ufb6d1fe2-a8ee-4c03-b68e-4dd6d897615&amp;width=270" alt="image.png">这种比较特殊的树几乎不可能使用speedtree自带的调节整体分支属性功能来达到，所以需要节点式的手绘模式，调节一个个分支的分布与大小。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634029034453-47ab43b6-94d8-4959-88f8-0d68db9dcaea.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=763&amp;id=uf2ca33fd&amp;originHeight=763&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;size=310597&amp;status=done&amp;style=none&amp;taskId=u7f530e95-1402-4615-8f45-6e7622d78df&amp;width=642" alt="image.png"><br>然后将节点复制粘贴<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634029473849-28b88fbe-b3ea-4a7b-97bd-010bf234aaf2.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=242&amp;id=u8e00815d&amp;originHeight=242&amp;originWidth=237&amp;originalType=binary&amp;ratio=1&amp;size=49216&amp;status=done&amp;style=none&amp;taskId=u0780b3b8-692f-4969-b1be-1588b2b334d&amp;width=237" alt="image.png">并创建两个不同颜色的材质分别赋予两个节点。（为了能够分别单独控制上下区域的分支（例如原图中上方区域的树团是往上翘的，而下方区域是平的，分成两个部分可以更容易调整），并且因为手动调节的单个分支的操作在复制粘贴时不会复制成功（还是刚创建好时的分布情况）所以需要创建两个不同颜色的材质分别赋予两个节点，调整蓝色分支的位置使蓝色和绿色位置相同。（绿色为手动摆好的分布情况蓝色为复制粘贴的默认分布情况。））<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634029453955-78123ae3-7c6b-4ee0-bfb0-7f6c92a91d11.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=661&amp;id=u0724edbc&amp;originHeight=661&amp;originWidth=566&amp;originalType=binary&amp;ratio=1&amp;size=278369&amp;status=done&amp;style=none&amp;taskId=u5a672ad7-2ac2-4892-b178-deeb1c531c4&amp;width=566" alt="image.png"><br>添加新分支和树叶后如果觉得哪些位置调不出来好的效果就再复制粘贴出一个新的分支节点<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634032115759-6f77b8c9-5ff9-4655-8614-4c3ac8f02e63.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=605&amp;id=uaf32581c&amp;originHeight=605&amp;originWidth=605&amp;originalType=binary&amp;ratio=1&amp;size=430196&amp;status=done&amp;style=none&amp;taskId=u016cc33e-b00b-4dca-9b94-4cde1e982f4&amp;width=605" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634032122675-7fc0b72f-c7de-40bb-a153-79b0f2e46607.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=218&amp;id=ud5ed9869&amp;originHeight=218&amp;originWidth=362&amp;originalType=binary&amp;ratio=1&amp;size=65145&amp;status=done&amp;style=none&amp;taskId=u29b00814-1f85-4bc3-8a35-1e3d960a46e&amp;width=362" alt="image.png"><br>刚开始做的不可能就是百分百完美的，在做的同时需要同时调整前面节点的属性<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634032861508-f2a69ede-673d-4188-a2b7-dc3d320bede6.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=172&amp;id=uc0df2aa8&amp;originHeight=172&amp;originWidth=302&amp;originalType=binary&amp;ratio=1&amp;size=59221&amp;status=done&amp;style=none&amp;taskId=ue4c613d2-558d-4556-bbe0-852e706eee6&amp;width=302" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634032876571-29146dae-090d-4cde-99fb-f702dada037a.png#clientId=u6003ea6b-9f43-4&amp;from=paste&amp;height=551&amp;id=u520f8397&amp;originHeight=551&amp;originWidth=531&amp;originalType=binary&amp;ratio=1&amp;size=400903&amp;status=done&amp;style=none&amp;taskId=u45cd846c-37a1-4303-ac40-e7337e26ce5&amp;width=531" alt="image.png"><br><a name="XO33q"></a></p><h2 id="为当前界面的树制作缠绕的藤曼效果">为当前界面的树制作缠绕的藤曼效果</h2><p>制作好树以后，点击<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634302395563-4c58ad92-47b1-41b4-9690-fc9423892499.png#clientId=u619c4f67-05e2-4&amp;from=paste&amp;height=278&amp;id=u1ef000f6&amp;originHeight=278&amp;originWidth=295&amp;originalType=binary&amp;ratio=1&amp;size=12318&amp;status=done&amp;style=none&amp;taskId=u88d5ec5f-22ed-446b-b3e5-7c39fa41307&amp;width=295" alt="image.png">创建好后，为其添加mesh力场（如果使外部导入的模型，可以直接选择<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634307539676-110b7c83-6005-4717-8794-3353ab02b01c.png#clientId=u619c4f67-05e2-4&amp;from=paste&amp;height=545&amp;id=u5195438c&amp;originHeight=545&amp;originWidth=378&amp;originalType=binary&amp;ratio=1&amp;size=308924&amp;status=done&amp;style=none&amp;taskId=ueefdf9bc-738c-4076-82f8-f9dbc64225d&amp;width=378" alt="image.png">就无需更改mesh力场的设置），<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634303906411-76e28ddb-8886-4e34-9273-4526fb832c6c.png#clientId=u619c4f67-05e2-4&amp;from=paste&amp;height=121&amp;id=ua934c603&amp;originHeight=121&amp;originWidth=178&amp;originalType=binary&amp;ratio=1&amp;size=7288&amp;status=done&amp;style=none&amp;taskId=ua4bf3518-aa0f-4d7b-8f02-119162f9e29&amp;width=178" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634303927530-95bcb3e3-e6bc-42a0-990c-c8f51ba2e831.png#clientId=u619c4f67-05e2-4&amp;from=paste&amp;height=348&amp;id=ud534152f&amp;originHeight=348&amp;originWidth=365&amp;originalType=binary&amp;ratio=1&amp;size=18730&amp;status=done&amp;style=none&amp;taskId=u3e071d55-d9e9-42ca-a2ed-a392a1ec4cd&amp;width=365" alt="image.png">其中collide action 中的obstruct也可以使用stop使用stop会变成这样<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634646332788-108c33b2-0803-4ef7-8d6f-6371237628d5.png#clientId=u10de2d55-63d0-4&amp;from=paste&amp;height=180&amp;id=u73242a8e&amp;originHeight=180&amp;originWidth=256&amp;originalType=binary&amp;ratio=1&amp;size=67042&amp;status=done&amp;style=none&amp;taskId=u0cafa16f-da70-4878-86a0-4de2f98ab07&amp;width=256" alt="image.png">物体会阻止藤曼的生长而obstruct是这样<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634646377716-aaa9dcf3-ac14-4e1c-838c-6c275652044e.png#clientId=u10de2d55-63d0-4&amp;from=paste&amp;height=180&amp;id=u157fac58&amp;originHeight=180&amp;originWidth=276&amp;originalType=binary&amp;ratio=1&amp;size=70677&amp;status=done&amp;style=none&amp;taskId=uecf509f2-1e4f-42af-a6f4-818ee6e1c2c&amp;width=276" alt="image.png">，然后创建出几根细的树枝来当作藤曼，使藤曼受到mesh力场的作用可以使藤曼缠绕在mesh（刚才创建的树）上面。如果效果不好可以提高<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1634305891326-053fa97e-ea68-43cf-a0c9-820e945fe4ad.png#clientId=u619c4f67-05e2-4&amp;from=paste&amp;height=474&amp;id=u9fa7b67f&amp;originHeight=474&amp;originWidth=384&amp;originalType=binary&amp;ratio=1&amp;size=29764&amp;status=done&amp;style=none&amp;taskId=ub8ced4ac-a828-4d65-8c42-985fa2a239b&amp;width=384" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> DCC软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpeedTree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Command的使用</title>
      <link href="/2023/08/29/Geek-Command%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/29/Geek-Command%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>视频地址：<a href="https://www.bilibili.com/video/BV1zz411b7tk/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1zz411b7tk/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a><br>ppt：<a href="https://www.yuque.com/attachments/yuque/0/2022/pptx/2623605/1668496289369-5d1784db-b184-40e0-a5a9-3663ece40931.pptx?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2022%2Fpptx%2F2623605%2F1668496289369-5d1784db-b184-40e0-a5a9-3663ece40931.pptx%22%2C%22name%22%3A%22commadn.pptx%22%2C%22size%22%3A371572%2C%22type%22%3A%22application%2Fvnd.openxmlformats-officedocument.presentationml.presentation%22%2C%22ext%22%3A%22pptx%22%2C%22source%22%3A%22%22%2C%22status%22%3A%22done%22%2C%22mode%22%3A%22title%22%2C%22download%22%3Atrue%2C%22taskId%22%3A%22uf9b6b58e-5d9a-4ba0-8743-e3e1d8200d5%22%2C%22taskType%22%3A%22upload%22%2C%22__spacing%22%3A%22both%22%2C%22id%22%3A%22uc3be219a%22%2C%22margin%22%3A%7B%22top%22%3Atrue%2C%22bottom%22%3Atrue%7D%2C%22card%22%3A%22file%22%7D">commadn.pptx</a><br><a name="dQrPr"></a></p><h1>说明</h1><p>如果这里有些命令不清楚的就用help 或者 /? 来获取命令的帮助<br><a name="kGmTA"></a></p><h1>Python or CMD</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668496330700-afff5ad0-6df2-4f8f-a32c-726db3df45e8.png#averageHue=%23222222&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=490&amp;id=uc3feca9a&amp;originHeight=441&amp;originWidth=722&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=130187&amp;status=done&amp;style=none&amp;taskId=uc1a9250b-127d-4bda-8bb2-4ea49ad5330&amp;title=&amp;width=802.2222434738542" alt="image.png"><br><a name="EhSub"></a></p><h1>常用的cmd命令</h1><p><a name="MP4hR"></a></p><h2 id="要背诵的">要背诵的</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668496625128-87c2cfdc-9da5-458f-8134-a4e1dd13a3d6.png#averageHue=%23171717&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=1091&amp;id=u3bdff79c&amp;originHeight=982&amp;originWidth=1435&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244830&amp;status=done&amp;style=none&amp;taskId=ub9ad18df-263a-4da5-b0ce-ba65b6bcea3&amp;title=&amp;width=1594.4444866827987" alt="image.png"><br>echo %variable% 是回显这个变量的值<br><a name="vAZjw"></a></p><h2 id="特殊符号">特殊符号</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668497685179-48577e14-5d64-4061-9938-240d58dd5635.png#averageHue=%23181818&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=1212&amp;id=u27b4ff35&amp;originHeight=1091&amp;originWidth=1606&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=370891&amp;status=done&amp;style=none&amp;taskId=u89d571b8-d744-4cd7-9128-fd09920930f&amp;title=&amp;width=1784.44449171608" alt="image.png"><br><a name="qpcJJ"></a></p><h3 id="管道符号">管道符号  |</h3><p>这里意思是将通过tasklist得到的任务列表再进行findstr操作，因此管道符号的就是针对一个命令的输出结果进行操作时能用到的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668570785309-643f29e7-e84f-4920-a320-7673c369e951.png#averageHue=%23131313&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=97&amp;id=udbfcf8ce&amp;originHeight=87&amp;originWidth=793&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28842&amp;status=done&amp;style=none&amp;taskId=u48f9aee5-cd0c-4c06-bfac-887c6ee3c08&amp;title=&amp;width=881.111134452585" alt="image.png"><br><a name="joWUH"></a></p><h2 id="重定向覆盖与-重定向追加">&gt;重定向覆盖与&gt;&gt;重定向追加</h2><p>覆盖与追加区别就是将文本信息一个是覆盖原来的信息，一个是在原来信息的基础上添加新的信息。<br>将命令输出的信息输出到一个文件上。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668503949930-58e9e259-14ca-49c5-93db-b2b1445ad314.png#averageHue=%231a1a1a&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=32&amp;id=u9a968091&amp;originHeight=29&amp;originWidth=446&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1052&amp;status=done&amp;style=none&amp;taskId=u7e79d22e-2479-4dc0-b01c-c9bba692cc0&amp;title=&amp;width=495.55556868329495" alt="image.png"><br>D:\ZhangRuiChen\pythonProject&gt;dir /s /b *.py &gt;D:\py.txt<br><a name="Eqx64"></a></p><h2 id="文件目录">文件目录</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668500756541-343eabd6-d9bc-40b1-b3e3-796bbf41b0c5.png#averageHue=%23171717&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=887&amp;id=u54dcd2d0&amp;originHeight=798&amp;originWidth=1598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=236794&amp;status=done&amp;style=none&amp;taskId=u7c648c65-670c-4994-a7cb-e22e785c971&amp;title=&amp;width=1775.555602591716" alt="image.png"><br><a name="dp1KR"></a></p><h3 id="cd的使用介绍：">cd的使用介绍：</h3><p>当需要切换盘符时需要加 /d 命令<br>更改当前目录为D盘是第一行行，从D盘进入WallPaper是第二行<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668501427188-ce095ff3-a140-40a3-a141-5b4620e361cf.png#averageHue=%23141414&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=143&amp;id=u5d5fa4bb&amp;originHeight=129&amp;originWidth=306&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2360&amp;status=done&amp;style=none&amp;taskId=u6393e0b2-9a25-4a3b-8140-7c623973dff&amp;title=&amp;width=340" alt="image.png"><br>.是当前目录， …是上一级目录<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668501666103-ec79d1f5-164f-410e-b1ec-3fdf071cb5bd.png#averageHue=%23141414&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=101&amp;id=u714696d3&amp;originHeight=91&amp;originWidth=161&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1140&amp;status=done&amp;style=none&amp;taskId=u617738c1-11e9-4fba-bbbc-f97904b5ce9&amp;title=&amp;width=178.8888936278262" alt="image.png"><br><a name="RwMdd"></a></p><h3 id="dir的使用介绍">dir的使用介绍</h3><p>直接dir 是显示当前目录下的所有目录与文件<br>dir + 目录路径 是显示目录路径下的所有目录与文件<br>dir /s + 目录路径 是显示目录路径以及目录路径的子目录下的所有目录与文件<br>dir *.mel  显示当前路径下的以mel结尾的文件（不能够配合指定目录路径，必须先前往目录路径再使用关键字匹配，但是可以配合 /s 匹配子目录的）<br>dir /b 只显示文件名<br><a name="dn5yA"></a></p><h2 id="文件操作">文件操作</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506172041-afca6967-771d-455d-8c1e-103c99a8c074.png#averageHue=%231a1a1a&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=543&amp;id=u50fc07dc&amp;originHeight=489&amp;originWidth=994&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=173700&amp;status=done&amp;style=none&amp;taskId=u9963378b-d4ad-455e-a9ec-26c411fbe1c&amp;title=&amp;width=1104.4444737022313" alt="image.png"><br><a name="cWOaC"></a></p><h2 id="文件拷贝">文件拷贝</h2><p>三种文件拷贝的区别：如果文件比较大比较碎的建议使用Robocopy（功能最复杂，最快，支持多线程）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506191536-a4e8f0f1-726c-4550-9fab-980f64d38469.png#averageHue=%231c1c1c&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=623&amp;id=uc762dc91&amp;originHeight=561&amp;originWidth=817&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=165097&amp;status=done&amp;style=none&amp;taskId=ue5b86c14-14c3-43fd-b66a-ccc13cb4f42&amp;title=&amp;width=907.7778018256771" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506206249-a5187f92-fc02-49cb-88c9-62c6fdd0802e.png#averageHue=%231c1c1c&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=602&amp;id=u0ce4a1b7&amp;originHeight=542&amp;originWidth=764&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=158159&amp;status=done&amp;style=none&amp;taskId=u1779bcce-f052-42ba-a7dd-b599d76dc2c&amp;title=&amp;width=848.8889113767653" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668506217113-1db72379-782e-4449-aa8a-d7643088c551.png#averageHue=%231b1b1b&amp;clientId=ua2bf7b75-6c38-4&amp;from=paste&amp;height=473&amp;id=u25d95ef9&amp;originHeight=426&amp;originWidth=853&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=149937&amp;status=done&amp;style=none&amp;taskId=uecafe28b-3a1b-40ec-ac51-bbce73fe683&amp;title=&amp;width=947.7778028853153" alt="image.png"><br><a name="i9nUw"></a></p><h2 id="文件查找">文件查找</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668565921370-accfd197-5762-4936-9f54-6388dca9640e.png#averageHue=%231a1a1a&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=708&amp;id=u5fc9c08b&amp;originHeight=637&amp;originWidth=1005&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=255609&amp;status=done&amp;style=none&amp;taskId=uaf0fde54-9824-45f2-a6d9-3931030771f&amp;title=&amp;width=1116.6666962482318" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668565953638-1c21a468-eda5-4edd-bb06-42dddaf8861f.png#averageHue=%231a1a1a&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=508&amp;id=u1bb8b57b&amp;originHeight=457&amp;originWidth=1020&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=152534&amp;status=done&amp;style=none&amp;taskId=u05a8fccc-06de-43bc-a686-7378da06446&amp;title=&amp;width=1133.3333633564146" alt="image.png"><br><a name="E7a0N"></a></p><h2 id="文件校验">文件校验</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668566875308-ec59414f-7ce7-4df4-a633-f0b08f93b5b7.png#averageHue=%23191919&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=279&amp;id=u35c235ec&amp;originHeight=251&amp;originWidth=517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46657&amp;status=done&amp;style=none&amp;taskId=ub3b949a0-2a02-4d68-ad49-54310865a97&amp;title=&amp;width=574.4444596620258" alt="image.png"><br><a name="iKQu2"></a></p><h2 id="文本查找">文本查找</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668567693774-d23dbb2d-be53-4dd9-8d49-983d32de1a2e.png#averageHue=%23191919&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=480&amp;id=u2bcef2c7&amp;originHeight=432&amp;originWidth=667&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91224&amp;status=done&amp;style=none&amp;taskId=u46cc4d34-ef49-4cd2-b3e9-3ea9ab57607&amp;title=&amp;width=741.1111307438514" alt="image.png"><br><a name="peOuj"></a></p><h2 id="时间">时间</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668567986805-b22dfba9-02ac-4277-9a27-a97e6c3f02ba.png#averageHue=%231e1e1e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=262&amp;id=u963c34d5&amp;originHeight=236&amp;originWidth=408&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45836&amp;status=done&amp;style=none&amp;taskId=ubcb13fc1-417e-4d0a-bc0e-fe4727a7b8a&amp;title=&amp;width=453.3333453425658" alt="image.png"><br>timeout 的 延时意思是倒计时，类似于python的sleep<br><a name="eSw7T"></a></p><h2 id="目录映射">目录映射</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668568266315-d32f7a5b-5d26-48e9-bd3e-300ba208e4bb.png#averageHue=%231d1d1d&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=457&amp;id=uaac80e38&amp;originHeight=411&amp;originWidth=398&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86434&amp;status=done&amp;style=none&amp;taskId=u3a7c0b1c-023b-4abf-9629-b9b261b5adb&amp;title=&amp;width=442.22223393711073" alt="image.png"><br>目录映射可以理解为他们两者是相同的，只是文件路径不同，不管针对哪一个进行了处理也会同时的对另一个自动进行处理。<br><a name="YR2IS"></a></p><h2 id="进程管理">进程管理</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668570415739-f56d75e5-6e20-4024-9a8c-de522c5ab25b.png#averageHue=%231e1e1e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=398&amp;id=u04b912bb&amp;originHeight=358&amp;originWidth=725&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107590&amp;status=done&amp;style=none&amp;taskId=ud4117774-0ae8-4700-adba-db2164f9e7c&amp;title=&amp;width=805.5555768954906" alt="image.png"><br>sc针对的是服务，例如arnold redshift<br><a name="PK5JP"></a></p><h2 id="网络相关">网络相关</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575064779-9b9ce2f0-0afd-4bb3-9370-5702d101764f.png#averageHue=%231e1e1e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=456&amp;id=ue8b7b08c&amp;originHeight=410&amp;originWidth=855&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=121971&amp;status=done&amp;style=none&amp;taskId=u48781caa-631c-420f-a5f7-1b51972762f&amp;title=&amp;width=950.0000251664062" alt="image.png"><br>ping ： 可以用来测试进入网站<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668571484686-3008c270-7dbe-490a-a118-fb470dfd6609.png#averageHue=%23202020&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=226&amp;id=ub27f42c1&amp;originHeight=203&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9250&amp;status=done&amp;style=none&amp;taskId=u06657149-95bb-47df-8704-e8d0bec30cf&amp;title=&amp;width=595.5555713323904" alt="image.png"><br>ipconfig ： ipconfig /all 可以用来查看网络相关的所有配置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575393564-24b8bcc0-dd1f-40f4-ad50-5b816683d212.png#averageHue=%232e2e2e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=72&amp;id=ua66c6335&amp;originHeight=65&amp;originWidth=859&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35442&amp;status=done&amp;style=none&amp;taskId=u0187cc67-ae45-4ad0-b63b-54913af556e&amp;title=&amp;width=954.4444697285883" alt="image.png">这个意思是网络连接另一台电脑（叫服务器吧），服务器的 ipv4为192.168.225.128  密码为nuke  账户名为winroot_ltsc。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575645597-fdedca08-6a3a-48a4-b852-f8c18c3acdc1.png#averageHue=%23313131&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=60&amp;id=u16d378be&amp;originHeight=54&amp;originWidth=659&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26655&amp;status=done&amp;style=none&amp;taskId=u2a168119-41ec-4f8b-a98b-b8d93c4d408&amp;title=&amp;width=732.2222416194874" alt="image.png"> 通过这个命令在当前电脑下创建一个B盘，连接ip为192.168.225.128 名字叫share的B盘符<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575771508-f2aaa038-b0ec-4945-a23e-d35ec8de0aad.png#averageHue=%235b5b5a&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=106&amp;id=u52acd4fc&amp;originHeight=95&amp;originWidth=345&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25126&amp;status=done&amp;style=none&amp;taskId=u3dc83f7c-587f-413a-a2c6-16cddb49881&amp;title=&amp;width=383.33334348819903" alt="image.png">，这样可以通过这个盘符来访问服务器上所共享的文件夹。<br>net share ：查询当前电脑所共享的所有文件夹<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668575892615-6499941c-4a57-4b8e-b715-f32609947310.png#averageHue=%232f2f2f&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=62&amp;id=u08248bc3&amp;originHeight=56&amp;originWidth=279&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12439&amp;status=done&amp;style=none&amp;taskId=uc68f8574-69fa-40cf-998e-a516fa6d7e1&amp;title=&amp;width=310.0000082121957" alt="image.png"> 意思是删除本地电脑使用的所有创建的网络共享的盘符，*可以改为指定的盘符，例如 B:<br><a name="wNqhW"></a></p><h2 id="关机">关机</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576164212-656e4353-db1c-4737-998c-cce8b2dac262.png#averageHue=%23191919&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=511&amp;id=u324baf21&amp;originHeight=460&amp;originWidth=1076&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=144981&amp;status=done&amp;style=none&amp;taskId=u23426397-9cd1-4339-83da-81691481337&amp;title=&amp;width=1195.5555872269626" alt="image.png"><br>/r 是重启  /s 是关机  /t是时间（以秒为单位） /a 是取消计划中的关机<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576554479-6d9b4e2e-e3a3-4fcd-8e60-d3c1381e3a14.png#averageHue=%23272727&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=58&amp;id=u2d59188d&amp;originHeight=52&amp;originWidth=1070&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38528&amp;status=done&amp;style=none&amp;taskId=u264ab18b-e4f9-41e1-9922-bf0cd36fa49&amp;title=&amp;width=1188.8889203836898" alt="image.png"> /c的意思是注释  这句的意思就是60秒后强制将ip为192.168.225.128的电脑关机，并显示注释为shutdown<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576715815-4c4ef5a5-e28f-4418-b770-08e06bbb528c.png#averageHue=%230e69aa&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=160&amp;id=uf5dc45b0&amp;originHeight=144&amp;originWidth=597&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27584&amp;status=done&amp;style=none&amp;taskId=uc3599caf-1b2a-4d23-8240-0942211e7d9&amp;title=&amp;width=663.3333509056661" alt="image.png"><br><a name="kskgn"></a></p><h2 id="系统维护">系统维护</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668576881549-ba2f1388-f26a-4215-9fa4-783a92471265.png#averageHue=%231b1b1b&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=680&amp;id=u8118936b&amp;originHeight=612&amp;originWidth=1070&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=278538&amp;status=done&amp;style=none&amp;taskId=uabf70961-6b36-4a93-8857-d9bdd136098&amp;title=&amp;width=1188.8889203836898" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668577559360-f1c691a2-5c92-4aac-bfae-bb97bf3f0118.png#averageHue=%231d1d1d&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=229&amp;id=u805fdb4b&amp;originHeight=206&amp;originWidth=1864&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=152853&amp;status=done&amp;style=none&amp;taskId=u740b34f2-513a-4b2c-8baf-ded71624acb&amp;title=&amp;width=2071.1111659768203" alt="image.png"><br>wmic cpu get name  获取当前电脑cpu的名字<br>wmic memorychip 获取当前电脑内存的所有信息<br>wmic memorychip list /format 获取当前电脑内存的所有信息并且格式化显示这些信息<br>wmic memorychip get speed 获取内存的频率（speed可以更换任意一项可以查询的信息）<br><a name="AFxUz"></a></p><h2 id="变量设置">变量设置</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668577734694-575aad3a-708a-4fa1-b6f8-dd1baea9a50c.png#averageHue=%23171717&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=416&amp;id=udab5572e&amp;originHeight=374&amp;originWidth=595&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56345&amp;status=done&amp;style=none&amp;taskId=u3aa75c04-a6b7-497f-8e72-3c12e09e01c&amp;title=&amp;width=661.1111286245751" alt="image.png"><br>/a的作用：set /a a=1-2+5-6  最终a为-2       set a=1-2+5-6 最终a为1-2+5-6 <br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668578665609-43bd983f-a3a6-47c6-bf35-fd64e086c234.png#averageHue=%23444444&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=57&amp;id=u06ef5606&amp;originHeight=51&amp;originWidth=473&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16858&amp;status=done&amp;style=none&amp;taskId=u4ac2c978-ff7a-449d-a9ce-f6d5e0a7f66&amp;title=&amp;width=525.5555694780236" alt="image.png">  意思是将avr变量的str1替换成str2<br><a name="qqILh"></a></p><h2 id="字符截取">字符截取</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668579282409-ba5c1a51-1f3b-4b34-9b7d-92fa05f546fd.png#averageHue=%231a1a1a&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=566&amp;id=u30850402&amp;originHeight=509&amp;originWidth=721&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170890&amp;status=done&amp;style=none&amp;taskId=uc14dc1bb-9249-46ce-802f-eca7aaf9c59&amp;title=&amp;width=801.1111323333087" alt="image.png"><br><a name="U17zZ"></a></p><h2 id="batch（-bat批处理文件）的参数">batch（.bat批处理文件）的参数</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668579401768-cb7a54a4-82bd-4749-a7d9-26592f1d9996.png#averageHue=%231e1e1e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=218&amp;id=eier7&amp;originHeight=196&amp;originWidth=528&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54253&amp;status=done&amp;style=none&amp;taskId=u4a70ea43-89b5-4707-b294-3827752f15a&amp;title=&amp;width=586.6666822080263" alt="image.png"><br>写一个.bat文件，.bat文件是批处理文件，里面是一行行的cmd命令。 可以通过set %~1-9来接受 启动bat文件时传递的参数。<br>调用.bat文件：将.bat文件拖入到cmd窗口上，然后 可以输入需要的参数，然后回车调用<br><a name="JNEaX"></a></p><h3 id="字符扩充">字符扩充</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668592149372-7b70b739-ec59-4364-90c8-6308843c78b1.png#averageHue=%231e1e1e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=650&amp;id=u64524934&amp;originHeight=585&amp;originWidth=2176&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=468681&amp;status=done&amp;style=none&amp;taskId=uca3bd98e-e6c8-419a-9129-77f09cb52fb&amp;title=&amp;width=2417.7778418270177" alt="image.png"><br>字符扩充意思就是  例如<br>set n1=%1 意思就是输入的第一个参数赋予变量n1<br>set n1=%~1 意思是输入的第一个参数删除引号(&quot;)后再赋予变量n1<br>针对这些输入的参数也能够进行扩充，来更改输入的参数。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668592158645-e74c816b-e9d3-432b-a268-369a8f9d9678.png#averageHue=%231e1e1e&amp;clientId=u4d39f4d7-ddba-4&amp;from=paste&amp;height=291&amp;id=ua609b3a3&amp;originHeight=262&amp;originWidth=190&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6970&amp;status=done&amp;style=none&amp;taskId=u929d214c-3b3e-43a2-bbfe-af9e6e9d76e&amp;title=&amp;width=211.11111670364582" alt="image.png"><br><a name="OWjhZ"></a></p><h2 id="流程控制">流程控制</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668652771934-1916702c-3162-4108-9235-ff5606f940e1.png#averageHue=%231a1817&amp;clientId=uad50874a-6552-4&amp;from=paste&amp;height=244&amp;id=ua45569be&amp;originHeight=220&amp;originWidth=464&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14208&amp;status=done&amp;style=none&amp;taskId=u5fbf6804-ab5a-47ef-89ee-82cb1e0230b&amp;title=&amp;width=515.555569213114" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668651841033-8d9d05bd-7bf1-40e3-90a0-1a52d39790bc.png#averageHue=%23171717&amp;clientId=uad50874a-6552-4&amp;from=paste&amp;height=914&amp;id=u0bcde779&amp;originHeight=823&amp;originWidth=1211&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=213497&amp;status=done&amp;style=none&amp;taskId=ub73dc7d1-1126-4158-82d6-db9b9bb9942&amp;title=&amp;width=1345.5555912006057" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668651697370-cbd785cc-203a-4f82-a57c-411be633342b.png#averageHue=%23161616&amp;clientId=uad50874a-6552-4&amp;from=paste&amp;height=978&amp;id=u354979ab&amp;originHeight=880&amp;originWidth=1598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=252711&amp;status=done&amp;style=none&amp;taskId=u0a628938-f86d-4495-8738-a49e8bb3735&amp;title=&amp;width=1775.555602591716" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668652007862-465f82d6-64a5-4a09-ae1e-b58b72cf885a.png#averageHue=%231b1b1b&amp;clientId=uad50874a-6552-4&amp;from=paste&amp;height=956&amp;id=u3c57fee5&amp;originHeight=860&amp;originWidth=1267&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=352465&amp;status=done&amp;style=none&amp;taskId=ua21fad9e-36f3-4a55-9dfe-4840110b059&amp;title=&amp;width=1407.777815071154" alt="image.png"></p><p><a name="NN85W"></a></p><h1>同一个目录下的贴图转成tx或rsbintex</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off </span></span><br><span class="line">title texture to tile</span><br><span class="line"><span class="built_in">set</span> /p texture_path=  要转换的贴图目录：</span><br><span class="line">echo 要转换的贴图目录为%texture_path%</span><br><span class="line">cd /d %texture_path%</span><br><span class="line"><span class="built_in">set</span> /p renderer=     选择渲染器类型Arnold输入ar，redshift输入rs:</span><br><span class="line">echo 渲染器为%renderer%</span><br><span class="line"><span class="keyword">if</span> %renderer%==ar goto arnold</span><br><span class="line"><span class="keyword">if</span> %renderer%==rs goto redshift</span><br><span class="line">:arnold</span><br><span class="line"><span class="keyword">for</span> %%f <span class="keyword">in</span> (*) do (</span><br><span class="line">echo %%f的后缀为%%~xf</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.rstexbin&quot;</span> (echo %%f </span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line"><span class="keyword">if</span> /i <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.tx&quot;</span> ( echo %%f </span><br><span class="line">) <span class="keyword">else</span> (echo 这个贴图要转换 &amp;&amp; <span class="string">&quot;C:\solidangle\mtoadeploy\2018\bin\maketx.exe&quot;</span> -v -u  %%f)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">goto end</span><br><span class="line"></span><br><span class="line">:redshift</span><br><span class="line"><span class="keyword">for</span> %%f <span class="keyword">in</span> (*) do (</span><br><span class="line">echo %%f的后缀为%%~xf</span><br><span class="line">REM <span class="keyword">if</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.rstexbin&quot;</span> (echo %%f </span><br><span class="line">REM ) <span class="keyword">else</span> (</span><br><span class="line">REM <span class="keyword">if</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.tx&quot;</span> ( echo %%f </span><br><span class="line">REM ) <span class="keyword">else</span> (echo 这个贴图要转换 &amp;&amp; C:\ProgramData\Redshift\<span class="built_in">bin</span>\redshiftTextureProcessor.exe <span class="string">&quot;%%f&quot;</span>)</span><br><span class="line">REM )</span><br><span class="line">REM )</span><br><span class="line"><span class="keyword">if</span> /i <span class="keyword">not</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.rstexbin&quot;</span> (</span><br><span class="line"><span class="keyword">if</span> /i <span class="keyword">not</span> <span class="string">&quot;%%~xf&quot;</span>==<span class="string">&quot;.tx&quot;</span> (</span><br><span class="line">echo 这个贴图要转换 &amp;&amp; C:\ProgramData\Redshift\<span class="built_in">bin</span>\redshiftTextureProcessor.exe <span class="string">&quot;%%f&quot;</span></span><br><span class="line">) <span class="keyword">else</span> (echo 这个贴图不转换 %%f)</span><br><span class="line">)<span class="keyword">else</span> (echo 这个贴图不转换 %%f)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">goto end</span><br><span class="line"></span><br><span class="line">:end</span><br><span class="line">echo 转换完了。</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="h4yaF"></a></p><h1>根据不同项目启动不同maya</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@echo off </span></span><br><span class="line">choice /C <span class="number">1234</span> /T <span class="number">15</span> /D <span class="number">3</span> /M <span class="string">&quot;1、那托  2、大圣你走开   3、青蛇前源  4、流浪月球&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">4</span> goto llyq</span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">3</span> goto qsqy</span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">2</span> goto dsnzk</span><br><span class="line"><span class="keyword">if</span> errorlevel <span class="number">1</span> goto natuo</span><br><span class="line"></span><br><span class="line">:llyq</span><br><span class="line">echo 流浪月球</span><br><span class="line">echo maya <span class="number">2017</span> </span><br><span class="line"><span class="built_in">set</span> maya_v=<span class="number">2017</span></span><br><span class="line">echo arnold <span class="number">2.1</span><span class="number">.0</span><span class="number">.2</span></span><br><span class="line">copy /v/y <span class="string">&quot;D:\plugins\maya\arnold\maya2017_mtoa2.1.0.2\mtoa.mod&quot;</span> <span class="string">&quot;C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\2017\mtoa.mod&quot;</span></span><br><span class="line">goto <span class="built_in">open</span></span><br><span class="line">:qsqy</span><br><span class="line">echo 青蛇前源</span><br><span class="line">echo maya <span class="number">2017</span></span><br><span class="line"><span class="built_in">set</span> maya_v=<span class="number">2017</span></span><br><span class="line">echo arnold <span class="number">3.2</span><span class="number">.1</span></span><br><span class="line">xcopy /q /y /v  <span class="string">&quot;D:\plugins\maya\arnold\maya2017_mtoa3.2.1\mtoa.mod&quot;</span>  <span class="string">&quot;C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\2017\&quot;</span></span><br><span class="line"><span class="string">goto open</span></span><br><span class="line"><span class="string">:dsnzk</span></span><br><span class="line"><span class="string">echo 大圣你走开</span></span><br><span class="line"><span class="string">echo maya 2018 </span></span><br><span class="line"><span class="string">set maya_v=2018</span></span><br><span class="line"><span class="string">echo arnold 2.1.0.2</span></span><br><span class="line"><span class="string">robocopy  &quot;</span>D:\plugins\maya\arnold\maya2018_mtoa2<span class="number">.1</span><span class="number">.0</span><span class="number">.2</span><span class="string">&quot; &quot;</span>C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\<span class="number">2018</span><span class="string">&quot; &quot;</span>mtoa.mod<span class="string">&quot; /S /NDL /NFL   </span></span><br><span class="line"><span class="string">goto open</span></span><br><span class="line"><span class="string">:natuo</span></span><br><span class="line"><span class="string">echo 那托</span></span><br><span class="line"><span class="string">echo maya 2018</span></span><br><span class="line"><span class="string">set maya_v=2018</span></span><br><span class="line"><span class="string">echo arnold 3.2.1.1</span></span><br><span class="line"><span class="string">&quot;</span>D:\Program Files\FastCopy385_x64\FastCopy.exe<span class="string">&quot; /cmd=move /speed=full /force_close /no_confirm_stop /force_start &quot;</span>D:\plugins\maya\arnold\maya2018_mtoa3<span class="number">.2</span><span class="number">.1</span><span class="number">.1</span>\mtoa.mod<span class="string">&quot; /to=&quot;</span>C:\Program Files\Common Files\Autodesk Shared\Modules\Maya\<span class="number">2018</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">goto open</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">:open</span></span><br><span class="line"><span class="string">echo %maya_v%</span></span><br><span class="line"><span class="string">set root_maya=&quot;</span>C:\Program Files\Autodesk\Maya%maya_v%\<span class="built_in">bin</span>\maya.exe<span class="string">&quot;</span></span><br><span class="line"><span class="string">echo %root_maya% </span></span><br><span class="line"><span class="string">start &quot;</span><span class="string">&quot; %root_maya%</span></span><br><span class="line"><span class="string">pause</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2023/08/29/Geek-Git/"/>
      <url>/2023/08/29/Geek-Git/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="VwMGb"></a></p><h1>安装</h1><p>去官网下载，然后无脑下一步<br><a name="PJY3l"></a></p><h1>注册账号</h1><p>进入 Git Bash<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669040621480-d85eb128-78ab-4c88-b36c-806b2ac97685.png#averageHue=%23242423&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=164&amp;id=ue0e8ebb4&amp;originHeight=164&amp;originWidth=274&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7854&amp;status=done&amp;style=none&amp;taskId=u5b39029c-ffb9-4796-8698-b2c197f6b0d&amp;title=&amp;width=274" alt="image.png"><br>输入用户名 邮箱来注册，框住的内容为自定义<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669040650975-6616584c-2a11-47c3-a81e-41f7310291e5.png#averageHue=%23030302&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=367&amp;id=u7e3c761b&amp;originHeight=367&amp;originWidth=719&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=129387&amp;status=done&amp;style=none&amp;taskId=ue36240d8-9535-4c6d-8809-dc4d80d3539&amp;title=&amp;width=719" alt="image.png"><br><a name="lED8v"></a></p><h1>获取git版本库</h1><p><a name="Zpcaq"></a></p><h2 id="将本地的文件夹变成git版本库">将本地的文件夹变成git版本库</h2><p>在想要变成git版本库的文件夹下右键使用git bash<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041397312-587a89eb-d6ca-4d32-844d-ea041090b575.png#averageHue=%23e9e9e9&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=402&amp;id=u4b3f9cb6&amp;originHeight=402&amp;originWidth=458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23186&amp;status=done&amp;style=none&amp;taskId=ub039647d-eeb6-4a63-93f8-76ce6bb49df&amp;title=&amp;width=458" alt="image.png"><br>输入命令  git init<br>带有.git的就代表这个文件夹已经是git版本库了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041441689-733f517d-1308-4a94-baaf-96509ea4656f.png#averageHue=%23fcfbf9&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=228&amp;id=u3b89c54e&amp;originHeight=228&amp;originWidth=523&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17856&amp;status=done&amp;style=none&amp;taskId=ub551a34a-d94e-4554-86c4-cf5ad5cf163&amp;title=&amp;width=523" alt="image.png"><br><a name="c0OsB"></a></p><h2 id="将其他人的git库克隆到本地">将其他人的git库克隆到本地</h2><p>使用git clone命令<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041841250-14dce49d-f465-4ed9-b64b-1922aa8c9a97.png#averageHue=%23161815&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=50&amp;id=ue65dcb27&amp;originHeight=50&amp;originWidth=1152&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=59161&amp;status=done&amp;style=none&amp;taskId=u881382c4-4162-4476-85ee-29f7d2f9d75&amp;title=&amp;width=1152" alt="image.png"><br>右边的地址可以通过github中找到<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669041868693-698b9c68-78e6-4274-bc8f-4474e8a33dc9.png#averageHue=%23ddbd7b&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=399&amp;id=u566bc653&amp;originHeight=399&amp;originWidth=442&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27469&amp;status=done&amp;style=none&amp;taskId=u4f00f38e-b805-4e1c-8baa-54e404ac044&amp;title=&amp;width=442" alt="image.png"><br>因此可以将自己的代码上传到github，这样之后在任何地方都可以通过这个地址将git库安装过来<br><a name="vsjLV"></a></p><h1>git仓库的三种状态以及对应工作区</h1><p><a name="QPcJv"></a></p><h2 id="三种状态">三种状态</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042292284-e01fba27-6085-43d0-8605-d975cd495f37.png#averageHue=%233d3d3d&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=279&amp;id=u919397af&amp;originHeight=279&amp;originWidth=551&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=157445&amp;status=done&amp;style=none&amp;taskId=u072f1028-0599-4d9f-bcf7-f0551492fc6&amp;title=&amp;width=551" alt="image.png"><br><a name="CkWKT"></a></p><h2 id="对应工作区">对应工作区</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042272485-adace1b3-77fd-4c64-ac95-f11fb0e0f8f9.png#averageHue=%23393939&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=485&amp;id=ua4691269&amp;originHeight=485&amp;originWidth=1361&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=695792&amp;status=done&amp;style=none&amp;taskId=u7ebfb571-be9b-4ec6-8074-be801f86b19&amp;title=&amp;width=1361" alt="image.png"><br><a name="JgEFb"></a></p><h1>查看版本库的状态（使用git时第一个要用的命令）</h1><p>git status 用于查看当前版本库的状态<br>git status -short  或者是 git status -s 是以简单信息的形式查看版本库状态<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042876861-4b2e071d-5fe3-4da5-ac5d-e0a6c05073df.png#averageHue=%230b0705&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=119&amp;id=uf1f9713b&amp;originHeight=119&amp;originWidth=160&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4404&amp;status=done&amp;style=none&amp;taskId=ua825efc3-27ca-4386-9bbb-6e135084316&amp;title=&amp;width=160" alt="image.png"><br>使用git status -s 出现的信息中各符号代表的含义：<br>空格也有含义，含义是表示当前文件在暂存区的状态<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042950720-5b048eae-d58c-4f48-b79c-75b9b59c9879.png#averageHue=%23464640&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=196&amp;id=udf58f32e&amp;originHeight=196&amp;originWidth=216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40012&amp;status=done&amp;style=none&amp;taskId=u34380527-6c0e-4872-8663-50ceaf2b4e0&amp;title=&amp;width=216" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669042862405-1ae074ea-aba7-4641-9942-4cd4aead9e5c.png#averageHue=%23b9b9b9&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=735&amp;id=ue16ca3a4&amp;originHeight=735&amp;originWidth=1568&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=395006&amp;status=done&amp;style=none&amp;taskId=u35cdee9b-6bf7-4f85-80cf-184d27485c7&amp;title=&amp;width=1568" alt="image.png"><br><a name="PiP9u"></a></p><h1>文件的追踪和更新</h1><p>git add 文件名或者文件夹名（如果文件名或者目录名里带有空格，就需要将名字用双引号包含住）<br>添加当前目录： git add .  (点来代表当前目录，添加当前目录不会添加空文件夹，如果想要添加空文件夹需要在文件夹下随便创建一个空的文件)<br>git add除了可以用它来开始追踪新的文件或者把已经追踪的文件放到暂存区，还能用于合并时把有冲突的文件，标记为已解决状态等。<br><a name="dCNen"></a></p><h2 id="提交更新">提交更新</h2><p>git commit -m “这里填写更新信息”</p><p>使用git commit的话会自动跳出填写日志信息的编辑器，默认是vim编辑器。如果使用git commit -m 就不会弹出编辑器<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669044499302-80ef4cfd-b27d-46c5-a904-97604d9c91c1.png#averageHue=%23302b2a&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=471&amp;id=ua8e01e07&amp;originHeight=471&amp;originWidth=1369&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=172925&amp;status=done&amp;style=none&amp;taskId=u4c0654ba-5f18-4338-a2d6-734b1d2e334&amp;title=&amp;width=1369" alt="image.png"><br><a name="VBTc8"></a></p><h1>历史版本追踪与文件忽略</h1><p><a name="N7dZH"></a></p><h2 id="git-log">git log</h2><p>git log 会按照提交的时间列出所有的更新，最新的更新会排在最上面，按回车键进行翻页，按q键可以退出查看<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669046034315-c4e587d9-7bcb-43e6-8419-10823b86c375.png#averageHue=%236c643b&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=531&amp;id=u48d4d0d1&amp;originHeight=531&amp;originWidth=859&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=335691&amp;status=done&amp;style=none&amp;taskId=uaabc464e-271a-4dd1-8773-59d36a9f36e&amp;title=&amp;width=859" alt="image.png"><br>git log -p 加上-p会使输出信息附带每次commit发生的变化<br>git log -p -数字 会显示最近三次的提交的详细信息<br>git log --stat 会显示被修改文件的哪些行被移除了或是添加了<br>git log --since=2.weeks 会显示两周内所有的更新<br><a name="F0ouc"></a></p><h2 id="git-diff">git diff</h2><p>git diff 显示当前工作目录中当前文件和暂存区域快照之间的差异  也就是修改之后还没有暂存起来的内容<br>git diff --staged  查看已经暂存的将要添加到下一次提交里的内容<br>git diff SHA-1校验码  SHA-1校验码  可以对比前后文件的差异， SHA-1校验码可以通过 git log 获取 文件校验码很长，一般只需要SHA-1校验码中的4个字母即可找到对应的文件<br><a name="hhtfs"></a></p><h2 id="头指针-HEAD指针">头指针-HEAD指针</h2><p>HEAD指针也叫头指针，HEAD指针默认指向当前版本库的最后一个版本，我们可以使用HEAD指针来对比当前版本与某一历史版本之间的差别<br>因此 可以通过HEAD指针来代替 最新SHA-1校验码。<br>git diff HEAD SHA-1校验码 即可对比当前版本库与SHA-1校验码对应的版本库之间的差异<br>HEAD^代表当前版本的上一版本<br>HEAD^^代表当前版本的上上版本<br>因此也可以使用 git diff HEAD HEAD^ 来显示当前版本与上一版本的区别<br><a name="kHD3u"></a></p><h2 id="还原历史版本">还原历史版本</h2><p><a name="blFBq"></a></p><h3 id="git-checkout">git checkout</h3><p>git checkout 可以将HEAD指针移动到任意版本处（意思就是还原整个仓库）（比较复杂，需要深入学习）<br>还原某一个文件：<br>git checkout HEAD^ test_file.txt   将test_file.txt 文件还原至上一版本<br>git checkout – 文件名 清空当前未被追踪的改动（撤销还未提交的针对文件的改动）<br><a name="jimCH"></a></p><h3 id="git-revert">git  revert</h3><p>这个命令和git checkout 的区别是这个命令会新建一个版本，因此不会导致修改历史的消失。<br>git revert 命令只能用于工作区和暂存区都为空的时候才可以被使用（工作区是否为空可以通过git status来查看）<br>git revert HEAD<br><a name="Ie0dG"></a></p><h3 id="git-reset">git reset</h3><p>这个命令可以直接将部分文件或者整个仓库还原到某个历史状态下，与此同时，暂存区的内容也会被清理掉。变为未被追踪的状态。<br>因为这个命令很容易导致代码丢失，所以不推荐使用这个命令。<br>如果希望回退版本建议使用 git revert<br><a name="YoOFP"></a></p><h2 id="忽略文件">忽略文件</h2><p>如果希望git仓库不追踪某些文件<br>那么可以在仓库中创建一个.gitignore文件来忽略某些文件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669049477776-b3937239-d487-4d6c-82a6-f237fd2c346c.png#averageHue=%232e2c2b&amp;clientId=u10eb3d9e-7294-4&amp;from=paste&amp;height=468&amp;id=uc5d22b94&amp;originHeight=468&amp;originWidth=1019&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=152355&amp;status=done&amp;style=none&amp;taskId=uac0508cb-9dd9-4693-9eb5-a3b5f9f7767&amp;title=&amp;width=1019" alt="image.png"><br><a name="frU53"></a></p><h3 id="举例">举例</h3><p>在仓库中右键新建一个文本，然后改名叫.gitignore. (如果是windows系统那么需要前后都有点)。然后打开这个文件输入*.txt 意思就是忽略所有以.txt结尾的文件<br><a name="Xq2XB"></a></p><h3 id="gitignore模板">.gitignore模板</h3><p><a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a><br><a name="YPr6V"></a></p><h1>Git分支操作</h1><p>使用分支可以把工作从开发主线上分离，以免影响开发主线，对于社会化协作的项目来说，分支提供了很好的代码隔离的功能，核心开发者们可以借助对比分支的方式对新加入的代码进行审核，并在其中挑选出有用的分支，合并到主分支当中以确保项目的健康稳定。<br><a name="VfJbq"></a></p><h2 id="查看分支">查看分支</h2><p>git branch  会显示当前库中的分支，当前使用的分支会以*开头标注<br>git branch -a  查看远程分支(显示所有分支)<br><a name="Wz0jd"></a></p><h2 id="创建、切换、修改、删除分支">创建、切换、修改、删除分支</h2><p>创建：<br>使用 git init 命令会自动创建一个 master 分支 <br>git branch 分支名 创建一个新的分支<br>切换<br>git checkout 分支名可以切换分支(新建分支并不会直接切换到新建的那个分支，需要用到这个命令来切换)  <br>切换分支时必须谨慎地关注工作目录中文件的变化，切换分支的同时会将工作目录更改为不同分支对应的目录<br>修改<br>git branch -m 分支名 新分支名   修改分支的名字<br>删除<br>git branch  -d 分支名  删除某一个分支<br>git branch -D 分支名  强制删除一个还没有合并的分支<br><a name="sD2UH"></a></p><h2 id="合并分支">合并分支</h2><p>首先 git checkout 到想要并入的分支然后再使用merge命令合并<br>命令： git merge &lt;想要使其合并到当前分支的那个分支名&gt;<br><a name="zhoMR"></a></p><h2 id="合并冲突">合并冲突</h2><p>假如一个主分支分出来的两个分支对同一文件进行了编辑，那么合并这两个分支时就会产生合并冲突。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669103436797-8f350751-23dc-4dc3-8476-ad418c152eee.png#averageHue=%233c3c3c&amp;clientId=ud3c6b9f0-5404-4&amp;from=paste&amp;height=448&amp;id=u7034298f&amp;originHeight=403&amp;originWidth=974&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=329736&amp;status=done&amp;style=none&amp;taskId=ueef31e00-da71-45c9-a3f2-2ba4307c0a1&amp;title=&amp;width=1082.2222508913212" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669103718823-24e88be4-6372-4477-9434-a47e735e5f39.png#averageHue=%23f0f0e9&amp;clientId=ud3c6b9f0-5404-4&amp;from=paste&amp;height=227&amp;id=u5ba6dfa7&amp;originHeight=204&amp;originWidth=602&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91357&amp;status=done&amp;style=none&amp;taskId=ua6731bae-0932-402d-81bb-052a2938c2e&amp;title=&amp;width=668.8889066083937" alt="image.png"><br>处理完有冲突的文件后，使用git add 重新添加这个文件进行提交即可解决冲突<br><a name="rJwqJ"></a></p><h1>协作开发中的分支架构</h1><p><a name="HgevY"></a></p><h2 id="协作项目中的分支规则">协作项目中的分支规则</h2><p>根据分支存在的生命周期长短不同，大致上将分支分为长期分支，和短期分支两种<br>长期分支是指一直存在的分支，短期分支指的是用完即销毁的分支<br>短期分支可以将问题集中化，一个分支只解决一个问题，非常适合用作单一特性的开发，或明确的bug修复等这样的短期工作<br>长期分支更加适合解决整个项目运行过程中一直需要应对的问题，比如存放当前可运行的最终代码，或者临时存放需要测试的代码等<br><a name="EZcOq"></a></p><h2 id="适合协作的分支架构">适合协作的分支架构</h2><p>master 分支是版本库初始化时自动被创建出来的分支，项目中所有的分支都来源于这个分支。<br>master分支来管理发布后的最终代码，在除了初始化阶段外的任何时候，master分支上的代码都应当是稳定和可用的。<br>dev分支是用来维护整个开发的进程的，所有的特征分支（短期分支，针对某一项进行开发）都需要从这个分支开始，并最终合并回这个分支。<br>当任务创建出来之后，特征分支就可以随时被创建出来，开发者们在特征分支上不断的提交更新，直到完成开发工作，最终将特性分支合并到dev分支上并删掉原有的特性分支，当dev分支上的代码已经达到了可用的阶段时即可进入发布，发布的目的是将开发完成的代码打包成一个可以直接使用的软件。<br>发布阶段可以从dev分支创建一个短期的release分支或是将dev分支合并到一个长期的release分支上进行测试和编译，测试中的修改可以继续在这个分支上进行，但是当发布完成后一定要将所有的修改合并回dev分支，并将最终的代码合并到master分支上。<br>当发现master分支上的代码，存在紧急的bug的时候，则需要临时创建一个hotfix分支来快速的修复，hotfix分支和特征分支一样，也应当是短期的分支，当bug修复之后，即需要尽快的将其合并到master和dev上以保持代码的可靠性。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669111005370-b3bc1eae-cb77-4d9e-93a6-d0b1e95788e1.png#averageHue=%23b0afae&amp;clientId=u833f77fa-b51c-4&amp;from=paste&amp;height=857&amp;id=u8c75defb&amp;originHeight=771&amp;originWidth=1480&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=285161&amp;status=done&amp;style=none&amp;taskId=uaf727463-7844-4fd8-9484-5fdc2d357e4&amp;title=&amp;width=1644.4444880073465" alt="image.png"><br><a name="IxvAr"></a></p><h2 id="远程分支操作">远程分支操作</h2><p>如果想要为本地自己 init 的git库添加远程库则可以使用这个命令：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669111802352-9c5513fc-daea-4527-b108-2ab22a2c85aa.png#averageHue=%23e0e0e0&amp;clientId=u833f77fa-b51c-4&amp;from=paste&amp;height=141&amp;id=wWycq&amp;originHeight=127&amp;originWidth=681&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29794&amp;status=done&amp;style=none&amp;taskId=u000266d7-1c59-4c10-8ac9-5be16200bf3&amp;title=&amp;width=756.6666867114885" alt="image.png"></p><p>git  remote -v  查看当前版本库的远程库<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669107337652-fcb15e05-d5f0-4fca-9786-8b5ce348d521.png#averageHue=%230b0705&amp;clientId=u833f77fa-b51c-4&amp;from=paste&amp;height=61&amp;id=u880605ef&amp;originHeight=55&amp;originWidth=532&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3281&amp;status=done&amp;style=none&amp;taskId=u8a6268ce-38d6-49b4-9a26-2c02e8eeb9b&amp;title=&amp;width=591.1111267702083" alt="image.png">  fetch是下载，push是上传<br>git remote add  &lt;git库名字&gt; &lt;git库路径&gt;  可以额外添加远程分支<br>在远程库被添加之后，本地仓库中则会同时出现本地的分支和远程的分支，那些存在于远程库中的分支并不会将本地的分支覆盖或与之自动的合并，而是会以远程分支的形式存在<br>远程分支以远程库的名称作为名称空间并以斜杠作为连接符与原本的分支名连接<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669112698223-efe49e5b-4b2b-4fa7-9dc5-2daf96b01a08.png#averageHue=%234c3325&amp;clientId=u833f77fa-b51c-4&amp;from=paste&amp;height=336&amp;id=u16bd6dfa&amp;originHeight=302&amp;originWidth=917&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=169845&amp;status=done&amp;style=none&amp;taskId=udb7a5350-78c1-418c-988a-4c1b142d5bd&amp;title=&amp;width=1018.8889158802275" alt="image.png"><br>远程分支其实也存在于本地的版本库当中。与本地分支不同，远程分支并不能直接被修改，它的功能是用于与远程库中相同的分支进行信息同步，远程分支中的信息一般和远程库中保持一致，当远程库有新的更新时可以使用git fetch命令更新本地仓库的远程分支。<br><strong>从远程库拉取新代码：</strong><br>例如当远程库origin发生了更多的操作而导致与本地库不同时则可以使用，git fetch origin命令从远程库origin中同步更新所有的远程分支信息。更新完远程分支信息之后则可以使用git merge 命令将其合并到对应的本地分支上。<br>也可以通过 git pull &lt;远程库名&gt; &lt;分支名&gt; 来一步到位同步远程库的远程分支到当前的分支，这里举例就是将origin远程库的new_test分支合并到当前的new_test分支<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669112832693-cbfc834e-4491-4d0d-8e22-7497d85db3a7.png#averageHue=%2347432a&amp;clientId=u833f77fa-b51c-4&amp;from=paste&amp;height=158&amp;id=u01768d09&amp;originHeight=142&amp;originWidth=999&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110225&amp;status=done&amp;style=none&amp;taskId=u6b8849d3-78ff-473b-9471-38a887ea550&amp;title=&amp;width=1110.000029404959" alt="image.png"><br>git branch -vv 来查看本地分支与远程分支之间的关联 关系<br>如果本地分支与远程分支之间已经建立了关系，则更新时就可以直接省略远程库名和分支名，直接写为 git pull<br>将远程分支同步到本地：git checkout origin/remote_branch  这样本地就会自动创建一个 remote_branch分支并与origin/remote_branch关联<br> 当修改了本地分支后，如果希望将其推送到远程库中时，则可以通过 git push  origin 分支名 将当前活动的本地分支推送到远程库上的同名分支上去，如果远程的同名分支不存在则会被新建出来。</p><p><a name="czXKA"></a></p><h1>Git常用命令以及注意事项</h1><p>将本地的代码上传到github的流程：<a href="https://cloud.tencent.com/developer/article/1648509">https://cloud.tencent.com/developer/article/1648509</a><br>git clone 把远程库克隆到本地进行开发<br>git branch 创建一个要添加修改的分支（一个公司的，一个家里的）<br>git push origin + 你现在的分支名   向远程库推送自己的更新   (vscode有插件可以用vscode来推送)<br>git pull --rebase origin master  更新远程主分支的内容到本地<br><a name="is5A4"></a></p><h2 id="vscode-结合-git的使用说明：">vscode 结合 git的使用说明：</h2><p><a href="https://blog.l0v0.com/posts/94ffdbdf.html">https://blog.l0v0.com/posts/94ffdbdf.html</a><br><a href="https://blog.l0v0.com/posts/a91a4c58.html">https://blog.l0v0.com/posts/a91a4c58.html</a><br><a name="prTdb"></a></p><h2 id="使用SSH来传输">使用SSH来传输</h2><p><a href="https://blog.csdn.net/qq_38163309/article/details/105335097">https://blog.csdn.net/qq_38163309/article/details/105335097</a><br><a href="https://www.bilibili.com/video/BV1EE41157ro/?spm_id_from=333.1007.top_right_bar_window_history.content.click">https://www.bilibili.com/video/BV1EE41157ro/?spm_id_from=333.1007.top_right_bar_window_history.content.click</a><br><a name="lDoBO"></a></p><h2 id="Git常用命令汇总">Git常用命令汇总</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669141756421-248ed107-f546-4217-8b43-b07992da53f7.png#averageHue=%23d5cac1&amp;clientId=u8964c6e1-bf9f-4&amp;from=paste&amp;height=552&amp;id=ua4edb5a1&amp;originHeight=552&amp;originWidth=872&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=158354&amp;status=done&amp;style=none&amp;taskId=u513d86e8-3365-44f3-8782-1c3a42caab5&amp;title=&amp;width=872" alt="image.png"><br><a name="WyD7T"></a></p><h2 id="注意事项">注意事项</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669141951237-6197a90e-22b0-41f4-890a-22b819adca3f.png#averageHue=%23ededec&amp;clientId=u8964c6e1-bf9f-4&amp;from=paste&amp;height=652&amp;id=u398dc4fe&amp;originHeight=652&amp;originWidth=1526&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=275541&amp;status=done&amp;style=none&amp;taskId=ua3431058-5efb-4678-85dc-33fcc6f2a46&amp;title=&amp;width=1526" alt="image.png"></p><h1>上传本地文件（夹）到GitHub</h1><blockquote><p><a href="https://zhuanlan.zhihu.com/p/136355306">https://zhuanlan.zhihu.com/p/136355306</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VisualStudio的使用</title>
      <link href="/2023/08/29/Geek-VisualStudio%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2023/08/29/Geek-VisualStudio%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1>设置代码补全为回车</h1><p>默认补全代码是用的tab键,想要修改需要去, 工具----选项----文本编辑器----C/C+±—高级----主动提交成员列表，设置为True----点击确认<br><img src="https://img2023.cnblogs.com/blog/3142732/202303/3142732-20230319203853291-846273191.png" alt="image1.png"></p><p><a name="egV9D"></a></p><h1>好用的快捷键(有的需要安装番茄助手才能用)</h1><p>alt+shift+o 全局搜索<br>alt+shift+f 查找引用<br>alt + o 在cpp和头文件之间相互跳转<br>ctrl +a + k + f 全选代码使代码变得整洁<br>ctrl+shift+d 翻译(需前往扩展下载translate扩展)<br>“/” 自动判断所选代码是带注释的还是不带注释的,然后为其添加或删除注释<br>ctrl+b 构建当前项目<br>ctrl+F5 调试当前项目<br>ctrl+shift+回车 从当前行切换到下一行(与VSCode的ctrl+回车一样)<br>ctrl+d 将当前行内容复制到下一行<br>ctrl+shift+空格  当光标在函数参数里面时,显示函数所需要的参数列表<br>ctrl+shift+s 保存(当与UE进行实时编程时用得到)<br>ctrl键加上+键或者-键可以进行前进和后退的操作,方便查看类的定义后返回原来的浏览位置</p><p><a name="RWb6C"></a></p><h1>Visual Assist番茄助手</h1><p>首先推荐一个符号搜索插件 Visual Assist 也称番茄助手，下载安装方法自行搜索。<br><a name="vMyYY"></a></p><h2 id="禁用使用中文注释时提示拼写错误的问题">禁用使用中文注释时提示拼写错误的问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1693216885933-989fe0c4-d03c-417e-b4dd-e945a5c17d56.png#averageHue=%23f1edea&amp;clientId=uc9bedbdb-4582-4&amp;from=paste&amp;height=192&amp;id=ufae31f36&amp;originHeight=192&amp;originWidth=728&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13247&amp;status=done&amp;style=none&amp;taskId=u3b89b7f3-2f06-47fb-a329-cfc0db170b6&amp;title=&amp;width=728" alt="image.png"></p><p><a name="z2Iwm"></a></p><h2 id="好用的使用方法">好用的使用方法</h2><p><a name="o5I7N"></a></p><h3 id="快速在cpp中创建头文件中声明的函数定义">快速在cpp中创建头文件中声明的函数定义</h3><p>在头文件中选择自己声明的函数名称，然后右键后点击Create Implementation即可快速在cpp中生成定义。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1693216147386-36de503f-be6c-427f-b799-9667ddbf1336.png#averageHue=%236f9070&amp;clientId=uc9bedbdb-4582-4&amp;from=paste&amp;height=308&amp;id=u6ebc902a&amp;originHeight=308&amp;originWidth=1156&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46765&amp;status=done&amp;style=none&amp;taskId=u9b52cbd7-5696-4e0a-9d6b-997a5b74c84&amp;title=&amp;width=1156" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Geek </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VisualStudio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyQt5</title>
      <link href="/2023/08/29/PySide2-PyQt5/"/>
      <url>/2023/08/29/PySide2-PyQt5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="P2iGF"></a></p><h2 id></h2><p><a name="yeGPb"></a></p><h1>PyQt5的使用</h1><p><a name="WwrnW"></a></p><h2 id="布局">布局</h2><p><a name="YWCW5"></a></p><h3 id="绝对布局">绝对布局</h3><p>直接通过QLabel指定self使标签出现在窗口上<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648020085545-8b33a6e6-2b54-4bfd-b2f3-cf5d9fba0bea.png#clientId=u61b28784-2765-4&amp;from=paste&amp;height=275&amp;id=aPuBS&amp;originHeight=275&amp;originWidth=569&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=132399&amp;status=done&amp;style=none&amp;taskId=u95d47597-04a7-4d48-9d1e-d2905315e87&amp;title=&amp;width=569" alt="image.png"><br><a name="XMKwb"></a></p><h3 id="水平盒布局QHBoxLayout">水平盒布局QHBoxLayout</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648020264952-bda1ccfb-49f8-43a5-b7ac-90782f5d6570.png#clientId=u61b28784-2765-4&amp;from=paste&amp;height=436&amp;id=Baqjx&amp;originHeight=436&amp;originWidth=909&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=259508&amp;status=done&amp;style=none&amp;taskId=u33736d8e-5337-4863-a962-edbfc6aecb5&amp;title=&amp;width=909" alt="image.png"><br>可以使用布局对象的setSpacing()方法控制控件之间的间距<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648020742456-cfd50efc-6410-4f76-a43f-794c7f0cfa6d.png#clientId=u61b28784-2765-4&amp;from=paste&amp;height=75&amp;id=YLoxR&amp;originHeight=75&amp;originWidth=600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62351&amp;status=done&amp;style=none&amp;taskId=u33ff5b2e-ed6d-4da1-9e0d-6c774eee625&amp;title=&amp;width=600" alt="image.png"><br><a name="TUasf"></a></p><h3 id="设置控件的对齐方式">设置控件的对齐方式</h3><p>可以通过在addWidget中增加两个参数改变伸缩量和对齐方式<br>第一个参数为按钮控件，第二个参数为伸缩量，第三个为对齐方式<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648020570838-975db8b9-cbc0-4d10-801e-3fff68015656.png#clientId=u61b28784-2765-4&amp;from=paste&amp;height=685&amp;id=UwLIq&amp;originHeight=685&amp;originWidth=1275&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=305221&amp;status=done&amp;style=none&amp;taskId=u4fc78ca0-fd60-465b-9369-41ad941f2df&amp;title=&amp;width=1275" alt="image.png"></p><p><a name="KlYMT"></a></p><h3 id="垂直盒布局QVBoxLayout">垂直盒布局QVBoxLayout</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648021137561-504065d9-587f-456a-ae05-fdeda6652158.png#clientId=u61b28784-2765-4&amp;from=paste&amp;height=387&amp;id=ySmL4&amp;originHeight=387&amp;originWidth=409&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28231&amp;status=done&amp;style=none&amp;taskId=u4530b144-eef7-4d72-a535-9888f3810c1&amp;title=&amp;width=409" alt="image.png"><br><a name="PGNgd"></a></p><h3 id="设置布局的伸缩量addStretch">设置布局的伸缩量addStretch</h3><p>设置布局伸缩量有两种方法，第一种：添加控件时设置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648176606518-d0b43209-6b94-42f7-8f0b-64ffd37196ee.png#clientId=u3f1ac442-2738-4&amp;from=paste&amp;height=56&amp;id=xYoof&amp;originHeight=56&amp;originWidth=589&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69800&amp;status=done&amp;style=none&amp;taskId=ud34a6a9e-1d4d-4def-9244-48ef730814c&amp;title=&amp;width=589" alt="image.png"><br>第二种：addStretch</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stretch</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Stretch, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;设置伸缩量&#x27;</span>)</span><br><span class="line">        btn1 = QPushButton(<span class="string">&#x27;按钮1&#x27;</span>)</span><br><span class="line">        btn2 = QPushButton(<span class="string">&#x27;按钮2&#x27;</span>)</span><br><span class="line">        btn3 = QPushButton(<span class="string">&#x27;按钮3&#x27;</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addStretch(<span class="number">1</span>)  <span class="comment"># 设置伸缩量</span></span><br><span class="line">        layout.addWidget(btn1)  <span class="comment"># 设置1个伸缩量后添加一个按钮</span></span><br><span class="line">        layout.addStretch(<span class="number">2</span>)</span><br><span class="line">        layout.addWidget(btn2)  <span class="comment"># 伸缩量为2</span></span><br><span class="line">        layout.addStretch(<span class="number">3</span>)</span><br><span class="line">        layout.addWidget(btn3)  <span class="comment"># 伸缩量为3</span></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Stretch()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648204691401-d31e56f9-c9da-41fa-b091-d21788d184ed.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=329&amp;id=Dv2rj&amp;originHeight=329&amp;originWidth=946&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15910&amp;status=done&amp;style=none&amp;taskId=u1819aec5-564b-493a-9da7-1f21f987ce6&amp;title=&amp;width=946" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stretch</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Stretch, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;设置伸缩量&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">800</span>,<span class="number">100</span>)</span><br><span class="line">        btn1 = QPushButton(<span class="string">&#x27;按钮1&#x27;</span>)</span><br><span class="line">        btn2 = QPushButton(<span class="string">&#x27;按钮2&#x27;</span>)</span><br><span class="line">        btn3 = QPushButton(<span class="string">&#x27;按钮3&#x27;</span>)</span><br><span class="line">        btn4 = QPushButton(<span class="string">&#x27;按钮4&#x27;</span>)</span><br><span class="line">        btn5 = QPushButton(<span class="string">&#x27;按钮5&#x27;</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addStretch(<span class="number">0</span>)  <span class="comment"># 设置伸缩量</span></span><br><span class="line">        layout.addWidget(btn1)  <span class="comment"># 设置1个伸缩量后添加一个按钮</span></span><br><span class="line">        layout.addStretch(<span class="number">1</span>)  <span class="comment"># 再设置一个伸缩量</span></span><br><span class="line">        <span class="comment">#  再次设置伸缩量后添加4个按钮</span></span><br><span class="line">        layout.addWidget(btn2)</span><br><span class="line">        layout.addWidget(btn3)</span><br><span class="line">        layout.addWidget(btn4)</span><br><span class="line">        layout.addWidget(btn5)</span><br><span class="line">        btnOK = QPushButton(<span class="string">&#x27;确定&#x27;</span>)</span><br><span class="line">        btnCancel = QPushButton(<span class="string">&#x27;取消&#x27;</span>)</span><br><span class="line">        layout.addStretch(<span class="number">1</span>)</span><br><span class="line">        layout.addWidget(btnOK)</span><br><span class="line">        layout.addWidget(btnCancel)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Stretch()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648205801054-3dd3c46d-3cd2-4db7-80d9-ed7f101a5e16.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=139&amp;id=q8gmo&amp;originHeight=139&amp;originWidth=816&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8582&amp;status=done&amp;style=none&amp;taskId=u1e27fcee-305d-4c59-a409-ad129ba9420&amp;title=&amp;width=816" alt="image.png"><br><a name="rJfxx"></a></p><h3 id="让按钮永远在窗口的右下角">让按钮永远在窗口的右下角</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RightBottomButton</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RightBottomButton, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;让按钮永远在右下角&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        okButton = QPushButton(<span class="string">&quot;确定&quot;</span>)</span><br><span class="line">        cancelButton = QPushButton(<span class="string">&#x27;取消&#x27;</span>)</span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        hbox.addStretch(<span class="number">1</span>)</span><br><span class="line">        hbox.addWidget(okButton)</span><br><span class="line">        hbox.addWidget(cancelButton)</span><br><span class="line"></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        btn1 = QPushButton(<span class="string">&#x27;按钮1&#x27;</span>)</span><br><span class="line">        btn2 = QPushButton(<span class="string">&#x27;按钮2&#x27;</span>)</span><br><span class="line">        btn3 = QPushButton(<span class="string">&#x27;按钮3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        vbox.addStretch(<span class="number">0</span>)</span><br><span class="line">        vbox.addWidget(btn1)</span><br><span class="line">        vbox.addWidget(btn2)</span><br><span class="line">        vbox.addWidget(btn3)</span><br><span class="line"></span><br><span class="line">        vbox.addStretch(<span class="number">1</span>)</span><br><span class="line">        vbox.addLayout(hbox)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = RightBottomButton()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648206781934-dcedd939-1b89-4d01-bc6e-29875e94dd4d.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=339&amp;id=EJxgq&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9999&amp;status=done&amp;style=none&amp;taskId=u6786aeca-c068-4ec1-ac51-9f562208ffd&amp;title=&amp;width=416" alt="image.png">   <strong>两个布局，一个垂直布局一个水平布局通过addStretch设置伸缩量使它们分开</strong><br><a name="Ronyr"></a></p><h3 id="栅格布局QGridLayout">栅格布局QGridLayout</h3><p><a name="vXMwA"></a></p><h4 id="用循环方式实现计算器">用循环方式实现计算器</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Calc</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Calc, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;栅格布局&#x27;</span>)</span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(grid)</span><br><span class="line">        names = [<span class="string">&#x27;Cls&#x27;</span>, <span class="string">&#x27;Back&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;Close&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;-&#x27;</span>,</span><br><span class="line">                 <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, ]</span><br><span class="line">        positions = [(i, j) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]  <span class="comment"># 得到5（下标为4）行4（下标为3）列的值</span></span><br><span class="line">        <span class="built_in">print</span>(positions)</span><br><span class="line">        <span class="comment"># zip 的作用是将两个不同列表中的元素一一对应（也可以元素对应元组），形成一个新的列表（以元组的形式对应）</span></span><br><span class="line">        <span class="keyword">for</span> position, name <span class="keyword">in</span> <span class="built_in">zip</span>(positions, names):</span><br><span class="line">            <span class="keyword">if</span> name == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            button = QPushButton(name)</span><br><span class="line"></span><br><span class="line">            grid.addWidget(button, *position)  <span class="comment"># *号的作用是将元组拆成元素，例如（1，2）拆成1 2，之所以拆是因为addWidget不接受元组</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Calc()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648209766370-221517da-1c9d-4ea4-9828-b6f8cc140176.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=200&amp;id=p24jO&amp;originHeight=200&amp;originWidth=356&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7729&amp;status=done&amp;style=none&amp;taskId=uc42ed763-6612-4b77-9dd8-d8ec4cefd8b&amp;title=&amp;width=356" alt="image.png"><br><a name="B9gb9"></a></p><h4 id="进行表单UI设计">进行表单UI设计</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GridForm</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(GridForm, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;栅格布局:表单设计&#x27;</span>)</span><br><span class="line">        titleLabel = QLabel(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">        authorLabel = QLabel(<span class="string">&#x27;作者&#x27;</span>)</span><br><span class="line">        contentLabel = QLabel(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">        titleEdit = QLineEdit()</span><br><span class="line">        authorEdit = QLineEdit()</span><br><span class="line">        contentEdit = QTextEdit()</span><br><span class="line"></span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.setSpacing(<span class="number">10</span>) <span class="comment"># 设置栅格的间距</span></span><br><span class="line">        grid.addWidget(titleLabel, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(titleEdit, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        grid.addWidget(authorLabel, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(authorEdit, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        grid.addWidget(contentLabel, <span class="number">3</span>, <span class="number">0</span>)</span><br><span class="line">        grid.addWidget(contentEdit, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(grid)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">350</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = GridForm()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648211139062-de28221d-8911-42c3-a9a8-3797308ae5de.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=339&amp;id=xpQHd&amp;originHeight=339&amp;originWidth=366&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10111&amp;status=done&amp;style=none&amp;taskId=u772bcde4-2a44-4cf0-a619-9d741a26557&amp;title=&amp;width=366" alt="image.png"><br><a name="WZ4aI"></a></p><h3 id="表单布局QFormLayout">表单布局QFormLayout</h3><p>表单设计可以通过栅格布局或者表单布局创建<br>主要区别是一个是使用addWidget  一个是使用addRow</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FormLayout</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(FormLayout, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;表单布局&#x27;</span>)</span><br><span class="line">        titleLabel = QLabel(<span class="string">&#x27;标题&#x27;</span>)</span><br><span class="line">        authorLabel = QLabel(<span class="string">&#x27;作者&#x27;</span>)</span><br><span class="line">        contentLabel = QLabel(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line">        titleEdit = QLineEdit()</span><br><span class="line">        authorEdit = QLineEdit()</span><br><span class="line">        contentEdit = QTextEdit()</span><br><span class="line"></span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line">        formLayout.addRow(titleLabel,titleEdit)</span><br><span class="line">        formLayout.addRow(authorLabel,authorEdit)</span><br><span class="line">        formLayout.addRow(contentLabel,contentEdit)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = FormLayout()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648211552063-f0b688d2-8e90-4c63-8d45-fafdb20e9427.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=305&amp;id=xBKi4&amp;originHeight=305&amp;originWidth=324&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7592&amp;status=done&amp;style=none&amp;taskId=u8035015c-05fd-4e14-9ed1-1f4a3efaad7&amp;title=&amp;width=324" alt="image.png"><br><a name="hs5MB"></a></p><h3 id="拖动控件之间的边界（QSplitter）">拖动控件之间的边界（QSplitter）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Splitter</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Splitter, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QSplitter 例子&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        topleft = QFrame()</span><br><span class="line">        topleft.setFrameShape(QFrame.StyledPanel)  <span class="comment"># 绘制一个矩形面板</span></span><br><span class="line">        bottom = QFrame()</span><br><span class="line">        bottom.setFrameShape(QFrame.StyledPanel)</span><br><span class="line">        splitter1 = QSplitter(Qt.Horizontal)  <span class="comment"># 创建水平拖动控件</span></span><br><span class="line">        textedit = QTextEdit()</span><br><span class="line">        <span class="comment"># 设置受水平拖动控件控制的矩形面板</span></span><br><span class="line">        splitter1.addWidget(topleft)</span><br><span class="line">        splitter1.addWidget(textedit)</span><br><span class="line">        splitter1.setSizes([<span class="number">200</span>, <span class="number">100</span>])  <span class="comment"># 设置拖动控件默认位置</span></span><br><span class="line"></span><br><span class="line">        splitter2 = QSplitter(Qt.Vertical)  <span class="comment"># 创建垂直拖动控件</span></span><br><span class="line">        <span class="comment"># 设置受水平拖动控件控制的矩形面板</span></span><br><span class="line">        splitter2.addWidget(splitter1)</span><br><span class="line">        splitter2.addWidget(bottom)</span><br><span class="line"></span><br><span class="line">        hbox.addWidget(splitter2)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(hbox)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Splitter()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648215257269-8be0648e-5a5a-4117-a1b8-50c35ca0005f.png#clientId=uddd2ac66-43c5-4&amp;from=paste&amp;height=239&amp;id=Y8k1Z&amp;originHeight=239&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6368&amp;status=done&amp;style=none&amp;taskId=ue98f6ef4-b1c2-4156-a15f-50143da2aff&amp;title=&amp;width=316" alt="image.png"><br><a name="ICI2k"></a></p><h2 id="信号和槽">信号和槽</h2><p>在 Qt 中，用户和控件的每次交互过程称为一个事件，比如“用户点击按钮”是一个事件，“用户关闭窗口”也是一个事件。每个事件都会发出一个信号，例如用户点击按钮会发出“按钮被点击”的信号，用户关闭窗口会发出“窗口被关闭”的信号。</p><p>Qt 中的所有控件都具有接收信号的能力，一个控件还可以接收多个不同的信号。对于接收到的每个信号，控件都会做出相应的响应动作。例如，按钮所在的窗口接收到“按钮被点击”的信号后，会做出“关闭自己”的响应动作；再比如输入框自己接收到“输入框被点击”的信号后，会做出“显示闪烁的光标，等待用户输入数据”的响应动作。在 Qt 中，<strong>对信号做出的响应动作就称为槽。</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2022/gif/2623605/1647265244137-79d7c317-be6d-47a3-8a0a-d51b481cba97.gif#clientId=u88a69422-e7a2-4&amp;from=paste&amp;id=wWp88&amp;originHeight=427&amp;originWidth=500&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u1f621fff-41d3-4faa-95ec-654681be45f&amp;title=" alt><br>图 1 信号和槽</p><p>信号和槽机制底层是通过函数间的相互调用实现的。每个信号都可以用函数来表示，称为信号函数；每个槽也可以用函数表示，称为槽函数。例如，“按钮被按下”这个信号可以用 clicked() 函数表示，“窗口关闭”这个槽可以用 close() 函数表示，信号和槽机制实现“点击按钮会关闭窗口”的功能，其实就是 clicked() 函数调用 close() 函数的效果。<br><a name="KwIm6"></a></p><h3 id="connect-函数实现信号和槽">connect()函数实现信号和槽</h3><p>connect() 是 QObject 类中的一个静态成员函数，专门用来关联指定的信号函数和槽函数。<br>关联某个信号函数和槽函数，需要搞清楚以下 4 个问题：</p><ul><li>信号发送者是谁？</li><li>哪个是信号函数？</li><li>信号的接收者是谁？</li><li>哪个是接收信号的槽函数？<br><a name="Q3v5K"></a></li></ul><h3 id="不同控件对应的信号">不同控件对应的信号</h3><ol><li>Qlabel控件(标签控件): linkHovered(滑过时触发)  linkActivated(单击时触发)</li><li>QLineEdit控件(输入框控件):textChanged(文本改变时触发),editingFinished(文本输入时触发)</li><li>QPushButton控件(普通按钮控件):clicked(单击按钮时触发)</li><li>QRadioButton控件(单选按钮控件):toggled(按钮被选中时触发)</li><li>QCheckBox控件(复选框控件<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647682554170-541ca9bc-e302-48ed-8dc1-a86eaf669074.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=94&amp;id=tq8zp&amp;originHeight=94&amp;originWidth=180&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19304&amp;status=done&amp;style=none&amp;taskId=ua45a1d3d-5810-4379-87c8-d9ccc622bce&amp;title=&amp;width=180" alt="image.png">):stateChanged(按钮状态改变时触发)</li><li>QComboBox控件(下拉列表控件):currentIndexChanged(列表选择改变时触发)</li><li>QSlider控件(滑块控件):valueChanged(当滑块的值改变时触发)</li><li>QSpinBox控件(计数器控件<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647693314236-d14be68e-7398-48ba-aafa-61a66e81cecf.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=30&amp;id=zT6Fy&amp;originHeight=30&amp;originWidth=282&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=648&amp;status=done&amp;style=none&amp;taskId=ub3619d59-9337-47a2-9e61-455477001d6&amp;title=&amp;width=282" alt="image.png">):valueChanged(当计数器中的值改变时触发</li><li>QAction创建菜单栏中的菜单或者工具栏中的工具：triggered（当点击菜单时触发）</li><li>tb1 = self.addToolBar(“File”)创建的工具栏（是工具栏而不是工具）：actionTriggered  (当点击工具栏中的任意一个工具就会触发)</li><li>QListWidget() 扩展的列表控件 ：itemClicked  (当点击列表中的某一项时触发，触发时传参数是QListWidgetItem )</li><li>QListWidget() 扩展的列表控件：currentRowChanged（当改变选择的列表行时调用）<br><a name="QQH4t"></a></li></ol><h3 id="生成自定义信号pyqtSignal">生成自定义信号pyqtSignal</h3><p>通过生成pyqtSignal的实例（可自定义发送时的参数类型）（pyqtSignal是QObject中的方法因此需要在类中定义信号）<br>使用时需要先关联再通过emit发送参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyTypeSignal</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义信号的类&#x27;&#x27;&#x27;</span></span><br><span class="line">    sendmsg = pyqtSignal(<span class="built_in">object</span>)</span><br><span class="line">    sendmsg1 = pyqtSignal(<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">int</span>)  <span class="comment"># 发送三个带类型的参数。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;自定义信号发送时传入的参数&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.sendmsg.emit(<span class="string">&#x27;Hello PyQt5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.sendmsg1.emit(<span class="string">&#x27;hello&#x27;</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MySlot</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;自定义槽&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;信息：&#x27;</span> + msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get1</span>(<span class="params">self, msg, a, b</span>):</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="built_in">print</span>(a + b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    send = MyTypeSignal()  <span class="comment"># 创建信号的实例</span></span><br><span class="line">    slot = MySlot()  <span class="comment"># 创建槽的实例</span></span><br><span class="line">    send.sendmsg.connect(slot.get)  <span class="comment"># 连接信号与槽</span></span><br><span class="line">    send.sendmsg1.connect(slot.get1)</span><br><span class="line">    send.run()  <span class="comment"># 发送信号：执行了：self.sendmsg.emit(&#x27;Hello PyQt5&#x27;)</span></span><br><span class="line">    send.run1()   <span class="comment"># 发送信号：执行了：self.sendmsg1.emit(&#x27;hello&#x27;, 3, 4)</span></span><br><span class="line">    send.sendmsg.disconnect(slot.get)  <span class="comment"># 断开连接</span></span><br><span class="line">    send.run()  <span class="comment"># 因为断开了连接而无法发送信号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：<br>信息：Hello PyQt5<br>hello<br>7<br><a name="slxKI"></a></p><h3 id="为类添加多个信号">为类添加多个信号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiSignal</span>(<span class="title class_ inherited__">QObject</span>):</span><br><span class="line">    signal1 = pyqtSignal()</span><br><span class="line">    signal2 = pyqtSignal(<span class="built_in">int</span>)</span><br><span class="line">    signal3 = pyqtSignal(<span class="built_in">int</span>, <span class="built_in">str</span>)</span><br><span class="line">    signal4 = pyqtSignal(<span class="built_in">list</span>)</span><br><span class="line">    signal5 = pyqtSignal(<span class="built_in">dict</span>)</span><br><span class="line">    signal6 = pyqtSignal([<span class="built_in">int</span>, <span class="built_in">str</span>], [<span class="built_in">str</span>])  <span class="comment"># 既可以存取int，str类型参数也可以只存取str类型参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MultiSignal, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.signal1.connect(<span class="variable language_">self</span>.signalCall1)</span><br><span class="line">        <span class="variable language_">self</span>.signal2.connect(<span class="variable language_">self</span>.signalCall2)</span><br><span class="line">        <span class="variable language_">self</span>.signal3.connect(<span class="variable language_">self</span>.signalCall3)</span><br><span class="line">        <span class="variable language_">self</span>.signal4.connect(<span class="variable language_">self</span>.signalCall4)</span><br><span class="line">        <span class="variable language_">self</span>.signal5.connect(<span class="variable language_">self</span>.signalCall5)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.signal6[<span class="built_in">str</span>].connect(<span class="variable language_">self</span>.signalCall6Overload)  <span class="comment"># 将str类型的信号关联signalCall60verload</span></span><br><span class="line">        <span class="variable language_">self</span>.signal6[<span class="built_in">int</span>, <span class="built_in">str</span>].connect(<span class="variable language_">self</span>.signalCall6)  <span class="comment"># 将int,str类型的信号关联signalcall6</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.signal1.emit()</span><br><span class="line">        <span class="variable language_">self</span>.signal2.emit(<span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.signal3.emit(<span class="number">1</span>, <span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.signal4.emit([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line">        <span class="variable language_">self</span>.signal5.emit(&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;Bill&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">30</span>&#125;)</span><br><span class="line">        <span class="variable language_">self</span>.signal6[<span class="built_in">str</span>].emit(<span class="string">&quot;test&quot;</span>)  <span class="comment"># 发送str类型信号</span></span><br><span class="line">        <span class="variable language_">self</span>.signal6[<span class="built_in">int</span>, <span class="built_in">str</span>].emit(<span class="number">100</span>, <span class="string">&quot;mytest&quot;</span>)  <span class="comment"># 发送int，str类型信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal1 emit&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall2</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal2 emit,value:&#x27;</span>, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall3</span>(<span class="params">self, val, text</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal3 emit.value:&#x27;</span>, val, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall4</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal4 emit,value:&#x27;</span>, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall5</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal5 emit,value:&#x27;</span>, val)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall6</span>(<span class="params">self, val, text</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal6 emit,value:&#x27;</span>, val, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">signalCall6Overload</span>(<span class="params">self, val</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;signal6 overload emit,value:&#x27;</span>, val)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    multiSignal = MultiSignal()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出：<br>signal1 emit<br>signal2 emit,value: 10<br>signal3 emit.value: 1 hello world<br>signal4 emit,value: [1, 2, 3, 4, 5, 6]<br>signal5 emit,value: {‘name’: ‘Bill’, ‘age’: 30}<br>signal6 overload emit,value: test<br>signal6 emit,value: 100 mytest<br><a name="GXocG"></a></p><h3 id="信号和槽的N对N连接和断开连接">信号和槽的N对N连接和断开连接</h3><p>没什么需要讲的，就是定义的信号可以连接并发送给不同的槽，以及多个信号可以共用一个槽<br>断开连接上上一节已经使用过了，就是使用disconnect方法。<br><a name="uQOd6"></a></p><h3 id="为窗口添加信号">为窗口添加信号</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WinSignal</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    button_clicked_signal = pyqtSignal()  <span class="comment"># 创建自定义信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(WinSignal, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;为窗口类增加信号&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">100</span>)</span><br><span class="line">        btn = QPushButton(<span class="string">&#x27;关闭窗口&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        btn.clicked.connect(<span class="variable language_">self</span>.btn_clicked)</span><br><span class="line">        <span class="comment"># 将自定义信号与槽连接在一起</span></span><br><span class="line">        <span class="variable language_">self</span>.button_clicked_signal.connect(<span class="variable language_">self</span>.btn_close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">btn_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 按钮被点击后进行发送自定义信号调用自定义信号的槽</span></span><br><span class="line">        <span class="variable language_">self</span>.button_clicked_signal.emit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">btn_close</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 自定义信号调用的槽，功能是关闭窗口</span></span><br><span class="line">        <span class="variable language_">self</span>.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = WinSignal()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>点击关闭窗口后调用自定义信号所绑定的槽实现关闭窗口的功能。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648263389005-de6b94c8-1268-4dd6-b3ff-15fbe3bf3430.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=139&amp;id=N2ZM9&amp;originHeight=139&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4065&amp;status=done&amp;style=none&amp;taskId=ud72e465b-765b-4f8d-866d-f3a6c1b6c57&amp;title=&amp;width=316" alt="image.png"><br><a name="EcJHj"></a></p><h3 id="多线程更新UI数据（在两个线程中传递数据）">多线程更新UI数据（在两个线程中传递数据）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BackendThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    <span class="comment"># 定义子线程,利用信号传递两个线程之间的数据</span></span><br><span class="line">    update_date = pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            data = QDateTime.currentDateTime()  <span class="comment"># 获取当前时间</span></span><br><span class="line">            currentTime = data.toString(<span class="string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>)  <span class="comment"># 设置时间的格式</span></span><br><span class="line">            <span class="variable language_">self</span>.update_date.emit(<span class="built_in">str</span>(currentTime))  <span class="comment"># 发送信号</span></span><br><span class="line">            time.sleep(<span class="number">1</span>)  <span class="comment"># 时间的跳跃间隔</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ThreadUpdateUI</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="comment"># 主进程</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        QDialog.__init__(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;多线程更新UI数据&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">input</span> = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">input</span>.resize(<span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.backend = BackendThread()</span><br><span class="line">        <span class="variable language_">self</span>.backend.update_date.connect(<span class="variable language_">self</span>.handleDisplay)</span><br><span class="line">        <span class="variable language_">self</span>.backend.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handleDisplay</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">input</span>.setText(data)  <span class="comment"># 将输入框显示的文本改为data(时间)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ThreadUpdateUI()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648265459411-b569de09-9fea-410b-94e9-65d30daecadb.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=139&amp;id=yx2R2&amp;originHeight=139&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4866&amp;status=done&amp;style=none&amp;taskId=u9db9875a-d581-44cb-9874-394d4a5efb0&amp;title=&amp;width=416" alt="image.png"><br><a name="VFIzQ"></a></p><h3 id="信号与槽自动连接">信号与槽自动连接</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget, QHBoxLayout, QPushButton</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AutoSignalSlot</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AutoSignalSlot, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.okButton = QPushButton(<span class="string">&#x27;ok&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.okButton.setObjectName(<span class="string">&#x27;okButton&#x27;</span>) <span class="comment"># 给按钮起一个名字</span></span><br><span class="line">        <span class="variable language_">self</span>.okButton1 = QPushButton(<span class="string">&#x27;cancel&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.okButton1.setObjectName(<span class="string">&#x27;cancelButton&#x27;</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.okButton)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">        QtCore.QMetaObject.connectSlotsByName(<span class="variable language_">self</span>)  <span class="comment"># 通过名字自动连接控件与槽</span></span><br><span class="line">        <span class="comment"># 传统手动绑定槽</span></span><br><span class="line">        <span class="comment"># self.okButton.clicked.connect(self.on_okButton_clicked)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot() </span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_okButton_clicked</span>(<span class="params">self</span>): <span class="comment"># 通过on_可以根据控件名字来自动连接控件与槽</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;点击了ok按钮&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @QtCore.pyqtSlot()</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_cancelButton_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;点击了cancel按钮&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = AutoSignalSlot()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648274346996-39fe14ac-b7c4-41f7-bbfc-5cafcecd07ed.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=137&amp;id=q8htB&amp;originHeight=137&amp;originWidth=362&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5338&amp;status=done&amp;style=none&amp;taskId=u3d5101ce-73ff-4adc-a954-7fc878fd206&amp;title=&amp;width=362" alt="image.png"><br><a name="qSx9n"></a></p><h3 id="用Lambda表达式为槽函数传递参数">用Lambda表达式为槽函数传递参数</h3><p>先介绍一下Lambda表达式<br>Lambda表达式名字叫做匿名函数，就是没有名字的函数。<br>目前个人理解：  lambda中的冒号前面是输入参数，冒号后面是返回值。 lambda函数本身是一个函数，可以通过将lambda函数赋值给一个变量，然后就可以通过变量间接的调用lambda函数<br>使用介绍：<br>fun = lambda: print(“hello world”)<br>fun()# 不需要输入直接返回 hello world<br>fun1 = lambda x, y: print(x, y)<br>fun1(“a”, “b”) # 输入两个参数x，y返回（x,y）<br>输出：<br>hello world<br>a b</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LambdaSlotArg</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(LambdaSlotArg, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;使用Lambda表达式为槽函数传递参数&quot;</span>)</span><br><span class="line">        button1 = QPushButton(<span class="string">&quot;按钮1&quot;</span>)</span><br><span class="line">        button2 = QPushButton(<span class="string">&quot;按钮2&quot;</span>)</span><br><span class="line">        ok = <span class="number">100</span>  <span class="comment"># 使用Lambda表达式可以接收外部的变量</span></span><br><span class="line">        button1.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.onButtonClick(<span class="number">10</span>, ok))</span><br><span class="line">        button2.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.onButtonClick(ok, -<span class="number">20</span>))</span><br><span class="line">        button1.clicked.connect(<span class="keyword">lambda</span>: QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&quot;结果&quot;</span>, <span class="string">&quot;单击了button1&quot;</span>))</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(button1)</span><br><span class="line">        layout.addWidget(button2)</span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onButtonClick</span>(<span class="params">self, m, n</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;m+n=&#x27;</span>, m + n)</span><br><span class="line">        QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&#x27;结果&#x27;</span>, <span class="built_in">str</span>(m + n))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = LambdaSlotArg()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648276363255-e0eced07-bd80-4c4d-8ee4-b9d3bdc5972f.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=218&amp;id=nhzWa&amp;originHeight=218&amp;originWidth=424&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14224&amp;status=done&amp;style=none&amp;taskId=u9a90a8f7-3dda-404d-a04c-062e8a9731a&amp;title=&amp;width=424" alt="image.png"><br><a name="uP7FL"></a></p><h3 id="用partial对象为槽函数传递参数">用partial对象为槽函数传递参数</h3><p>partial介绍：和装饰器一样，它可以扩展函数的功能，但又不完成等价于装饰器。<br>使用时需要先导入partial模块<br>from functools import partial<br>partial使用：类func = functools.partial(func, <em>args, <em><em>keywords)  func为要增强的函数，args为元组类型数据（不需要在意名字，名字是什么无所谓，需要在意的是</em>），keywords为字典类型数据（不需要在意名字，名字是什么无所谓，需要在意的是</em></em>）   args和keywords这些数据为默认传入func的数据。<br>举例：<br>def add(*args):     <br>return sum(args) <br>add_100 = partial(add, 100)<br>print(add_100(1, 2, 3))  # 106<br>partial与lambda为槽函数传递参数的区别：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648277325580-a60917d7-5cfd-401a-915e-ac6c66b73f15.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=52&amp;id=Gf5D8&amp;originHeight=52&amp;originWidth=505&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9361&amp;status=done&amp;style=none&amp;taskId=ue3fa3b31-5604-4c51-9aa5-d2631b3577d&amp;title=&amp;width=505" alt="image.png"><br><a name="tdmvU"></a></p><h3 id="override-覆盖-槽函数">override(覆盖)槽函数</h3><p>举例覆盖系统自带的槽函数：KeyPressEvent 按下键盘时执行事件：<br>这段代码的功能就是新增了两个键盘对应事件：<br>当按下esc键时关闭程序<br>当按下alt键时更改窗口标题名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OverrideSlot</span>(<span class="title class_ inherited__">QWidget</span>) :</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(OverrideSlot, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Override(覆盖)槽函数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self,e</span>) :  <span class="comment"># 覆盖系统的keyPressEvent函数（根据键盘对应事件，默认是不做事件）</span></span><br><span class="line">        <span class="keyword">if</span> e.key() == Qt.Key_Escape : <span class="comment"># 当按下ESC键时</span></span><br><span class="line">            <span class="variable language_">self</span>.close()</span><br><span class="line">        <span class="keyword">elif</span> e.key() == Qt.Key_Alt :</span><br><span class="line">            <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;按下Alt键&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = OverrideSlot()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="GRgvA"></a></p><h3 id="多窗口交互（1）：不使用信号与槽">多窗口交互（1）：不使用信号与槽</h3><p>多窗口交互介绍： 举例：在窗口1选择的内容在窗口2显示<br>如果不使用信号与槽那么就需要在窗口1直接调用窗口2的控件。<br>这种方法在编程方面更简单，但是缺点就是耦合性太强。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DateDialog</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    窗口1.显示日期</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(DateDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;DateDialog&quot;</span>)</span><br><span class="line">        layout = QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime = QDateTimeEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime.setCalendarPopup(<span class="literal">True</span>)  <span class="comment"># 设置下拉模块</span></span><br><span class="line">        <span class="variable language_">self</span>.datetime.setDateTime(QDateTime.currentDateTime())  <span class="comment"># 设置日期为当前日期</span></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.datetime)</span><br><span class="line">        <span class="comment"># 使用按钮盒子类的实例</span></span><br><span class="line">        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel, Qt.Horizontal, <span class="variable language_">self</span>)</span><br><span class="line">        buttons.accepted.connect(<span class="variable language_">self</span>.accept)</span><br><span class="line">        buttons.rejected.connect(<span class="variable language_">self</span>.reject)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(buttons)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dateTime</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.datetime.dateTime()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getDateTime</span>(<span class="params">parent=<span class="literal">None</span></span>):</span><br><span class="line">        dialog = DateDialog(parent)</span><br><span class="line">        result = dialog.<span class="built_in">exec</span>()</span><br><span class="line">        date = dialog.dateTime()</span><br><span class="line">        <span class="keyword">return</span> (date.date(), date.time(), result == QDialog.Accepted)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiWindow1</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MultiWindow1, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;多窗口交互（1）：不使用信号与槽&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1 = QPushButton(<span class="string">&quot;弹出对话框1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1.clicked.connect(<span class="variable language_">self</span>.onButton1Click)</span><br><span class="line">        <span class="variable language_">self</span>.button2 = QPushButton(<span class="string">&#x27;弹出对话框2&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button2.clicked.connect(<span class="variable language_">self</span>.onButton2Click)</span><br><span class="line"></span><br><span class="line">        gridLayout = QGridLayout()</span><br><span class="line">        gridLayout.addWidget(<span class="variable language_">self</span>.lineEdit)</span><br><span class="line">        gridLayout.addWidget(<span class="variable language_">self</span>.button1)</span><br><span class="line">        gridLayout.addWidget(<span class="variable language_">self</span>.button2)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(gridLayout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onButton1Click</span>(<span class="params">self</span>):</span><br><span class="line">        dialog = DateDialog(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 直接访问控件</span></span><br><span class="line">        result = dialog.<span class="built_in">exec</span>()</span><br><span class="line">        date = dialog.dateTime()</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit.setText(date.date().toString())</span><br><span class="line">        dialog.destroy()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onButton2Click</span>(<span class="params">self</span>):</span><br><span class="line">        date, time, result = DateDialog.getDateTime()</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit.setText(date.toString())</span><br><span class="line">        <span class="keyword">if</span> result == QDialog.Accepted:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;点击确定按钮&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;点击取消按钮&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = MultiWindow1()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648282956768-d10febfc-7333-4b4f-89b4-de7eebb0b74e.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=152&amp;id=J91fT&amp;originHeight=152&amp;originWidth=425&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11558&amp;status=done&amp;style=none&amp;taskId=ua0e61a51-299a-4e9e-a027-94bbbbf7aab&amp;title=&amp;width=425" alt="image.png"><br><a name="LUCTe"></a></p><h3 id="多窗口交互（2）：使用信号与槽">多窗口交互（2）：使用信号与槽</h3><p>如果一个窗口A和另一个窗口B交互，那么A尽量不要直接访问B窗口中的控件，应该访问B窗口中的信号，并指定与信号绑定的槽函数<br>例： 如果A直接访问B窗口的控件，一旦B窗口控件发生改变，那么A和B的代码都需要变化<br>如果A访问的是B中的信号，那么B中的控件发生了改变，只需要修改B中的代码即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NewDateDialog</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    Signal_OneParameter = pyqtSignal(<span class="built_in">str</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(NewDateDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;子窗口：用来发射信号&#x27;</span>)</span><br><span class="line">        <span class="comment"># 在布局中添加部件</span></span><br><span class="line">        layout = QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="string">&#x27;前者发射内置信号\n后者发射自定义信号&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime_inner = QDateTimeEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime_inner.setCalendarPopup(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime_inner.setDateTime(QDateTime.currentDateTime())</span><br><span class="line">        <span class="variable language_">self</span>.datetime_emit = QDateTimeEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime_emit.setCalendarPopup(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.datetime_emit.setDateTime(QDateTime.currentDateTime())</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.datetime_inner)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.datetime_emit)</span><br><span class="line">        <span class="comment"># 使用两个button(ok和cancel)分别连接accept()和reject()槽函数</span></span><br><span class="line">        buttons = QDialogButtonBox(</span><br><span class="line">            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,</span><br><span class="line">            Qt.Horizontal, <span class="variable language_">self</span>)</span><br><span class="line">        buttons.accepted.connect(<span class="variable language_">self</span>.accept)</span><br><span class="line">        buttons.rejected.connect(<span class="variable language_">self</span>.reject)</span><br><span class="line">        layout.addWidget(buttons)</span><br><span class="line">        <span class="variable language_">self</span>.datetime_emit.dateTimeChanged.connect(<span class="variable language_">self</span>.emit_signal)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emit_signal</span>(<span class="params">self</span>):</span><br><span class="line">        date_str = <span class="variable language_">self</span>.datetime_emit.dateTime().toString()</span><br><span class="line">        <span class="variable language_">self</span>.Signal_OneParameter.emit(date_str)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiWindow2</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MultiWindow2, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">90</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;多窗口交互（2）：使用信号与槽&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.open_btn = QPushButton(<span class="string">&#x27;获取时间&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_inner = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_emit = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.open_btn.clicked.connect(<span class="variable language_">self</span>.openDialog)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_inner.setText(<span class="string">&#x27;接收子窗口内置信号的时间&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_emit.setText(<span class="string">&#x27;接收子窗口自定义信号的时间&#x27;</span>)</span><br><span class="line">        grid = QGridLayout()</span><br><span class="line">        grid.addWidget(<span class="variable language_">self</span>.lineEdit_inner)</span><br><span class="line">        grid.addWidget(<span class="variable language_">self</span>.lineEdit_emit)</span><br><span class="line">        grid.addWidget(<span class="variable language_">self</span>.open_btn)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(grid)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">openDialog</span>(<span class="params">self</span>):</span><br><span class="line">        dialog = NewDateDialog(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 连接子窗口的内置信号与主窗口的槽函数</span></span><br><span class="line">        dialog.datetime_inner.dateTimeChanged.connect(<span class="variable language_">self</span>.deal_inner_slot)</span><br><span class="line">        <span class="comment"># 连接子窗口的自定义信号与主窗口的槽函数</span></span><br><span class="line">        dialog.Signal_OneParameter.connect(<span class="variable language_">self</span>.deal_emit_slot)</span><br><span class="line">        dialog.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_inner_slot</span>(<span class="params">self, date</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_inner.setText(date.toString())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deal_emit_slot</span>(<span class="params">self, dateStr</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit_emit.setText(dateStr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    form = MultiWindow2()</span><br><span class="line">    form.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="sykiC"></a></p><h2 id="开发第一个基于PyQt5的桌面应用">开发第一个基于PyQt5的桌面应用</h2><p>PyQt5的类都是以Q开头的。<br>开发时必须使用两个类：<strong>QApplication</strong>(这个代表整个应用程序)和<strong>QWidget</strong>(这个代表应用窗口,也可以用<strong>QMainWindow</strong>，<strong>QDialog</strong>代替，详情在下面有讲)。这两个类都在PyQt5.QtWidget这个模块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QWidget</span><br><span class="line"></span><br><span class="line"><span class="comment"># if语句的作用是，只有在first模块这里运行才会执行下面的语句，如果在其他模块中导入此模块不会执行下方的代码</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># sys.argv是用来获得命令行参数的，这里是创建一个程序名字叫app</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># 创建一个窗口</span></span><br><span class="line">    w = QWidget()</span><br><span class="line">    <span class="comment"># 设置窗口的大小</span></span><br><span class="line">    w.resize(<span class="number">400</span>, <span class="number">200</span>)</span><br><span class="line">    <span class="comment"># 设置窗口的刚开始出现的位置</span></span><br><span class="line">    w.move(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    <span class="comment"># 设置窗口的标题</span></span><br><span class="line">    w.setWindowTitle(<span class="string">&quot;第一个基于PyQt5的桌面应用&quot;</span>)</span><br><span class="line">    <span class="comment"># 显示窗口</span></span><br><span class="line">    w.show()</span><br><span class="line">    <span class="comment"># 进入程序的主循环、并通过exit函数确保主循环安全结束</span></span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647260436304-b8cb00c3-e9d9-4f4a-a54a-f889af641c1e.png#clientId=u88a69422-e7a2-4&amp;from=paste&amp;height=239&amp;id=emFxb&amp;originHeight=239&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6666&amp;status=done&amp;style=none&amp;taskId=u7237948c-a5ca-496f-943a-ba6c496f4c3&amp;title=&amp;width=416" alt="image.png"><br><a name="w5XG1"></a></p><h2 id="创建主窗口">创建主窗口</h2><p>有3种窗口<br>QMainWindow类生成的窗口自带菜单栏、工具栏和状态栏，中央区域还可以添加多个控件，常用来作为应用程序的主窗口<br>QWidget：所有的控件类都直接或者间接继承自 QWidget 类，它既可以用来制作窗口，也可以作为某个窗口上的控件。<br>QDialog：是对话窗口的基类，（对话窗口就是在主窗口里选择一个功能后，弹出的窗口，不关闭这个窗口是无法回到主窗口的。）没有菜单栏、工具栏、状态栏，但可以添加多个控件。<br>实际开发中，制作应用程序的主窗口可以用 QMainWindow 或者 QWdiget；制作一个提示信息的对话框就用 QDialog 或 QWidget；如果暂时无法决定，后续可能作为窗口，也可能作为控件，就选择 QWidget。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FirstMainWin</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(FirstMainWin, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;第一个主窗口应用&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置主窗口的大小</span></span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 设置状态栏</span></span><br><span class="line">        <span class="variable language_">self</span>.status = <span class="variable language_">self</span>.statusBar()</span><br><span class="line">        <span class="variable language_">self</span>.status.showMessage(<span class="string">&#x27;只存在5秒的消息&#x27;</span>, <span class="number">5000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># 设置软件窗口图标</span></span><br><span class="line">    app.setWindowIcon(QIcon(<span class="string">&#x27;./images/bool.png&#x27;</span>))</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = FirstMainWin()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：其中下面的标签栏只会显示5秒钟就消失了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647260467438-57201bd3-3ea3-4cfa-b1f0-a9ea73c2a830.png#clientId=u88a69422-e7a2-4&amp;from=paste&amp;height=339&amp;id=u7d386574&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9090&amp;status=done&amp;style=none&amp;taskId=u23ee744b-3886-451e-8b4f-34a4d562e7f&amp;title=&amp;width=416" alt="image.png"></p><p><a name="RtJ28"></a></p><h2 id="退出应用程序">退出应用程序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout, QMainWindow, QApplication, QPushButton, QWidget</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QuitApplication</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QuitApplication, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;退出应用程序&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加button</span></span><br><span class="line">        <span class="variable language_">self</span>.button1 = QPushButton(<span class="string">&#x27;退出应用程序&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将信号与槽关联</span></span><br><span class="line">        <span class="variable language_">self</span>.button1.clicked.connect(<span class="variable language_">self</span>.onClick_Button)</span><br><span class="line">        <span class="comment"># 创建一个水平布局</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 为布局添加按钮</span></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.button1)</span><br><span class="line">        <span class="comment"># 创建主框架</span></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        <span class="comment"># 将布局放到主框架上</span></span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line">        <span class="comment"># 使主框架设置在中央</span></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按钮单击的事件（自定义的槽）</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onClick_Button</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 得到发送信号的对象</span></span><br><span class="line">        sender = <span class="variable language_">self</span>.sender()</span><br><span class="line">        <span class="comment"># sender.text为发送信号的对象的名字</span></span><br><span class="line">        <span class="built_in">print</span>(sender.text() + <span class="string">&#x27;按钮被按下&#x27;</span>)</span><br><span class="line">        <span class="comment"># 获取APP实例对象</span></span><br><span class="line">        app = QApplication.instance()</span><br><span class="line">        <span class="comment"># 退出应用程序</span></span><br><span class="line">        app.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QuitApplication()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><a name="y7hpg"></a></p><h2 id="屏幕坐标系">屏幕坐标系</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout, QMainWindow, QApplication, QPushButton, QWidget</span><br><span class="line"></span><br><span class="line">app = QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onClicked_Button</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.x()=%d&quot;</span> % widget.x())  <span class="comment"># 250 窗口横坐标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.y()=%d&quot;</span> % widget.y())  <span class="comment"># 200 窗口纵坐标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.width()=%d&quot;</span> % widget.width())  <span class="comment"># 300 工作区宽度</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.height()=%d&quot;</span> % widget.height())  <span class="comment"># 240 工作区高度</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.geometry().x() = %d&quot;</span> % widget.geometry().x())  <span class="comment"># 251 工作区横坐标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.geometry().y() = %d&quot;</span> % widget.geometry().y())  <span class="comment"># 231 工作区纵坐标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.geometry().width()=%d&quot;</span> % widget.geometry().width())  <span class="comment"># 300 工作区高度</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.geometry().height()=%d&quot;</span> % widget.geometry().height())  <span class="comment"># 240 工作区宽度</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.frameGeometry().x() = %d&quot;</span> % widget.frameGeometry().x())  <span class="comment"># 250 窗口横坐标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.frameGeometry().y() = %d&quot;</span> % widget.frameGeometry().y())  <span class="comment"># 200 窗口纵坐标</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.frameGeometry().width()=%d&quot;</span> % widget.frameGeometry().width())  <span class="comment"># 302 窗口宽度</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;widget.frameGeometry().height()=%d&quot;</span> % widget.frameGeometry().height())  <span class="comment"># 272 窗口高度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">widget = QWidget()</span><br><span class="line">btn = QPushButton(widget)</span><br><span class="line">btn.setText(<span class="string">&quot;按钮&quot;</span>)</span><br><span class="line">btn.clicked.connect(onClicked_Button)</span><br><span class="line">btn.move(<span class="number">24</span>, <span class="number">52</span>)</span><br><span class="line">widget.resize(<span class="number">300</span>, <span class="number">240</span>)</span><br><span class="line">widget.move(<span class="number">250</span>, <span class="number">200</span>)</span><br><span class="line">widget.setWindowTitle(<span class="string">&quot;屏幕坐标系&quot;</span>)</span><br><span class="line">widget.show()</span><br><span class="line">sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><a name="wOr0n"></a></p><h2 id="设置窗口和应用图标">设置窗口和应用图标</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication, QMainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIcon</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">iconForm</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(iconForm, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置主窗口的标题</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;设置窗口图标&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置主窗口的xy轴坐标以及宽和高</span></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">250</span>, <span class="number">250</span>)</span><br><span class="line">        <span class="comment"># 设置窗口的图标</span></span><br><span class="line">        <span class="variable language_">self</span>.setWindowIcon(QIcon(<span class="string">&#x27;./images/bool.png&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = iconForm()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="g2cqN"></a></p><h2 id="为控件添加提示信息">为控件添加提示信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示提示消息</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QHBoxLayout, QMainWindow, QApplication, QPushButton, QWidget, QToolTip</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QFont</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TooltipForm</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TooltipForm, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置字体类型以及字号</span></span><br><span class="line">        QToolTip.setFont(QFont(<span class="string">&#x27;SansSerif&#x27;</span>, <span class="number">12</span>))</span><br><span class="line">        <span class="comment"># 设置提示信息，其中&lt;b&gt;&lt;\b&gt;之间的内容用黑体字</span></span><br><span class="line">        <span class="variable language_">self</span>.setToolTip(<span class="string">&quot;今天是&lt;b&gt;星期五&lt;\b&gt;&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;显示控件提示消息&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.button1 = QPushButton(<span class="string">&quot;我的按钮&quot;</span>)</span><br><span class="line">        <span class="comment"># 为按钮设置提示信息</span></span><br><span class="line">        <span class="variable language_">self</span>.button1.setToolTip(<span class="string">&quot;提示：这是一个按钮&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建一个水平布局</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 为布局添加按钮</span></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.button1)</span><br><span class="line">        <span class="comment"># 创建主框架</span></span><br><span class="line">        mainFrame = QWidget()</span><br><span class="line">        <span class="comment"># 将布局放到主框架上</span></span><br><span class="line">        mainFrame.setLayout(layout)</span><br><span class="line">        <span class="comment"># 使主框架设置在中央</span></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(mainFrame)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = TooltipForm()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647322741267-6b7b60af-033d-4746-9dec-0407eba4f7d3.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=335&amp;id=ucd4ec8a7&amp;originHeight=335&amp;originWidth=242&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10216&amp;status=done&amp;style=none&amp;taskId=u4d5d63a5-a24b-4234-bb1b-303450c6620&amp;title=&amp;width=242" alt="image.png"><br><a name="LMMkD"></a></p><h2 id="QLabel控件的基本用法">QLabel控件的基本用法</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647322924692-c67931a6-7c8c-4d3e-8f5a-b639e74ab496.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=560&amp;id=ud107c52b&amp;originHeight=560&amp;originWidth=542&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174991&amp;status=done&amp;style=none&amp;taskId=u2f246592-0605-46ca-b97e-f0fd5ffb03a&amp;title=&amp;width=542" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647323939979-08d2fb4f-60c5-44a8-80ce-14f699a7b35d.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=119&amp;id=ub74711d6&amp;originHeight=119&amp;originWidth=701&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88398&amp;status=done&amp;style=none&amp;taskId=ub6be560a-b934-42b0-9f15-d2c2dc67ad6&amp;title=&amp;width=701" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QVBoxLayout, QMainWindow, QApplication, QWidget, QLabel</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPalette, QPixmap</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLabelDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QLabelDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建标签</span></span><br><span class="line">        label1 = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        label2 = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        label3 = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        label4 = QLabel(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 为标签1添加文本信息</span></span><br><span class="line">        label1.setText(<span class="string">&quot;&lt;font color=yellow&gt;这是一个文本标签。&lt;/font&gt;&quot;</span>)</span><br><span class="line">        <span class="comment"># 使标签填充背景</span></span><br><span class="line">        label1.setAutoFillBackground(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 创建调色板</span></span><br><span class="line">        palette = QPalette()</span><br><span class="line">        <span class="comment"># 设置背景色,设置颜色需要用到Qt，Qt需要from PyQt5.QtCore import Qt</span></span><br><span class="line">        palette.setColor(QPalette.Window, Qt.blue)</span><br><span class="line">        <span class="comment"># 使标签1使用调色板的颜色</span></span><br><span class="line">        label1.setPalette(palette)</span><br><span class="line">        <span class="comment"># 设置对齐方式：(居中)</span></span><br><span class="line">        label1.setAlignment(Qt.AlignCenter)</span><br><span class="line">        <span class="comment"># 将标签2设置为超链接:超链接的写法：  a  href= 链接</span></span><br><span class="line">        label2.setText(<span class="string">&quot;&lt;a href=&#x27;#&#x27;&gt;欢迎使用Python GUI程序&lt;/a&gt;&quot;</span>)</span><br><span class="line">        <span class="comment"># 标签3为图片显示</span></span><br><span class="line">        <span class="comment"># 设置标签3为居中对齐</span></span><br><span class="line">        label3.setAlignment(Qt.AlignCenter)</span><br><span class="line">        <span class="comment"># 设置标签3的提示</span></span><br><span class="line">        label3.setToolTip(<span class="string">&#x27;这是一个图片标签&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置标签3的图片</span></span><br><span class="line">        label3.setPixmap(QPixmap(<span class="string">&quot;./images/bool.png&quot;</span>))</span><br><span class="line">        <span class="comment"># 为标签4设置扩展链接功能，为True时就允许跳转到超链接内容不连接槽函数，为False时就只连接槽函数</span></span><br><span class="line">        label4.setOpenExternalLinks(<span class="literal">True</span>)</span><br><span class="line">        label4.setText(<span class="string">&quot;&lt;a href=&#x27;https://wallhaven.cc&#x27;&gt;壁纸网站&lt;/a&gt;&quot;</span>)</span><br><span class="line">        <span class="comment"># 将标签4对齐方式设置为向右对齐</span></span><br><span class="line">        label4.setAlignment(Qt.AlignRight)</span><br><span class="line">        label4.setToolTip(<span class="string">&quot;这是一个超级链接&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个垂直布局内容为4个标签</span></span><br><span class="line">        vbox = QVBoxLayout()</span><br><span class="line">        vbox.addWidget(label1)</span><br><span class="line">        vbox.addWidget(label2)</span><br><span class="line">        vbox.addWidget(label3)</span><br><span class="line">        vbox.addWidget(label4)</span><br><span class="line">        <span class="comment"># 关联槽 linkHovered为滑动到时触发，linkActivated为点击时触发</span></span><br><span class="line">        label2.linkHovered.connect(<span class="variable language_">self</span>.linkHovered)</span><br><span class="line">        label4.linkActivated.connect(<span class="variable language_">self</span>.linkClicked)</span><br><span class="line">        <span class="comment"># 添加布局</span></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(vbox)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QLabel控件演示&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">linkHovered</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;鼠标滑动到了label2标签并触发了事件&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">linkClicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;鼠标点击了label4标签并触发了事件&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QLabelDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行效果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647332029683-3cccc7c1-4733-4589-9edc-2dbad23f3b93.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=321&amp;id=uf73d1243&amp;originHeight=321&amp;originWidth=238&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19629&amp;status=done&amp;style=none&amp;taskId=u105ac4f7-5915-4fde-a0eb-c9ca0fe473d&amp;title=&amp;width=238" alt="image.png"><br><a name="W5tbb"></a></p><h2 id="QLabel与伙伴控件">QLabel与伙伴控件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个对话框类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QlabelBuddy</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QlabelBuddy, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QLabel与伙伴控件&quot;</span>)</span><br><span class="line">        <span class="comment"># &amp;的作用是热键，使用窗口时按alt+n可以快速选中Name标签</span></span><br><span class="line">        nameLabel = QLabel(<span class="string">&#x27;&amp;Name&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 添加一个文本输入框</span></span><br><span class="line">        nameLineEdit = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 将nameLineEdit设置为nameLabel的伙伴控件</span></span><br><span class="line">        nameLabel.setBuddy(nameLineEdit)</span><br><span class="line"></span><br><span class="line">        passwordnameLabel = QLabel(<span class="string">&#x27;&amp;password&#x27;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        passwordnameLineEdit = QLineEdit(<span class="variable language_">self</span>)</span><br><span class="line">        passwordnameLabel.setBuddy(passwordnameLineEdit)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建按钮</span></span><br><span class="line">        btnOK = QPushButton(<span class="string">&quot;&amp;OK&quot;</span>)</span><br><span class="line">        btnCancel = QPushButton(<span class="string">&quot;&amp;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建栅格布局</span></span><br><span class="line">        mainLayout = QGridLayout(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># 设置栅格布局  addWidget后面的参数的意思： 第一个为控件名，第二个为创建的位置，数值为行列的下标，最后两个控制的是长度与宽度。</span></span><br><span class="line">        mainLayout.addWidget(nameLabel, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        mainLayout.addWidget(nameLineEdit, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        mainLayout.addWidget(passwordnameLabel, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        mainLayout.addWidget(passwordnameLineEdit, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        mainLayout.addWidget(btnOK, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">        mainLayout.addWidget(btnCancel, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QlabelBuddy()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647335276347-8744e246-c810-475d-a523-ff6582882290.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=136&amp;id=u744a9efa&amp;originHeight=136&amp;originWidth=248&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4084&amp;status=done&amp;style=none&amp;taskId=u73285f56-9388-41f6-bd13-f5a96779720&amp;title=&amp;width=248" alt="image.png"><br><a name="oWzUx"></a></p><h2 id="QLIneEdit">QLIneEdit</h2><p><a name="rFs3x"></a></p><h3 id="QLineEdit控件和回显模式">QLineEdit控件和回显模式</h3><p>QLineEdit控件上一节使用过，就是这个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647340548242-61d3ebb1-b041-4dc3-a45b-0a515ead59e8.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=70&amp;id=u8cef439b&amp;originHeight=70&amp;originWidth=241&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1263&amp;status=done&amp;style=none&amp;taskId=u2f912d74-e9d6-430d-b955-8295ec95e49&amp;title=&amp;width=241" alt="image.png">生成可编辑的文字框。<br>EchoMode回显模式<br>回显模式有四种：<br>1.Normal 就是正常的输入后显示输出<br>2.NoEcho 意思是输入后什么都不显示在屏幕上，但是机器能够读取到。<br>3.Password 意思是输入后以符号表示输入。<br>4.PasswordEchoOnEdit 意思是编辑时显示正常，不编辑时显示符号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLineEditEchoMode</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QLineEditEchoMode, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;文本输入框的回显模式&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建一个表单布局</span></span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line">        <span class="comment"># 创建4个可输入文本框</span></span><br><span class="line">        normalLineEdit = QLineEdit()</span><br><span class="line">        noEchoLineEdit = QLineEdit()</span><br><span class="line">        passworldLineEdit = QLineEdit()</span><br><span class="line">        passwordEchoOnEditLineEdit = QLineEdit()</span><br><span class="line">        <span class="comment"># 为表单布局添加文字和可输入文本框</span></span><br><span class="line">        formLayout.addRow(<span class="string">&quot;Normal&quot;</span>, normalLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&quot;NoEcho&quot;</span>, noEchoLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&quot;Passworld&quot;</span>, passworldLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&quot;PasswordEchoOnEdit&quot;</span>, passwordEchoOnEditLineEdit)</span><br><span class="line">        <span class="comment"># 为文本框添加提示信息</span></span><br><span class="line">        normalLineEdit.setPlaceholderText(<span class="string">&quot;Normal&quot;</span>)</span><br><span class="line">        noEchoLineEdit.setPlaceholderText(<span class="string">&quot;NoEcho&quot;</span>)</span><br><span class="line">        passworldLineEdit.setPlaceholderText(<span class="string">&quot;Password&quot;</span>)</span><br><span class="line">        passwordEchoOnEditLineEdit.setPlaceholderText(<span class="string">&quot;PasswordEchoOnEdit&quot;</span>)</span><br><span class="line">        <span class="comment"># 为文本框设置回显模式</span></span><br><span class="line">        normalLineEdit.setEchoMode(QLineEdit.Normal)</span><br><span class="line">        noEchoLineEdit.setEchoMode(QLineEdit.NoEcho)</span><br><span class="line">        passworldLineEdit.setEchoMode(QLineEdit.Password)</span><br><span class="line">        passwordEchoOnEditLineEdit.setEchoMode(QLineEdit.PasswordEchoOnEdit)</span><br><span class="line">        <span class="comment"># 赋予布局</span></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QLineEditEchoMode()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647344702540-17fd4432-be8d-40d7-9cae-6c9af0339174.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=159&amp;id=udbea8816&amp;originHeight=159&amp;originWidth=285&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9089&amp;status=done&amp;style=none&amp;taskId=u612440e5-7533-48d9-8b0d-adee25d86a7&amp;title=&amp;width=285" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647344718175-1c00274b-5146-4c63-ad43-c293a76f44f4.png#clientId=uf114e347-edf6-4&amp;from=paste&amp;height=159&amp;id=uce166ccf&amp;originHeight=159&amp;originWidth=285&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8596&amp;status=done&amp;style=none&amp;taskId=u90024915-b0c3-4a16-84d0-cf8c07a26e7&amp;title=&amp;width=285" alt="image.png"><br>其中passwordechoonedit是输入是为数字切换到其他框后就变成圆圈，noecho是已经输入了但是不显示在屏幕上<br><a name="l7K1J"></a></p><h3 id="限制QLineEdit控件的输入（校验器）">限制QLineEdit控件的输入（校验器）</h3><p>限制举例： 只能输入整数、浮点数或满足一定条件的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Validator翻译名字叫校验器，因此导入这三个分别是校验整型，模块，正则表达式的。</span></span><br><span class="line"><span class="comment"># QRegExp是正则表达式需要的</span></span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QIntValidator, QDoubleValidator, QRegExpValidator</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QRegExp</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLineEditValidator</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QLineEditValidator, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;校验器&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建表单布局</span></span><br><span class="line">        formLayout = QFormLayout()</span><br><span class="line">        <span class="comment"># 创建三个输入框</span></span><br><span class="line">        intLineEdit = QLineEdit()</span><br><span class="line">        doubleLineEdit = QLineEdit()</span><br><span class="line">        validatorLineEdit = QLineEdit()</span><br><span class="line">        <span class="comment"># 为布局添加控件</span></span><br><span class="line">        formLayout.addRow(<span class="string">&quot;整数类型&quot;</span>, intLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&quot;浮点类型&quot;</span>, doubleLineEdit)</span><br><span class="line">        formLayout.addRow(<span class="string">&quot;数字和字母&quot;</span>, validatorLineEdit)</span><br><span class="line">        <span class="comment"># 为输入框添加提示信息</span></span><br><span class="line">        intLineEdit.setPlaceholderText(<span class="string">&quot;整型&quot;</span>)</span><br><span class="line">        doubleLineEdit.setPlaceholderText(<span class="string">&quot;浮点型&quot;</span>)</span><br><span class="line">        validatorLineEdit.setPlaceholderText(<span class="string">&quot;字母和数字&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建校验器</span></span><br><span class="line">        <span class="comment"># 整数校验器 限制范围为1~99</span></span><br><span class="line">        intValidator = QIntValidator()</span><br><span class="line">        intValidator.setRange(<span class="number">1</span>, <span class="number">99</span>)</span><br><span class="line">        <span class="comment"># 浮点校验器 限制范围为-360~360</span></span><br><span class="line">        doubleValidator = QDoubleValidator()</span><br><span class="line">        doubleValidator.setRange(-<span class="number">360</span>, <span class="number">360</span>)</span><br><span class="line">        <span class="comment"># 设置浮点数显示模式为标准的模式</span></span><br><span class="line">        doubleValidator.setNotation(QDoubleValidator.StandardNotation)</span><br><span class="line">        <span class="comment"># 设置浮点数精度为2位</span></span><br><span class="line">        doubleValidator.setDecimals(<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 数字和字母校验器</span></span><br><span class="line">        <span class="comment"># reg为正则表达式</span></span><br><span class="line">        reg = QRegExp(<span class="string">&quot;[a-zA-Z0-9]+$&quot;</span>)</span><br><span class="line">        validator = QRegExpValidator()</span><br><span class="line">        validator.setRegExp(reg)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将校验器与输入框进行绑定</span></span><br><span class="line">        intLineEdit.setValidator(intValidator)</span><br><span class="line">        doubleLineEdit.setValidator(doubleValidator)</span><br><span class="line">        validatorLineEdit.setValidator(validator)</span><br><span class="line">        <span class="comment"># 设置布局</span></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(formLayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QLineEditValidator()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647605511430-c77497f0-0f6a-47cd-90af-80a1221ae564.png#clientId=ub4e90a3e-b8bb-4&amp;from=paste&amp;height=133&amp;id=u446c7ef2&amp;originHeight=133&amp;originWidth=237&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5380&amp;status=done&amp;style=none&amp;taskId=ub7dec920-03c5-4062-9f9e-16239c206fa&amp;title=&amp;width=237" alt="image.png"><br><a name="mHpQu"></a></p><h3 id="使用掩码限制QLineEdit控件的输入">使用掩码限制QLineEdit控件的输入</h3><p>字符含义<br>AASCII字母字符是必须输入的（A-Z，a-z）<br>aASCII字母字符是允许输入的，但不是必须输入的<br>NASCII字母字符是必须输入的（A-Z，a-z，0-9）<br>nASCII字母字符是允许输入的，但不是必须输入的<br>X任何字符都是必须输入<br>x任何字符都是允许输入的，但不是必须输入的<br>9ASCII数字字符是必须输入的（0-9）<br>0ASCII数字字符是允许输入的，但不是必须输入的<br>DASCII数字字符是必须输入的（1-9）<br>dASCII数字字符是允许输入的，但不是必须的（1-9）<br>#ASCII数字字符与加减字符是允许输入的，但不是必须的<br>H十六进制格式字符是必须输入的（A-F，a-f，0-9）<br>h十六进制格式字符允许输入，但不是必须的<br>B二进制格式字符是必须输入的（0,1）<br>b二进制格式字符是允许输入的，但不是必须的<br>&gt;所有字母字符都大写<br>&lt;所有字母字符都小写<br>！关闭大小写转换<br>\使用‘\’转义上面列出的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLIneEditMask</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QLIneEditMask, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;用掩码限制QLineEdit控件的输入&quot;</span>)</span><br><span class="line">        formlayout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        ipLineEdit = QLineEdit()</span><br><span class="line">        macLineEdit = QLineEdit()</span><br><span class="line">        dateLineEdit = QLineEdit()</span><br><span class="line">        licenseLineEdit = QLineEdit()</span><br><span class="line">        <span class="comment"># 为输入框设置掩码限制输入</span></span><br><span class="line">        <span class="comment"># 掩码中分号后面为当没有输入时默认的显示信息</span></span><br><span class="line">        ipLineEdit.setInputMask(<span class="string">&#x27;000.000.000.000;_&#x27;</span>)</span><br><span class="line">        macLineEdit.setInputMask(<span class="string">&#x27;HH:HH:HH:HH:HH:HH;_&#x27;</span>)</span><br><span class="line">        dateLineEdit.setInputMask(<span class="string">&#x27;0000-00-00&#x27;</span>)</span><br><span class="line">        licenseLineEdit.setInputMask(<span class="string">&#x27;&gt;AAAAA-AAAAA-AAAAA-AAAAA-AAAAA;#&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        formlayout.addRow(<span class="string">&#x27;数字掩码&#x27;</span>, ipLineEdit)</span><br><span class="line">        formlayout.addRow(<span class="string">&#x27;Mac掩码&#x27;</span>, macLineEdit)</span><br><span class="line">        formlayout.addRow(<span class="string">&#x27;日期掩码&#x27;</span>, dateLineEdit)</span><br><span class="line">        formlayout.addRow(<span class="string">&#x27;许可证掩码&#x27;</span>, licenseLineEdit)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(formlayout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QLIneEditMask()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647606809007-851ef42c-6a0f-4b9a-8e27-6a9c469ece23.png#clientId=ub4e90a3e-b8bb-4&amp;from=paste&amp;height=159&amp;id=udef11c6c&amp;originHeight=159&amp;originWidth=237&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7157&amp;status=done&amp;style=none&amp;taskId=uca9aa79d-2463-428d-9a3f-3a01c6df5cd&amp;title=&amp;width=237" alt="image.png"><br><a name="NpcZh"></a></p><h3 id="QLineEdit控件综合案例">QLineEdit控件综合案例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QLineEditDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QLineEditDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建输入框1并使用int校验器</span></span><br><span class="line">        edit1 = QLineEdit()</span><br><span class="line">        edit1.setValidator(QIntValidator())</span><br><span class="line">        edit1.setMaxLength(<span class="number">4</span>)  <span class="comment"># 设置最大位数</span></span><br><span class="line">        edit1.setAlignment(Qt.AlignRight)  <span class="comment"># 使输入框1的数值向右对齐</span></span><br><span class="line">        edit1.setFont(QFont(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">10</span>))</span><br><span class="line">        <span class="comment"># 创建输入框2并使用double校验器</span></span><br><span class="line">        <span class="comment"># 这个教程中有bug，实测不能设置数字范围以及精度，因此改了一下</span></span><br><span class="line">        <span class="comment"># edit2.setValidator(QDoubleValidator(0.99,99,2,)) # 为输入框2设置校验器并提供数字范围以及精度为2(教程中讲的有bug)</span></span><br><span class="line">        edit2 = QLineEdit()</span><br><span class="line">        doubleValidator = QDoubleValidator()</span><br><span class="line">        doubleValidator.setRange(<span class="number">0.99</span>, <span class="number">99</span>)</span><br><span class="line">        <span class="comment"># 设置浮点数显示模式为标准的模式</span></span><br><span class="line">        doubleValidator.setNotation(QDoubleValidator.StandardNotation)</span><br><span class="line">        <span class="comment"># 设置浮点数精度为2位</span></span><br><span class="line">        doubleValidator.setDecimals(<span class="number">2</span>)</span><br><span class="line">        edit2.setValidator(doubleValidator)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建输入框3并使用掩码校验</span></span><br><span class="line">        edit3 = QLineEdit()</span><br><span class="line">        edit3.setInputMask(<span class="string">&quot;99_9999_999999;#&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建输入框4并与槽连接</span></span><br><span class="line">        edit4 = QLineEdit()</span><br><span class="line">        edit4.textChanged.connect(<span class="variable language_">self</span>.textChanged)  <span class="comment"># 当文本改变的时候执行槽的方法</span></span><br><span class="line">        <span class="comment"># 创建输入框5并使用密码回显模式并与槽连接</span></span><br><span class="line">        edit5 = QLineEdit()</span><br><span class="line">        edit5.setEchoMode(QLineEdit.Password)</span><br><span class="line">        edit5.editingFinished.connect(<span class="variable language_">self</span>.enterPress)  <span class="comment"># 当文本输入时执行槽的方法</span></span><br><span class="line">        <span class="comment"># 创建输入框6并将输入框设置为只读模式</span></span><br><span class="line">        edit6 = QLineEdit()</span><br><span class="line">        edit6.setReadOnly(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 创建表单布局</span></span><br><span class="line">        formlayout = QFormLayout()</span><br><span class="line">        formlayout.addRow(<span class="string">&quot;整数校验&quot;</span>, edit1)</span><br><span class="line">        formlayout.addRow(<span class="string">&quot;浮点数校验&quot;</span>, edit2)</span><br><span class="line">        formlayout.addRow(<span class="string">&quot;Input Mask&quot;</span>, edit3)</span><br><span class="line">        formlayout.addRow(<span class="string">&quot;文本变化&quot;</span>, edit4)</span><br><span class="line">        formlayout.addRow(<span class="string">&quot;密码&quot;</span>, edit5)</span><br><span class="line">        formlayout.addRow(<span class="string">&quot;只读&quot;</span>, edit6)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(formlayout)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QLineEdit综合案例&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">textChanged</span>(<span class="params">self, text</span>):  <span class="comment"># 当文本输入内容发生变化时执行</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;输入的内容:&#x27;</span> + text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enterPress</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已输入值&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QLineEditDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647611094512-9f599869-0e7e-4a33-a625-2442899e5e4a.png#clientId=ub4e90a3e-b8bb-4&amp;from=paste&amp;height=213&amp;id=ub6644fee&amp;originHeight=213&amp;originWidth=254&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9618&amp;status=done&amp;style=none&amp;taskId=u8f3467d7-1b75-404e-8395-3b41320dd60&amp;title=&amp;width=254" alt="image.png"><br><a name="RQfPd"></a></p><h2 id="使用QTextEdit控件输入多行文本">使用QTextEdit控件输入多行文本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QTextEditDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QTextEditDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QTextEdit控件演示&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">320</span>)</span><br><span class="line">        <span class="variable language_">self</span>.textEdit = QTextEdit()</span><br><span class="line">        <span class="comment"># 设置按钮 因为需要绑定信号与槽，所以需要使用self.来使槽能够调用属性</span></span><br><span class="line">        buttonText = QPushButton(<span class="string">&quot;显示文本&quot;</span>)</span><br><span class="line">        buttonHTML = QPushButton(<span class="string">&quot;显示HTML&quot;</span>)</span><br><span class="line">        buttonToText = QPushButton(<span class="string">&quot;获取文本&quot;</span>)</span><br><span class="line">        buttonToHTML = QPushButton(<span class="string">&quot;获取HTML&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置垂直布局</span></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.textEdit)</span><br><span class="line">        layout.addWidget(buttonText)</span><br><span class="line">        layout.addWidget(buttonToText)</span><br><span class="line">        layout.addWidget(buttonHTML)</span><br><span class="line">        layout.addWidget(buttonToHTML)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">        <span class="comment"># 绑定信号与槽</span></span><br><span class="line">        buttonText.clicked.connect(<span class="variable language_">self</span>.onClick_ButtonText)</span><br><span class="line">        buttonToText.clicked.connect(<span class="variable language_">self</span>.onClick_ButtonToText)</span><br><span class="line">        buttonHTML.clicked.connect(<span class="variable language_">self</span>.onClick_ButtonHTML)</span><br><span class="line">        buttonToHTML.clicked.connect(<span class="variable language_">self</span>.onClick_ButtonToHTML)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onClick_ButtonText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置一般文本</span></span><br><span class="line">        <span class="variable language_">self</span>.textEdit.setPlainText(<span class="string">&#x27;Hello World,世界你好吗？&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onClick_ButtonToText</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取一般文本</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.textEdit.toPlainText())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onClick_ButtonHTML</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 设置html文本 颜色为蓝色 大小为5 输出Hello World</span></span><br><span class="line">        <span class="variable language_">self</span>.textEdit.setHtml(<span class="string">&#x27;&lt;font color=&quot;blue&quot; size=&quot;5&quot;&gt;Hello World&lt;/font&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onClick_ButtonToHTML</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 获取html文本</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.textEdit.toHtml())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QTextEditDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647666258725-6943fb4c-5e58-4542-99c9-589d525f5fcd.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=359&amp;id=u8eace0f4&amp;originHeight=359&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8597&amp;status=done&amp;style=none&amp;taskId=u721cac9b-2515-4023-9fbf-d307f09f146&amp;title=&amp;width=316" alt="image.png"><br><a name="zczSK"></a></p><h2 id="按钮控件">按钮控件</h2><p>按钮控件有<br>QPushButton 普通按钮<br>AToolButton 工具条按钮<br>QRadioButton 单选按钮<br>QCheckBox 复选框<br><a name="lM0uU"></a></p><h3 id="QPushButton">QPushButton</h3><p>使用lambda表达式，可以在连接信号与槽时，将信号自身的信息作为参数传递给槽</p><p>也可以通过sender来获得信号自身的信息（这样还不需要定义为成员变量了。）<br>举例：<br>self.button1.clicked.connect(lambda: self.whichButton(self.button1))改成<br>button1.clicked.connect(self.whichButton)<br>whichButton函数中通过<br># 得到发送信号的对象<br>sender = self.sender()<br># sender.text为发送信号的对象的名字<br>print(sender.text() + ‘按钮被按下’)<br>这里的from PyQt5.QtCore import *好像并没有什么用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QPushButtonDemo</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QPushButtonDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QPushButtonDemo&quot;</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        <span class="comment"># 创建按钮1,设置为成员变量是因为其他函数需要调用</span></span><br><span class="line">        <span class="variable language_">self</span>.button1 = QPushButton(<span class="string">&#x27;第一个按钮&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1.setText(<span class="string">&#x27;First Button1&#x27;</span>)</span><br><span class="line">        <span class="comment"># 设置按钮1的check属性</span></span><br><span class="line">        <span class="variable language_">self</span>.button1.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 设置按钮处于选中状态</span></span><br><span class="line">        <span class="variable language_">self</span>.button1.toggle()</span><br><span class="line">        <span class="comment"># 单击按钮时调用方法</span></span><br><span class="line">        <span class="variable language_">self</span>.button1.clicked.connect(<span class="variable language_">self</span>.buttonState)</span><br><span class="line">        <span class="comment"># 之所以使用lambda函数是因为clicked返回的是bool类型的，调用的方法使用的是字符串类型</span></span><br><span class="line">        <span class="comment"># 使用lamba函数可以将按钮的信息作为参数传给槽</span></span><br><span class="line">        <span class="variable language_">self</span>.button1.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.whichButton(<span class="variable language_">self</span>.button1))</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.button1)</span><br><span class="line">        <span class="comment"># 创建按钮2</span></span><br><span class="line">        button2 = QPushButton(<span class="string">&quot;图像按钮&quot;</span>)</span><br><span class="line">        <span class="comment"># 教程中设置图像按钮时是button2.setIcon(QIcon(QPixmap(&#x27;./images/bool.png&#x27;)))但是跟这个没什么区别</span></span><br><span class="line">        button2.setIcon(QIcon(<span class="string">&#x27;./images/bool.png&#x27;</span>))</span><br><span class="line">        button2.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.whichButton(button2))</span><br><span class="line">        layout.addWidget(button2)</span><br><span class="line">        <span class="comment"># 创建按钮3 将按钮3设置为不可用的按钮</span></span><br><span class="line">        button3 = QPushButton(<span class="string">&quot;不可用的按钮&quot;</span>)</span><br><span class="line">        button3.setEnabled(<span class="literal">False</span>)</span><br><span class="line">        layout.addWidget(button3)</span><br><span class="line">        <span class="comment"># 创建按钮4 将按钮4设置为默认按钮并设置热键通过alt+m可以快速调用</span></span><br><span class="line">        button4 = QPushButton(<span class="string">&quot;&amp;MyButton&quot;</span>)</span><br><span class="line">        button4.setDefault(<span class="literal">True</span>)</span><br><span class="line">        button4.clicked.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.whichButton(button4))</span><br><span class="line">        layout.addWidget(button4)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buttonState</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.button1.isChecked():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;按钮1已经被选中&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;按钮1未被选中&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">whichButton</span>(<span class="params">self, btn</span>):</span><br><span class="line">        <span class="comment"># btn为使用此方法的按钮信息，通过lambda函数传入</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;被单击的按钮是&lt;&quot;</span> + btn.text() + <span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QPushButtonDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647673938430-c31da309-2dbc-49d7-9ae6-960285bacd1e.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=339&amp;id=u63da6496&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11689&amp;status=done&amp;style=none&amp;taskId=ud11314c3-130e-4dbc-9c84-add94d8fdd1&amp;title=&amp;width=416" alt="image.png"><br><a name="L4I75"></a></p><h3 id="QRadioButton">QRadioButton</h3><p><br>单选按钮：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647674234735-309c9635-df44-4d07-ae00-724b5dc6f3f4.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=109&amp;id=uf21e659a&amp;originHeight=109&amp;originWidth=264&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35253&amp;status=done&amp;style=none&amp;taskId=u2c677f32-9091-4804-b6e5-e2a2f25159d&amp;title=&amp;width=264" alt="image.png"><br>单选按钮需要放在一个容器里，这样它们之间才能产生联系<br>这里from PyQt5.QtGui import *<br>from PyQt5.QtCore import *<br>也是没什么用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QRadioButtonDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QRadioButtonDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;QRadioButton&quot;</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line"></span><br><span class="line">        button1 = QRadioButton(<span class="string">&#x27;单选按钮1&#x27;</span>)</span><br><span class="line">        <span class="comment"># 将单选按钮1设置为默认选中</span></span><br><span class="line">        button1.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 选中单选按钮1时执行buttonState方法</span></span><br><span class="line">        button1.toggled.connect(<span class="variable language_">self</span>.buttonState)</span><br><span class="line">        layout.addWidget(button1)</span><br><span class="line"></span><br><span class="line">        button2 = QRadioButton(<span class="string">&quot;单选按钮2&quot;</span>)</span><br><span class="line">        button2.toggled.connect(<span class="variable language_">self</span>.buttonState)</span><br><span class="line">        layout.addWidget(button2)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buttonState</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 使用radioButton变量存放发送者的信息</span></span><br><span class="line">        radioButton = <span class="variable language_">self</span>.sender()</span><br><span class="line">        <span class="keyword">if</span> radioButton.isChecked() == <span class="literal">True</span> :</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&lt;&#x27;</span>+radioButton.text()+<span class="string">&#x27;&gt;被选中&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&lt;&#x27;</span>+radioButton.text()+<span class="string">&#x27;&gt;被取消选中状态&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QRadioButtonDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647677957043-dcced7dc-d016-48de-b23b-3a1502390c6f.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=77&amp;id=u541d5106&amp;originHeight=77&amp;originWidth=198&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3343&amp;status=done&amp;style=none&amp;taskId=u59331d03-e94a-4d3a-8503-bafa1179d7d&amp;title=&amp;width=198" alt="image.png"><br><a name="aBRqm"></a></p><h3 id="QCheckBox">QCheckBox</h3><p>QCheckBox控件有三种状态<br>未选中:0   半选中:1   选中:2<br>这三种状态可以通过checkState方法来获取到<br>要想拥有半选中状态需要为定义的复选框使用setTristate(True)方法.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QCheckBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QCheckBoxDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;复选框控件演示&quot;</span>)</span><br><span class="line">        <span class="comment"># 创建水平布局</span></span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        <span class="comment"># 创建复选框1</span></span><br><span class="line">        <span class="variable language_">self</span>.checkBox1 = QCheckBox(<span class="string">&#x27;复选框控件1&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.checkBox1.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.checkBox1.stateChanged.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.checkBoxState(<span class="variable language_">self</span>.checkBox1))</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.checkBox1)</span><br><span class="line">        <span class="comment"># 创建复选框2</span></span><br><span class="line">        <span class="variable language_">self</span>.checkBox2 = QCheckBox(<span class="string">&#x27;复选框控件2&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.checkBox2.stateChanged.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.checkBoxState(<span class="variable language_">self</span>.checkBox1))</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.checkBox2)</span><br><span class="line">        <span class="comment"># 创建复选框3</span></span><br><span class="line">        <span class="variable language_">self</span>.checkBox3 = QCheckBox(<span class="string">&#x27;半选中&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.checkBox3.setTristate(<span class="literal">True</span>)  <span class="comment"># 设置复选框3能够处于半选中状态</span></span><br><span class="line">        <span class="variable language_">self</span>.checkBox3.setCheckState(Qt.PartiallyChecked)  <span class="comment"># 设置复选框3初始为半选中状态</span></span><br><span class="line">        <span class="variable language_">self</span>.checkBox3.stateChanged.connect(<span class="keyword">lambda</span>: <span class="variable language_">self</span>.checkBoxState(<span class="variable language_">self</span>.checkBox1))</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.checkBox3)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkBoxState</span>(<span class="params">self, cb</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        输出三个复选框的的名字加上是否被选中加上选择的状态(0,1,2)</span></span><br><span class="line"><span class="string">        :param cb:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        check1Status = <span class="variable language_">self</span>.checkBox1.text() + <span class="string">&#x27;,isChecked=&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.checkBox1.isChecked()) + <span class="string">&#x27;,checkState=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            <span class="variable language_">self</span>.checkBox1.checkState()) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        check2Status = <span class="variable language_">self</span>.checkBox2.text() + <span class="string">&#x27;,isChecked=&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.checkBox2.isChecked()) + <span class="string">&#x27;,checkState=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            <span class="variable language_">self</span>.checkBox2.checkState()) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        check3Status = <span class="variable language_">self</span>.checkBox3.text() + <span class="string">&#x27;,isChecked=&#x27;</span> + <span class="built_in">str</span>(<span class="variable language_">self</span>.checkBox3.isChecked()) + <span class="string">&#x27;,checkState=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">            <span class="variable language_">self</span>.checkBox3.checkState()) + <span class="string">&#x27;\n&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(check1Status + check2Status + check3Status)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QCheckBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647681221592-9a1414c8-a22e-47b2-a459-bb8f2666f237.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=77&amp;id=u39dc109f&amp;originHeight=77&amp;originWidth=287&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4775&amp;status=done&amp;style=none&amp;taskId=u647fa383-42d1-4659-9ce6-5abf6573b6d&amp;title=&amp;width=287" alt="image.png"><br><a name="B2ijm"></a></p><h2 id="下拉列表控件-QComboBox">下拉列表控件(QComboBox)</h2><p>下拉列表属于这种<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647681358516-aa5cf54c-8d6a-476f-bb78-9d387bf4f12a.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=238&amp;id=u543a692b&amp;originHeight=238&amp;originWidth=365&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=89913&amp;status=done&amp;style=none&amp;taskId=udbe1e715-0b02-4a22-9d7b-afc5a11cdd7&amp;title=&amp;width=365" alt="image.png"><br>这节学习</p><ol><li>如何将列表项添加到QComboBox控件中</li><li>如何获取选中的列表项</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QCheckBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QCheckBoxDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;下拉列表控件演示&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">100</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&quot;请选择编程语言&quot;</span>)  <span class="comment"># 标签的默认文本</span></span><br><span class="line">        <span class="variable language_">self</span>.cb = QComboBox()  <span class="comment"># 创建下拉列表</span></span><br><span class="line">        <span class="comment"># 为列表添加单项</span></span><br><span class="line">        <span class="variable language_">self</span>.cb.addItem(<span class="string">&#x27;C++&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cb.addItem(<span class="string">&#x27;Python&#x27;</span>)</span><br><span class="line">        <span class="comment"># 为列表添加多项</span></span><br><span class="line">        <span class="variable language_">self</span>.cb.addItems([<span class="string">&#x27;Java&#x27;</span>, <span class="string">&#x27;C#&#x27;</span>, <span class="string">&#x27;Ruby&#x27;</span>])</span><br><span class="line">        <span class="comment"># 当列表选项改变时发出信号执行槽</span></span><br><span class="line">        <span class="variable language_">self</span>.cb.currentIndexChanged.connect(<span class="variable language_">self</span>.selectionChange)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.cb)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">selectionChange</span>(<span class="params">self, i</span>):  <span class="comment"># 默认传递两个参数,第二个i对应的是选项的索引值</span></span><br><span class="line">        <span class="comment"># 将标签设置为列表的当前选项文本并调整文字大小.</span></span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="variable language_">self</span>.cb.currentText())</span><br><span class="line">        <span class="variable language_">self</span>.label.adjustSize()</span><br><span class="line">        <span class="keyword">for</span> count <span class="keyword">in</span> <span class="built_in">range</span>(<span class="variable language_">self</span>.cb.count()):  <span class="comment"># 遍历输出列表中的选项序号与文本</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;item&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;=&#x27;</span> + <span class="variable language_">self</span>.cb.itemText(count))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;current index&#x27;</span>, i, <span class="string">&#x27;selection changed&#x27;</span>, <span class="variable language_">self</span>.cb.currentText())  <span class="comment"># 输出当前选择的选项文本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QCheckBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647687903514-08797613-40a3-454f-9b8d-d89cfbe3fde1.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=139&amp;id=ua94889d6&amp;originHeight=139&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4976&amp;status=done&amp;style=none&amp;taskId=u1a9cd5ed-5498-49d6-a7a0-b6ac308b95b&amp;title=&amp;width=316" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647687918905-ce231147-15a8-4117-9286-47f81ec969ea.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=196&amp;id=u400ca2fa&amp;originHeight=196&amp;originWidth=582&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21687&amp;status=done&amp;style=none&amp;taskId=u6341eb52-6fe5-4107-8794-30cbb9479aa&amp;title=&amp;width=582" alt="image.png"><br><a name="DQh0H"></a></p><h2 id="滑块控件-QSlider">滑块控件(QSlider)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QSliderDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QSliderDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;滑块控件演示&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">700</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;你好 PyQt5&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line"></span><br><span class="line">        slider = QSlider(Qt.Horizontal)  <span class="comment"># 创建水平滑块</span></span><br><span class="line">        slider.setMinimum(<span class="number">12</span>)  <span class="comment"># 设置最小值</span></span><br><span class="line">        slider.setMaximum(<span class="number">48</span>)  <span class="comment"># 设置最大值</span></span><br><span class="line">        slider.setSingleStep(<span class="number">3</span>)  <span class="comment"># 设置步长</span></span><br><span class="line">        slider.setValue(<span class="number">18</span>)  <span class="comment"># 设置初始值</span></span><br><span class="line">        slider.setTickPosition(QSlider.TicksBelow)  <span class="comment"># 设置刻度的位置在滑块下方</span></span><br><span class="line">        slider.setTickInterval(<span class="number">6</span>)  <span class="comment"># 设置刻度的间隔</span></span><br><span class="line">        slider.valueChanged.connect(<span class="variable language_">self</span>.valueChange)</span><br><span class="line">        layout.addWidget(slider)</span><br><span class="line"></span><br><span class="line">        slider1 = QSlider(Qt.Vertical)  <span class="comment"># 创建竖直滑块</span></span><br><span class="line">        slider1.setMinimum(<span class="number">10</span>)</span><br><span class="line">        slider1.setMaximum(<span class="number">60</span>)</span><br><span class="line">        slider1.setSingleStep(<span class="number">5</span>)</span><br><span class="line">        slider1.setValue(<span class="number">30</span>)</span><br><span class="line">        slider1.setTickPosition(QSlider.TicksLeft)  <span class="comment"># 设置竖直滑块的刻度的位置在滑块左边</span></span><br><span class="line">        slider1.setTickInterval(<span class="number">2</span>)  <span class="comment"># 设置刻度的间隔</span></span><br><span class="line">        slider1.valueChanged.connect(<span class="variable language_">self</span>.valueChange)</span><br><span class="line">        layout.addWidget(slider1)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">valueChange</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;当前值:%s&#x27;</span> % <span class="variable language_">self</span>.sender().value())</span><br><span class="line">        size = <span class="variable language_">self</span>.sender().value()</span><br><span class="line">        <span class="variable language_">self</span>.label.setFont(QFont(<span class="string">&#x27;Arial&#x27;</span>, size))  <span class="comment"># 通过滑块的值的改变来改变字体的大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QSliderDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果:<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647690764835-6ed3c0db-a0d7-419d-9efa-5f9cf623c992.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=739&amp;id=u8679cdc2&amp;originHeight=739&amp;originWidth=440&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22247&amp;status=done&amp;style=none&amp;taskId=u3dab22f9-0243-40bc-bcf5-14ecd6a967a&amp;title=&amp;width=440" alt="image.png">竖直滑块和水平滑块都能够更改Qlabel(你好PyQt5)的大小<br><a name="S5oPZ"></a></p><h2 id="计数器控件-QSpinBox-翻译结果是选值框">计数器控件(QSpinBox)(翻译结果是选值框)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QSpinBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QSpinBoxDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;滑块控件演示&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">100</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;当前值&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setAlignment(Qt.AlignCenter)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line"></span><br><span class="line">        spinbox = QSpinBox()  <span class="comment"># 创建计数器</span></span><br><span class="line">        spinbox.setValue(<span class="number">18</span>)  <span class="comment"># 设置初始值</span></span><br><span class="line">        spinbox.setRange(<span class="number">10</span>, <span class="number">999</span>)  <span class="comment"># 设置计数器的范围</span></span><br><span class="line">        spinbox.setSingleStep(<span class="number">3</span>)  <span class="comment"># 设置步长</span></span><br><span class="line">        spinbox.valueChanged.connect(<span class="variable language_">self</span>.valueChange)  <span class="comment"># 当计数器数值改变时执行valueChange方法</span></span><br><span class="line">        layout.addWidget(spinbox)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">valueChange</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(<span class="string">&#x27;当前值:%s&#x27;</span> % <span class="variable language_">self</span>.sender().value())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># app为软件类的对象</span></span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    <span class="comment"># main为窗口类的对象</span></span><br><span class="line">    main = QSpinBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果:<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647692991619-40d975a6-0d7b-4afd-a980-11bfc3498eb2.png#clientId=u28f4b901-98ba-4&amp;from=paste&amp;height=135&amp;id=ub775bccf&amp;originHeight=135&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4294&amp;status=done&amp;style=none&amp;taskId=u368719d1-cbb4-428e-ac2f-b3db56c2350&amp;title=&amp;width=316" alt="image.png"><br><a name="rlcBp"></a></p><h2 id="对话框">对话框</h2><p>对话框的分类:</p><ul><li>QMessageBox 消息对话框</li><li>QColorDialog 颜色对话框</li><li>QFileDialog 文件的打开与保存</li><li>QFontDialog 设置字体的对话框</li><li>QInputDialog 获取用户输入信息的对话框</li></ul><p>新建的对话框的类都需要继承QDialog<br>对话框的特点是没有菜单栏,对话框可以设置为执行时不能进行同一软件下对话框之外的操作<br><a name="aKlYl"></a></p><h3 id="使用QDialog显示通用对话框">使用QDialog显示通用对话框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QDialogDemo</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QDialogDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QDialog案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        button = QPushButton(<span class="variable language_">self</span>)</span><br><span class="line">        button.setText(<span class="string">&#x27;弹出对话框&#x27;</span>)</span><br><span class="line">        button.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        button.clicked.connect(<span class="variable language_">self</span>.showDialog)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showDialog</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 创建对话框</span></span><br><span class="line">        dialog = QDialog()</span><br><span class="line">        button = QPushButton(<span class="string">&#x27;确定&#x27;</span>, dialog)  <span class="comment"># 为dialog（对话框）添加按钮控件</span></span><br><span class="line">        button.clicked.connect(dialog.close)  <span class="comment"># 点击对话框的按钮时关闭对话框</span></span><br><span class="line">        button.move(<span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line">        dialog.setWindowTitle(<span class="string">&#x27;对话框&#x27;</span>)</span><br><span class="line">        dialog.setWindowModality(Qt.ApplicationModal)  <span class="comment"># 使出现对话框时，其他窗口不可使用</span></span><br><span class="line">        dialog.<span class="built_in">exec</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647741798473-304c1759-7878-4540-b88b-fd28dccff625.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=288&amp;id=uae488d51&amp;originHeight=288&amp;originWidth=537&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20282&amp;status=done&amp;style=none&amp;taskId=u624b1c3e-8214-4ca7-be9e-9b9676a9bc0&amp;title=&amp;width=537" alt="image.png"><br><a name="qzS3i"></a></p><h3 id="QMessageBox信息对话框">QMessageBox信息对话框</h3><p>看这个知乎链接<a href="https://zhuanlan.zhihu.com/p/29795495">https://zhuanlan.zhihu.com/p/29795495</a>比教程详细多了<br>有多种不同类型的对话框</p><ul><li>关于对话框   QMessageBox.about</li><li>错误对话框   QMessageBox.critical</li><li>警告对话框   QMessageBox.warning</li><li>提问对话框   QMessageBox.question</li><li>消息对话框   QMessageBox.information</li></ul><p>有两点差异</p><ol><li>显示的对话框图标可能不同</li><li>显示的按钮是不一样的（关于对话框一般显示1个按钮，其他对话框一般显示2个）</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QMessageBoxDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QMessageBoxDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QDialog案例&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">400</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        button1 = QPushButton()</span><br><span class="line">        button1.setText(<span class="string">&#x27;显示关于对话框&#x27;</span>)</span><br><span class="line">        button1.clicked.connect(<span class="variable language_">self</span>.showDialog)</span><br><span class="line"></span><br><span class="line">        button2 = QPushButton()</span><br><span class="line">        button2.setText(<span class="string">&#x27;显示消息对话框&#x27;</span>)</span><br><span class="line">        button2.clicked.connect(<span class="variable language_">self</span>.showDialog)</span><br><span class="line"></span><br><span class="line">        button3 = QPushButton()</span><br><span class="line">        button3.setText(<span class="string">&#x27;显示警告对话框&#x27;</span>)</span><br><span class="line">        button3.clicked.connect(<span class="variable language_">self</span>.showDialog)</span><br><span class="line"></span><br><span class="line">        button4 = QPushButton()</span><br><span class="line">        button4.setText(<span class="string">&#x27;显示错误对话框&#x27;</span>)</span><br><span class="line">        button4.clicked.connect(<span class="variable language_">self</span>.showDialog)</span><br><span class="line"></span><br><span class="line">        button5 = QPushButton()</span><br><span class="line">        button5.setText(<span class="string">&#x27;显示提问对话框&#x27;</span>)</span><br><span class="line">        button5.clicked.connect(<span class="variable language_">self</span>.showDialog)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(button1)</span><br><span class="line">        layout.addWidget(button2)</span><br><span class="line">        layout.addWidget(button3)</span><br><span class="line">        layout.addWidget(button4)</span><br><span class="line">        layout.addWidget(button5)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showDialog</span>(<span class="params">self</span>):</span><br><span class="line">        text = <span class="variable language_">self</span>.sender().text()</span><br><span class="line">        <span class="keyword">if</span> text == <span class="string">&quot;显示关于对话框&quot;</span>:</span><br><span class="line">            reply = QMessageBox.about(<span class="variable language_">self</span>, <span class="string">&#x27;关于&#x27;</span>, <span class="string">&#x27;这是一个关于对话框&#x27;</span>)  <span class="comment"># 弹出一个关于对话框，第二个参数为对话框的标题，第三个参数为对话框的内容</span></span><br><span class="line">            <span class="built_in">print</span>(reply == QMessageBox.Yes)</span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">&quot;显示消息对话框&quot;</span>:</span><br><span class="line">            QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&#x27;消息&#x27;</span>, <span class="string">&#x27;这是一个消息对话框&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)  <span class="comment"># 这个QMessageBox.Yes | QMessageBox.No意思是他有Yes和No按钮，最后的QMessageBox.Yes的意思是默认选择Yes</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">&quot;显示警告对话框&quot;</span>:</span><br><span class="line">            QMessageBox.warning(<span class="variable language_">self</span>, <span class="string">&#x27;警告&#x27;</span>, <span class="string">&#x27;这是一个警告对话框&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">&quot;显示错误对话框&quot;</span>:</span><br><span class="line">            QMessageBox.critical(<span class="variable language_">self</span>, <span class="string">&#x27;错误&#x27;</span>, <span class="string">&#x27;这是一个错误对话框&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> text == <span class="string">&quot;显示提问对话框&quot;</span>:</span><br><span class="line">            QMessageBox.question(<span class="variable language_">self</span>, <span class="string">&#x27;提问&#x27;</span>, <span class="string">&#x27;这是一个提问对话框&#x27;</span>, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QMessageBoxDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647744675657-38e04312-6d78-4736-b387-d94c844aae1b.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=439&amp;id=u6aa76e96&amp;originHeight=439&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12295&amp;status=done&amp;style=none&amp;taskId=uc7bf08e8-d755-4bf8-98c0-861c5f5aceb&amp;title=&amp;width=316" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647744665719-d11a4070-2e87-4aa0-b421-84de38f8ae24.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=124&amp;id=u4735fea4&amp;originHeight=124&amp;originWidth=167&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4122&amp;status=done&amp;style=none&amp;taskId=u9db41eee-e5b2-4889-801f-d3e7a5c3f4a&amp;title=&amp;width=167" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647744636330-1fa61872-5620-436f-b3d2-d3e6c3a79a6a.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=133&amp;id=u51e0392d&amp;originHeight=133&amp;originWidth=197&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5211&amp;status=done&amp;style=none&amp;taskId=u262e5d4d-6027-40cd-bc53-beb2c6d61bd&amp;title=&amp;width=197" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647744650821-aa9632f1-b2fd-4f5b-8e9d-3550d6fa9809.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=133&amp;id=ud1708086&amp;originHeight=133&amp;originWidth=197&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4795&amp;status=done&amp;style=none&amp;taskId=u46a9af48-89a3-4d14-acde-01f54d6b6c0&amp;title=&amp;width=197" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647744686758-64c78887-f3f0-42e6-848e-c87334ad87e9.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=133&amp;id=ud77c6196&amp;originHeight=133&amp;originWidth=197&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5094&amp;status=done&amp;style=none&amp;taskId=u030437d5-a97a-4e63-8a85-e5af483005a&amp;title=&amp;width=197" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647744691455-7d25c925-f16a-4ce9-bd0c-1bd5aa2a56ef.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=133&amp;id=u0e42e3ce&amp;originHeight=133&amp;originWidth=197&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5758&amp;status=done&amp;style=none&amp;taskId=u1145ecb2-47f8-40ec-a15b-47c94863224&amp;title=&amp;width=197" alt="image.png"><br><a name="cINki"></a></p><h3 id="QInputDialog输入对话框">QInputDialog输入对话框</h3><p>输入对话框，特点是允许显示带输入的控件，例如输入列表，输入文本，输入整数（计数器）</p><ul><li>QInputDialog.getItem 显示输入列表（QComboBox）</li><li>QInputDialog.getText 显示输入文本</li><li>QInputDialog.getInt 显示输入整数（计数器）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QInputDialogDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QInputDialogDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;输入对话框&#x27;</span>)</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line"></span><br><span class="line">        button1 = QPushButton(<span class="string">&#x27;获取列表中的选项&#x27;</span>)</span><br><span class="line">        button1.clicked.connect(<span class="variable language_">self</span>.getItem)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit1 = QLineEdit()</span><br><span class="line">        layout.addRow(button1, <span class="variable language_">self</span>.lineEdit1)</span><br><span class="line"></span><br><span class="line">        button2 = QPushButton(<span class="string">&#x27;获取字符串&#x27;</span>)</span><br><span class="line">        button2.clicked.connect(<span class="variable language_">self</span>.getText)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit2 = QLineEdit()</span><br><span class="line">        layout.addRow(button2, <span class="variable language_">self</span>.lineEdit2)</span><br><span class="line"></span><br><span class="line">        button3 = QPushButton(<span class="string">&#x27;获取整数&#x27;</span>)</span><br><span class="line">        button3.clicked.connect(<span class="variable language_">self</span>.getInt)</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit3 = QLineEdit()</span><br><span class="line">        layout.addRow(button3, <span class="variable language_">self</span>.lineEdit3)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getItem</span>(<span class="params">self</span>):</span><br><span class="line">        items = (<span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;C++&#x27;</span>, <span class="string">&#x27;Ruby&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Java&#x27;</span>,)</span><br><span class="line">        <span class="comment"># 使用两个数接收QInputDialog.getItem的返回值，因为这个方法的返回值是一个元组，下方的同理</span></span><br><span class="line">        item, ok = QInputDialog.getItem(<span class="variable language_">self</span>, <span class="string">&#x27;请选择编程语言&#x27;</span>, <span class="string">&#x27;语言列表&#x27;</span>, items)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> item:</span><br><span class="line">            <span class="variable language_">self</span>.lineEdit1.setText(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getText</span>(<span class="params">self</span>):</span><br><span class="line">        text, ok = QInputDialog.getText(<span class="variable language_">self</span>, <span class="string">&#x27;文本输入框&#x27;</span>, <span class="string">&#x27;输入姓名&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> text:</span><br><span class="line">            <span class="variable language_">self</span>.lineEdit2.setText(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getInt</span>(<span class="params">self</span>):</span><br><span class="line">        num, ok = QInputDialog.getInt(<span class="variable language_">self</span>, <span class="string">&#x27;整数输入框&#x27;</span>, <span class="string">&#x27;输入数字&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> ok <span class="keyword">and</span> num:</span><br><span class="line">            <span class="variable language_">self</span>.lineEdit3.setText(<span class="built_in">str</span>(num))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QInputDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647750584476-10029fd1-af45-455e-97b6-630f8623feac.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=146&amp;id=ud1c0fd75&amp;originHeight=146&amp;originWidth=457&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10933&amp;status=done&amp;style=none&amp;taskId=uf5b7730f-3662-4dcc-a46e-4211c2b423d&amp;title=&amp;width=457" alt="image.png"><br><a name="rC3c8"></a></p><h3 id="QFontDialog字体对话框">QFontDialog字体对话框</h3><p>字体对话框，显示字体列表，用于进行字体的设置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QFontDialogDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QFontDialogDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Font Dialog例子&#x27;</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.fontButton = QPushButton(<span class="string">&quot;选择字体&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fontButton.clicked.connect(<span class="variable language_">self</span>.getFont)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.fontButton)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.fontLabel = QLabel(<span class="string">&quot;Hello,测试字体例子&quot;</span>)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.fontLabel)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getFont</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># QFontDialog.getFont返回值为一个元组，第一个数为字体，第二个数为布尔类型。</span></span><br><span class="line">        font, ok = QFontDialog.getFont()</span><br><span class="line">        <span class="keyword">if</span> ok :</span><br><span class="line">            <span class="variable language_">self</span>.fontLabel.setFont(font)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QFontDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647752794901-d5404c4d-312d-4bbe-a346-00d47c7c056c.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=401&amp;id=u27b3dcfa&amp;originHeight=401&amp;originWidth=808&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33819&amp;status=done&amp;style=none&amp;taskId=u25642424-1e4f-4208-8b23-66e084eb255&amp;title=&amp;width=808" alt="image.png"><br><a name="GbkBU"></a></p><h3 id="QColorDialog-颜色对话框">QColorDialog 颜色对话框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QFontDialogDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QFontDialogDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Color Dialog例子&#x27;</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.colorButton = QPushButton(<span class="string">&#x27;设置字体颜色&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.colorButton.clicked.connect(<span class="variable language_">self</span>.getColor)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.colorButton)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.colorButton1 = QPushButton(<span class="string">&#x27;设置背景颜色&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.colorButton1.clicked.connect(<span class="variable language_">self</span>.getBGColor)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.colorButton1)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.colorlabel = QLabel(<span class="string">&#x27;Hello,测试颜色例子&#x27;</span>)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.colorlabel)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getColor</span>(<span class="params">self</span>):</span><br><span class="line">        color = QColorDialog.getColor()  <span class="comment"># color为弹出选择的颜色对话框</span></span><br><span class="line">        p = QPalette()  <span class="comment"># 创建调色板对象</span></span><br><span class="line">        p.setColor(QPalette.WindowText, color)  <span class="comment"># 调色板存取颜色对话框中选择的颜色并将其应用于文字</span></span><br><span class="line">        <span class="variable language_">self</span>.colorlabel.setPalette(p)  <span class="comment"># 设置调色板应用的控件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getBGColor</span>(<span class="params">self</span>):</span><br><span class="line">        color = QColorDialog.getColor()  <span class="comment"># color为弹出选择的颜色对话框</span></span><br><span class="line">        p = QPalette()  <span class="comment"># 创建调色板对象</span></span><br><span class="line">        p.setColor(QPalette.Window, color)  <span class="comment"># 调色板存取颜色对话框中选择的颜色并将其应用于控件背景</span></span><br><span class="line">        <span class="variable language_">self</span>.colorlabel.setAutoFillBackground(<span class="literal">True</span>)  <span class="comment"># 设置标签控件背景能够被设置颜色</span></span><br><span class="line">        <span class="variable language_">self</span>.colorlabel.setPalette(p)  <span class="comment"># 设置调色板应用的控件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QFontDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647759831393-b97cfeaf-fdde-47f9-923b-fd3ce889f0de.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=429&amp;id=u7f78f7c7&amp;originHeight=429&amp;originWidth=823&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=116263&amp;status=done&amp;style=none&amp;taskId=uc1526a67-6b59-4e06-b8a1-2cc085d14ef&amp;title=&amp;width=823" alt="image.png"><br><a name="IEm5r"></a></p><h3 id="QFileDialog-文件对话框">QFileDialog 文件对话框</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">QColorDialogDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(QColorDialogDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.button1 = QPushButton(<span class="string">&#x27;加载图片&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1.clicked.connect(<span class="variable language_">self</span>.loadImage)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.button1)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.imageLabel = QLabel()  <span class="comment"># 负责显示选择的图标文件</span></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.imageLabel)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.button2 = QPushButton(<span class="string">&#x27;加载文本文件&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button2.clicked.connect(<span class="variable language_">self</span>.loadText)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.button2)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.contents = QTextEdit()  <span class="comment"># 负责显示文本文件 显示多行文本</span></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.contents)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;文件对话框演示&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loadImage</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 其中&#x27;打开文件&#x27;设置的是文件框的窗口标题，&#x27;.&#x27;的意思是从默认初始路径为当前路径，第三个设置的是选用的文件格式（注释加格式）</span></span><br><span class="line">        <span class="comment"># getOpenFileName 返回的是两个值 第一个值为选择的路径，第二个值为文件格式（注释加格式）</span></span><br><span class="line">        frame, _ = QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&#x27;打开文件&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;图像文件(*.jpg *.png)&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.imageLabel.setPixmap(QPixmap(frame))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loadText</span>(<span class="params">self</span>):</span><br><span class="line">        dialog = QFileDialog()</span><br><span class="line">        dialog.setFileMode(QFileDialog.AnyFile)  <span class="comment"># 设置文件的打开格式</span></span><br><span class="line">        dialog.setFilter(QDir.Files)</span><br><span class="line">        <span class="keyword">if</span> dialog.<span class="built_in">exec</span>():  <span class="comment"># 显示对话框</span></span><br><span class="line">            filenames = dialog.selectedFiles()  </span><br><span class="line">            <span class="comment"># f指定的是选中的文件中的第一个，编码为utf-8，模式是r</span></span><br><span class="line">            f = <span class="built_in">open</span>(filenames[<span class="number">0</span>], encoding=<span class="string">&#x27;utf-8&#x27;</span>, mode=<span class="string">&#x27;r&#x27;</span>)  </span><br><span class="line">            <span class="comment"># 使用 with as 操作已经打开的文件对象（本身就是上下文管理器），</span></span><br><span class="line">            <span class="comment"># 无论期间是否抛出异常，都能保证 with as 语句执行完毕后自动关闭已经打开的文件。</span></span><br><span class="line">            <span class="keyword">with</span> f:  </span><br><span class="line">                data = f.read()</span><br><span class="line">                <span class="variable language_">self</span>.contents.setText(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = QColorDialogDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647764805681-988c3af1-4dee-4849-b1f9-476de90c6765.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=524&amp;id=u0157be5e&amp;originHeight=524&amp;originWidth=1269&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=83035&amp;status=done&amp;style=none&amp;taskId=u96b03aec-8283-4eba-b859-d107c944518&amp;title=&amp;width=1269" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647763166488-5027d991-4de4-4399-8478-cf23db7c262b.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=540&amp;id=ua15c1b1f&amp;originHeight=540&amp;originWidth=960&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42346&amp;status=done&amp;style=none&amp;taskId=ueb0bce77-bee5-4b3c-a04a-d376d706163&amp;title=&amp;width=960" alt="image.png"><br><a name="YgXBD"></a></p><h2 id="绘图API">绘图API</h2><p>绘图API包括</p><ul><li>文本</li><li>各种图形（直线，点，椭圆，弧，扇形，多边形等）</li><li>图像</li></ul><p>框架：<br>所有的方法都是在QPainter这个类中，因此框架就是<br>painter = QPainter（）</p><p>painter.bengin（）</p><p>绘制内容</p><p>painter.end（）</p><p>必须在painterEvent事件方法中绘制各种元素（当窗口放大和缩小时都需要重新绘制，窗口方法和缩小时都会自动调用painterEvent事件）<br><a name="CdmTU"></a></p><h3 id="DrawText在窗口上绘制文本">DrawText在窗口上绘制文本</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QApplication,QWidget</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> QPainter,QColor,QFont</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawText</span>(<span class="title class_ inherited__">QWidget</span>) :</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DrawText, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;在窗口上绘制文本&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">500</span>,<span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.text = <span class="string">&quot;Python从菜鸟到高手&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.begin(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(QColor(<span class="number">150</span>,<span class="number">43</span>,<span class="number">5</span>)) <span class="comment"># 设置画笔</span></span><br><span class="line">        painter.setFont(QFont(<span class="string">&#x27;SimSun&#x27;</span>,<span class="number">25</span>)) <span class="comment"># 设置字体</span></span><br><span class="line">        <span class="comment"># 实现绘画字体的方法，第一个为绘制区域，第二个为绘制的对齐模式（居中），第三个为绘制的内容</span></span><br><span class="line">        painter.drawText(event.rect(),Qt.AlignCenter,<span class="variable language_">self</span>.text)</span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawText()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647767314230-fcaa2055-526c-4024-90c9-e1f8c9ebec69.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=439&amp;id=u06ff6d5e&amp;originHeight=439&amp;originWidth=516&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15033&amp;status=done&amp;style=none&amp;taskId=u97b34c7e-c726-4916-bc66-77528dfe7ea&amp;title=&amp;width=516" alt="image.png"><br><a name="Y2Fsg"></a></p><h3 id="DrawPoint在窗口上绘制正弦曲线">DrawPoint在窗口上绘制正弦曲线</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrawPoints</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DrawPoints, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;在窗口上用像素点绘制两个周期的正弦曲线&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        painter = QPainter()</span><br><span class="line">        painter.begin(<span class="variable language_">self</span>)</span><br><span class="line">        painter.setPen(Qt.blue)</span><br><span class="line">        size = <span class="variable language_">self</span>.size()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):  <span class="comment"># 1000次循环，绘制1000个点</span></span><br><span class="line">            <span class="comment"># 计算绘图点的坐标（x,y）</span></span><br><span class="line">            x = <span class="built_in">int</span>(<span class="number">100</span> * (-<span class="number">1</span> + <span class="number">2.0</span> * i / <span class="number">1000</span>) + size.width() / <span class="number">2.0</span>)</span><br><span class="line">            y = <span class="built_in">int</span>(-<span class="number">50</span> * math.sin((x - size.width() / <span class="number">2.0</span>) * math.pi / <span class="number">50</span>) + size.height() / <span class="number">2.0</span>)</span><br><span class="line">            painter.drawPoint(x, y)</span><br><span class="line"></span><br><span class="line">        painter.end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrawPoints()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647780741419-ff4d4c54-22bb-4ac5-bbb4-65ee2fddd08a.png#clientId=u4e370659-cca8-4&amp;from=paste&amp;height=339&amp;id=u8768c8ad&amp;originHeight=339&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8291&amp;status=done&amp;style=none&amp;taskId=u42252bea-bea1-48fc-bf31-f58963d8333&amp;title=&amp;width=316" alt="image.png"><br><a name="CX3Jr"></a></p><h2 id="拖动和剪贴板操作">拖动和剪贴板操作</h2><p><strong>拖动：</strong><br>将A控件拖入到B： 将A设置为可拖动，将B设置为可以接收其他控件的拖动<br>A.setDragEnabled(True)<br>B.setAcceptDrops(True)<br>对于接收拖动的控件B需要两个事件<br>1.dragEnterEvent 将A拖到B触发<br>2.dropEvent         在B的区域放下A时触发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, math</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComboBox</span>(<span class="title class_ inherited__">QComboBox</span>) :  <span class="comment"># 定义为可以接收拖拽的下拉列表控件</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyComboBox, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setAcceptDrops(<span class="literal">True</span>)  <span class="comment">#  将此控件设置为可接受拖动</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dragEnterEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">if</span> e.mimeData().hasText():  <span class="comment"># 判断拖拽内容是否存在文本</span></span><br><span class="line">            e.accept()  <span class="comment"># 接收文本</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            e.ignore()  <span class="comment">#  忽略</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dropEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="variable language_">self</span>.addItem(e.mimeData().text()) <span class="comment"># 添加文本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DrapDropDemo</span>(<span class="title class_ inherited__">QWidget</span>) :</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DrapDropDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        formlayout = QFormLayout()</span><br><span class="line">        formlayout.addRow(QLabel(<span class="string">&quot;请将左边的文本拖拽到右边的下拉列表中&quot;</span>))</span><br><span class="line"></span><br><span class="line">        lineEdit = QLineEdit()</span><br><span class="line">        lineEdit.setDragEnabled(<span class="literal">True</span>)  <span class="comment"># 让文本输入框可被拖动</span></span><br><span class="line">        combo = MyComboBox()</span><br><span class="line">        formlayout.addRow(lineEdit,combo)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(formlayout)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;拖拽案例&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DrapDropDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure><p>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647932457628-30bd9cbe-0913-45b0-b306-6b8d99b5a4eb.png#clientId=u633cd362-899e-4&amp;from=paste&amp;height=129&amp;id=u7af95515&amp;originHeight=129&amp;originWidth=243&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5566&amp;status=done&amp;style=none&amp;taskId=u5184f5a0-ba43-49d2-af4e-3e28bbfe4df&amp;title=&amp;width=243" alt="image.png"><br><strong>使用剪贴板</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClipBoard</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ClipBoard, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        textCopyButton = QPushButton(<span class="string">&#x27;复制文本&#x27;</span>)</span><br><span class="line">        textPasteButton = QPushButton(<span class="string">&#x27;粘贴文本&#x27;</span>)</span><br><span class="line">        htmlCopyButton = QPushButton(<span class="string">&#x27;复制HTML&#x27;</span>)</span><br><span class="line">        htmlPasteButton = QPushButton(<span class="string">&#x27;粘贴HTML&#x27;</span>)</span><br><span class="line">        imageCopyButton = QPushButton(<span class="string">&#x27;复制图像&#x27;</span>)</span><br><span class="line">        imagePasteButton = QPushButton(<span class="string">&#x27;粘贴图像&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.textLabel = QLabel(<span class="string">&#x27;默认文本&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.imageLabel = QLabel()</span><br><span class="line">        <span class="variable language_">self</span>.imageLabel.setPixmap(QPixmap(<span class="string">&#x27;./images/bool.png&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        layout = QGridLayout()</span><br><span class="line">        layout.addWidget(textCopyButton, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(imageCopyButton, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(htmlCopyButton, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(textPasteButton, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(imagePasteButton, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">        layout.addWidget(htmlPasteButton, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.textLabel, <span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.imageLabel, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">        textCopyButton.clicked.connect(<span class="variable language_">self</span>.copyText)</span><br><span class="line">        textPasteButton.clicked.connect(<span class="variable language_">self</span>.pasteText)</span><br><span class="line">        htmlCopyButton.clicked.connect(<span class="variable language_">self</span>.copyHtml)</span><br><span class="line">        htmlPasteButton.clicked.connect(<span class="variable language_">self</span>.pasteHtml)</span><br><span class="line">        imageCopyButton.clicked.connect(<span class="variable language_">self</span>.copyImage)</span><br><span class="line">        imagePasteButton.clicked.connect(<span class="variable language_">self</span>.pasteImage)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;剪贴板演示&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyText</span>(<span class="params">self</span>):</span><br><span class="line">        clipboard = QApplication.clipboard()  <span class="comment"># 创建剪贴板对象</span></span><br><span class="line">        clipboard.setText(<span class="string">&#x27;hello world&#x27;</span>)  <span class="comment"># 设置剪贴板的内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pasteText</span>(<span class="params">self</span>):</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        <span class="variable language_">self</span>.textLabel.setText(clipboard.text())  <span class="comment"># 将剪贴板内容赋予文字标签</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyImage</span>(<span class="params">self</span>):</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setPixmap(QPixmap(<span class="string">&#x27;../images/bool.png&#x27;</span>)) <span class="comment"># 教程中是一个“.”但是只有是“..”才能正常复制粘贴</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pasteImage</span>(<span class="params">self</span>):</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        <span class="variable language_">self</span>.imageLabel.setPixmap(clipboard.pixmap())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copyHtml</span>(<span class="params">self</span>):</span><br><span class="line">        mimeData = QMimeData()  <span class="comment"># 创建特殊数据类型对象</span></span><br><span class="line">        mimeData.setHtml(<span class="string">&#x27;&lt;b&gt;Bold and &lt;font color=red&gt;Red&lt;/font&gt;&lt;/b&gt;&#x27;</span>)</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        clipboard.setMimeData(mimeData)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pasteHtml</span>(<span class="params">self</span>):</span><br><span class="line">        clipboard = QApplication.clipboard()</span><br><span class="line">        mimeData = clipboard.mimeData()</span><br><span class="line">        <span class="keyword">if</span> mimeData.hasHtml():</span><br><span class="line">            <span class="variable language_">self</span>.textLabel.setText(mimeData.html())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ClipBoard()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>** **<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647947572643-536a80a1-64ea-4e9e-a3e1-6c50bd743c4d.png#clientId=uee23daa4-d12d-4&amp;from=paste&amp;height=319&amp;id=u774e6f72&amp;originHeight=319&amp;originWidth=400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21320&amp;status=done&amp;style=none&amp;taskId=u438e5d60-6d62-4a70-9d74-ebadda2d29a&amp;title=&amp;width=400" alt="image.png"><br><a name="Zq2O3"></a></p><h2 id="菜单栏、工具栏和状态栏">菜单栏、工具栏和状态栏</h2><p><a name="Mkc71"></a></p><h3 id="菜单栏">菜单栏</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Menu</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Menu, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        bar = <span class="variable language_">self</span>.menuBar()  <span class="comment"># 得到窗口的菜单栏</span></span><br><span class="line">        file = bar.addMenu(<span class="string">&quot;文件&quot;</span>)  <span class="comment"># 为菜单栏添加菜单</span></span><br><span class="line">        file.addAction(<span class="string">&quot;新建&quot;</span>)  <span class="comment"># 为菜单添加子菜单</span></span><br><span class="line">        save = QAction(<span class="string">&quot;保存&quot;</span>, <span class="variable language_">self</span>)  <span class="comment"># 另一种创建菜单的方式，self代表的是当前窗口</span></span><br><span class="line">        save.setShortcut(<span class="string">&quot;Ctrl + S&quot;</span>)  <span class="comment"># 为菜单设置快捷键</span></span><br><span class="line">        file.addAction(save)  <span class="comment"># 将save设置为file的子菜单</span></span><br><span class="line">        save.triggered.connect(<span class="variable language_">self</span>.process)  <span class="comment"># 当触发save菜单时执行process</span></span><br><span class="line">        quit = QAction(<span class="string">&quot;退出&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        file.addAction(quit)</span><br><span class="line">        edit = bar.addMenu(<span class="string">&quot;Edit&quot;</span>)</span><br><span class="line">        edit.addAction(<span class="string">&quot;copy&quot;</span>)</span><br><span class="line">        edit.addAction(<span class="string">&quot;paste&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">self, a</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.sender().text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Menu()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647951107335-180f6843-86a1-4e80-87fe-d440fdf9f102.png#clientId=uee23daa4-d12d-4&amp;from=paste&amp;height=235&amp;id=u124d5d69&amp;originHeight=235&amp;originWidth=352&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7917&amp;status=done&amp;style=none&amp;taskId=udba9a388-9b50-4866-9a88-ac5f16f3601&amp;title=&amp;width=352" alt="image.png">点击保存后会执行自定义的process函数输出“保存”<br><a name="rDrsx"></a></p><h3 id="工具栏">工具栏</h3><p>工具栏是这样的<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647954376192-ec8a5f93-e51e-4a96-bac9-19ee9db06ec1.png#clientId=uee23daa4-d12d-4&amp;from=paste&amp;height=212&amp;id=u6b3eaf18&amp;originHeight=212&amp;originWidth=364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43881&amp;status=done&amp;style=none&amp;taskId=u441fd563-a655-4305-8806-300ead5c7a5&amp;title=&amp;width=364" alt="image.png"><br>工具栏有三种显示方式</p><ol><li>只显示图标</li><li>只显示文本</li><li>同时显示文本和图标</li></ol><p>ToolButtonIconOnly  只显示图标<br>ToolButtonTextOnly   只显示文本<br>ToolButtonTextBesideIcon   文本显示在图标旁边<br>ToolButtonTextUnderIcon   文本显示在图标下边<br>ToolButtonFollowStyle 默认模式，文本作为图标的提示出现<br>设置显示方式：<br>tb2.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ToolBar</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ToolBar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;工具栏例子&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        tb1 = <span class="variable language_">self</span>.addToolBar(<span class="string">&quot;File&quot;</span>)  <span class="comment"># 创建一个工具栏</span></span><br><span class="line">        new = QAction(QIcon(<span class="string">&#x27;../images/icon4.png&#x27;</span>), <span class="string">&quot;new&quot;</span>, <span class="variable language_">self</span>)  <span class="comment"># 为工具栏添加工具，第一个参数为图标，第二个参数为文本</span></span><br><span class="line">        tb1.addAction(new)  <span class="comment"># 将new工具添加到工具栏（tb1）上</span></span><br><span class="line">        <span class="built_in">open</span> = QAction(QIcon(<span class="string">&#x27;../images/icon1.png&#x27;</span>), <span class="string">&quot;open&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        tb1.addAction(<span class="built_in">open</span>)</span><br><span class="line">        save = QAction(QIcon(<span class="string">&#x27;../images/icon2.png&#x27;</span>), <span class="string">&quot;save&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        tb1.addAction(save)</span><br><span class="line"></span><br><span class="line">        tb2 = <span class="variable language_">self</span>.addToolBar(<span class="string">&quot;File1&quot;</span>)  <span class="comment"># 创建第二个工具栏</span></span><br><span class="line">        new1 = QAction(QIcon(<span class="string">&#x27;../images/icon3.png&#x27;</span>), <span class="string">&quot;新建&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        tb2.addAction(new1)</span><br><span class="line"></span><br><span class="line">        tb2.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)  <span class="comment"># 设置工具的显示方式（针对图标和文本）</span></span><br><span class="line">        tb1.actionTriggered.connect(<span class="variable language_">self</span>.toolbtnpressed)  <span class="comment"># 当触发工具时执行函数</span></span><br><span class="line">        tb2.actionTriggered.connect(<span class="variable language_">self</span>.toolbtnpressed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolbtnpressed</span>(<span class="params">self, a</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;按下的工具栏按钮是&quot;</span>, a.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ToolBar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1647955724563-f8a2fdab-2a6d-4136-99fb-aafb29329646.png#clientId=uee23daa4-d12d-4&amp;from=paste&amp;height=244&amp;id=u162996e1&amp;originHeight=244&amp;originWidth=503&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17762&amp;status=done&amp;style=none&amp;taskId=uad09a1e2-830c-437a-9bd7-a677711b366&amp;title=&amp;width=503" alt="image.png"><br><a name="ePggH"></a></p><h3 id="状态栏">状态栏</h3><p>状态栏是在窗口下方用来显示状态文本信息的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StatusBar</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(StatusBar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;状态栏演示&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        bar = <span class="variable language_">self</span>.menuBar()</span><br><span class="line">        file = bar.addMenu(<span class="string">&quot;File&quot;</span>)</span><br><span class="line">        file.addAction(<span class="string">&quot;show&quot;</span>)</span><br><span class="line">        file.triggered.connect(<span class="variable language_">self</span>.processTrigger)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(QTextEdit())  <span class="comment"># 设置中心控件为文本框</span></span><br><span class="line">        <span class="variable language_">self</span>.statusBar = QStatusBar()  <span class="comment"># 创建状态栏</span></span><br><span class="line">        <span class="variable language_">self</span>.setStatusBar(<span class="variable language_">self</span>.statusBar)  <span class="comment"># 设置状态栏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">processTrigger</span>(<span class="params">self, q</span>):</span><br><span class="line">        <span class="keyword">if</span> q.text() == <span class="string">&quot;show&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.statusBar.showMessage(q.text() + <span class="string">&#x27;菜单被点击了&#x27;</span>, <span class="number">5000</span>)  <span class="comment"># 设置状态栏的显示文本和时间（5s）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = StatusBar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648001233589-16f827ad-d8a8-4bbc-9284-0f6b8ee67b76.png#clientId=uf7da44c7-654a-4&amp;from=paste&amp;height=239&amp;id=u712c45b1&amp;originHeight=239&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7525&amp;status=done&amp;style=none&amp;taskId=uad0fca6d-7940-4c86-933e-a9408d596bb&amp;title=&amp;width=316" alt="image.png"><br><a name="Wc45g"></a></p><h2 id="表格布局">表格布局</h2><p><a name="E7ejM"></a></p><h3 id="QTableView控件-显示二维表数据">QTableView控件 显示二维表数据</h3><p><strong>显示二维表数据</strong><br>MCV数据处理方法： <br>M:Model   V: Viewer  C: Controller<br>将每个信息都分开创建再联系到一起，目的是将后端的数据和前端页面的耦合度降低，使一个数据可以被多次使用</p><p>声明表格模型，创建表格的首行标题，设置表格的数据，声明表格控件，关联表格控件与模型，最终将表格控件添加到布局中。<br><strong>总而言之就是根据数据创建模型，控件由模型构成。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TableView</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableView, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QTableView表格视图控件演示&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">500</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.model = QStandardItemModel(<span class="number">4</span>, <span class="number">3</span>)  <span class="comment"># 设置表格的行列</span></span><br><span class="line">        <span class="variable language_">self</span>.model.setHorizontalHeaderLabels([<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>])  <span class="comment"># 设置水平标题</span></span><br><span class="line">        <span class="variable language_">self</span>.tableview = QTableView()  <span class="comment"># 创建表格视图控件</span></span><br><span class="line">        <span class="variable language_">self</span>.tableview.setModel(<span class="variable language_">self</span>.model)  <span class="comment"># 关联表格视图控件和表格</span></span><br><span class="line"></span><br><span class="line">        item11 = QStandardItem(<span class="string">&#x27;10&#x27;</span>)  <span class="comment"># 创建数据</span></span><br><span class="line">        item12 = QStandardItem(<span class="string">&#x27;雷神&#x27;</span>)</span><br><span class="line">        item13 = QStandardItem(<span class="string">&#x27;2000&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.model.setItem(<span class="number">0</span>, <span class="number">0</span>, item11)  <span class="comment"># 关联数据与表格</span></span><br><span class="line">        <span class="variable language_">self</span>.model.setItem(<span class="number">0</span>, <span class="number">1</span>, item12)</span><br><span class="line">        <span class="variable language_">self</span>.model.setItem(<span class="number">0</span>, <span class="number">2</span>, item13)</span><br><span class="line"></span><br><span class="line">        item31 = QStandardItem(<span class="string">&#x27;30&#x27;</span>)  <span class="comment"># 创建数据</span></span><br><span class="line">        item32 = QStandardItem(<span class="string">&#x27;死亡女神&#x27;</span>)</span><br><span class="line">        item33 = QStandardItem(<span class="string">&#x27;3000&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.model.setItem(<span class="number">2</span>, <span class="number">0</span>, item31)  <span class="comment"># 关联数据与表格</span></span><br><span class="line">        <span class="variable language_">self</span>.model.setItem(<span class="number">2</span>, <span class="number">1</span>, item32)</span><br><span class="line">        <span class="variable language_">self</span>.model.setItem(<span class="number">2</span>, <span class="number">2</span>, item33)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.tableview)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = TableView()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648040018431-eb8dca1f-5f75-4747-bfa5-1d02f38cf801.png#clientId=ub98e5d78-2f47-4&amp;from=paste&amp;height=339&amp;id=u82cedebe&amp;originHeight=339&amp;originWidth=516&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12172&amp;status=done&amp;style=none&amp;taskId=uaccca19f-8001-460b-8834-5c23336027b&amp;title=&amp;width=516" alt="image.png"><br><a name="pOArw"></a></p><h3 id="QTableWidget-扩展的表格控件">QTableWidget 扩展的表格控件</h3><p>QTableWidget是QTableView的子类，相比父类添加了其他方法<br>每一个Cell（单元格）是一个QTableWidgetItem</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TableWidgetDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableWidgetDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QTableWidget演示&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">430</span>, <span class="number">230</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        tablewidget = QTableWidget()</span><br><span class="line">        tablewidget.setRowCount(<span class="number">4</span>)  <span class="comment"># 设置表格行数</span></span><br><span class="line">        tablewidget.setColumnCount(<span class="number">3</span>)  <span class="comment"># 设置表格列数</span></span><br><span class="line"></span><br><span class="line">        layout.addWidget(tablewidget)</span><br><span class="line"></span><br><span class="line">        tablewidget.setHorizontalHeaderLabels([<span class="string">&#x27;姓名&#x27;</span>, <span class="string">&#x27;年龄&#x27;</span>, <span class="string">&#x27;籍贯&#x27;</span>])  <span class="comment"># 设置水平标题</span></span><br><span class="line">        nameItem = QTableWidgetItem(<span class="string">&#x27;小明&#x27;</span>)  <span class="comment"># 创建表格的项</span></span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>, <span class="number">0</span>, nameItem)  <span class="comment"># 将项添加到表格中</span></span><br><span class="line">        ageItem = QTableWidgetItem(<span class="string">&#x27;24&#x27;</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>, <span class="number">1</span>, ageItem)</span><br><span class="line">        jgItem = QTableWidgetItem(<span class="string">&#x27;北京&#x27;</span>)</span><br><span class="line">        tablewidget.setItem(<span class="number">0</span>, <span class="number">2</span>, jgItem)</span><br><span class="line">        <span class="comment"># 设置表格为禁止编辑</span></span><br><span class="line">        tablewidget.setEditTriggers(QAbstractItemView.NoEditTriggers)</span><br><span class="line">        <span class="comment"># 是选择表格项时是一行一行的选择的</span></span><br><span class="line">        tablewidget.setSelectionBehavior(QAbstractItemView.SelectRows)</span><br><span class="line">        <span class="comment"># 设置表格的行与列的大小是根据项的内容自动匹配的</span></span><br><span class="line">        tablewidget.resizeColumnsToContents()</span><br><span class="line">        tablewidget.resizeRowsToContents()</span><br><span class="line">        <span class="comment"># 设置表格的水平标题与垂直标题不可见</span></span><br><span class="line">        tablewidget.verticalHeader().setVisible(<span class="literal">False</span>)</span><br><span class="line">        <span class="comment"># tablewidget.horizontalHeader().setVisible(False)</span></span><br><span class="line">        <span class="comment"># 设置表格的垂直标题</span></span><br><span class="line">        tablewidget.setVerticalHeaderLabels([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">        <span class="comment"># 隐藏表格线</span></span><br><span class="line">        tablewidget.setShowGrid(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = TableWidgetDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648088448877-2b967c1f-088f-4b00-87ba-905c7e704b6c.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=269&amp;id=ub36e29fc&amp;originHeight=269&amp;originWidth=446&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10326&amp;status=done&amp;style=none&amp;taskId=uc4134548-8c79-4a2b-93c1-b23e92557b7&amp;title=&amp;width=446" alt="image.png"><br><a name="k0eYh"></a></p><h3 id="QListView控件-显示列数据">QListView控件  显示列数据</h3><p>先声明列数据控件，再声明列数据模型，然后声明列数据，然后将列数据与列数据模型关联起来，然后再把列数据控件与列数据模型关联起来。最终将列数据控件添加到布局中。<br><strong>总而言之就是根据数据创建模型，控件由模型构成。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListViewDemo</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ListViewDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QListView 例子&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">270</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        listview = QListView()  <span class="comment"># 创建列数据控件</span></span><br><span class="line">        listModel = QStringListModel()  <span class="comment"># 创建列数据模型</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">list</span> = [<span class="string">&#x27;列表项1&#x27;</span>, <span class="string">&#x27;列表项2&#x27;</span>, <span class="string">&#x27;列表项3&#x27;</span>]</span><br><span class="line">        listModel.setStringList(<span class="variable language_">self</span>.<span class="built_in">list</span>)  <span class="comment"># 关联模型与数据</span></span><br><span class="line">        listview.setModel(listModel)  <span class="comment"># 关联控件和模型</span></span><br><span class="line">        listview.clicked.connect(<span class="variable language_">self</span>.clicked)</span><br><span class="line">        layout.addWidget(listview)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clicked</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="comment"># 输出一个信息框，第一个意思是信息框属于QWidget类型，第二个设置信息框的标题，第三个为信息</span></span><br><span class="line">        QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&#x27;QListView&#x27;</span>, <span class="string">&#x27;您选择了:&#x27;</span> + <span class="variable language_">self</span>.<span class="built_in">list</span>[item.row()])  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ListViewDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648041209428-4e27352f-2c72-494a-9d69-b8650be86ec6.png#clientId=ub98e5d78-2f47-4&amp;from=paste&amp;height=305&amp;id=u356e8527&amp;originHeight=305&amp;originWidth=302&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13309&amp;status=done&amp;style=none&amp;taskId=u98e194b6-3567-4284-b130-64c001c433e&amp;title=&amp;width=302" alt="image.png"><br><a name="tPESG"></a></p><h3 id="QListWidget-扩展的列表控件">QListWidget 扩展的列表控件</h3><p>QListWidget是QListView的子类<br>子类在父类的基础上添加了很多API</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListWidgetDemo</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(ListWidgetDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;QListWidget 例子&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">270</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.listwidget = QListWidget()  <span class="comment"># 创建ListWedget控件的实例</span></span><br><span class="line">        <span class="variable language_">self</span>.listwidget.addItem(<span class="string">&#x27;item1&#x27;</span>)  <span class="comment"># 直接为实例添加数据</span></span><br><span class="line">        <span class="variable language_">self</span>.listwidget.addItem(<span class="string">&#x27;item2&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listwidget.addItem(<span class="string">&#x27;item3&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listwidget.addItem(<span class="string">&#x27;item4&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listwidget.addItem(<span class="string">&#x27;item5&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listwidget.itemClicked.connect(<span class="variable language_">self</span>.clicked)</span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(<span class="variable language_">self</span>.listwidget)  <span class="comment"># 将列表控件设置为中心控件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clicked</span>(<span class="params">self, Index</span>):</span><br><span class="line">        QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&#x27;QListWidget&#x27;</span>, <span class="string">&#x27;您选择了：&#x27;</span> + <span class="variable language_">self</span>.listwidget.item(<span class="variable language_">self</span>.listwidget.row(Index)).text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ListWidgetDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648043406674-cdbcc6c4-ead8-49a3-85fd-d9c10552dbfa.png#clientId=ub98e5d78-2f47-4&amp;from=paste&amp;height=309&amp;id=u606a7692&amp;originHeight=309&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13411&amp;status=done&amp;style=none&amp;taskId=u4ee368ec-57ac-4c52-ae47-8af03e38aa3&amp;title=&amp;width=316" alt="image.png"><br><a name="H200e"></a></p><h2 id="容器控件">容器控件</h2><p><a name="ct1m0"></a></p><h3 id="QTabWidget选项卡控件">QTabWidget选项卡控件</h3><p>QTabWidget被继承后，可以在QTabWidget容器中添加多个tab（选项卡），然后可以为不同选项卡设置不同的窗口。<br>选项卡控件介绍：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648089012732-a45c4cea-9eca-4fc0-ab6a-362765e8de93.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=704&amp;id=ud9df96e9&amp;originHeight=704&amp;originWidth=924&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=181751&amp;status=done&amp;style=none&amp;taskId=uf5f5d812-7091-43f6-a283-5fbbbce2626&amp;title=&amp;width=924" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TabWidgetDemo</span>(<span class="title class_ inherited__">QTabWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TabWidgetDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;选项卡控件：QTabWidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        <span class="comment"># 创建选项卡窗口</span></span><br><span class="line">        <span class="variable language_">self</span>.tab1 = QWidget()</span><br><span class="line">        <span class="variable language_">self</span>.tab2 = QWidget()</span><br><span class="line">        <span class="variable language_">self</span>.tab3 = QWidget()</span><br><span class="line">        <span class="comment"># 关联窗口和选项卡</span></span><br><span class="line">        <span class="variable language_">self</span>.addTab(<span class="variable language_">self</span>.tab1, <span class="string">&quot;选项卡1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.addTab(<span class="variable language_">self</span>.tab2, <span class="string">&quot;选项卡2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.addTab(<span class="variable language_">self</span>.tab3, <span class="string">&quot;选项卡3&quot;</span>)</span><br><span class="line">        <span class="comment"># 设置窗口的属性</span></span><br><span class="line">        <span class="variable language_">self</span>.tab1UI()</span><br><span class="line">        <span class="variable language_">self</span>.tab2UI()</span><br><span class="line">        <span class="variable language_">self</span>.tab3UI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tab1UI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        layout.addRow(<span class="string">&#x27;姓名&#x27;</span>, QLineEdit())</span><br><span class="line">        layout.addRow(<span class="string">&#x27;地址&#x27;</span>, QLineEdit())</span><br><span class="line">        <span class="variable language_">self</span>.setTabText(<span class="number">0</span>, <span class="string">&#x27;联系方式&#x27;</span>)  <span class="comment"># 设置下标为0的选项卡的标题</span></span><br><span class="line">        <span class="variable language_">self</span>.tab1.setLayout(layout)  <span class="comment"># 设置选项卡的布局</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tab2UI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        sex = QHBoxLayout()</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">&#x27;男&#x27;</span>))</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">        layout.addRow(QLabel(<span class="string">&#x27;性别&#x27;</span>), sex)</span><br><span class="line">        layout.addRow(<span class="string">&#x27;生日&#x27;</span>, QLineEdit())</span><br><span class="line">        <span class="variable language_">self</span>.setTabText(<span class="number">1</span>, <span class="string">&#x27;个人详细信息&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tab2.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tab3UI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(QLabel(<span class="string">&#x27;科目&#x27;</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">&#x27;物理&#x27;</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">&#x27;高数&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.setTabText(<span class="number">2</span>, <span class="string">&quot;教育程度&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tab3.setLayout(layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = TabWidgetDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648090800485-7283343c-7ae1-4146-b441-a4956681fa47.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=339&amp;id=u717d3c54&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8817&amp;status=done&amp;style=none&amp;taskId=u58c21134-62b8-4cac-b572-eefbf0be8c9&amp;title=&amp;width=416" alt="image.png"><br><a name="HPQ5l"></a></p><h3 id="QStackedWidget-堆栈窗口控件">QStackedWidget 堆栈窗口控件</h3><p>堆栈窗口控件就是用来存放多个窗口的容器，然后可以通过setCurrentIndex(index)方法来显示对应序号的窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StackedExample</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(StackedExample, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">50</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;堆栈窗口控件：QStackedWidget&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">list</span> = QListWidget()</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">list</span>.insertItem(<span class="number">0</span>, <span class="string">&#x27;联系方式&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">list</span>.insertItem(<span class="number">1</span>, <span class="string">&#x27;个人信息&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">list</span>.insertItem(<span class="number">2</span>, <span class="string">&#x27;教育程度&#x27;</span>)</span><br><span class="line">        <span class="comment"># 创建三个用来堆栈的窗口</span></span><br><span class="line">        <span class="variable language_">self</span>.stack1 = QWidget()</span><br><span class="line">        <span class="variable language_">self</span>.stack2 = QWidget()</span><br><span class="line">        <span class="variable language_">self</span>.stack3 = QWidget()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tab1UI()</span><br><span class="line">        <span class="variable language_">self</span>.tab2UI()</span><br><span class="line">        <span class="variable language_">self</span>.tab3UI()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.stack = QStackedWidget()  <span class="comment"># 创建堆栈窗口控件</span></span><br><span class="line">        <span class="variable language_">self</span>.stack.addWidget(<span class="variable language_">self</span>.stack1)  <span class="comment"># 将创建的窗口放入堆栈窗口控件中</span></span><br><span class="line">        <span class="variable language_">self</span>.stack.addWidget(<span class="variable language_">self</span>.stack2)</span><br><span class="line">        <span class="variable language_">self</span>.stack.addWidget(<span class="variable language_">self</span>.stack3)</span><br><span class="line">        <span class="comment"># 创建水平布局左边为列表控件 右边为堆栈窗口控件</span></span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.<span class="built_in">list</span>)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.stack)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(hbox)</span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">list</span>.currentRowChanged.connect(<span class="variable language_">self</span>.display)  <span class="comment"># 当改变选择的列表行时调用display函数，来显示对应的堆栈中的窗口</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tab1UI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        layout.addRow(<span class="string">&#x27;姓名&#x27;</span>, QLineEdit())</span><br><span class="line">        layout.addRow(<span class="string">&#x27;地址&#x27;</span>, QLineEdit())</span><br><span class="line">        <span class="variable language_">self</span>.stack1.setLayout(layout)  <span class="comment"># 为stack1窗口添加布局</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tab2UI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QFormLayout()</span><br><span class="line">        sex = QHBoxLayout()</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">&#x27;男&#x27;</span>))</span><br><span class="line">        sex.addWidget(QRadioButton(<span class="string">&#x27;女&#x27;</span>))</span><br><span class="line">        layout.addRow(QLabel(<span class="string">&#x27;性别&#x27;</span>), sex)</span><br><span class="line">        layout.addRow(<span class="string">&#x27;生日&#x27;</span>, QLineEdit())</span><br><span class="line">        <span class="variable language_">self</span>.stack2.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">tab3UI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        layout.addWidget(QLabel(<span class="string">&#x27;科目&#x27;</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">&#x27;物理&#x27;</span>))</span><br><span class="line">        layout.addWidget(QCheckBox(<span class="string">&#x27;高数&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.stack3.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.setCurrentIndex(index)  <span class="comment"># 根据序号切换显示堆栈中的对应窗口</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = StackedExample()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648096644277-d9ed0652-90a8-44a5-8716-db535ad1db2b.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=339&amp;id=u028fd2d4&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13718&amp;status=done&amp;style=none&amp;taskId=u7c26c10f-f482-4cea-8156-1c757b2edbe&amp;title=&amp;width=416" alt="image.png"><br><a name="NwSni"></a></p><h3 id="QDockWidget停靠控件">QDockWidget停靠控件</h3><p>停靠控件用来创建那些平时使用的软件中的可以自由拖动与固定的那些窗口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DockDemo</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockDemo, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;停靠控件（QDockWidget）&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line">        layout = QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.items = QDockWidget(<span class="string">&#x27;Dockable&#x27;</span>, <span class="variable language_">self</span>)  <span class="comment"># 创建停靠窗口并设置名字</span></span><br><span class="line">        <span class="variable language_">self</span>.listWidget = QListWidget()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(<span class="string">&#x27;item1&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(<span class="string">&#x27;item2&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.addItem(<span class="string">&#x27;item3&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.items.setWidget(<span class="variable language_">self</span>.listWidget)  <span class="comment"># 将列表控件设置到停靠窗口上</span></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(QLineEdit())  <span class="comment"># 设置中心控件为文本框</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.items.setFloating(<span class="literal">True</span>)  <span class="comment"># 设置停靠窗口默认是悬浮状态</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.addDockWidget(Qt.RightDockWidgetArea, <span class="variable language_">self</span>.items)  <span class="comment"># 添加停靠窗口并设置为默认停靠右侧</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = DockDemo()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648098692621-5e5f163f-cd6f-46b1-850e-fa1b7858a81f.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=339&amp;id=uc867dc67&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11483&amp;status=done&amp;style=none&amp;taskId=u3c594ff8-a28f-4b6f-a14b-e50e71c4b69&amp;title=&amp;width=416" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648098700284-bf7a14b0-9520-424d-a8d2-8dcdacd46cc1.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=339&amp;id=ucb7ed843&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11969&amp;status=done&amp;style=none&amp;taskId=uac01a939-cf81-48d0-a2a9-3bdabc7cf97&amp;title=&amp;width=416" alt="image.png"><br><a name="viU6m"></a></p><h3 id="容纳多文档窗口">容纳多文档窗口</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MultiWindows</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 记录窗口数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MultiWindows, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;容纳多文档的窗口&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.mdi = QMdiArea()  <span class="comment"># 用来存放多文档的控件</span></span><br><span class="line">        <span class="variable language_">self</span>.setCentralWidget(<span class="variable language_">self</span>.mdi)</span><br><span class="line">        bar = <span class="variable language_">self</span>.menuBar()</span><br><span class="line">        file = bar.addMenu(<span class="string">&#x27;File&#x27;</span>)</span><br><span class="line">        file.addAction(<span class="string">&#x27;New&#x27;</span>)</span><br><span class="line">        file.addAction(<span class="string">&#x27;cascade&#x27;</span>)  <span class="comment"># 用来设置层叠方式</span></span><br><span class="line">        file.addAction(<span class="string">&#x27;Tiled&#x27;</span>)  <span class="comment"># 用来设置平铺方式</span></span><br><span class="line">        file.triggered.connect(<span class="variable language_">self</span>.windowacation)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">windowacation</span>(<span class="params">self, q</span>):</span><br><span class="line">        <span class="built_in">print</span>(q.text())</span><br><span class="line">        <span class="keyword">if</span> q.text() == <span class="string">&quot;New&quot;</span>:</span><br><span class="line">            MultiWindows.count = MultiWindows.count + <span class="number">1</span>  <span class="comment"># 用来统计创建的窗口个数</span></span><br><span class="line">            sub = QMdiSubWindow()  <span class="comment"># 创建子窗口对象</span></span><br><span class="line">            sub.setWidget(QTextEdit())</span><br><span class="line">            sub.setWindowTitle(<span class="string">&#x27;子窗口&#x27;</span> + <span class="built_in">str</span>(MultiWindows.count))</span><br><span class="line">            <span class="variable language_">self</span>.mdi.addSubWindow(sub)</span><br><span class="line">            sub.show()</span><br><span class="line">        <span class="keyword">elif</span> q.text() == <span class="string">&quot;cascade&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.mdi.cascadeSubWindows()</span><br><span class="line">        <span class="keyword">elif</span> q.text() == <span class="string">&quot;Tiled&quot;</span>:</span><br><span class="line">            <span class="variable language_">self</span>.mdi.tileSubWindows()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = MultiWindows()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>new时：新建窗口<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648102793095-e5973c74-e66d-41ad-85c5-70d32913d4e0.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=759&amp;id=ud0fddb13&amp;originHeight=759&amp;originWidth=1296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44400&amp;status=done&amp;style=none&amp;taskId=u582a7f95-5bea-4b95-93c8-ac8a191b9b8&amp;title=&amp;width=1296" alt="image.png"><br>cascade时： 层叠<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648102811665-6e66d50f-71f1-420b-8190-e972a59251a0.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=759&amp;id=u576a177c&amp;originHeight=759&amp;originWidth=1296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45726&amp;status=done&amp;style=none&amp;taskId=ue11a42f9-0d6b-4fd4-849e-ba9805657c8&amp;title=&amp;width=1296" alt="image.png"><br>Tiled时  平铺<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648102832436-9c225cff-d611-4aab-8ab5-6c4b15484aea.png#clientId=u0a1365fb-5932-4&amp;from=paste&amp;height=759&amp;id=u48907feb&amp;originHeight=759&amp;originWidth=1296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47111&amp;status=done&amp;style=none&amp;taskId=u32c80d48-bb4d-4a85-9cdf-5cb01dec8f3&amp;title=&amp;width=1296" alt="image.png"><br><a name="tegeQ"></a></p><h3 id="QScrollBar滚动条控件">QScrollBar滚动条控件</h3><ol><li>通过滚动条值的变化控制其他控件状态的变化</li><li>通过滚动条值的变化控制控件位置的变化</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ScrollBar</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ScrollBar, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.initUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initUI</span>(<span class="params">self</span>):</span><br><span class="line">        hbox = QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;拖动滚动条去改变文字颜色&#x27;</span>)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.label)</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar1 = QScrollBar()  <span class="comment"># 创建滚动条</span></span><br><span class="line">        <span class="variable language_">self</span>.scrollbar1.setMaximum(<span class="number">255</span>)  <span class="comment"># 设置滚动条尽头对应的最大值</span></span><br><span class="line">        <span class="variable language_">self</span>.scrollbar1.sliderMoved.connect(<span class="variable language_">self</span>.sliderMoved)  <span class="comment"># 当滚动条的滑块移动时触发</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.scrollbar2 = QScrollBar()</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar2.setMaximum(<span class="number">255</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar2.sliderMoved.connect(<span class="variable language_">self</span>.sliderMoved)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.scrollbar3 = QScrollBar()</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar3.setMaximum(<span class="number">255</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar3.sliderMoved.connect(<span class="variable language_">self</span>.sliderMoved)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.scrollbar4 = QScrollBar()</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar4.setMaximum(<span class="number">255</span>)</span><br><span class="line">        <span class="variable language_">self</span>.scrollbar4.sliderMoved.connect(<span class="variable language_">self</span>.sliderMoved1)</span><br><span class="line"></span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.scrollbar1)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.scrollbar2)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.scrollbar3)</span><br><span class="line">        hbox.addWidget(<span class="variable language_">self</span>.scrollbar4)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(<span class="number">300</span>, <span class="number">300</span>, <span class="number">300</span>, <span class="number">200</span>)  <span class="comment"># 设置窗口的大小</span></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(hbox)</span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="variable language_">self</span>.label.pos().y()  <span class="comment"># 保留当前标签的坐标</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sliderMoved</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="variable language_">self</span>.scrollbar1.value(), <span class="variable language_">self</span>.scrollbar2.value(), <span class="variable language_">self</span>.scrollbar3.value())</span><br><span class="line">        palette = QPalette()  <span class="comment"># 创建调色板</span></span><br><span class="line">        c = QColor(<span class="variable language_">self</span>.scrollbar1.value(), <span class="variable language_">self</span>.scrollbar2.value(), <span class="variable language_">self</span>.scrollbar3.value(), <span class="number">255</span>)  <span class="comment"># c 用来存取颜色</span></span><br><span class="line">        palette.setColor(QPalette.Foreground, c)</span><br><span class="line">        <span class="variable language_">self</span>.label.setPalette(palette)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sliderMoved1</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.label.moce(<span class="variable language_">self</span>.label.x(), <span class="variable language_">self</span>.y + <span class="variable language_">self</span>.scrollbar4.value())  <span class="comment"># 通过改变滑块改变标签的y坐标</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ScrollBar()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648121419531-6276247b-f5d0-45e3-ae79-eda7ac8a7115.png#clientId=u7d3b531b-6483-4&amp;from=paste&amp;height=239&amp;id=u3bc7edf0&amp;originHeight=239&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7863&amp;status=done&amp;style=none&amp;taskId=u5e6f2c03-a183-48b0-9483-007ac1e6493&amp;title=&amp;width=316" alt="image.png">从左到右前三个滑块分别控制rgb三通道数值（0~255），第四个滑块控制标签的y坐标<br><a name="qx90H"></a></p><h2 id="多线程与定时器">多线程与定时器</h2><p>多线程的作用：对于比较耗时的任务如果使用单线程可能会造成阻塞，因此通过多线程可以使耗时的任务不影响其他任务的进行。<br><a name="zqrW5"></a></p><h3 id="QTimer定时器控件">QTimer定时器控件</h3><p>定时器控件可以用来动态显示当前时间，每一秒都在调用函数更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> QWidget, QPushButton, QApplication, QListWidget, QGridLayout, QLabel</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> QTimer, QDateTime</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ShowTime</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ShowTime, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;动态显示当前时间&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = QLabel(<span class="string">&#x27;显示当前时间&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.startBtn = QPushButton(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.endBtn = QPushButton(<span class="string">&#x27;结束&#x27;</span>)</span><br><span class="line">        layout = QGridLayout()  <span class="comment"># 使用网格布局</span></span><br><span class="line">        <span class="variable language_">self</span>.timer = QTimer()  <span class="comment"># 创建定时器</span></span><br><span class="line">        <span class="variable language_">self</span>.timer.timeout.connect(<span class="variable language_">self</span>.showTime)  <span class="comment"># 定时器开启时调用showTime 需要手动开启</span></span><br><span class="line"></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.label, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.startBtn, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.endBtn, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.startBtn.clicked.connect(<span class="variable language_">self</span>.startTimer)</span><br><span class="line">        <span class="variable language_">self</span>.endBtn.clicked.connect(<span class="variable language_">self</span>.endTimer)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showTime</span>(<span class="params">self</span>):</span><br><span class="line">        time = QDateTime.currentDateTime()  <span class="comment"># 获取当前的时间</span></span><br><span class="line">        <span class="comment"># 设置时间显示的格式 年月日 时分秒 星期几（如果是ddd代表意思是周几）</span></span><br><span class="line">        timeDisplay = time.toString(<span class="string">&quot;yyyy-MM-dd hh:mm:ss dddd&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label.setText(timeDisplay)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">startTimer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.timer.start(<span class="number">1000</span>)  <span class="comment"># 经过1秒后开启定时器</span></span><br><span class="line">        <span class="variable language_">self</span>.startBtn.setEnabled(<span class="literal">False</span>)  <span class="comment"># 设置开始按钮不可用</span></span><br><span class="line">        <span class="variable language_">self</span>.endBtn.setEnabled(<span class="literal">True</span>)  <span class="comment"># 设置停止按钮可用</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">endTimer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.timer.stop()  <span class="comment"># 停止定时器</span></span><br><span class="line">        <span class="variable language_">self</span>.startBtn.setEnabled(<span class="literal">True</span>)  <span class="comment"># 设置开始按钮不可用</span></span><br><span class="line">        <span class="variable language_">self</span>.endBtn.setEnabled(<span class="literal">False</span>)  <span class="comment"># 设置停止按钮可用</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = ShowTime()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648125327315-e665ba98-47e5-4772-8d0b-6ee2923928bc.png#clientId=u7d3b531b-6483-4&amp;from=paste&amp;height=339&amp;id=udcf63b4a&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9965&amp;status=done&amp;style=none&amp;taskId=u0b6260ca-0cb7-408d-b037-b0fe8d090cb&amp;title=&amp;width=416" alt="image.png"><br><a name="lbFfY"></a></p><h3 id="QTimer-singleShot让程序定时关闭">QTimer.singleShot让程序定时关闭</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    label = QLabel(<span class="string">&#x27;&lt;font color=red size=140&gt;&lt;b&gt;Hello World,窗口在5秒后自动关闭！&lt;/b&gt;&lt;/font&gt;&#x27;</span>)</span><br><span class="line">    <span class="comment"># 设置窗口样式</span></span><br><span class="line">    label.setWindowFlags(Qt.SplashScreen | Qt.FramelessWindowHint)</span><br><span class="line">    label.show()</span><br><span class="line">    QTimer.singleShot(<span class="number">5000</span>, app.quit)  <span class="comment"># 5秒后自动关掉程序</span></span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648126681626-3def3955-aed2-46b8-979c-af33dcc8dbd6.png#clientId=u7d3b531b-6483-4&amp;from=paste&amp;height=81&amp;id=u82e33c09&amp;originHeight=81&amp;originWidth=537&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11401&amp;status=done&amp;style=none&amp;taskId=ucdaad9e0-2579-464c-b123-a75c799af4e&amp;title=&amp;width=537" alt="image.png"><br><a name="Ge8mX"></a></p><h3 id="QThread-线程类">QThread 线程类</h3><p>线程类可以实现计数器<br>QLCDNumber ： 模拟LCD显示效果的控件<br>WorkThread(继承自QThread): 自定义信号，实现在不同线程中信息的交互。之前使用的都是空间变化的系统信号。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sec = <span class="number">0</span>  <span class="comment"># 用来计数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkThread</span>(<span class="title class_ inherited__">QThread</span>):  <span class="comment"># 工作线程</span></span><br><span class="line">    timer = pyqtSignal()  <span class="comment"># 将timer设定为信号，每隔一秒发送</span></span><br><span class="line">    end = pyqtSignal()  <span class="comment"># 将end设定为信号，计数完成后发送</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="variable language_">self</span>.sleep(<span class="number">1</span>)  <span class="comment"># 休眠一秒（每一秒中循环一次）</span></span><br><span class="line">            <span class="keyword">if</span> sec == <span class="number">5</span>:</span><br><span class="line">                <span class="variable language_">self</span>.end.emit()  <span class="comment"># 计数达到5时发送end信号</span></span><br><span class="line">            <span class="variable language_">self</span>.timer.emit()  <span class="comment"># 每秒发送一次timer信号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Counter, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;使用线程类（QThread）编写计数器&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">120</span>)</span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.lcdNumber = QLCDNumber()</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.lcdNumber)</span><br><span class="line">        button = QPushButton(<span class="string">&#x27;开始计数&#x27;</span>)</span><br><span class="line">        layout.addWidget(button)</span><br><span class="line">        <span class="variable language_">self</span>.workThread = WorkThread()  <span class="comment"># 创建工作线程类</span></span><br><span class="line">        <span class="variable language_">self</span>.workThread.timer.connect(<span class="variable language_">self</span>.countTime)  <span class="comment"># 将timer工作线程信号与countTime绑定</span></span><br><span class="line">        <span class="variable language_">self</span>.workThread.end.connect(<span class="variable language_">self</span>.end)</span><br><span class="line">        button.clicked.connect(<span class="variable language_">self</span>.work)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">countTime</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> sec  <span class="comment"># 使用全局变量sec</span></span><br><span class="line">        sec += <span class="number">1</span></span><br><span class="line">        <span class="variable language_">self</span>.lcdNumber.display(sec)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">end</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 弹出对话框</span></span><br><span class="line">        QMessageBox.information(<span class="variable language_">self</span>,<span class="string">&#x27;消息&#x27;</span>,<span class="string">&#x27;计数结束&#x27;</span>,QMessageBox.Ok)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">work</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.workThread.start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = Counter()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648174750885-a4da1dfa-cf42-4acf-bd09-1ffb2be65381.png#clientId=u85b976bf-ff46-4&amp;from=paste&amp;height=162&amp;id=u0174a0b1&amp;originHeight=162&amp;originWidth=431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9383&amp;status=done&amp;style=none&amp;taskId=ufa04bed6-08ee-4052-9b19-66186fdea9b&amp;title=&amp;width=431" alt="image.png"><br><a name="V1PZP"></a></p><h2 id="窗口">窗口</h2><p><a name="NQIV0"></a></p><h3 id="设置窗口风格">设置窗口风格</h3><p>pyqt5窗口一共有三种风格<br>可以通过print(QStyleFactory.keys())来显示pyqt5窗口风格的种类：<br>‘windowsvista’, ‘Windows’, ‘Fusion’<br>可以通过QApplication.setStyle(窗口风格)来设置窗口控件的风格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowStyle</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(WindowStyle, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        horizontalLayout = QHBoxLayout()</span><br><span class="line">        <span class="variable language_">self</span>.styleLabel = QLabel(<span class="string">&#x27;设置窗口风格：&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.styleComboBox = QComboBox()</span><br><span class="line">        <span class="comment"># 将三种风格添加到列表中</span></span><br><span class="line">        <span class="variable language_">self</span>.styleComboBox.addItems(QStyleFactory.keys())</span><br><span class="line">        <span class="comment"># 输出当前的窗口风格</span></span><br><span class="line">        <span class="built_in">print</span>(QApplication.style().objectName())</span><br><span class="line">        <span class="comment"># 根据当前的窗口风格得到对应的序号</span></span><br><span class="line">        index = <span class="variable language_">self</span>.styleComboBox.findText(QApplication.style().objectName(), QtCore.Qt.MatchFixedString)</span><br><span class="line">        <span class="comment"># 设置列表中默认对应的窗口风格</span></span><br><span class="line">        <span class="variable language_">self</span>.styleComboBox.setCurrentIndex(index)</span><br><span class="line">        <span class="variable language_">self</span>.styleComboBox.activated[<span class="built_in">str</span>].connect(<span class="variable language_">self</span>.handleStyleChanged)</span><br><span class="line">        horizontalLayout.addWidget(<span class="variable language_">self</span>.styleLabel)</span><br><span class="line">        horizontalLayout.addWidget(<span class="variable language_">self</span>.styleComboBox)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(horizontalLayout)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handleStyleChanged</span>(<span class="params">self, style</span>):</span><br><span class="line">        QApplication.setStyle(style)  <span class="comment"># 设置窗口风格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = WindowStyle()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648292348729-480fe1e9-45ca-46c7-890c-3825fa95a2bf.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=139&amp;id=u35fd062b&amp;originHeight=139&amp;originWidth=230&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4941&amp;status=done&amp;style=none&amp;taskId=u7adbd98f-4e40-41c2-9e27-22994fcab53&amp;title=&amp;width=230" alt="image.png"><br><a name="An0vE"></a></p><h3 id="设置窗口样式-setWindowFlags">设置窗口样式 setWindowFlags</h3><p>窗口样式的调整主要针对窗口边框、标题栏以及窗口本身的样式<br>使用setWindowFlags设置窗口样式，可以使用参数介绍：<br>Qt.WindowMaximizeButtonHint(设置激活窗口的最大化按钮（右上角那个按钮）)<br>Qt.WindowCloseButtonHint(设置激活窗口的关闭按钮（右上角那个按钮）)<br>Qt.WindowMinimizeButtonHint(设置激活窗口的最小化按钮（右上角那个按钮）)<br>Qt.WindowStaysOnTopHint(设置窗口始终在窗口最前方显示)<br>Qt.FramelessWindowHint(设置窗口为无边框)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowPattern</span>(<span class="title class_ inherited__">QMainWindow</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(WindowPattern, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;设置窗口的样式&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(Qt.WindowMaximizeButtonHint | Qt.WindowStaysOnTopHint | Qt.FramelessWindowHint)</span><br><span class="line">        <span class="variable language_">self</span>.setObjectName(<span class="string">&quot;MainWindow&quot;</span>)</span><br><span class="line">        <span class="comment"># 通过类CSS语言设置窗口背景图片</span></span><br><span class="line">        <span class="variable language_">self</span>.setStyleSheet(<span class="string">&quot;#MainWindow&#123;border-image:url(../images/bool.png);&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = WindowPattern()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648293603816-08c8f46a-2594-448a-b532-1ed12cde9bd8.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=137&amp;id=ud3743a58&amp;originHeight=137&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15892&amp;status=done&amp;style=none&amp;taskId=uf7e17d95-167e-4db7-bd35-128f4a23aa1&amp;title=&amp;width=296" alt="image.png"><br><a name="WKnVs"></a></p><h3 id="用代码设置窗口的最大化和最小化">用代码设置窗口的最大化和最小化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtWidgets <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WindowMaxMin</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(WindowMaxMin, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        <span class="variable language_">self</span>.resize(<span class="number">300</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;用代码控制窗口的最大化和最小化&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        layout = QVBoxLayout()</span><br><span class="line"></span><br><span class="line">        maxButton1 = QPushButton(<span class="string">&#x27;窗口最大化1&#x27;</span>)</span><br><span class="line">        maxButton1.clicked.connect(<span class="variable language_">self</span>.maximized1)  <span class="comment"># 自定义的最大化方法，最大化的同时会将标题栏也覆盖掉</span></span><br><span class="line">        maxButton2 = QPushButton(<span class="string">&#x27;窗口最大化2&#x27;</span>)</span><br><span class="line">        maxButton2.clicked.connect(<span class="variable language_">self</span>.showMaximized)  <span class="comment"># 调用库中的最大化方法跟正常的最大化形式相同</span></span><br><span class="line">        minButton = QPushButton(<span class="string">&#x27;窗口最小化&#x27;</span>)</span><br><span class="line">        minButton.clicked.connect(<span class="variable language_">self</span>.showMinimized)</span><br><span class="line"></span><br><span class="line">        layout.addWidget(maxButton1)</span><br><span class="line">        layout.addWidget(maxButton2)</span><br><span class="line">        layout.addWidget(minButton)</span><br><span class="line">        <span class="variable language_">self</span>.setLayout(layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">maximized1</span>(<span class="params">self</span>):</span><br><span class="line">        desktop = QApplication.desktop()  <span class="comment"># 获取当前窗口</span></span><br><span class="line">        rect = desktop.availableGeometry()  <span class="comment"># 将窗口的最大区域大小赋予rect(0,0,1920,1040)</span></span><br><span class="line">        <span class="variable language_">self</span>.setGeometry(rect)  <span class="comment"># 设置工作区大小，也就是将工作区大小设置为最大（会导致标题栏无法显示在屏幕上）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    main = WindowMaxMin()</span><br><span class="line">    main.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648295805823-924a1f12-70de-45da-b275-4507602209be.png#clientId=uef9b1ee7-2eb1-4&amp;from=paste&amp;height=439&amp;id=u13e1ba6d&amp;originHeight=439&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10699&amp;status=done&amp;style=none&amp;taskId=u862641aa-7fac-421a-bbf4-3a0fe8cc786&amp;title=&amp;width=316" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> PySide2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyQt5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pyside2 for maya</title>
      <link href="/2023/08/29/PySide2-pyside2-for-maya/"/>
      <url>/2023/08/29/PySide2-pyside2-for-maya/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>教程链接：<a href="https://www.bilibili.com/video/BV1dJ41157gV?p=2&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1dJ41157gV?p=2&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a><br>购买链接：<a href="https://zurbrigg.com/tutorials/pyside2-for-maya">https://zurbrigg.com/tutorials/pyside2-for-maya</a><br><a name="BKivW"></a></p><h1>创建一个新的界面的初始模板</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> maya.mel <span class="keyword">as</span> mel</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> PySide2.QtWidgets <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">from</span> PySide2.QtCore <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">from</span> PySide.QtGui <span class="keyword">import</span> *</span><br><span class="line">    <span class="keyword">from</span> PySide.QtCore <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    <span class="keyword">from</span> shiboken <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(<span class="title class_ inherited__">QDialog</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;MAYA-2018&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(Qt.WindowType.Window)</span><br><span class="line">        window_name = <span class="string">&quot;WindowName&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cmds.window(window_name, exists=<span class="literal">True</span>):</span><br><span class="line">            cmds.deleteUI(window_name, window=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setObjectName(window_name)</span><br><span class="line">        <span class="variable language_">self</span>.setStyleSheet(<span class="string">&quot;font: 12pt &#x27;Arial&#x27;;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 信号与槽的连接 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">global</span> aa</span><br><span class="line">    app = qApp <span class="keyword">if</span> QApplication.instance() <span class="keyword">else</span> QApplication([])</span><br><span class="line">    aa = TestDialog()</span><br><span class="line">    aa.show()</span><br><span class="line">    app.exec_()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="PlgPe"></a></p><h1>创建对话框</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent = maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;one dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">200</span>,<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="noXJv"></a></p><h1>添加控件</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660209348067-aab29e6c-8246-464d-8317-e7e652053ceb.png#averageHue=%235c5b5b&amp;clientId=u766e0595-34d2-4&amp;from=paste&amp;height=239&amp;id=Bz6mZ&amp;originHeight=239&amp;originWidth=216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5305&amp;status=done&amp;style=none&amp;taskId=ue78fdd29-f90b-4374-b166-ff10332b25f&amp;title=&amp;width=216" alt="image.png"><br>教程中将控件和布局都分开放到函数里面了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">window_name = <span class="string">&quot;my_window&quot;</span></span><br><span class="line">        <span class="keyword">if</span> cmds.window(window_name, exists=<span class="literal">True</span>):</span><br><span class="line">            cmds.deleteUI(window_name, window=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">200</span>, <span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.checkBox1 = QtWidgets.QCheckBox(<span class="string">&quot;Checkbox1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.checkBox2 = QtWidgets.QCheckBox(<span class="string">&quot;Checkbox2&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button1 = QtWidgets.QPushButton(<span class="string">&quot;Button 1&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.button2 = QtWidgets.QPushButton(<span class="string">&quot;Button 2&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.lineEdit)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.checkBox1)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.checkBox2)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.button1)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.button2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="eu3dY"></a></p><h1>layout基础</h1><p>代码很优雅<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660211434381-4c844e6c-e74b-4585-9562-d7ee77a631e2.png#averageHue=%23676767&amp;clientId=u766e0595-34d2-4&amp;from=paste&amp;height=151&amp;id=ub9a89202&amp;originHeight=151&amp;originWidth=216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4631&amp;status=done&amp;style=none&amp;taskId=ubdcf75eb-e84f-4704-9bf7-3258c9fc134&amp;title=&amp;width=216" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumWidth(<span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.checkBox1 = QtWidgets.QCheckBox()</span><br><span class="line">        <span class="variable language_">self</span>.checkBox2 = QtWidgets.QCheckBox()</span><br><span class="line">        <span class="variable language_">self</span>.ok_btn = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        form_layout = QtWidgets.QFormLayout()</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Name:&quot;</span>, <span class="variable language_">self</span>.lineEdit)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Hidden:&quot;</span>, <span class="variable language_">self</span>.checkBox1)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Locked:&quot;</span>, <span class="variable language_">self</span>.checkBox2)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.ok_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.cancel_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addLayout(form_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="pGV9c"></a></p><h1>删除对话框</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br></pre></td></tr></table></figure><p><a name="rat7r"></a></p><h1>信号与槽</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumWidth(<span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.checkBox1 = QtWidgets.QCheckBox()</span><br><span class="line">        <span class="variable language_">self</span>.checkBox2 = QtWidgets.QCheckBox()</span><br><span class="line">        <span class="variable language_">self</span>.ok_btn = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        form_layout = QtWidgets.QFormLayout()</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Name:&quot;</span>, <span class="variable language_">self</span>.lineEdit)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Hidden:&quot;</span>, <span class="variable language_">self</span>.checkBox1)</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Locked:&quot;</span>, <span class="variable language_">self</span>.checkBox2)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.ok_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.cancel_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addLayout(form_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit.editingFinished.connect(<span class="variable language_">self</span>.print_hello_name)</span><br><span class="line">        <span class="variable language_">self</span>.checkBox1.toggled.connect(<span class="variable language_">self</span>.print_is_hidden)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn.clicked.connect(<span class="variable language_">self</span>.close)  <span class="comment"># self.close是自带的不需要自己写函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_hello_name</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="variable language_">self</span>.lineEdit.text()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello &#123;&#125;!&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_is_hidden</span>(<span class="params">self</span>):</span><br><span class="line">        hidden = <span class="variable language_">self</span>.checkBox1.isChecked()</span><br><span class="line">        <span class="keyword">if</span> hidden:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Hidden&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Visible&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="bjO1K"></a></p><h2 id="过载信号">过载信号</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660271563886-f57ad54c-dc87-4574-ae27-6ebb78fec497.png#averageHue=%232a2c28&amp;clientId=uc3617f6a-1057-4&amp;from=paste&amp;height=282&amp;id=u7bd615cb&amp;originHeight=282&amp;originWidth=662&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=127516&amp;status=done&amp;style=none&amp;taskId=uf32b9790-1ea2-48e6-99ca-1dd7ea32f28&amp;title=&amp;width=662" alt="image.png"><br>通过@QtCore.Slot(int)和@QtCore.Slot(str)使信号传递的参数类型改变<br><a name="mVcMe"></a></p><h2 id="自定义信号">自定义信号</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671169445449-5e7ff7c9-4408-440d-9fe3-f4f6c73d7d88.png#averageHue=%23707070&amp;clientId=u0295db91-fe64-4&amp;from=paste&amp;height=136&amp;id=u0c1e930c&amp;originHeight=122&amp;originWidth=202&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3205&amp;status=done&amp;style=none&amp;taskId=u09cc59b7-0282-4952-b90f-600b0e45c40&amp;title=&amp;width=224.4444503901919" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    <span class="comment"># 将maya主窗口的C++指针转换为python可以接受的对象。</span></span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLineEdit</span>(QtWidgets.QLineEdit):</span><br><span class="line">    enter_pressed = QtCore.Signal(<span class="built_in">str</span>)  <span class="comment"># 新建自定义信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, e</span>):  <span class="comment"># 使用QLineEdit自带的事件，当按键按下时触发并发送数据</span></span><br><span class="line">        <span class="built_in">super</span>(MyLineEdit, <span class="variable language_">self</span>).keyPressEvent(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> e.key() == QtCore.Qt.Key_Enter:</span><br><span class="line">            <span class="variable language_">self</span>.enter_pressed.emit(<span class="string">&quot;Enter Key Pressed&quot;</span>)  <span class="comment"># 信号触发时发送的字符串</span></span><br><span class="line">        <span class="keyword">elif</span> e.key() == QtCore.Qt.Key_Return:</span><br><span class="line">            <span class="variable language_">self</span>.enter_pressed.emit(<span class="string">&quot;Enter Key Pressed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumWidth(<span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumHeight(<span class="number">90</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)  <span class="comment"># 将maya窗口的问号标志排除掉</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit = MyLineEdit()  <span class="comment"># MyLineEdit 是自定义的继承QtWidgets.QLineEdit的类</span></span><br><span class="line">        <span class="variable language_">self</span>.ok_btn = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        form_layout = QtWidgets.QFormLayout()</span><br><span class="line">        form_layout.addRow(<span class="string">&quot;Name:&quot;</span>, <span class="variable language_">self</span>.lineEdit)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.ok_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.cancel_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)  <span class="comment"># 传递self将这个layout作为主layout</span></span><br><span class="line">        main_layout.addLayout(form_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineEdit.enter_pressed.connect(<span class="variable language_">self</span>.on_enter_pressed)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn.clicked.connect(<span class="variable language_">self</span>.close)  <span class="comment"># self.close是自带的不需要自己写函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_enter_pressed</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="built_in">print</span>(text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="PJwXP"></a></p><h1>打开/导入/引用文件举例</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660486774209-460c6550-a87b-416f-b824-5837e80e3c46.png#averageHue=%23626161&amp;clientId=ud565464f-f3f4-4&amp;from=paste&amp;height=171&amp;id=u578a9f29&amp;originHeight=171&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7870&amp;status=done&amp;style=none&amp;taskId=u1e460f4b-9d08-4527-b323-06e1b6f468d&amp;title=&amp;width=316" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    FILE_FILTERS = <span class="string">&quot;Maya(*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)&quot;</span>  <span class="comment"># 全部的过滤项</span></span><br><span class="line"></span><br><span class="line">    selected_filter = <span class="string">&quot;Maya (*.ma *.mb)&quot;</span>  <span class="comment"># 记录选择的过滤项，每次更改过滤项的同时会更改这个全局变量的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Open/Import/Reference&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.filepath_le = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn = QtWidgets.QPushButton()</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.setIcon(QtGui.QIcon(<span class="string">&#x27;:fileOpen.png&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.setToolTip(<span class="string">&quot;select File&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.open_rb = QtWidgets.QRadioButton(<span class="string">&quot;Open&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.open_rb.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.import_rb = QtWidgets.QRadioButton(<span class="string">&quot;Import&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.reference_rb = QtWidgets.QRadioButton(<span class="string">&quot;Reference&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.force_cb = QtWidgets.QCheckBox(<span class="string">&quot;Force&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.apply_btn = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        file_path_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        file_path_layout.addWidget(<span class="variable language_">self</span>.filepath_le)</span><br><span class="line">        file_path_layout.addWidget(<span class="variable language_">self</span>.select_file_path_btn)</span><br><span class="line"></span><br><span class="line">        radio_btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.open_rb)</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.import_rb)</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.reference_rb)</span><br><span class="line"></span><br><span class="line">        forme_layout = QtWidgets.QFormLayout()</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;File&quot;</span>, file_path_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, radio_btn_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, <span class="variable language_">self</span>.force_cb)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.apply_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addLayout(forme_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.clicked.connect(<span class="variable language_">self</span>.show_file_select_dialog)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.open_rb.toggled.connect(<span class="variable language_">self</span>.update_force_visibility)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.apply_btn.clicked.connect(<span class="variable language_">self</span>.load_file)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_file_select_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        file_path, <span class="variable language_">self</span>.selected_filter = QtWidgets.QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&quot;Select File&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                                                <span class="variable language_">self</span>.FILE_FILTERS, <span class="variable language_">self</span>.selected_filter)</span><br><span class="line">        <span class="keyword">if</span> file_path:</span><br><span class="line">            <span class="variable language_">self</span>.filepath_le.setText(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_force_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="variable language_">self</span>.force_cb.setVisible(checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = <span class="variable language_">self</span>.filepath_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)  <span class="comment"># 得到文件的信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.exists():  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.open_rb.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.open_file(file_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.import_rb.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.import_file(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.reference_file(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        force = <span class="variable language_">self</span>.force_cb.isChecked()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> cmds.file(q=<span class="literal">True</span>, modified=<span class="literal">True</span>):</span><br><span class="line">            result = QtWidgets.QMessageBox.question(<span class="variable language_">self</span>, <span class="string">&quot;Modified&quot;</span>, <span class="string">&quot;Current scene has unsaved changes. Continue?&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result == QtWidgets.QMessageBox.StandardButton.Yes:</span><br><span class="line">                force = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        cmds.file(file_path, <span class="built_in">open</span>=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>, force=force)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, i=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reference_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, r=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="RbM6Q"></a></p><h1>将插件放入到工具架上</h1><p><a name="HzMTb"></a></p><h2 id="主要功能模块">主要功能模块</h2><p>首先这个是上一节使用的打开与导入对话框，区别是添加了show_dialog类方法来替代if name == ‘<strong>main</strong>’  。将这个py模块放到maya的script文件夹中后，然后通过另一组代码来调用类方法达到显示窗口的需求。好处是可以保存在窗口执行的操作，比如在文本框中输入了数据，关闭窗口再打开后数据依然保留。<br>然后新增加了两个函数show_event 和 close_event，这两个的作用是关闭窗口时记录窗口位置，打开窗口时设置窗口位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OpenImportDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    FILE_FILTERS = <span class="string">&quot;Maya(*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)&quot;</span>  <span class="comment"># 全部的过滤项</span></span><br><span class="line"></span><br><span class="line">    selected_filter = <span class="string">&quot;Maya (*.ma *.mb)&quot;</span>  <span class="comment"># 记录选择的过滤项，每次更改过滤项的同时会更改这个全局变量的值</span></span><br><span class="line"></span><br><span class="line">    dlg_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_dialog</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.dlg_instance:</span><br><span class="line">            cls.dlg_instance = OpenImportDialog()  <span class="comment"># 第一次使用函数会生成窗口实例给dlg_instance全局变量</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cls.dlg_instance.isHidden():</span><br><span class="line">            cls.dlg_instance.show()  <span class="comment"># 如果窗口隐藏了就显示出来</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 如果窗口还在屏幕中就激活窗口并顶端显示</span></span><br><span class="line">            cls.dlg_instance.raise_()</span><br><span class="line">            cls.dlg_instance.activateWindow()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(OpenImportDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Open/Import/Reference&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="variable language_">self</span>.geometry = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.filepath_le = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn = QtWidgets.QPushButton()</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.setIcon(QtGui.QIcon(<span class="string">&#x27;:fileOpen.png&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.setToolTip(<span class="string">&quot;select File&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.open_rb = QtWidgets.QRadioButton(<span class="string">&quot;Open&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.open_rb.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.import_rb = QtWidgets.QRadioButton(<span class="string">&quot;Import&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.reference_rb = QtWidgets.QRadioButton(<span class="string">&quot;Reference&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.force_cb = QtWidgets.QCheckBox(<span class="string">&quot;Force&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.apply_btn = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        file_path_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        file_path_layout.addWidget(<span class="variable language_">self</span>.filepath_le)</span><br><span class="line">        file_path_layout.addWidget(<span class="variable language_">self</span>.select_file_path_btn)</span><br><span class="line"></span><br><span class="line">        radio_btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.open_rb)</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.import_rb)</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.reference_rb)</span><br><span class="line"></span><br><span class="line">        forme_layout = QtWidgets.QFormLayout()</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;File&quot;</span>, file_path_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, radio_btn_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, <span class="variable language_">self</span>.force_cb)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.apply_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addLayout(forme_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.clicked.connect(<span class="variable language_">self</span>.show_file_select_dialog)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.open_rb.toggled.connect(<span class="variable language_">self</span>.update_force_visibility)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.apply_btn.clicked.connect(<span class="variable language_">self</span>.load_file)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_file_select_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        file_path, <span class="variable language_">self</span>.selected_filter = QtWidgets.QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&quot;Select File&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                                                <span class="variable language_">self</span>.FILE_FILTERS, <span class="variable language_">self</span>.selected_filter)</span><br><span class="line">        <span class="keyword">if</span> file_path:</span><br><span class="line">            <span class="variable language_">self</span>.filepath_le.setText(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_force_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="variable language_">self</span>.force_cb.setVisible(checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = <span class="variable language_">self</span>.filepath_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)  <span class="comment"># 得到文件的信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.exists():  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.open_rb.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.open_file(file_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.import_rb.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.import_file(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.reference_file(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        force = <span class="variable language_">self</span>.force_cb.isChecked()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> cmds.file(q=<span class="literal">True</span>, modified=<span class="literal">True</span>):</span><br><span class="line">            result = QtWidgets.QMessageBox.question(<span class="variable language_">self</span>, <span class="string">&quot;Modified&quot;</span>, <span class="string">&quot;Current scene has unsaved changes. Continue?&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result == QtWidgets.QMessageBox.StandardButton.Yes:</span><br><span class="line">                force = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        cmds.file(file_path, <span class="built_in">open</span>=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>, force=force)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, i=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reference_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, r=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(OpenImportDialog, <span class="variable language_">self</span>).showEvent(e)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.geometry:</span><br><span class="line">            <span class="variable language_">self</span>.restoreGeometry(<span class="variable language_">self</span>.geometry)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(OpenImportDialog, <span class="variable language_">self</span>).closeEvent(e)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.geometry = <span class="variable language_">self</span>.saveGeometry()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="LGRqV"></a></p><h2 id="调用窗口显示的模块">调用窗口显示的模块</h2><p>open_import_dialog为模块名(py程序名)<br>OpenImportDialog为模块中的类名<br>注意：前两行是当py文件有更改时运行的，当没有更改py文件时不要运行。因为运行前两行会重置窗口的实例数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> open_import_dialog</span><br><span class="line">reload(open_import_dialog)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> open_import_dialog <span class="keyword">import</span> OpenImportDialog</span><br><span class="line"></span><br><span class="line">OpenImportDialog.show_dialog()</span><br></pre></td></tr></table></figure><p><a name="FF1Ia"></a></p><h1>各种模式对话框</h1><p><a name="HWSLO"></a></p><h2 id="自定义对话框">自定义对话框</h2><p>这里有文件夹对话框，警告对话框，颜色选择对话框，自定义对话框<br>这里最主要学习的是自定义对话框<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671170114446-0a3d0bcd-baf4-42ee-aa68-4e09b5d92771.png#averageHue=%23655f5d&amp;clientId=u0295db91-fe64-4&amp;from=paste&amp;height=594&amp;id=ua0005fb4&amp;originHeight=535&amp;originWidth=1002&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52403&amp;status=done&amp;style=none&amp;taskId=u9f31be18-e0e4-4adf-8e57-a662337af7a&amp;title=&amp;width=1113.3333628265955" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Custom Dialog&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.lineedit = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.ok_btn = QtWidgets.QPushButton(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        wdg_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        wdg_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Name: &quot;</span>))</span><br><span class="line">        wdg_layout.addWidget(<span class="variable language_">self</span>.lineedit)</span><br><span class="line"></span><br><span class="line">        btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        btn_layout.addStretch()</span><br><span class="line">        btn_layout.addWidget(<span class="variable language_">self</span>.ok_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addLayout(wdg_layout)</span><br><span class="line">        main_layout.addLayout(btn_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ok_btn.clicked.connect(<span class="variable language_">self</span>.accept)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_text</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="variable language_">self</span>.lineedit.text())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Test Dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.initial_directory = cmds.internalVar(userPrefDir=<span class="literal">True</span>)  <span class="comment"># 默认文件窗口打开路径</span></span><br><span class="line">        <span class="variable language_">self</span>.initial_color = QtGui.QColor(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)  <span class="comment"># 默认颜色窗口初始选择的颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.warning_btn = QtWidgets.QPushButton(<span class="string">&quot;Warning&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.folder_select_btn = QtWidgets.QPushButton(<span class="string">&quot;Folder Select&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.color_select_btn = QtWidgets.QPushButton(<span class="string">&quot;Color Select&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.custom_btn = QtWidgets.QPushButton(<span class="string">&quot;Modal (Custom)&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QHBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.warning_btn)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.folder_select_btn)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.color_select_btn)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.custom_btn)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.warning_btn.clicked.connect(<span class="variable language_">self</span>.show_warning_dialog)</span><br><span class="line">        <span class="variable language_">self</span>.folder_select_btn.clicked.connect(<span class="variable language_">self</span>.show_folder_select)</span><br><span class="line">        <span class="variable language_">self</span>.color_select_btn.clicked.connect(<span class="variable language_">self</span>.show_color_select)</span><br><span class="line">        <span class="variable language_">self</span>.custom_btn.clicked.connect(<span class="variable language_">self</span>.show_custom_dialog)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_warning_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        QtWidgets.QMessageBox.warning(<span class="variable language_">self</span>, <span class="string">&quot;Object Not Found&quot;</span>, <span class="string">&quot;Camera &#x27;shotcam&#x27; not found.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_folder_select</span>(<span class="params">self</span>):</span><br><span class="line">        new_directory = QtWidgets.QFileDialog.getExistingDirectory(<span class="variable language_">self</span>, <span class="string">&quot;Select Folder&quot;</span>, <span class="variable language_">self</span>.initial_directory)</span><br><span class="line">        <span class="keyword">if</span> new_directory:</span><br><span class="line">            <span class="variable language_">self</span>.initial_directory = new_directory</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span> (<span class="string">&quot;Selected Folder : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(new_directory))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_color_select</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.initial_color = QtWidgets.QColorDialog.getColor(<span class="variable language_">self</span>.initial_color, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Red:&#123;&#125; Green:&#123;&#125; Blue:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.initial_color.red(),</span><br><span class="line">                                               <span class="variable language_">self</span>.initial_color.green(),</span><br><span class="line">                                               <span class="variable language_">self</span>.initial_color.blue()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_custom_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        custom_dialog = CustomDialog()</span><br><span class="line"></span><br><span class="line">        result = custom_dialog.exec_()  <span class="comment"># 自定义窗口模式 这个模式是打开后只能够在当前窗口操作，窗口关闭前不能执行窗口外的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> result == QtWidgets.QDialog.Accepted:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Name: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(custom_dialog.get_text()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="n7TgF"></a></p><h2 id="标准Qt对话框">标准Qt对话框</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660703172622-7846ab65-52cb-4757-bcd4-e64748ce6b24.png#averageHue=%234c4c4c&amp;clientId=u88fb9660-6e1f-4&amp;from=paste&amp;height=523&amp;id=ucbd9754e&amp;originHeight=523&amp;originWidth=665&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86237&amp;status=done&amp;style=none&amp;taskId=ufec16794-3083-451f-87df-542146cd64f&amp;title=&amp;width=665" alt="image.png"><br>没找到源码，视频上也没显示全，就不放代码了。<br><a name="az5pO"></a></p><h1>QListWidget</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660710501521-ea737a89-d60d-45aa-996b-a4db34ad19aa.png#averageHue=%23494948&amp;clientId=u88fb9660-6e1f-4&amp;from=paste&amp;height=260&amp;id=u4932fb14&amp;originHeight=260&amp;originWidth=236&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7610&amp;status=done&amp;style=none&amp;taskId=ucf9c9473-c59c-498e-839f-60d0b31d97b&amp;title=&amp;width=236" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OutputResolutionDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    <span class="comment"># 数值用带小数点的原因是要计算长宽比，长宽比是小数</span></span><br><span class="line">    RESOLUTION_ITEMS = [[<span class="string">&quot;1920X1080 (1080p)&quot;</span>, <span class="number">1920.0</span>, <span class="number">1080.0</span>],</span><br><span class="line">                        [<span class="string">&quot;1280X720 (720p)&quot;</span>, <span class="number">1280.0</span>, <span class="number">720.0</span>],</span><br><span class="line">                        [<span class="string">&quot;960X540 (540p)&quot;</span>, <span class="number">960.0</span>, <span class="number">540.0</span>],</span><br><span class="line">                        [<span class="string">&quot;640X480&quot;</span>, <span class="number">640.0</span>, <span class="number">480.0</span>],</span><br><span class="line">                        [<span class="string">&quot;320X240&quot;</span>, <span class="number">320.0</span>, <span class="number">240.0</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(OutputResolutionDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Output Resolution&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setFixedWidth(<span class="number">220</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.resolution_list_wdg = QtWidgets.QListWidget()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> resolution_item <span class="keyword">in</span> <span class="variable language_">self</span>.RESOLUTION_ITEMS:</span><br><span class="line">            list_wdg_item = QtWidgets.QListWidgetItem(resolution_item[<span class="number">0</span>])</span><br><span class="line">            <span class="comment"># QtCore.Qt.UserRole可以理解为序号0,一个item可以拥有多个数据，因此可以通过QtCore.Qt.UserRole，QtCore.Qt.UserRole+1来设置数据的序号</span></span><br><span class="line">            list_wdg_item.setData(QtCore.Qt.UserRole,</span><br><span class="line">                                  [resolution_item[<span class="number">1</span>], resolution_item[<span class="number">2</span>]]) </span><br><span class="line">            <span class="variable language_">self</span>.resolution_list_wdg.addItem(list_wdg_item)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&#x27;Close&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)  <span class="comment"># 设置布局与窗口边界的距离</span></span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)  <span class="comment"># 设置布局中的控件之间的间隙</span></span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.resolution_list_wdg)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.resolution_list_wdg.itemClicked.connect(<span class="variable language_">self</span>.set_output_resolution)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_output_resolution</span>(<span class="params">self, item</span>):</span><br><span class="line">        resolution = item.data(QtCore.Qt.UserRole)</span><br><span class="line"></span><br><span class="line">        cmds.setAttr(<span class="string">&quot;defaultResolution.width&quot;</span>, resolution[<span class="number">0</span>])</span><br><span class="line">        cmds.setAttr(<span class="string">&quot;defaultResolution.height&quot;</span>, resolution[<span class="number">1</span>])</span><br><span class="line">        cmds.setAttr(<span class="string">&quot;defaultResolution.deviceAspectRatio&quot;</span>, resolution[<span class="number">0</span>]/resolution[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = OutputResolutionDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="BM1yP"></a></p><h1>可以设置的选择模式</h1><p>举例：<br>self.resolution_list_wdg = QtWidgets.QListWidget()<br>self.resolution_list_wdg.setSelectionMode(QtWidgets.QAbstractItemView.MultiSelection) # 设置listWidget控件的选择模式为MultiSelection     <br>ExtendedSelection与MultiSelection的区别是第一个需要按住ctrl或者shift多选，第二个不需要</p><table><thead><tr><th>Constant</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>QAbstractItemView::SingleSelection</td><td>1</td><td>When the user selects an item, any already-selected item becomes unselected. It is possible for the user to deselect the selected item by pressing the Ctrl key when clicking the selected item.</td></tr><tr><td>QAbstractItemView::ContiguousSelection</td><td>4</td><td>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item.</td></tr><tr><td>QAbstractItemView::ExtendedSelection</td><td>3</td><td>When the user selects an item in the usual way, the selection is cleared and the new item selected. However, if the user presses the Ctrl key when clicking on an item, the clicked item gets toggled and all other items are left untouched. If the user presses the Shift key while clicking on an item, all items between the current item and the clicked item are selected or unselected, depending on the state of the clicked item. Multiple items can be selected by dragging the mouse over them.</td></tr><tr><td>QAbstractItemView::MultiSelection</td><td>2</td><td>When the user selects an item in the usual way, the selection status of that item is toggled and the other items are left alone. Multiple items can be toggled by dragging the mouse over them.</td></tr><tr><td>QAbstractItemView::NoSelection</td><td>0</td><td>Items cannot be selected.</td></tr></tbody></table><p><a name="LaZ0H"></a></p><h1>QTableDialog</h1><p><a name="PgPfM"></a></p><h2 id="显示大纲模型名字以及变换信息窗口">显示大纲模型名字以及变换信息窗口</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1660717613536-9bd230fa-ce6a-43ed-8188-b428b498e914.png#averageHue=%23595755&amp;clientId=u88fb9660-6e1f-4&amp;from=paste&amp;height=356&amp;id=ue9e1df1d&amp;originHeight=356&amp;originWidth=691&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=76846&amp;status=done&amp;style=none&amp;taskId=ua6156b97-b453-4274-a681-bd2645ee798&amp;title=&amp;width=691" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TableExampleDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    ATTR_ROLE = QtCore.Qt.UserRole</span><br><span class="line">    VALUE_ROLE = QtCore.Qt.UserRole + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Table Example&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setFixedWidth(<span class="number">500</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg = QtWidgets.QTableWidget()</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setColumnCount(<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setColumnWidth(<span class="number">0</span>, <span class="number">22</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setColumnWidth(<span class="number">2</span>, <span class="number">70</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setColumnWidth(<span class="number">3</span>, <span class="number">70</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setColumnWidth(<span class="number">4</span>, <span class="number">70</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setHorizontalHeaderLabels([<span class="string">&quot;&quot;</span>, <span class="string">&quot;Name&quot;</span>, <span class="string">&quot;TransX&quot;</span>, <span class="string">&quot;TransY&quot;</span>, <span class="string">&quot;TransZ&quot;</span>])</span><br><span class="line">        header_view = <span class="variable language_">self</span>.table_wdg.horizontalHeader()</span><br><span class="line">        header_view.setSectionResizeMode(<span class="number">1</span>, QtWidgets.QHeaderView.Stretch)  <span class="comment"># 设置标题栏为自动填充窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.refresh_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.table_wdg)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_cell_changed_connection_enabled(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn.clicked.connect(<span class="variable language_">self</span>.refresh_table)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_cell_changed_connection_enabled</span>(<span class="params">self, enabled</span>):  <span class="comment"># 设置单元格信号与槽的连接状态  目的是使执行refresh时不执行槽函数</span></span><br><span class="line">        <span class="keyword">if</span> enabled:</span><br><span class="line">            <span class="variable language_">self</span>.table_wdg.cellChanged.connect(<span class="variable language_">self</span>.on_cell_changed)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.table_wdg.cellChanged.disconnect(<span class="variable language_">self</span>.on_cell_changed)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, <span class="variable language_">self</span>).showEvent(e)  <span class="comment"># 当启动窗口时执行这个函数</span></span><br><span class="line">        <span class="variable language_">self</span>.refresh_table()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, <span class="variable language_">self</span>).keyPressEvent(e)</span><br><span class="line">        e.accept()  <span class="comment"># 当在工具窗口中使用键盘时不会影响到maya主窗口的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_table</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_cell_changed_connection_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setRowCount(<span class="number">0</span>)  <span class="comment"># 将tableWidget 的所有项清空</span></span><br><span class="line"></span><br><span class="line">        meshes = cmds.ls(typ=<span class="string">&quot;mesh&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(meshes)):</span><br><span class="line">            transform_name = cmds.listRelatives(meshes[i], parent=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">            translation = cmds.getAttr(<span class="string">&quot;&#123;&#125;.translate&quot;</span>.<span class="built_in">format</span>(transform_name))[<span class="number">0</span>]</span><br><span class="line">            visible = cmds.getAttr(<span class="string">&quot;&#123;&#125;.visibility&quot;</span>.<span class="built_in">format</span>(transform_name))</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.table_wdg.insertRow(i)</span><br><span class="line">            <span class="variable language_">self</span>.insert_item(i, <span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;visibility&quot;</span>, visible, <span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.insert_item(i, <span class="number">1</span>, transform_name, <span class="literal">None</span>, transform_name, <span class="literal">False</span>)</span><br><span class="line">            <span class="variable language_">self</span>.insert_item(i, <span class="number">2</span>, <span class="variable language_">self</span>.float_to_string(translation[<span class="number">0</span>]), <span class="string">&quot;tx&quot;</span>, translation[<span class="number">0</span>], <span class="literal">False</span>)</span><br><span class="line">            <span class="variable language_">self</span>.insert_item(i, <span class="number">3</span>, <span class="variable language_">self</span>.float_to_string(translation[<span class="number">1</span>]), <span class="string">&quot;ty&quot;</span>, translation[<span class="number">0</span>], <span class="literal">False</span>)</span><br><span class="line">            <span class="variable language_">self</span>.insert_item(i, <span class="number">4</span>, <span class="variable language_">self</span>.float_to_string(translation[<span class="number">2</span>]), <span class="string">&quot;tz&quot;</span>, translation[<span class="number">0</span>], <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.set_cell_changed_connection_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert_item</span>(<span class="params">self, row, column, text, attr, value, is_boolean</span>):</span><br><span class="line">        item = QtWidgets.QTableWidgetItem(text)</span><br><span class="line">        <span class="variable language_">self</span>.set_item_attr(item, attr)</span><br><span class="line">        <span class="variable language_">self</span>.set_item_value(item, value)</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            item.setFlags(QtCore.Qt.ItemIsUserCheckable | QtCore.Qt.ItemIsEnabled)  <span class="comment"># 设置复选框</span></span><br><span class="line">            <span class="variable language_">self</span>.set_item_checked(item, value)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setItem(row, column, item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_cell_changed</span>(<span class="params">self, row, column</span>):</span><br><span class="line">        <span class="comment"># 单元格进行改变时先将信号与槽断开连接，当rename执行完成以后再连接起来</span></span><br><span class="line">        <span class="comment"># 控制信号与槽连接状态的目的就是控制什么时候改变单元格的信息时执行槽函数</span></span><br><span class="line">        <span class="variable language_">self</span>.set_cell_changed_connection_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        item = <span class="variable language_">self</span>.table_wdg.item(row, column)</span><br><span class="line">        <span class="keyword">if</span> column == <span class="number">1</span>:</span><br><span class="line">            <span class="variable language_">self</span>.rename(item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            is_boolean = column == <span class="number">0</span></span><br><span class="line">            <span class="variable language_">self</span>.update_attr(<span class="variable language_">self</span>.get_full_attr_name(row, item), item, is_boolean)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.set_cell_changed_connection_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">rename</span>(<span class="params">self, item</span>):</span><br><span class="line">        old_name = <span class="variable language_">self</span>.get_item_value(item)</span><br><span class="line">        new_name = <span class="variable language_">self</span>.get_item_text(item)</span><br><span class="line">        <span class="keyword">if</span> old_name != new_name:</span><br><span class="line">            actual_new_name = cmds.rename(old_name, new_name)</span><br><span class="line">            <span class="keyword">if</span> actual_new_name != new_name:</span><br><span class="line">                <span class="variable language_">self</span>.set_item_text(item, actual_new_name)</span><br><span class="line">            <span class="variable language_">self</span>.set_item_value(item, actual_new_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_attr</span>(<span class="params">self, attr_name, item, is_boolean</span>):</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            value = <span class="variable language_">self</span>.is_item_checked(item)</span><br><span class="line">            <span class="variable language_">self</span>.set_item_text(item, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            text = <span class="variable language_">self</span>.get_item_text(item)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                value = <span class="built_in">float</span>(text)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="variable language_">self</span>.revert_original_value(item, is_boolean)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cmds.setAttr(attr_name, value)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="variable language_">self</span>.revert_original_value(item, is_boolean)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        new_value = cmds.getAttr(attr_name)</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            <span class="variable language_">self</span>.set_item_checked(item, new_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.set_item_text(item, <span class="variable language_">self</span>.float_to_string(new_value))</span><br><span class="line">        <span class="variable language_">self</span>.set_item_value(item, new_value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_text</span>(<span class="params">self, item, text</span>):</span><br><span class="line">        item.setText(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_text</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_checked</span>(<span class="params">self, item, checked</span>):</span><br><span class="line">        <span class="keyword">if</span> checked:</span><br><span class="line">            item.setCheckState(QtCore.Qt.Checked)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            item.setCheckState(QtCore.Qt.Unchecked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_item_checked</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.checkState() == QtCore.Qt.Checked</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_attr</span>(<span class="params">self, item, attr</span>):</span><br><span class="line">        item.setData(<span class="variable language_">self</span>.ATTR_ROLE, attr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_attr</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.data(<span class="variable language_">self</span>.ATTR_ROLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_item_value</span>(<span class="params">self, item, value</span>):</span><br><span class="line">        item.setData(<span class="variable language_">self</span>.VALUE_ROLE, value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_full_attr_name</span>(<span class="params">self, row, item</span>):</span><br><span class="line">        node_name = <span class="variable language_">self</span>.table_wdg.item(row, <span class="number">1</span>).data(<span class="variable language_">self</span>.VALUE_ROLE)</span><br><span class="line">        attr_name = <span class="variable language_">self</span>.get_item_attr(item)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(node_name, attr_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_item_value</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> item.data(<span class="variable language_">self</span>.VALUE_ROLE)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">float_to_string</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0:.4f&#125;&quot;</span>.<span class="built_in">format</span>(value)  <span class="comment"># 令浮点数变成保留四位数的字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">revert_original_value</span>(<span class="params">self, item, is_boolean</span>):</span><br><span class="line">        original_value = <span class="variable language_">self</span>.get_item_value(item)</span><br><span class="line">        <span class="keyword">if</span> is_boolean:</span><br><span class="line">            <span class="variable language_">self</span>.set_item_checked(item, original_value)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.set_item_text(item, <span class="variable language_">self</span>.flate_to_string(original_value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TableExampleDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="lWuF1"></a></p><h2 id="在表格控件中添加其他控件">在表格控件中添加其他控件</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661410775956-afb1b836-aa01-412e-846a-397b927d705f.png#averageHue=%23505050&amp;clientId=u9eaa8f12-95dd-4&amp;from=paste&amp;height=260&amp;id=uabb0d097&amp;originHeight=260&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7437&amp;status=done&amp;style=none&amp;taskId=ua2bdaaf9-3ef7-4efe-9e3c-cdbc5f38ed8&amp;title=&amp;width=316" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TableExampleDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Table Example&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setFixedWidth(<span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg = QtWidgets.QTableWidget()</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setColumnCount(<span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setHorizontalHeaderLabels([<span class="string">&quot;QPushButton&quot;</span>, <span class="string">&quot;QSpinBox&quot;</span>, <span class="string">&quot;QComboBox&quot;</span>])</span><br><span class="line">        header_view = <span class="variable language_">self</span>.table_wdg.horizontalHeader()</span><br><span class="line">        header_view.setSectionResizeMode(<span class="number">1</span>, QtWidgets.QHeaderView.Stretch)  <span class="comment"># 设置标题栏为自动填充窗口</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.refresh_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.table_wdg)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn.clicked.connect(<span class="variable language_">self</span>.refresh_table)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(TableExampleDialog, <span class="variable language_">self</span>).showEvent(e)  <span class="comment"># 当启动窗口时执行这个函数</span></span><br><span class="line">        <span class="variable language_">self</span>.refresh_table()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_table</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setRowCount(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.insertRow(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        btn = QtWidgets.QPushButton(<span class="string">&quot;Button&quot;</span>)</span><br><span class="line">        btn.clicked.connect(<span class="variable language_">self</span>.on_button_pressed)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setCellWidget(<span class="number">0</span>, <span class="number">0</span>, btn)</span><br><span class="line"></span><br><span class="line">        spin_box = QtWidgets.QSpinBox()</span><br><span class="line">        spin_box.valueChanged.connect(<span class="variable language_">self</span>.on_value_changed)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setCellWidget(<span class="number">0</span>, <span class="number">1</span>, spin_box)</span><br><span class="line"></span><br><span class="line">        combo_box = QtWidgets.QComboBox()</span><br><span class="line">        combo_box.addItems([<span class="string">&quot;Item 1&quot;</span>, <span class="string">&quot;Item2&quot;</span>, <span class="string">&quot;Item3&quot;</span>])</span><br><span class="line">        combo_box.currentTextChanged.connect(<span class="variable language_">self</span>.on_current_text_changed)</span><br><span class="line">        <span class="variable language_">self</span>.table_wdg.setCellWidget(<span class="number">0</span>, <span class="number">2</span>, combo_box)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_button_pressed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button was pressed&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_value_changed</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;SpinBox value changed: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_current_text_changed</span>(<span class="params">self, text</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;ComboBox text changed: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(text))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TableExampleDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="tbVxe"></a></p><h1>QSpinBox与QDoubleSpinBox</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661412226518-48951f98-411f-4fd4-9fc4-9b8306dfb70e.png#averageHue=%23737271&amp;clientId=u9eaa8f12-95dd-4&amp;from=paste&amp;height=106&amp;id=uf4e77954&amp;originHeight=106&amp;originWidth=211&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5030&amp;status=done&amp;style=none&amp;taskId=u71974899-6a25-4801-b784-e71cbac61fa&amp;title=&amp;width=211" alt="image.png"><br>可以通过鼠标滚轮滑动来更改数值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpinBoxDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(SpinBoxDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Spin Box Dialog&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.spin_box = QtWidgets.QSpinBox()</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setFixedWidth(<span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setMinimum(-<span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setMaximum(<span class="number">100</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setSingleStep(<span class="number">5</span>)</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setPrefix(<span class="string">&quot;$ &quot;</span>)  <span class="comment"># 设置显示的前缀 但是不会当值来交互，仅仅是显示</span></span><br><span class="line">        <span class="variable language_">self</span>.spin_box.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)  <span class="comment"># 取消显示上下按钮框</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box = QtWidgets.QDoubleSpinBox()</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.setFixedWidth(<span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.setRange(-<span class="number">50.0</span>, <span class="number">50.0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.setSuffix(<span class="string">&quot; m&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QFormLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addRow(<span class="string">&quot;Spin Box:&quot;</span>, <span class="variable language_">self</span>.spin_box)</span><br><span class="line">        main_layout.addRow(<span class="string">&quot;Double Spin Box:&quot;</span>, <span class="variable language_">self</span>.double_spin_box)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.spin_box.valueChanged.connect(<span class="variable language_">self</span>.print_value)</span><br><span class="line">        <span class="variable language_">self</span>.double_spin_box.valueChanged.connect(<span class="variable language_">self</span>.print_value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_value</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Value: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(value))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = SpinBoxDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="L2Pcc"></a></p><h1>启动maya图标资源管理器</h1><p>import maya.app.general.resourceBrowser as resourceBrowser<br>resourceBrowser.resourceBrowser().run()<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661419111759-00e4785c-b7ec-4dbf-bc59-ef400fa10604.png#averageHue=%23514f4e&amp;clientId=uc6467607-8068-4&amp;from=paste&amp;height=296&amp;id=ubbdb2553&amp;originHeight=296&amp;originWidth=351&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14092&amp;status=done&amp;style=none&amp;taskId=ue1cf3996-139b-4ae6-9efa-f1f57dc83aa&amp;title=&amp;width=351" alt="image.png"><br>在这里可以预览窗口的图标和名字<br><a name="uYFCq"></a></p><h1>QTreeView File Explorer</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661422262493-6e04ef7d-e127-46ac-8ba1-ef98557b76b2.png#averageHue=%233d3d3c&amp;clientId=uc6467607-8068-4&amp;from=paste&amp;height=439&amp;id=u3bf9a10f&amp;originHeight=439&amp;originWidth=516&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12708&amp;status=done&amp;style=none&amp;taskId=ua705bd21-cea0-4f6f-ac3c-1470a3bd245&amp;title=&amp;width=516" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TreeViewDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Tree View Dialog&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TreeViewDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">500</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        root_path = <span class="string">&quot;&#123;&#125;scripts&quot;</span>.<span class="built_in">format</span>(cmds.internalVar(userAppDir=<span class="literal">True</span>))  <span class="comment"># 得到maya脚本目录</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.model = QtWidgets.QFileSystemModel() <span class="comment"># 获得一个FileSystem模式</span></span><br><span class="line">        <span class="variable language_">self</span>.model.setRootPath(root_path)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_view = QtWidgets.QTreeView() <span class="comment"># 创建QTreeView控件</span></span><br><span class="line">        <span class="variable language_">self</span>.tree_view.setModel(<span class="variable language_">self</span>.model) <span class="comment"># 为控件添加模式</span></span><br><span class="line">        <span class="variable language_">self</span>.tree_view.setRootIndex(<span class="variable language_">self</span>.model.index(root_path))</span><br><span class="line">        <span class="variable language_">self</span>.tree_view.hideColumn(<span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.tree_view.setColumnWidth(<span class="number">0</span>, <span class="number">240</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># self.model.setFilter(QtCore.QDir.Dirs | QtCore.QDir.NoDotAndDotDot)</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.model.setNameFilters([<span class="string">&quot;*.py&quot;</span>])  <span class="comment"># 使只能选中.py后缀的文件</span></span><br><span class="line">        <span class="variable language_">self</span>.model.setNameFilterDisables(<span class="literal">False</span>)  <span class="comment"># 将不能选中的文件进行隐藏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.tree_view)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.tree_view.doubleClicked.connect(<span class="variable language_">self</span>.on_double_clicked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_double_clicked</span>(<span class="params">self, index</span>):</span><br><span class="line">        path = <span class="variable language_">self</span>.model.filePath(index)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.model.isDir(index):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Directory selected: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Directory selected: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TreeViewDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ornOr"></a></p><h1>制作简单的大纲</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661497459146-e8a29ae1-0130-4554-abcd-245750f64cfa.png#averageHue=%23494848&amp;clientId=u7b21ee06-bbc2-4&amp;from=paste&amp;height=345&amp;id=ub97e2f98&amp;originHeight=345&amp;originWidth=384&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20501&amp;status=done&amp;style=none&amp;taskId=u9b265fd3-2f15-494b-aa9b-c4a7a3b5274&amp;title=&amp;width=384" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleOutliner</span>(QtWidgets.QDialog):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Simple Outliner&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleOutliner, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setMinimumWidth(<span class="number">300</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.transform_icon = QtGui.QIcon(<span class="string">&quot;:transform.svg&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.camera_icon = QtGui.QIcon(<span class="string">&quot;:Camera.png&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.mesh_icon = QtGui.QIcon(<span class="string">&quot;:mesh.svg&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_actions()</span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)  <span class="comment"># 使能显示上下文菜单</span></span><br><span class="line">        <span class="variable language_">self</span>.customContextMenuRequested.connect(<span class="variable language_">self</span>.show_context_menu)  <span class="comment"># 设置上下文菜单的ui</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_tree_widget()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.about_action = QtWidgets.QAction(<span class="string">&quot;About&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action = QtWidgets.QAction(<span class="string">&quot;Shapes&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.setShortcut(QtGui.QKeySequence(<span class="string">&quot;Ctrl+Shift+H&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.menu_bar = QtWidgets.QMenuBar()</span><br><span class="line">        display_menu = <span class="variable language_">self</span>.menu_bar.addMenu(<span class="string">&quot;Display&quot;</span>)</span><br><span class="line">        display_menu.addAction(<span class="variable language_">self</span>.display_shape_action)</span><br><span class="line">        help_menu = <span class="variable language_">self</span>.menu_bar.addMenu(<span class="string">&quot;Help&quot;</span>)</span><br><span class="line">        help_menu.addAction(<span class="variable language_">self</span>.about_action)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_widget = QtWidgets.QTreeWidget()</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.setHeaderHidden(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># header = self.tree_widget.headerItem()</span></span><br><span class="line">        <span class="comment"># header.setText(0, &quot;Column 0 Text&quot;)</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.refresh_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 设置左上右下的边距</span></span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.setMenuBar(<span class="variable language_">self</span>.menu_bar)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.tree_widget)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.about_action.triggered.connect(<span class="variable language_">self</span>.about)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.toggled.connect(<span class="variable language_">self</span>.set_shape_nodes_visible)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.itemCollapsed.connect(<span class="variable language_">self</span>.update_icon)</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.itemExpanded.connect(<span class="variable language_">self</span>.update_icon)</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.itemSelectionChanged.connect(<span class="variable language_">self</span>.select_items)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn.clicked.connect(<span class="variable language_">self</span>.refresh_tree_widget)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_tree_widget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.shape_nodes = cmds.ls(shapes=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.clear()</span><br><span class="line"></span><br><span class="line">        top_level_object_names = cmds.ls(assemblies=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> top_level_object_names:</span><br><span class="line">            item = <span class="variable language_">self</span>.create_item(name)</span><br><span class="line">            <span class="variable language_">self</span>.tree_widget.addTopLevelItem(item)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update_selection()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">self, name</span>):</span><br><span class="line">        item = QtWidgets.QTreeWidgetItem([name])</span><br><span class="line">        <span class="variable language_">self</span>.add_children(item)</span><br><span class="line">        <span class="variable language_">self</span>.update_icon(item)</span><br><span class="line"></span><br><span class="line">        is_shape = name <span class="keyword">in</span> <span class="variable language_">self</span>.shape_nodes</span><br><span class="line">        item.setData(<span class="number">0</span>, QtCore.Qt.UserRole, is_shape)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_children</span>(<span class="params">self, item</span>):</span><br><span class="line">        children = cmds.listRelatives(item.text(<span class="number">0</span>), children=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> children:</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">                child_item = <span class="variable language_">self</span>.create_item(child)</span><br><span class="line">                item.addChild(child_item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_icon</span>(<span class="params">self, item</span>):</span><br><span class="line">        object_type = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> item.isExpanded():  <span class="comment"># 如果item被展开</span></span><br><span class="line">            object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child_count = item.childCount()</span><br><span class="line">            <span class="keyword">if</span> child_count == <span class="number">0</span>:</span><br><span class="line">                object_type = cmds.objectType(item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> child_count == <span class="number">1</span>:</span><br><span class="line">                child_item = item.child(<span class="number">0</span>)</span><br><span class="line">                object_type = cmds.objectType(child_item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line">        <span class="keyword">if</span> object_type == <span class="string">&quot;transform&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, <span class="variable language_">self</span>.transform_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;camera&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, <span class="variable language_">self</span>.camera_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;mesh&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, <span class="variable language_">self</span>.mesh_icon)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_items</span>(<span class="params">self</span>):</span><br><span class="line">        items = <span class="variable language_">self</span>.tree_widget.selectedItems()</span><br><span class="line">        names = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            names.append(item.text(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        cmds.select(names, replace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">self</span>):</span><br><span class="line">        QtWidgets.QMessageBox.about(<span class="variable language_">self</span>, <span class="string">&quot;About Simple Outliner&quot;</span>, <span class="string">&quot;Add About Text Here&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_shape_nodes_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(<span class="variable language_">self</span>.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_shape = item.data(<span class="number">0</span>, QtCore.Qt.UserRole)</span><br><span class="line">            <span class="keyword">if</span> is_shape:</span><br><span class="line">                item.setHidden(<span class="keyword">not</span> visible)</span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, point</span>):</span><br><span class="line">        context_menu = QtWidgets.QMenu()</span><br><span class="line">        context_menu.addAction(<span class="variable language_">self</span>.display_shape_action)</span><br><span class="line">        context_menu.addSeparator()  <span class="comment"># 分割线</span></span><br><span class="line">        context_menu.addAction(<span class="variable language_">self</span>.about_action)</span><br><span class="line"></span><br><span class="line">        context_menu.exec_(<span class="variable language_">self</span>.mapToGlobal(point))  <span class="comment"># 右键显示菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_selection</span>(<span class="params">self</span>):</span><br><span class="line">        selection = cmds.ls(selection=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(<span class="variable language_">self</span>.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_selected = item.text(<span class="number">0</span>) <span class="keyword">in</span> selection</span><br><span class="line">            item.setSelected(is_selected)</span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_script_job_enabled</span>(<span class="params">self, enabled</span>):</span><br><span class="line">        <span class="keyword">if</span> enabled <span class="keyword">and</span> <span class="variable language_">self</span>.script_job_number &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.script_job_number = cmds.scriptJob(event=[<span class="string">&quot;SelectionChanged&quot;</span>, partial(<span class="variable language_">self</span>.update_selection)], protected=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> enabled <span class="keyword">and</span> <span class="variable language_">self</span>.script_job_number &gt;= <span class="number">0</span>:</span><br><span class="line">            cmds.scriptJob(kill=<span class="variable language_">self</span>.script_job_number, force=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleOutliner, <span class="variable language_">self</span>).showEvent(e)</span><br><span class="line">        <span class="variable language_">self</span>.set_script_job_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(<span class="variable language_">self</span>, SimpleOutliner):</span><br><span class="line">            <span class="built_in">super</span>(SimpleOutliner, <span class="variable language_">self</span>).closeEvent(e)</span><br><span class="line">            <span class="variable language_">self</span>.set_script_job_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.set_script_job_enabled(<span class="literal">False</span>)</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = SimpleOutliner()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="i75Bg"></a></p><h1>制作进度条</h1><p><a name="QCRZm"></a></p><h2 id="不同对话框">不同对话框</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661740738923-bdd5fa24-618f-4436-b04c-b92f416af8ff.png#averageHue=%23636262&amp;clientId=u8655e55d-37ca-4&amp;from=paste&amp;height=183&amp;id=uf5be9777&amp;originHeight=183&amp;originWidth=602&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10984&amp;status=done&amp;style=none&amp;taskId=u4732af8d-49c4-43a5-a08f-52902460a05&amp;title=&amp;width=602" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressTestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Progress Test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(ProgressTestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_button = QtWidgets.QPushButton(<span class="string">&quot;Do It!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.progress_bar_button)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_button.clicked.connect(<span class="variable language_">self</span>.run_progress_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_progress_test</span>(<span class="params">self</span>):</span><br><span class="line">        number_of_operations = <span class="number">10</span>  <span class="comment"># 循环的数量</span></span><br><span class="line"></span><br><span class="line">        progress_dialog = QtWidgets.QProgressDialog(<span class="string">&quot;Waiting to process...&quot;</span>, <span class="string">&quot;Cancel&quot;</span>, <span class="number">0</span>, number_of_operations, <span class="variable language_">self</span>)</span><br><span class="line">        progress_dialog.setWindowTitle(<span class="string">&quot;Progress...&quot;</span>)</span><br><span class="line">        progress_dialog.setValue(<span class="number">0</span>)</span><br><span class="line">        progress_dialog.setWindowModality(QtCore.Qt.WindowModal)  <span class="comment"># 设置为进度条窗口出现时，代码依然能够执行，但是不能使用除对话框之外的操作</span></span><br><span class="line">        progress_dialog.show()</span><br><span class="line"></span><br><span class="line">        QtCore.QCoreApplication.processEvents()  <span class="comment"># 在执行代码之前显示对话框</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, number_of_operations + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> progress_dialog.wasCanceled():  <span class="comment"># 当按了cancel按钮后中止代码</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            progress_dialog.setLabelText(<span class="string">&quot;Processing operation: &#123;0&#125; (fo &#123;1&#125;)&quot;</span>.<span class="built_in">format</span>(i, number_of_operations))</span><br><span class="line">            progress_dialog.setValue(i)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">            QtCore.QCoreApplication.processEvents()  <span class="comment"># 显示对话框的内容</span></span><br><span class="line"></span><br><span class="line">        progress_dialog.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = ProgressTestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>换一个函数举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run_progress_test</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">    mesh_list = cmds.ls(assemblies=<span class="literal">True</span>)</span><br><span class="line">    number_of_operations = <span class="built_in">len</span>(mesh_list)</span><br><span class="line"></span><br><span class="line">    progress_dialog = QtWidgets.QProgressDialog(<span class="string">&quot;Waiting to process...&quot;</span>, <span class="string">&quot;Cancel&quot;</span>, <span class="number">0</span>, number_of_operations, <span class="variable language_">self</span>)</span><br><span class="line">    progress_dialog.setWindowTitle(<span class="string">&quot;Progress...&quot;</span>)</span><br><span class="line">    progress_dialog.setValue(<span class="number">0</span>)</span><br><span class="line">    progress_dialog.setWindowModality(QtCore.Qt.WindowModal)  <span class="comment"># 设置为进度条窗口出现时，代码依然能够执行，但是不能使用除对话框之外的操作</span></span><br><span class="line">    progress_dialog.show()</span><br><span class="line"></span><br><span class="line">    QtCore.QCoreApplication.processEvents()  <span class="comment"># 在执行代码之前显示对话框</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> num,i <span class="keyword">in</span> <span class="built_in">enumerate</span>(mesh_list):</span><br><span class="line">        <span class="keyword">if</span> progress_dialog.wasCanceled():  <span class="comment"># 当按了cancel按钮后中止代码</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        progress_dialog.setLabelText(<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">        progress_dialog.setValue(num)</span><br><span class="line">        <span class="built_in">print</span> i</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">        QtCore.QCoreApplication.processEvents()  <span class="comment"># 显示对话框的内容</span></span><br><span class="line"></span><br><span class="line">    progress_dialog.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="gP9wT"></a></p><h2 id="同一个对话框">同一个对话框</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661744051767-0810ebd0-b8ae-434d-ac81-c539eb784adf.png#averageHue=%23696969&amp;clientId=u8655e55d-37ca-4&amp;from=paste&amp;height=139&amp;id=u6ef4cc63&amp;originHeight=139&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3399&amp;status=done&amp;style=none&amp;taskId=ud246af90-c02d-4c8b-a77b-e03625aadad&amp;title=&amp;width=316" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661744057610-f2773001-1ecb-4c07-b68f-8eabdd426779.png#averageHue=%23696968&amp;clientId=u8655e55d-37ca-4&amp;from=paste&amp;height=139&amp;id=u9287f141&amp;originHeight=139&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5246&amp;status=done&amp;style=none&amp;taskId=u7482b385-c5c1-46f8-aa0e-a9604252dce&amp;title=&amp;width=316" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ProgressTestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Progress Test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(ProgressTestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.test_in_progress = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_label = QtWidgets.QLabel(<span class="string">&quot;Operation Progress&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar = QtWidgets.QProgressBar()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_button = QtWidgets.QPushButton(<span class="string">&quot;Do It!&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_button = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update_visibility()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        progress_layout = QtWidgets.QVBoxLayout()</span><br><span class="line">        progress_layout.addWidget(<span class="variable language_">self</span>.progress_bar_label)</span><br><span class="line">        progress_layout.addWidget(<span class="variable language_">self</span>.progress_bar)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.progress_bar_button)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.cancel_button)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 设置左上右下的边距</span></span><br><span class="line">        main_layout.addLayout(progress_layout)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_button.clicked.connect(<span class="variable language_">self</span>.run_progress_test)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_button.clicked.connect(<span class="variable language_">self</span>.cancel_progress_test)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_visibility</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_label.setVisible(<span class="variable language_">self</span>.test_in_progress)</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar.setVisible(<span class="variable language_">self</span>.test_in_progress)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.cancel_button.setVisible(<span class="variable language_">self</span>.test_in_progress)</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_button.setHidden(<span class="variable language_">self</span>.test_in_progress)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run_progress_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.test_in_progress:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        number_of_operation = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.progress_bar.setRange(<span class="number">0</span>, number_of_operation)</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar.setValue(<span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">self</span>.progress_bar_label.setText(<span class="string">&quot;Operation Progress&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.test_in_progress = <span class="literal">True</span></span><br><span class="line">        <span class="variable language_">self</span>.update_visibility()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, number_of_operation + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.test_in_progress:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.progress_bar_label.setText(<span class="string">&quot;Processing operation: &#123;0&#125; (of &#123;1&#125;)&quot;</span>.<span class="built_in">format</span>(i, number_of_operation))</span><br><span class="line">            <span class="variable language_">self</span>.progress_bar.setValue(i)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">            QtCore.QCoreApplication.processEvents()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.test_in_progress = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.update_visibility()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">cancel_progress_test</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.test_in_progress = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = ProgressTestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="oQ0bx"></a></p><h1>QWidget vs QDialog</h1><p><a name="GiDDj"></a></p><h2 id="QWidget与QDialog的显示区别">QWidget与QDialog的显示区别</h2><p>首先一个区别就是这两个<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662026474082-19caa88c-f472-4130-9f16-c0d88eee7657.png#averageHue=%23494949&amp;clientId=u283bb055-7ea9-4&amp;from=paste&amp;height=337&amp;id=u7f86f38f&amp;originHeight=337&amp;originWidth=918&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45973&amp;status=done&amp;style=none&amp;taskId=ub15c8f00-9cf4-4090-ae90-0b144a8e8c6&amp;title=&amp;width=918" alt="image.png"><br>但是如果想要使用QWidget窗口的话可能会出现窗口不能独立显示出画面中，可能会内嵌到maya主窗口中，要想使用QWidget需要解决这个问题。<br>导致QWidget窗口内嵌到maya主窗口中的原因是因为之前都一直设置的将maya主窗口设置为我们的工具UI的parent，因此QWidget会内嵌到maya主窗口中。<br>要想解决QWidget窗口内嵌到maya主窗口，这里给出一个QWidget的案例<br>主要解决代码为：self.setWindowFlags(QtCore.Qt.WindowType.Window)<br><strong>这行代码也可以直接用在QDialog的案例上面，可以直接将QDialog中的窗口类型改为Window。使QDialog窗口也能够显示最小化最大化窗口按钮</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QWidget):</span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Window Test&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">200</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.ok_button = QtWidgets.QPushButton(<span class="string">&quot;OK&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.ok_button.setMinimumWidth(<span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_button = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_button.setMinimumWidth(<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.ok_button)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.cancel_button)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br></pre></td></tr></table></figure><p><a name="hAiut"></a></p><h1>添加图片（QImage，QPixmap）</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662358835263-488379c3-ddef-4112-9de1-9efe02044a60.png#averageHue=%23ceb079&amp;clientId=u4f2d97de-80f8-4&amp;from=paste&amp;height=259&amp;id=u9f6dd67f&amp;originHeight=259&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112997&amp;status=done&amp;style=none&amp;taskId=u3f249d07-3316-4b17-8bfe-078053fe98f&amp;title=&amp;width=619" alt="image.png">左边是使用平滑模式，右边没有使用。<br>image = image.scaled(280, 100, QtCore.Qt.IgnoreAspectRatio, QtCore.Qt.SmoothTransformation)  # 使用平滑模式，使缩小图片时不会丢失细节。<br>QPushButton 使用setIcon方法<br>QLabel 使用setPixmap方法<br>设置pixmap对象时需要为pixmap指定一个image对象，调整图片就调整image。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestDialog</span>(QtWidgets.QDialog):</span><br><span class="line">    FILE_FILTERS = <span class="string">&quot;Maya(*.ma *.mb);;Maya ASCII (*.ma);;Maya Binary (*.mb);;All Files (*.*)&quot;</span>  <span class="comment"># 全部的过滤项</span></span><br><span class="line"></span><br><span class="line">    selected_filter = <span class="string">&quot;Maya (*.ma *.mb)&quot;</span>  <span class="comment"># 记录选择的过滤项，每次更改过滤项的同时会更改这个全局变量的值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(TestDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Open/Import/Reference&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.create_title_label()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.filepath_le = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn = QtWidgets.QPushButton()</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.setIcon(QtGui.QIcon(<span class="string">&#x27;:fileOpen.png&#x27;</span>))</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.setToolTip(<span class="string">&quot;select File&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.open_rb = QtWidgets.QRadioButton(<span class="string">&quot;Open&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.open_rb.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.import_rb = QtWidgets.QRadioButton(<span class="string">&quot;Import&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.reference_rb = QtWidgets.QRadioButton(<span class="string">&quot;Reference&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.force_cb = QtWidgets.QCheckBox(<span class="string">&quot;Force&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.apply_btn = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_title_label</span>(<span class="params">self</span>):</span><br><span class="line">        image_path = <span class="string">&quot;D:/ZhangRuiChen/image/test_image.jpg&quot;</span></span><br><span class="line">        image = QtGui.QImage(image_path)</span><br><span class="line">        image = image.scaled(<span class="number">280</span>, <span class="number">100</span>, QtCore.Qt.IgnoreAspectRatio, QtCore.Qt.SmoothTransformation)</span><br><span class="line"></span><br><span class="line">        pixmap = QtGui.QPixmap()</span><br><span class="line">        pixmap.convertFromImage(image)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.title_label = QtWidgets.QLabel(<span class="string">&quot;My Awesome Utility&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.title_label.setPixmap(pixmap)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        file_path_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        file_path_layout.addWidget(<span class="variable language_">self</span>.filepath_le)</span><br><span class="line">        file_path_layout.addWidget(<span class="variable language_">self</span>.select_file_path_btn)</span><br><span class="line"></span><br><span class="line">        radio_btn_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.open_rb)</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.import_rb)</span><br><span class="line">        radio_btn_layout.addWidget(<span class="variable language_">self</span>.reference_rb)</span><br><span class="line"></span><br><span class="line">        forme_layout = QtWidgets.QFormLayout()</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;File&quot;</span>, file_path_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, radio_btn_layout)</span><br><span class="line">        forme_layout.addRow(<span class="string">&quot;&quot;</span>, <span class="variable language_">self</span>.force_cb)</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.apply_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.title_label)</span><br><span class="line">        main_layout.addLayout(forme_layout)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.select_file_path_btn.clicked.connect(<span class="variable language_">self</span>.show_file_select_dialog)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.open_rb.toggled.connect(<span class="variable language_">self</span>.update_force_visibility)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.apply_btn.clicked.connect(<span class="variable language_">self</span>.load_file)</span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_file_select_dialog</span>(<span class="params">self</span>):</span><br><span class="line">        file_path, <span class="variable language_">self</span>.selected_filter = QtWidgets.QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&quot;Select File&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                                                                                <span class="variable language_">self</span>.FILE_FILTERS, <span class="variable language_">self</span>.selected_filter)</span><br><span class="line">        <span class="keyword">if</span> file_path:</span><br><span class="line">            <span class="variable language_">self</span>.filepath_le.setText(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_force_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="variable language_">self</span>.force_cb.setVisible(checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_file</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = <span class="variable language_">self</span>.filepath_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)  <span class="comment"># 得到文件的信息</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.exists():  <span class="comment"># 判断文件是否存在</span></span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;File does not exist: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.open_rb.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.open_file(file_path)</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.import_rb.isChecked():</span><br><span class="line">            <span class="variable language_">self</span>.import_file(file_path)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.reference_file(file_path)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        force = <span class="variable language_">self</span>.force_cb.isChecked()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> force <span class="keyword">and</span> cmds.file(q=<span class="literal">True</span>, modified=<span class="literal">True</span>):</span><br><span class="line">            result = QtWidgets.QMessageBox.question(<span class="variable language_">self</span>, <span class="string">&quot;Modified&quot;</span>, <span class="string">&quot;Current scene has unsaved changes. Continue?&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> result == QtWidgets.QMessageBox.StandardButton.Yes:</span><br><span class="line">                force = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        cmds.file(file_path, <span class="built_in">open</span>=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>, force=force)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">import_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, i=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reference_file</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        cmds.file(file_path, r=<span class="literal">True</span>, ignoreVersion=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = TestDialog()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="jN8Ha"></a></p><h1>遍历文件夹列出树结构</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671160357979-d432cf28-a6dd-4089-a185-1fca578d8897.png#averageHue=%23484847&amp;clientId=u0295db91-fe64-4&amp;from=paste&amp;height=309&amp;id=u14a78c68&amp;originHeight=278&amp;originWidth=262&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6045&amp;status=done&amp;style=none&amp;taskId=u0d81fb05-71d8-41c8-817f-2df86fdee7e&amp;title=&amp;width=291.11111882292215" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 以树状结构显示指定路径下的所有内容，并且可以通过右键打开资源管理器并进入路径</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FileExplorerDialog</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;File Explorer&quot;</span></span><br><span class="line"></span><br><span class="line">    DIRECTOR_PATH = <span class="string">&quot;&#123;0&#125;scripts&quot;</span>.<span class="built_in">format</span>(cmds.internalVar(userAppDir=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(FileExplorerDialog, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="keyword">if</span> cmds.about(ntOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(<span class="variable language_">self</span>.windowFlags() ^ QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>):</span><br><span class="line">            <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.Tool)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_actions()</span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_wdg.setContextMenuPolicy(QtCore.Qt.CustomContextMenu) <span class="comment"># 使Context菜单只针对tree_wdg</span></span><br><span class="line">        <span class="variable language_">self</span>.tree_wdg.customContextMenuRequested.connect(<span class="variable language_">self</span>.show_context_menu) <span class="comment"># 使Context菜单为自定义的并给出菜单</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_list()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.show_in_folder_action = QtWidgets.QAction(<span class="string">&quot;Show in Folder&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.path_label = QtWidgets.QLabel(<span class="variable language_">self</span>.DIRECTOR_PATH)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_wdg = QtWidgets.QTreeWidget()</span><br><span class="line">        <span class="variable language_">self</span>.tree_wdg.setHeaderHidden(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.close_btn = QtWidgets.QPushButton(<span class="string">&quot;Close&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.close_btn)</span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>) <span class="comment"># 设置左上右下的边距</span></span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.path_label)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.tree_wdg)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.close_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line">        <span class="variable language_">self</span>.show_in_folder_action.triggered.connect(<span class="variable language_">self</span>.show_in_folder)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 显示文件树状结构 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.tree_wdg.clear()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.add_children(<span class="literal">None</span>, <span class="variable language_">self</span>.DIRECTOR_PATH)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_children</span>(<span class="params">self, parent_item, dir_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加所有的子节点 &quot;&quot;&quot;</span></span><br><span class="line">        directory = QtCore.QDir(dir_path) <span class="comment"># 创建目录为dir_path的QDir对象</span></span><br><span class="line">        <span class="comment"># entryList作用是得到目录下的所有文件的字符串列表，参数第一个是设置过滤器，这里是要所有项并且没有.和..   第二个是设置排列，目录在最上方并且不区分大小写</span></span><br><span class="line">        files_in_directory = directory.entryList(QtCore.QDir.NoDotAndDotDot | QtCore.QDir.AllEntries, QtCore.QDir.DirsFirst | QtCore.QDir.IgnoreCase) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> file_name <span class="keyword">in</span> files_in_directory:</span><br><span class="line">            <span class="variable language_">self</span>.add_child(parent_item, dir_path, file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_child</span>(<span class="params">self, parent_item, dir_path, file_name</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 实现添加子节点 &quot;&quot;&quot;</span></span><br><span class="line">        file_path = <span class="string">&quot;&#123;0&#125;/&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(dir_path, file_name)</span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file_info.suffix().lower() == <span class="string">&quot;pyc&quot;</span>: <span class="comment"># 过滤后缀为pyc的文件</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        item = QtWidgets.QTreeWidgetItem(parent_item, [file_name])</span><br><span class="line">        item.setData(<span class="number">0</span>, QtCore.Qt.UserRole, file_path) <span class="comment"># QtCore.Qt.UserRole可以理解为序号0,一个item可以拥有多个数据，因此可以通过QtCore.Qt.UserRole，QtCore.Qt.UserRole+1来设置数据的序号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> file_info.isDir():</span><br><span class="line">            <span class="string">&quot;&quot;&quot; 如果是文件夹就用add_children方法 &quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>.add_children(item, file_info.absoluteFilePath())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> parent_item:</span><br><span class="line">            <span class="string">&quot;&quot;&quot; 将item添加到最顶层树结构中 &quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>.tree_wdg.addTopLevelItem(item)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, pos</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 自定义菜单 &quot;&quot;&quot;</span></span><br><span class="line">        item = <span class="variable language_">self</span>.tree_wdg.itemAt(pos) <span class="comment"># 鼠标位置处的item</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> item:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        file_path = item.data(<span class="number">0</span>, QtCore.Qt.UserRole) <span class="comment"># 得到item里的数据</span></span><br><span class="line">        <span class="variable language_">self</span>.show_in_folder_action.setData(file_path) <span class="comment"># 设置action对应的数据</span></span><br><span class="line"></span><br><span class="line">        context_menu = QtWidgets.QMenu() <span class="comment"># 创建一个菜单</span></span><br><span class="line">        context_menu.addAction(<span class="variable language_">self</span>.show_in_folder_action) <span class="comment"># 将action添加到菜单下</span></span><br><span class="line">        context_menu.exec_(<span class="variable language_">self</span>.tree_wdg.mapToGlobal(pos)) <span class="comment"># 在鼠标位置处右键显示菜单</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_in_folder</span>(<span class="params">self</span>):</span><br><span class="line">        file_path = <span class="variable language_">self</span>.show_in_folder_action.data()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> cmds.about(windows=<span class="literal">True</span>): <span class="comment"># 如果是windows系统就使用windows系统的方法打开资源管理器</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.open_in_explorer(file_path): </span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> cmds.about(macOS=<span class="literal">True</span>): <span class="comment"># 如果是mac系统就使用mac系统的方法打开资源管理器</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.open_in_finder(file_path):</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 两个方法都不可以的情况下，使用Qt自带的方法打开，缺点是不能自动选择对应的文件</span></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)</span><br><span class="line">        <span class="keyword">if</span> file_info.isDir(): <span class="comment"># 如果是路径是目录就直接使用</span></span><br><span class="line">            QtGui.QDesktopServices.openUrl(file_path)</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 如果是文件就通过file_info.path方法得到目录路径</span></span><br><span class="line">            QtGui.QDesktopServices.openUrl(file_info.path())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_in_explorer</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; Windows打开资源管理器 &quot;&quot;&quot;</span></span><br><span class="line">        file_info = QtCore.QFileInfo(file_path)</span><br><span class="line">        args = []</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_info.isDir(): <span class="comment"># 如果不是目录就选择路径对应的文件</span></span><br><span class="line">            args.append(<span class="string">&quot;/select,&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        args.append(QtCore.QDir.toNativeSeparators(file_path))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> QtCore.QProcess.startDetached(<span class="string">&quot;explorer&quot;</span>, args):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_in_finder</span>(<span class="params">self, file_path</span>):</span><br><span class="line">        args = []</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;tell application &quot;Finder&quot;&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;activate&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;select POSIX file &quot;&#123;0&#125;&quot;&#x27;</span>.<span class="built_in">format</span>(file_path))</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;end tell&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;-e&#x27;</span>)</span><br><span class="line">        args.append(<span class="string">&#x27;return&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(QtCore.QPrecess.startDetached(<span class="string">&quot;/usr/bin/osascript&quot;</span>, args)):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        my_dialog.close()  </span><br><span class="line">        my_dialog.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    my_dialog = FileExplorerDialog()</span><br><span class="line">    my_dialog.show()</span><br><span class="line">    </span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><a name="NIYFB"></a></p><h1>灯光面板</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1672827738289-ccf9c154-f02e-4b86-9323-dde79302d9bb.png#averageHue=%23595958&amp;clientId=u1b81c09d-af2e-4&amp;from=paste&amp;height=324&amp;id=u58ec6abd&amp;originHeight=292&amp;originWidth=502&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13895&amp;status=done&amp;style=none&amp;taskId=uf8b0edb7-09fb-4b48-a1c4-4ca5add6f0d&amp;title=&amp;width=557.7777925538431" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 灯光面板举例</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomColorButton</span>(QtWidgets.QWidget): <span class="comment"># 自定义颜色按钮</span></span><br><span class="line"></span><br><span class="line">    color_changed = QtCore.Signal(QtGui.QColor) <span class="comment"># 自定义信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, color=QtCore.Qt.white, parent=<span class="literal">None</span></span>): <span class="comment"># 表示可以类接收一个颜色参数,默认是白色</span></span><br><span class="line">        <span class="built_in">super</span>(CustomColorButton, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setObjectName(<span class="string">&quot;CustomColorButton&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_control()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.set_size(<span class="number">50</span>, <span class="number">14</span>)</span><br><span class="line">        <span class="variable language_">self</span>.set_color(color) <span class="comment"># 设置初始颜色,如果对象有传过来颜色设置则为对象的颜色</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 1. 创建colorSliderGrp &quot;&quot;&quot;</span></span><br><span class="line">        window = cmds.window()</span><br><span class="line">        <span class="variable language_">self</span>._name = cmds.colorSliderGrp()</span><br><span class="line">        <span class="comment"># print(&quot;original name: &#123;0&#125;&quot;.format(self._name))</span></span><br><span class="line"></span><br><span class="line">        <span class="string">&quot;&quot;&quot; 2. 找到colorSliderGrp控件 &quot;&quot;&quot;</span></span><br><span class="line">        color_slider_obj = omui.MQtUtil.findControl(<span class="variable language_">self</span>._name) <span class="comment"># color_slider_obj是一个c++的形式</span></span><br><span class="line">        <span class="keyword">if</span> color_slider_obj:</span><br><span class="line">            <span class="variable language_">self</span>._color_slider_widget = wrapInstance(long(color_slider_obj), QtWidgets.QWidget)</span><br><span class="line">        </span><br><span class="line">            <span class="string">&quot;&quot;&quot; 3. 将colorSliderGrp控件的父级设置为这个自定义控件 &quot;&quot;&quot;</span></span><br><span class="line">            main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">            main_layout.setObjectName(<span class="string">&quot;main_layout&quot;</span>)</span><br><span class="line">            main_layout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            main_layout.addWidget(<span class="variable language_">self</span>._color_slider_widget)</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;&quot;&quot; 4. 更新colorSliderGrp的control name (之前是属于maya的) &quot;&quot;&quot;</span></span><br><span class="line">            <span class="variable language_">self</span>._name = <span class="variable language_">self</span>._color_slider_widget.objectName()</span><br><span class="line">            <span class="comment"># print(&quot;new name: &#123;0&#125;&quot;.format(self._name))</span></span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;&quot;&quot; 5. 识别或存储 colorSliderGrp的子控件(在必要的时候可以隐藏它) &quot;&quot;&quot;</span></span><br><span class="line">            <span class="comment"># children = self._color_slider_widget.children()</span></span><br><span class="line">            <span class="comment"># for child in children:</span></span><br><span class="line">            <span class="comment">#     print(child)</span></span><br><span class="line">            <span class="comment">#     print(child.objectName())</span></span><br><span class="line">            <span class="comment"># print(&quot;---&quot;)</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>._slider_widget = <span class="variable language_">self</span>._color_slider_widget.findChild(QtWidgets.QWidget, <span class="string">&quot;slider&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>._slider_widget:</span><br><span class="line">                <span class="variable language_">self</span>._slider_widget.hide()</span><br><span class="line">            </span><br><span class="line">            <span class="variable language_">self</span>._color_widget = <span class="variable language_">self</span>._color_slider_widget.findChild(QtWidgets.QWidget, <span class="string">&quot;port&quot;</span>)</span><br><span class="line"></span><br><span class="line">            cmds.colorSliderGrp(<span class="variable language_">self</span>._name, e=<span class="literal">True</span>, changeCommand=partial(<span class="variable language_">self</span>.on_color_changed))</span><br><span class="line"></span><br><span class="line">        cmds.deleteUI(window, window=<span class="literal">True</span>)</span><br><span class="line">          </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_size</span>(<span class="params">self, width, height</span>):</span><br><span class="line">        <span class="variable language_">self</span>._color_slider_widget.setFixedWidth(width)</span><br><span class="line">        <span class="variable language_">self</span>._color_widget.setFixedHeight(height)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_color</span>(<span class="params">self, color</span>):</span><br><span class="line">        color = QtGui.QColor(color)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> color != <span class="variable language_">self</span>.get_color():</span><br><span class="line">            cmds.colorSliderGrp(<span class="variable language_">self</span>._name, e=<span class="literal">True</span>, rgbValue=(color.redF(), color.greenF(), color.blueF())) <span class="comment"># F代表以浮点数表示</span></span><br><span class="line">            <span class="variable language_">self</span>.on_color_changed()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">self</span>):</span><br><span class="line">        color = cmds.colorSliderGrp(<span class="variable language_">self</span>._name, q=<span class="literal">True</span>, rgbValue=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        color = QtGui.QColor(color[<span class="number">0</span>] *<span class="number">255</span>, color[<span class="number">1</span>] * <span class="number">255</span>, color[<span class="number">2</span>] * <span class="number">255</span>)</span><br><span class="line">        <span class="keyword">return</span> color</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_color_changed</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="variable language_">self</span>.color_changed.emit(<span class="variable language_">self</span>.get_color())</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightItem</span>(QtWidgets.QWidget):</span><br><span class="line">    <span class="comment"># 自定义灯光控件，一个灯光对应一个控件</span></span><br><span class="line"></span><br><span class="line">    SUPPORTED_TYPES = [<span class="string">&quot;ambientLight&quot;</span>, <span class="string">&quot;directionalLight&quot;</span>, <span class="string">&quot;pointLight&quot;</span>, <span class="string">&quot;spotLight&quot;</span>, <span class="string">&quot;areaLight&quot;</span>]</span><br><span class="line">    EMIT_TYPES = [<span class="string">&quot;directionalLight&quot;</span>, <span class="string">&quot;pointLight&quot;</span>, <span class="string">&quot;spotLight&quot;</span>, <span class="string">&quot;areaLight&quot;</span>]</span><br><span class="line"></span><br><span class="line">    node_deleted = QtCore.Signal(<span class="built_in">str</span>) <span class="comment"># 自定义节点删除时的信号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shape_name, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(LightItem, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setFixedHeight(<span class="number">26</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.shape_name = shape_name <span class="comment"># 灯光的shape名字</span></span><br><span class="line">        <span class="variable language_">self</span>.uuid = cmds.ls(shape_name, uuid=<span class="literal">True</span>) <span class="comment"># 灯光的uuid</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.script_jobs = []</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_script_jobs()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建控件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.light_type_btn = QtWidgets.QPushButton()</span><br><span class="line">        <span class="variable language_">self</span>.light_type_btn.setFixedSize(<span class="number">20</span>, <span class="number">20</span>)</span><br><span class="line">        <span class="variable language_">self</span>.light_type_btn.setFlat(<span class="literal">True</span>) <span class="comment"># 设置按钮的显示形式</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.visiblity_cb = QtWidgets.QCheckBox()</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.transform_name_label = QtWidgets.QLabel(<span class="string">&quot;placeholder&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.transform_name_label.setFixedWidth(<span class="number">120</span>)</span><br><span class="line">        <span class="variable language_">self</span>.transform_name_label.setAlignment(QtCore.Qt.AlignCenter)</span><br><span class="line"></span><br><span class="line">        light_type = <span class="variable language_">self</span>.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.SUPPORTED_TYPES:</span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb = QtWidgets.QDoubleSpinBox()</span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb.setRange(<span class="number">0.0</span>, <span class="number">100.0</span>)</span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb.setDecimals(<span class="number">3</span>) <span class="comment"># 设置数值到小数点后三位</span></span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb.setSingleStep(<span class="number">0.1</span>)</span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons) <span class="comment"># 设置spinbox没有上下箭头</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.color_btn = CustomColorButton()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.EMIT_TYPES:</span><br><span class="line">                <span class="variable language_">self</span>.emit_diffuse_cb = QtWidgets.QCheckBox()</span><br><span class="line">                <span class="variable language_">self</span>.emit_specular_cb = QtWidgets.QCheckBox()</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.update_values()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建布局 &quot;&quot;&quot;</span></span><br><span class="line">        main_layout = QtWidgets.QHBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.light_type_btn)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.visiblity_cb)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.transform_name_label)</span><br><span class="line"></span><br><span class="line">        light_type = <span class="variable language_">self</span>.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.SUPPORTED_TYPES:</span><br><span class="line">            main_layout.addWidget(<span class="variable language_">self</span>.intensity_dsb)</span><br><span class="line">            main_layout.addSpacing(<span class="number">10</span>)</span><br><span class="line">            main_layout.addWidget(<span class="variable language_">self</span>.color_btn)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.EMIT_TYPES:</span><br><span class="line">                main_layout.addSpacing(<span class="number">34</span>)</span><br><span class="line">                main_layout.addWidget(<span class="variable language_">self</span>.emit_diffuse_cb)</span><br><span class="line">                main_layout.addSpacing(<span class="number">50</span>)</span><br><span class="line">                main_layout.addWidget(<span class="variable language_">self</span>.emit_specular_cb)</span><br><span class="line"></span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建信号与槽的连接 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.light_type_btn.clicked.connect(<span class="variable language_">self</span>.select_light)</span><br><span class="line">        <span class="variable language_">self</span>.visiblity_cb.toggled.connect(<span class="variable language_">self</span>.set_visibility)</span><br><span class="line">        </span><br><span class="line">        light_type = <span class="variable language_">self</span>.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.SUPPORTED_TYPES:</span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb.editingFinished.connect(<span class="variable language_">self</span>.on_intensity_changed)</span><br><span class="line">            <span class="variable language_">self</span>.color_btn.color_changed.connect(<span class="variable language_">self</span>.set_color)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.EMIT_TYPES:</span><br><span class="line">                <span class="variable language_">self</span>.emit_diffuse_cb.toggled.connect(<span class="variable language_">self</span>.set_emit_diffuse)</span><br><span class="line">                <span class="variable language_">self</span>.emit_specular_cb.toggled.connect(<span class="variable language_">self</span>.set_emit_specular)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_values</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.light_type_btn.setIcon(<span class="variable language_">self</span>.get_light_type_icon())</span><br><span class="line">        <span class="variable language_">self</span>.visiblity_cb.setChecked(<span class="variable language_">self</span>.is_visible())</span><br><span class="line">        <span class="variable language_">self</span>.transform_name_label.setText(<span class="variable language_">self</span>.get_transform_name())</span><br><span class="line"></span><br><span class="line">        light_type = <span class="variable language_">self</span>.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.SUPPORTED_TYPES:</span><br><span class="line">            <span class="variable language_">self</span>.intensity_dsb.setValue(<span class="variable language_">self</span>.get_intensity())</span><br><span class="line">            <span class="variable language_">self</span>.color_btn.set_color(<span class="variable language_">self</span>.get_color())</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.EMIT_TYPES:</span><br><span class="line">                <span class="variable language_">self</span>.emit_diffuse_cb.setChecked(<span class="variable language_">self</span>.emits_diffuse())</span><br><span class="line">                <span class="variable language_">self</span>.emit_specular_cb.setChecked(<span class="variable language_">self</span>.emits_specular())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_transform_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.listRelatives(<span class="variable language_">self</span>.shape_name, parent=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_attribute_value</span>(<span class="params">self, name, attribute</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.getAttr(<span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, attribute))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_attribute_value</span>(<span class="params">self, name, attribute,*args</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 如果设置颜色或者属性的值与当前值相同就不进行设置，避免script job产生的重复设置属性的bug</span></span><br><span class="line">        <span class="keyword">if</span> attribute == <span class="string">&quot;color&quot;</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.get_color() == <span class="variable language_">self</span>.color_btn.get_color():</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">elif</span> args[<span class="number">0</span>] == <span class="variable language_">self</span>.get_attribute_value(name, attribute):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        attr_name = <span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, attribute)</span><br><span class="line">        cmds.setAttr(attr_name, *args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_light_type</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.objectType(<span class="variable language_">self</span>.shape_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_light_type_icon</span>(<span class="params">self</span>):</span><br><span class="line">        light_type = <span class="variable language_">self</span>.get_light_type()</span><br><span class="line"></span><br><span class="line">        icon = QtGui.QIcon()</span><br><span class="line">        <span class="keyword">if</span> light_type == <span class="string">&quot;ambientLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:ambientLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> light_type == <span class="string">&quot;directionalLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:directionalLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> light_type == <span class="string">&quot;pointLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:pointLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> light_type == <span class="string">&quot;spotLight&quot;</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:spotLight.svg&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            icon = QtGui.QIcon(<span class="string">&quot;:Light.png&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> icon</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_visible</span>(<span class="params">self</span>):</span><br><span class="line">        transform_name = <span class="variable language_">self</span>.get_transform_name()</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.get_attribute_value(transform_name, <span class="string">&quot;visibility&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_intensity</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.get_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;intensity&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_color</span>(<span class="params">self</span>):</span><br><span class="line">        temp_color = <span class="variable language_">self</span>.get_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;color&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> QtGui.QColor(temp_color[<span class="number">0</span>] * <span class="number">255</span>, temp_color[<span class="number">1</span>] * <span class="number">255</span>, temp_color[<span class="number">2</span>] * <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emits_diffuse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.get_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;emitDiffuse&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">emits_specular</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.get_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;emitSpecular&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_light</span>(<span class="params">self</span>):</span><br><span class="line">        cmds.select(<span class="variable language_">self</span>.get_transform_name())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_visibility</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_attribute_value(<span class="variable language_">self</span>.get_transform_name(), <span class="string">&quot;visibility&quot;</span>, checked)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_intensity_changed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;intensity&quot;</span>, <span class="variable language_">self</span>.intensity_dsb.value())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_color</span>(<span class="params">self, color</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;color&quot;</span>, color.redF(), color.greenF(), color.blueF())</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_emit_diffuse</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;emitDiffuse&quot;</span>, checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_emit_specular</span>(<span class="params">self, checked</span>):</span><br><span class="line">        <span class="variable language_">self</span>.set_attribute_value(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;emitSpecular&quot;</span>, checked)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_node_deleted</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当节点删除时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.node_deleted.emit(<span class="variable language_">self</span>.shape_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_name_changed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当名字修改时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.shape_name = cmds.ls(<span class="variable language_">self</span>.uuid)[<span class="number">0</span>]</span><br><span class="line">        <span class="variable language_">self</span>.update_values()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 为每个灯光都创建script jobs &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.delete_script_jobs()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.add_attribute_change_script_job(<span class="variable language_">self</span>.get_transform_name(), <span class="string">&quot;visibility&quot;</span>)</span><br><span class="line">        light_type = <span class="variable language_">self</span>.get_light_type()</span><br><span class="line">        <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.SUPPORTED_TYPES:</span><br><span class="line">            <span class="variable language_">self</span>.add_attribute_change_script_job(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;color&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.add_attribute_change_script_job(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;intensity&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> light_type <span class="keyword">in</span> <span class="variable language_">self</span>.EMIT_TYPES:</span><br><span class="line">                <span class="variable language_">self</span>.add_attribute_change_script_job(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;emitDiffuse&quot;</span>)</span><br><span class="line">                <span class="variable language_">self</span>.add_attribute_change_script_job(<span class="variable language_">self</span>.shape_name, <span class="string">&quot;emitSpecular&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.script_jobs.append(cmds.scriptJob(nodeDeleted=(<span class="variable language_">self</span>.shape_name, partial(<span class="variable language_">self</span>.on_node_deleted))))</span><br><span class="line">        <span class="variable language_">self</span>.script_jobs.append(cmds.scriptJob(nodeNameChanged=(<span class="variable language_">self</span>.shape_name, partial(<span class="variable language_">self</span>.on_name_changed))))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_attribute_change_script_job</span>(<span class="params">self, name, attribute</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 添加某一节点的某一属性改变时的script_job时使用的方法 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.script_jobs.append(cmds.scriptJob(attributeChange=(<span class="string">&quot;&#123;0&#125;.&#123;1&#125;&quot;</span>.<span class="built_in">format</span>(name, attribute), partial(<span class="variable language_">self</span>.update_values))))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> job_number <span class="keyword">in</span> <span class="variable language_">self</span>.script_jobs:</span><br><span class="line">            cmds.evalDeferred(<span class="string">&quot;if cmds.scriptJob(exists=&#123;0&#125;):\tcmds.scriptJob(kill=&#123;0&#125;, force=True)&quot;</span>.<span class="built_in">format</span>(job_number))</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.script_jobs = []</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightPanel</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Light Panel&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(LightPanel, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">500</span>, <span class="number">260</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.light_items = []</span><br><span class="line">        <span class="variable language_">self</span>.script_jobs = []</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.refreshButton = QtWidgets.QPushButton(<span class="string">&quot;Refresh Lights&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        header_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        header_layout.addSpacing(<span class="number">100</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Light&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">50</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Intensity&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">44</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Color&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">24</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Emit Diffuse&quot;</span>))</span><br><span class="line">        header_layout.addSpacing(<span class="number">10</span>)</span><br><span class="line">        header_layout.addWidget(QtWidgets.QLabel(<span class="string">&quot;Emit Spec&quot;</span>))</span><br><span class="line">        header_layout.addStretch()</span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.refreshButton)</span><br><span class="line"></span><br><span class="line">        light_list_wdg = QtWidgets.QWidget()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.light_layout = QtWidgets.QVBoxLayout(light_list_wdg) <span class="comment"># light_list_wdg在light_layout下</span></span><br><span class="line">        <span class="variable language_">self</span>.light_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.light_layout.addSpacing(<span class="number">3</span>)</span><br><span class="line">        <span class="variable language_">self</span>.light_layout.setAlignment(QtCore.Qt.AlignTop)</span><br><span class="line"></span><br><span class="line">        light_list_scroll_area = QtWidgets.QScrollArea()</span><br><span class="line">        light_list_scroll_area.setWidgetResizable(<span class="literal">True</span>)</span><br><span class="line">        light_list_scroll_area.setWidget(light_list_wdg) <span class="comment"># scroll_area下有light_list_wdg</span></span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addLayout(header_layout)</span><br><span class="line">        main_layout.addWidget(light_list_scroll_area) <span class="comment"># 主布局下有个scroll_area</span></span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 信号与槽的连接 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.refreshButton.clicked.connect(<span class="variable language_">self</span>.refresh_lights)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_lights_in_scene</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 得到场景中所有灯光 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.ls(typ=<span class="string">&quot;light&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_lights</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 刷新灯光面板 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.clear_lights()</span><br><span class="line"></span><br><span class="line">        scene_lights = <span class="variable language_">self</span>.get_lights_in_scene()</span><br><span class="line">        <span class="keyword">for</span> light <span class="keyword">in</span> scene_lights:</span><br><span class="line">            light_item = LightItem(light)</span><br><span class="line">            light_item.node_deleted.connect(<span class="variable language_">self</span>.on_node_deleted) <span class="comment"># 自定义信号node_deleted发送数据时传给on_node_deleted函数</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.light_layout.addWidget(light_item)</span><br><span class="line">            <span class="variable language_">self</span>.light_items.append(light_item)</span><br><span class="line">            </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_lights</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 清空灯光面板 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> light <span class="keyword">in</span> <span class="variable language_">self</span>.light_items:</span><br><span class="line">            light.delete_script_jobs()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.light_items = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.light_layout.count() &gt; <span class="number">0</span>:</span><br><span class="line">            light_item = <span class="variable language_">self</span>.light_layout.takeAt(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> light_item.widget():</span><br><span class="line">                light_item.widget().deleteLater()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建script jobs &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.script_jobs.append(cmds.scriptJob(event=[<span class="string">&quot;DagObjectCreated&quot;</span>, partial(<span class="variable language_">self</span>.on_dag_object_created)])) <span class="comment"># 当创建dag物体时执行on_dag_object_created函数</span></span><br><span class="line">        <span class="variable language_">self</span>.script_jobs.append(cmds.scriptJob(event=[<span class="string">&quot;Undo&quot;</span>, partial(<span class="variable language_">self</span>.on_undo)])) <span class="comment"># 当ctrl+z时执行on_undo函数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete_script_jobs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 删除script jobs &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> job_number <span class="keyword">in</span> <span class="variable language_">self</span>.script_jobs:</span><br><span class="line">            cmds.scriptJob(kill=job_number)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.script_jobs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_dag_object_created</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当dag中出现新物体时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cmds.ls(typ=<span class="string">&quot;light&quot;</span>)) != <span class="built_in">len</span>(<span class="variable language_">self</span>.light_items):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;New light created...&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.refresh_lights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_undo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; ctrl+z时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(cmds.ls(typ=<span class="string">&quot;light&quot;</span>)) != <span class="built_in">len</span>(<span class="variable language_">self</span>.light_items):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Undo light created...&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.refresh_lights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_node_deleted</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 节点删除时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.refresh_lights()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当打开窗口时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.refresh_lights()</span><br><span class="line">        <span class="variable language_">self</span>.create_script_jobs()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当关闭窗口时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.clear_lights()</span><br><span class="line">        <span class="variable language_">self</span>.delete_script_jobs()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    cmds.file(<span class="string">&quot;D:/ZhangRuiChen/Pyside2ForMaya/light_test.ma&quot;</span>,o=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        light_panel_dialog.close()</span><br><span class="line">        light_panel_dialog.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    light_panel_dialog = LightPanel()</span><br><span class="line">    light_panel_dialog.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ZzJ9v"></a></p><h2 id="scriptJob">scriptJob</h2><p>不知道scriptJob的话在这里看<a href="https://www.yuque.com/quanmianxiaokangdelouwangzhiyu/pk4uzy/ucqe3u#Rk562">https://www.yuque.com/quanmianxiaokangdelouwangzhiyu/pk4uzy/ucqe3u#Rk562</a><br>注册scriptJob：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671697160970-4d903cf0-97ad-438b-bd77-a3ad27d538c2.png#averageHue=%2334302c&amp;clientId=ub7d727ca-d9ed-4&amp;from=paste&amp;height=382&amp;id=u618a8281&amp;originHeight=344&amp;originWidth=1208&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174235&amp;status=done&amp;style=none&amp;taskId=udb8d8554-33f9-4a7f-9192-67c2b7e20eb&amp;title=&amp;width=1342.2222577789694" alt="image.png"><br>取消注册scriptJob:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671697289737-9aca734a-76ed-46bf-820c-849acdf948ba.png#averageHue=%23291d1d&amp;clientId=ub7d727ca-d9ed-4&amp;from=paste&amp;height=146&amp;id=u7a1ba4a6&amp;originHeight=131&amp;originWidth=885&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49637&amp;status=done&amp;style=none&amp;taskId=u8326d511-f58c-4ccb-be1f-125f8ed025a&amp;title=&amp;width=983.3333593827714" alt="image.png"><br><a name="TgmeX"></a></p><h1>Docking</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1676368412774-62e89b75-050f-4042-ae72-172252a91f7c.png#averageHue=%230b0b0b&amp;clientId=u0ed65455-fe7e-4&amp;from=paste&amp;height=575&amp;id=u9137e5aa&amp;originHeight=575&amp;originWidth=1321&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=195907&amp;status=done&amp;style=none&amp;taskId=u361a55fc-af62-47f2-bdfc-d0f90735912&amp;title=&amp;width=1321" alt="image.png"><br><a name="rVb0T"></a></p><h2 id="maya的workspaces设置存放的位置">maya的workspaces设置存放的位置</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1676428725500-72ba1326-f7bc-45b8-8e11-030d22cc2206.png#averageHue=%23f9f9f9&amp;clientId=u0ed65455-fe7e-4&amp;from=paste&amp;height=174&amp;id=ub49c11ba&amp;originHeight=174&amp;originWidth=537&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48522&amp;status=done&amp;style=none&amp;taskId=u0996483e-911b-4ff2-90b3-113dba0bc9b&amp;title=&amp;width=537" alt="image.png"><br><a name="Ooqxq"></a></p><h2 id="mayaMixin-py"><a href="http://mayaMixin.py">mayaMixin.py</a></h2><p>mayaMixin模块可以令我们更方便的创建可以停靠的窗口。<br>模块的路径为:C:\Program Files\Autodesk\Maya2018\Python\Lib\site-packages\maya\app\general\<a href="http://mayaMixin.py">mayaMixin.py</a><br>其中模块使用的最重要的命令是cmds.workspaceControl<br>这里的会自动保存在工作区上面，关掉maya不会清除窗口内容。是有一个前置条件的，条件是这个模块是实实在在存在的文件，然后这个模块在maya的识别目录上面。<br>令其能够自动保存在工作区上面，实现的代码是：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677225584722-63c8cec0-dea6-42fa-8dab-15951408b3b1.png#averageHue=%23ffffff&amp;clientId=ueacdff51-fb88-4&amp;from=paste&amp;height=167&amp;id=ua8a8de90&amp;originHeight=150&amp;originWidth=607&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=19623&amp;status=done&amp;style=none&amp;taskId=ua8a9886e-c8f0-4d96-8f6b-4e390b8bc36&amp;title=&amp;width=674.4444623111211" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677225538425-50afbed0-ddf3-4d53-9d07-a61791ef937b.png#averageHue=%23ffffff&amp;clientId=ueacdff51-fb88-4&amp;from=paste&amp;height=52&amp;id=ub903c2e4&amp;originHeight=47&amp;originWidth=833&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=11152&amp;status=done&amp;style=none&amp;taskId=u534c562f-94d8-47fb-bf23-516bfb8f0b8&amp;title=&amp;width=925.5555800744052" alt="image.png"><br><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html">Help</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配合MayaQWidgetDockableMixin模块制作 可以停靠在maya界面上的参考</span></span><br><span class="line"><span class="comment"># 特点：会自动保存在工作区上面，关掉maya不会清除窗口内容</span></span><br><span class="line"><span class="comment"># 开发时需要注意的点：在dock状态下不方便调试，开发时要在非dock状态以便调试</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> getCppPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> maya.app.general.mayaMixin <span class="keyword">import</span> MayaQWidgetDockableMixin</span><br><span class="line"><span class="keyword">from</span> maya.OpenMayaUI <span class="keyword">import</span> MQtUtil</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="comment"># 多重继承中要把MayaQWidgetDockableMixin放在首位</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyDockableButtonStatic</span>(MayaQWidgetDockableMixin, QtWidgets.QPushButton):</span><br><span class="line"></span><br><span class="line">    UI_NAME = <span class="string">&quot;MyDockableButtonStatic&quot;</span> <span class="comment"># 定义一个准确的UI_NAME使UI具有唯一性</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyDockableButtonStatic, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setObjectName(<span class="variable language_">self</span>.UI_NAME)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;Dockable Window&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setText(<span class="string">&quot;My Button&quot;</span>)</span><br><span class="line"></span><br><span class="line">        workspace_control_name = <span class="string">&quot;&#123;0&#125;WorkspaceControl&quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.UI_NAME)</span><br><span class="line">        <span class="comment"># 设置父级为工作区</span></span><br><span class="line">        <span class="keyword">if</span> cmds.workspaceControl(workspace_control_name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>):</span><br><span class="line">            workspace_control_ptr = long(MQtUtil.findControl(workspace_control_name))</span><br><span class="line">            widget_ptr = long(getCppPointer(<span class="variable language_">self</span>)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            MQtUtil.addWidgetToMayaLayout(widget_ptr, workspace_control_ptr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> button <span class="keyword">and</span> button.parent():</span><br><span class="line">            workspace_control_name = button.parent().objectName()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> cmds.window(workspace_control_name, exists=<span class="literal">True</span>):</span><br><span class="line">                cmds.deleteUI(workspace_control_name)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    button = MyDockableButtonStatic()</span><br><span class="line"></span><br><span class="line">    ui_script = <span class="string">&quot;from dockable_button_example import MyDockableButtonStatic\nbutton = MyDockableButtonStatic()&quot;</span></span><br><span class="line">    button.show(dockable=<span class="literal">True</span>, uiScript=ui_script) <span class="comment"># 调用MayaQWidgetDockableMixin模块的show方法来使创建的窗口能够dock</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="OCpb5"></a></p><h2 id="workspace-control-py">workspace_control.py</h2><p>workspaceControl的介绍:<br>创建和管理用于在允许将窗口停靠和堆叠在一起的布局中托管窗口的小部件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让UI成为workspaceControl的widget，这样就能够创建出可以dock的UI了</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span>  QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span>  QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> getCppPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkspaceControl</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 根据workspaceControl命令自定义的方便使用类 &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.widget = <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, label, widget, ui_script=<span class="literal">None</span></span>):</span><br><span class="line">        </span><br><span class="line">        cmds.workspaceControl(<span class="variable language_">self</span>.name, label=label)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ui_script:</span><br><span class="line">            cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, uiScript=ui_script)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.add_widget_to_layout(widget)</span><br><span class="line">        <span class="variable language_">self</span>.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restore</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 恢复widget的显示 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.add_widget_to_layout(widget)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_widget_to_layout</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 将widget添加到layout上 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> widget:</span><br><span class="line">            <span class="variable language_">self</span>.widget = widget</span><br><span class="line">            <span class="variable language_">self</span>.widget.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors) <span class="comment"># 参考mayaMixin推荐的一个属性设置，意思是我们的widget会跟随父窗口属性改变，但是不要跟随父窗口属性改变的同时将祖先窗口改变。</span></span><br><span class="line"></span><br><span class="line">            workspace_control_ptr = long(omui.MQtUtil.findControl(<span class="variable language_">self</span>.name)) <span class="comment"># 得到workspaceControl的指针</span></span><br><span class="line">            widget_ptr = long(getCppPointer(<span class="variable language_">self</span>.widget)[<span class="number">0</span>]) <span class="comment"># 得到widget的cpp指针</span></span><br><span class="line"></span><br><span class="line">            omui.MQtUtil.addWidgetToMayaLayout(widget_ptr, workspace_control_ptr) <span class="comment"># 令我们的widget属于maya布局</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exists</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl是否存在 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_visible</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl可视性 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, visible=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置workspaceControl的可视性 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> visible:</span><br><span class="line">            cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, restore=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, visible=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_label</span>(<span class="params">self, label</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置workspaceControl的标签 &quot;&quot;&quot;</span></span><br><span class="line">        cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, label=label)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_floating</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl是否浮动 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, floating=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_collapsed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 判断workspaceControl是否收缩 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, collapse=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SampleUI</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Sample UI&quot;</span></span><br><span class="line">    UI_NAME = <span class="string">&quot;SampleUI&quot;</span></span><br><span class="line"></span><br><span class="line">    ui_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建一个类方法，方便外界调用来显示可以dock的UI,如果SampleUI存在就显示它，不存在就创建</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.ui_instance:</span><br><span class="line">            cls.ui_instance.show_workspace_control()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cls.ui_instance = SampleUI()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_workspace_control_name</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置控件对应的workspaceControl名字 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;WorkspaceControl&quot;</span>.<span class="built_in">format</span>(cls.UI_NAME)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SampleUI, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setObjectName(<span class="variable language_">self</span>.__class__.UI_NAME)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widget()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line">        <span class="variable language_">self</span>.create_workspace_control()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.apply_button = QtWidgets.QPushButton(<span class="string">&quot;Apply&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.apply_button)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.apply_button.clicked.connect(<span class="variable language_">self</span>.on_clicked)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 创建workspaceControl &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.workspace_control_instance = WorkspaceControl(<span class="variable language_">self</span>.get_workspace_control_name())</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.workspace_control_instance.exists():</span><br><span class="line">            <span class="variable language_">self</span>.workspace_control_instance.restore(<span class="variable language_">self</span>) <span class="comment"># 如果workspace_control已经存在了那么就将它显示出来</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.workspace_control_instance.create(<span class="variable language_">self</span>.WINDOW_TITLE, <span class="variable language_">self</span>, ui_script=<span class="string">&quot;from workspace_control import SampleUI\nSampleUI.display()&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.workspace_control_instance.set_visible(<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">on_clicked</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Button Clicked&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 设置窗口float时以及dock时对应的标题 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.workspace_control_instance.is_floating():</span><br><span class="line">            <span class="variable language_">self</span>.workspace_control_instance.set_label(<span class="string">&quot;Floating Window&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.workspace_control_instance.set_label(<span class="string">&quot;Docked Window&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    workspace_control_name = SampleUI.get_workspace_control_name()</span><br><span class="line">    <span class="keyword">if</span> cmds.window(workspace_control_name, exists=<span class="literal">True</span>):</span><br><span class="line">        cmds.deleteUI(workspace_control_name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这串代码可以使UI在dock的同时能够通过更改UI的代码来更新界面</span></span><br><span class="line">    <span class="comment"># try:</span></span><br><span class="line">    <span class="comment">#     sample_ui.setParent(None)</span></span><br><span class="line">    <span class="comment">#     sample_ui.deleteLater()</span></span><br><span class="line">    <span class="comment"># except:</span></span><br><span class="line">    <span class="comment">#     pass</span></span><br><span class="line">    </span><br><span class="line">    sample_ui = SampleUI()</span><br><span class="line">    sample_ui.show()</span><br></pre></td></tr></table></figure><p><a name="mBEs1"></a></p><h2 id="将workspace-control作为模块导入使用的步骤">将workspace_control作为模块导入使用的步骤</h2><p><a name="Q6A1e"></a></p><h3 id="workspace-control主要修改区域：">workspace_control主要修改区域：</h3><p>新增类方法<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677206784328-27769875-35d3-4793-a1cd-9f5797845ec5.png#averageHue=%23201f1f&amp;clientId=u642778c3-94fb-4&amp;from=paste&amp;height=241&amp;id=u312e1185&amp;originHeight=241&amp;originWidth=1027&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27884&amp;status=done&amp;style=none&amp;taskId=u1c14e281-ceaa-4e91-afcb-0e4981bc2f0&amp;title=&amp;width=1027" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677206827356-bdbb4405-ed33-4df9-bd50-6b9969887555.png#averageHue=%23231f1e&amp;clientId=u642778c3-94fb-4&amp;from=paste&amp;height=189&amp;id=ue63728d9&amp;originHeight=189&amp;originWidth=1212&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37526&amp;status=done&amp;style=none&amp;taskId=u1cee2a55-4a75-43ba-ab90-f9a252f71ba&amp;title=&amp;width=1212" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> getCppPointer</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WorkspaceControl</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.widget = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, label, widget, ui_script=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line">        cmds.workspaceControl(<span class="variable language_">self</span>.name, label=label)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ui_script:</span><br><span class="line">            cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, uiScript=ui_script)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.add_widget_to_layout(widget)</span><br><span class="line">        <span class="variable language_">self</span>.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">restore</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="variable language_">self</span>.add_widget_to_layout(widget)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_widget_to_layout</span>(<span class="params">self, widget</span>):</span><br><span class="line">        <span class="keyword">if</span> widget:</span><br><span class="line">            <span class="variable language_">self</span>.widget = widget</span><br><span class="line">            <span class="variable language_">self</span>.widget.setAttribute(QtCore.Qt.WA_DontCreateNativeAncestors)</span><br><span class="line"></span><br><span class="line">            workspace_control_ptr = long(omui.MQtUtil.findControl(<span class="variable language_">self</span>.name))</span><br><span class="line">            widget_ptr = long(getCppPointer(<span class="variable language_">self</span>.widget)[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">            omui.MQtUtil.addWidgetToMayaLayout(widget_ptr, workspace_control_ptr)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exists</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_visible</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, visible=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        <span class="keyword">if</span> visible:</span><br><span class="line">            cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, restore=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, visible=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_label</span>(<span class="params">self, label</span>):</span><br><span class="line">        cmds.workspaceControl(<span class="variable language_">self</span>.name, e=<span class="literal">True</span>, label=label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_floating</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, floating=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_collapsed</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> cmds.workspaceControl(<span class="variable language_">self</span>.name, q=<span class="literal">True</span>, collapse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DockableUI</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;DockableUI&quot;</span></span><br><span class="line"></span><br><span class="line">    ui_instance = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">if</span> cls.ui_instance:</span><br><span class="line">            cls.ui_instance.show_workspace_control()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cls.ui_instance = cls()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_workspace_control_name</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;0&#125;WorkspaceControl&quot;</span>.<span class="built_in">format</span>(cls.__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_ui_script</span>(<span class="params">cls</span>):</span><br><span class="line">        module_name = cls.__module__</span><br><span class="line">        <span class="keyword">if</span> module_name == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">            module_name = cls.module_name_override</span><br><span class="line"></span><br><span class="line">        ui_script = <span class="string">&quot;from &#123;0&#125; import &#123;1&#125;\n&#123;1&#125;.display()&quot;</span>.<span class="built_in">format</span>(module_name, cls.__name__)</span><br><span class="line">        <span class="keyword">return</span> ui_script</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockableUI, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setObjectName(<span class="variable language_">self</span>.__class__.__name__)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_actions()</span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line">        <span class="variable language_">self</span>.create_workspace_control()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.workspace_control_instance = WorkspaceControl(<span class="variable language_">self</span>.get_workspace_control_name())</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.workspace_control_instance.exists():</span><br><span class="line">            <span class="variable language_">self</span>.workspace_control_instance.restore(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.workspace_control_instance.create(<span class="variable language_">self</span>.WINDOW_TITLE, <span class="variable language_">self</span>, ui_script=<span class="variable language_">self</span>.get_ui_script())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_workspace_control</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.workspace_control_instance.set_visible(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="nmdWc"></a></p><h3 id="dockable-outliner与原版的区别：">dockable_outliner与原版的区别：</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677207029301-874922a2-f359-435d-98d9-0cf9bf68c815.png#averageHue=%23f9f0ef&amp;clientId=u642778c3-94fb-4&amp;from=paste&amp;height=570&amp;id=ub48cbe34&amp;originHeight=570&amp;originWidth=1597&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63586&amp;status=done&amp;style=none&amp;taskId=ufb8c8f75-f8ce-4b61-aa78-830ce3efeb1&amp;title=&amp;width=1597" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677207062777-560665cd-7aa2-4c38-a2fb-e418c1790104.png#averageHue=%23f9e7e7&amp;clientId=u642778c3-94fb-4&amp;from=paste&amp;height=221&amp;id=u25f2a923&amp;originHeight=221&amp;originWidth=1607&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17522&amp;status=done&amp;style=none&amp;taskId=u4387a327-dd89-42da-abd6-615d531c8f8&amp;title=&amp;width=1607" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> workspace_control <span class="keyword">import</span> DockableUI</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DockableOutliner</span>(<span class="title class_ inherited__">DockableUI</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Dockable Outliner&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockableOutliner, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setMinimumWidth(<span class="number">300</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)</span><br><span class="line">        <span class="variable language_">self</span>.customContextMenuRequested.connect(<span class="variable language_">self</span>.show_context_menu)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.transform_icon = QtGui.QIcon(<span class="string">&quot;:transform.svg&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.camera_icon = QtGui.QIcon(<span class="string">&quot;:Camera.png&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.mesh_icon = QtGui.QIcon(<span class="string">&quot;:mesh.svg&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_tree_widget()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_actions</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.about_action = QtWidgets.QAction(<span class="string">&quot;About&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action = QtWidgets.QAction(<span class="string">&quot;Shapes&quot;</span>, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.setChecked(<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.setShortcut(QtGui.QKeySequence(<span class="string">&quot;Ctrl+Shift+H&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.menu_bar = QtWidgets.QMenuBar()</span><br><span class="line">        display_menu = <span class="variable language_">self</span>.menu_bar.addMenu(<span class="string">&quot;Display&quot;</span>)</span><br><span class="line">        display_menu.addAction(<span class="variable language_">self</span>.display_shape_action)</span><br><span class="line">        help_menu = <span class="variable language_">self</span>.menu_bar.addMenu(<span class="string">&quot;Help&quot;</span>)</span><br><span class="line">        help_menu.addAction(<span class="variable language_">self</span>.about_action)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_widget = QtWidgets.QTreeWidget()</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.setHeaderHidden(<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># header = self.tree_widget.headerItem()</span></span><br><span class="line">        <span class="comment"># header.setText(0, &quot;Column 0 Text&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn = QtWidgets.QPushButton(<span class="string">&quot;Refresh&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.refresh_btn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.setSpacing(<span class="number">2</span>)</span><br><span class="line">        main_layout.setMenuBar(<span class="variable language_">self</span>.menu_bar)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.tree_widget)</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.about_action.triggered.connect(<span class="variable language_">self</span>.about)</span><br><span class="line">        <span class="variable language_">self</span>.display_shape_action.toggled.connect(<span class="variable language_">self</span>.set_shape_nodes_visible)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.itemCollapsed.connect(<span class="variable language_">self</span>.update_icon)</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.itemExpanded.connect(<span class="variable language_">self</span>.update_icon)</span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.itemSelectionChanged.connect(<span class="variable language_">self</span>.select_items)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.refresh_btn.clicked.connect(<span class="variable language_">self</span>.refresh_tree_widget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refresh_tree_widget</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.shape_nodes = cmds.ls(shapes=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.tree_widget.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        top_level_object_names = cmds.ls(assemblies=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> top_level_object_names:</span><br><span class="line">            item = <span class="variable language_">self</span>.create_item(name)</span><br><span class="line">            <span class="variable language_">self</span>.tree_widget.addTopLevelItem(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update_selection()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_item</span>(<span class="params">self, name</span>):</span><br><span class="line">        item = QtWidgets.QTreeWidgetItem([name])</span><br><span class="line">        <span class="variable language_">self</span>.add_children(item)</span><br><span class="line">        <span class="variable language_">self</span>.update_icon(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        is_shape = name <span class="keyword">in</span> <span class="variable language_">self</span>.shape_nodes</span><br><span class="line">        item.setData(<span class="number">0</span>, QtCore.Qt.UserRole, is_shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_children</span>(<span class="params">self, item</span>):</span><br><span class="line">        children = cmds.listRelatives(item.text(<span class="number">0</span>), children=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">if</span> children:</span><br><span class="line">            <span class="keyword">for</span> child <span class="keyword">in</span> children:</span><br><span class="line">                child_item = <span class="variable language_">self</span>.create_item(child)</span><br><span class="line">                item.addChild(child_item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_icon</span>(<span class="params">self, item</span>):</span><br><span class="line">        object_type = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> item.isExpanded():</span><br><span class="line">            object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            child_count = item.childCount()</span><br><span class="line">            <span class="keyword">if</span> child_count == <span class="number">0</span>:</span><br><span class="line">                object_type = cmds.objectType(item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">elif</span> child_count == <span class="number">1</span>:</span><br><span class="line">                child_item = item.child(<span class="number">0</span>)</span><br><span class="line">                object_type = cmds.objectType(child_item.text(<span class="number">0</span>))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                object_type = <span class="string">&quot;transform&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> object_type == <span class="string">&quot;transform&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, <span class="variable language_">self</span>.transform_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;camera&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, <span class="variable language_">self</span>.camera_icon)</span><br><span class="line">        <span class="keyword">elif</span> object_type == <span class="string">&quot;mesh&quot;</span>:</span><br><span class="line">            item.setIcon(<span class="number">0</span>, <span class="variable language_">self</span>.mesh_icon)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">select_items</span>(<span class="params">self</span>):</span><br><span class="line">        items = <span class="variable language_">self</span>.tree_widget.selectedItems()</span><br><span class="line">        names = []</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            names.append(item.text(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cmds.select(names, replace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">about</span>(<span class="params">self</span>):</span><br><span class="line">        QtWidgets.QMessageBox.about(<span class="variable language_">self</span>, <span class="string">&quot;About Simple Outliner&quot;</span>, <span class="string">&quot;Add About Text Here&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_shape_nodes_visible</span>(<span class="params">self, visible</span>):</span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(<span class="variable language_">self</span>.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_shape = item.data(<span class="number">0</span>, QtCore.Qt.UserRole)</span><br><span class="line">            <span class="keyword">if</span> is_shape:</span><br><span class="line">                item.setHidden(<span class="keyword">not</span> visible)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show_context_menu</span>(<span class="params">self, point</span>):</span><br><span class="line">        context_menu = QtWidgets.QMenu()</span><br><span class="line">        context_menu.addAction(<span class="variable language_">self</span>.display_shape_action)</span><br><span class="line">        context_menu.addSeparator()</span><br><span class="line">        context_menu.addAction(<span class="variable language_">self</span>.about_action)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        context_menu.exec_(<span class="variable language_">self</span>.mapToGlobal(point))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_selection</span>(<span class="params">self</span>):</span><br><span class="line">        selection = cmds.ls(selection=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        iterator = QtWidgets.QTreeWidgetItemIterator(<span class="variable language_">self</span>.tree_widget)</span><br><span class="line">        <span class="keyword">while</span> iterator.value():</span><br><span class="line">            item = iterator.value()</span><br><span class="line">            is_selected = item.text(<span class="number">0</span>) <span class="keyword">in</span> selection</span><br><span class="line">            item.setSelected(is_selected)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            iterator += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_script_job_enabled</span>(<span class="params">self, enabled</span>):</span><br><span class="line">        <span class="keyword">if</span> enabled <span class="keyword">and</span> <span class="variable language_">self</span>.script_job_number &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.script_job_number = cmds.scriptJob(event=[<span class="string">&quot;SelectionChanged&quot;</span>, partial(<span class="variable language_">self</span>.update_selection)], protected=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="keyword">not</span> enabled <span class="keyword">and</span> <span class="variable language_">self</span>.script_job_number &gt;= <span class="number">0</span>:</span><br><span class="line">            cmds.scriptJob(kill=<span class="variable language_">self</span>.script_job_number, force=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.script_job_number = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">showEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="built_in">super</span>(DockableOutliner, <span class="variable language_">self</span>).showEvent(e)</span><br><span class="line">        <span class="variable language_">self</span>.set_script_job_enabled(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, e</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(<span class="variable language_">self</span>, DockableOutliner):</span><br><span class="line">            <span class="built_in">super</span>(DockableOutliner, <span class="variable language_">self</span>).closeEvent(e)</span><br><span class="line">            <span class="variable language_">self</span>.set_script_job_enabled(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    workspace_control_name = DockableOutliner.get_workspace_control_name()</span><br><span class="line">    <span class="keyword">if</span> cmds.window(workspace_control_name, exists=<span class="literal">True</span>):</span><br><span class="line">        cmds.deleteUI(workspace_control_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    DockableOutliner.module_name_override = <span class="string">&quot;dockable_outliner&quot;</span></span><br><span class="line">    test_dialog = DockableOutliner()</span><br></pre></td></tr></table></figure><p><a name="t4Cku"></a></p><h1>Qt事件</h1><p><a name="TNHWF"></a></p><h2 id="事件介绍">事件介绍</h2><p><a name="ENkHI"></a></p><h3 id="事件系统">事件系统</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673245476361-c19b8bda-147b-4b63-b911-2c617fab571b.png#averageHue=%230c0c0c&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=679&amp;id=u290a994e&amp;originHeight=611&amp;originWidth=1467&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=296520&amp;status=done&amp;style=none&amp;taskId=ucf5758dc-3e02-4f6a-aabb-391e65599eb&amp;title=&amp;width=1630.0000431802548" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673245481192-e407fce6-d96f-4dbb-826e-2700eed58b08.png#averageHue=%23100f0e&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=533&amp;id=u9e628b49&amp;originHeight=480&amp;originWidth=1061&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67608&amp;status=done&amp;style=none&amp;taskId=u26ab3981-a2a1-454a-af85-fe10b864a6f&amp;title=&amp;width=1178.88892011878" alt="image.png"><br><a name="Miv2S"></a></p><h3 id="事件驱动VS实时">事件驱动VS实时</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246046841-93f5eafd-7c7b-4b50-b79b-75d9b3819b6a.png#averageHue=%230b0b0b&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=832&amp;id=uafbddc9f&amp;originHeight=749&amp;originWidth=1560&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=366420&amp;status=done&amp;style=none&amp;taskId=udd76986b-f221-4f4b-b16e-72f9b1d9c34&amp;title=&amp;width=1733.3333792509868" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246088391-e3b83926-7b34-40de-a0ad-84bf9428a48a.png#averageHue=%230e0d0c&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=613&amp;id=u1524d774&amp;originHeight=552&amp;originWidth=1512&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=87238&amp;status=done&amp;style=none&amp;taskId=ud5e95d16-6dca-46a5-9155-c5151bff665&amp;title=&amp;width=1680.0000445048026" alt="image.png"><br><a name="C3KQI"></a></p><h3 id="Qt事件">Qt事件</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246124739-710bc149-89f6-4a35-a955-089bb7e468ed.png#averageHue=%23080808&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=787&amp;id=u7d60f664&amp;originHeight=708&amp;originWidth=1586&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=274694&amp;status=done&amp;style=none&amp;taskId=u7403b032-62a3-4e27-b7d9-12e5fd26a66&amp;title=&amp;width=1762.22226890517" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246139637-502905e8-36c7-4804-90e8-3a07a874ebe1.png#averageHue=%230b0a09&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=638&amp;id=ued172028&amp;originHeight=574&amp;originWidth=1077&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63418&amp;status=done&amp;style=none&amp;taskId=u01787e55-a086-430c-8775-795e6e142f8&amp;title=&amp;width=1196.6666983675082" alt="image.png"><br><a name="IQQkl"></a></p><h3 id="事件处理">事件处理</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246166933-d98416fc-5646-4c61-b821-a40aafcda3bf.png#averageHue=%230a0a0a&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=780&amp;id=u3142b467&amp;originHeight=702&amp;originWidth=1624&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=350911&amp;status=done&amp;style=none&amp;taskId=u17e17f0c-3953-4dc1-825a-4b72eea3c04&amp;title=&amp;width=1804.444492245899" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246180926-469e0cbf-b90c-4b60-9766-4638289cef72.png#averageHue=%23090908&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=579&amp;id=u8b97687c&amp;originHeight=521&amp;originWidth=1598&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69519&amp;status=done&amp;style=none&amp;taskId=u68fcd36c-086c-422f-a635-d9b3036c141&amp;title=&amp;width=1775.555602591716" alt="image.png"><br><a name="DWTYd"></a></p><h3 id="事件过滤">事件过滤</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246220310-155f22c4-3bc3-4967-bf62-9980f0ce6665.png#averageHue=%230b0b0b&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=543&amp;id=u9d714b1b&amp;originHeight=489&amp;originWidth=1574&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=232756&amp;status=done&amp;style=none&amp;taskId=uf7edba98-7884-4862-99c9-f020cc1bb21&amp;title=&amp;width=1748.8889352186238" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673246260732-b5d7bcd7-19f6-46ac-b103-4a72c450d97a.png#averageHue=%230d0c0b&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=390&amp;id=u94cec4c9&amp;originHeight=312&amp;originWidth=1266&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39026&amp;status=done&amp;style=none&amp;taskId=ud6a3f8ef-4721-4be4-9711-e7d89090604&amp;title=&amp;width=1582.4999764189129" alt="image.png"><br><a name="KYXAz"></a></p><h2 id="举例">举例</h2><p><a name="zdhdh"></a></p><h3 id="KeyPress事件处理">KeyPress事件处理</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673247679167-269b96f7-fd7d-447f-9332-8ae9a1310fce.png#averageHue=%23464645&amp;clientId=u07b614fd-bd46-4&amp;from=paste&amp;height=285&amp;id=ufb2910ab&amp;originHeight=228&amp;originWidth=302&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3096&amp;status=done&amp;style=none&amp;taskId=uc597ac55-cdd1-47db-a24e-bafbaf9e786&amp;title=&amp;width=377.4999943748117" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPlainTextEdit</span>(QtWidgets.QPlainTextEdit):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 输入文本编辑器 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomPlainTextEdit, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">keyPressEvent</span>(<span class="params">self, key_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重载keyPressEvent方法 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># print(&quot;Key Pressed: &#123;0&#125;&quot;.format(key_event.text()))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ctrl = key_event.modifiers() == QtCore.Qt.ControlModifier <span class="comment"># ctrl为布尔值，代表ctrl键是否处于按下的状态</span></span><br><span class="line">        <span class="comment"># print(&quot;Control Modifiers: &#123;0&#125;&quot;.format(ctrl))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shift = key_event.modifiers() == QtCore.Qt.ShiftModifier</span><br><span class="line">        <span class="comment"># print(&quot;Shift Modifiers: &#123;0&#125;&quot;.format(shift))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        alt = key_event.modifiers() == QtCore.Qt.AltModifier</span><br><span class="line">        <span class="comment"># print(&quot;Alt Modifiers: &#123;0&#125;&quot;.format(alt))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ctrl_alt = key_event.modifiers() == (QtCore.Qt.ControlModifier | QtCore.Qt.AltModifier)</span><br><span class="line">        <span class="comment"># print(&quot;Ctrl+Alt Modifiers: &#123;0&#125;&quot;.format(ctrl_alt))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># if shift:</span></span><br><span class="line">        <span class="comment">#     return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        key = key_event.key()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key == QtCore.Qt.Key_Return <span class="keyword">or</span> key == QtCore.Qt.Key_Enter:</span><br><span class="line">            <span class="string">&quot;&quot;&quot; Key_Return代表中间的回车键 Key_Enter代表右边的回车键 &quot;&quot;&quot;</span></span><br><span class="line">            <span class="keyword">if</span> ctrl: <span class="comment"># 如果是ctrl+enter</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Execute Code&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> ctrl_alt: <span class="comment"># 如果是ctrl+alt+enter</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Execute Line&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">super</span>(CustomPlainTextEdit, <span class="variable language_">self</span>).keyPressEvent(key_event) <span class="comment"># 重载QtWidgets.QPlainTextEdit的keyPressEvent方法的同时，不影响keyPressEvent的功能</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">KeyPressExample</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;Keypress Example&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(KeyPressExample, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">300</span>, <span class="number">80</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.plain_text = CustomPlainTextEdit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        main_layout.addWidget(<span class="variable language_">self</span>.plain_text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    ui = KeyPressExample()</span><br><span class="line">    ui.show()</span><br></pre></td></tr></table></figure><p><a name="Rwerv"></a></p><h3 id="Mouse事件处理">Mouse事件处理</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673251794443-0628b284-6f6f-49c8-b3e0-5dec7bb5f149.png#averageHue=%23504f4f&amp;clientId=ud572c1dd-7c66-4&amp;from=paste&amp;height=540&amp;id=u5a5d4291&amp;originHeight=432&amp;originWidth=402&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3716&amp;status=done&amp;style=none&amp;taskId=u36be2f99-c435-4d76-a543-e34e857c7e5&amp;title=&amp;width=502.4999925121666" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtCore</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_main_window</span>():</span><br><span class="line">    main_window_ptr = omui.MQtUtil.mainWindow()</span><br><span class="line">    <span class="keyword">return</span> wrapInstance(long(main_window_ptr), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MoveableWidget</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, x, y, width, height, color, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(MoveableWidget, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setFixedSize(width, height)</span><br><span class="line">        <span class="variable language_">self</span>.move(x, y)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.color = color</span><br><span class="line">        <span class="variable language_">self</span>.original_color = color</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.move_enabled = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标点击时的事件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Button Pressed&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mouse_event.button() == QtCore.Qt.LeftButton:</span><br><span class="line">            <span class="variable language_">self</span>.initial_pos = <span class="variable language_">self</span>.pos()</span><br><span class="line">            <span class="variable language_">self</span>.global_pos = mouse_event.globalPos()</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.move_enabled = <span class="literal">True</span> <span class="comment"># 点击时可以移动widget</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseReleaseEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标释放时的事件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Button Released&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.move_enabled:</span><br><span class="line">            <span class="variable language_">self</span>.move_enabled = <span class="literal">False</span> <span class="comment"># 松开后不能移动widget</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseDoubleClickEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标双击后改变颜色 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Double-Click&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.color == <span class="variable language_">self</span>.original_color:</span><br><span class="line">            <span class="variable language_">self</span>.color = QtCore.Qt.yellow</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.color = <span class="variable language_">self</span>.original_color</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update() <span class="comment"># 更新颜色</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">mouseMoveEvent</span>(<span class="params">self, mouse_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 鼠标点击并移动时widget也移动 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse Move&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.move_enabled:</span><br><span class="line">            diff = mouse_event.globalPos() - <span class="variable language_">self</span>.global_pos</span><br><span class="line">            <span class="variable language_">self</span>.move(<span class="variable language_">self</span>.initial_pos + diff)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, paint_event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 绘制填充矩形 &quot;&quot;&quot;</span></span><br><span class="line">        painter = QtGui.QPainter(<span class="variable language_">self</span>)</span><br><span class="line">        painter.fillRect(paint_event.rect(), <span class="variable language_">self</span>.color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MouseEventExample</span>(QtWidgets.QDialog):</span><br><span class="line"></span><br><span class="line">    WINDOW_TITLE = <span class="string">&quot;MAYA-2018&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=maya_main_window(<span class="params"></span>)</span>):</span><br><span class="line">        <span class="built_in">super</span>(MouseEventExample, <span class="variable language_">self</span>).__init__(parent)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="variable language_">self</span>.WINDOW_TITLE)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">400</span>, <span class="number">400</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.WindowType.Window)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layouts()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 控件 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.red_widget = MoveableWidget(<span class="number">100</span>, <span class="number">100</span>, <span class="number">24</span>, <span class="number">24</span>, QtCore.Qt.red, <span class="variable language_">self</span>)</span><br><span class="line">        <span class="variable language_">self</span>.blue_widget = MoveableWidget(<span class="number">300</span>, <span class="number">300</span>, <span class="number">24</span>, <span class="number">24</span>, QtCore.Qt.blue, <span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layouts</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 布局 &quot;&quot;&quot;</span></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.setContentsMargins(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ui.close()</span><br><span class="line">        ui.deleteLater()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    ui = MouseEventExample()</span><br><span class="line">    ui.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="Hk9pA"></a></p><h1>Drag and Drop</h1>]]></content>
      
      
      <categories>
          
          <category> PySide2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PySide2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>官方UE5python教程</title>
      <link href="/2023/08/29/UE%E5%BC%80%E5%8F%91-%E5%AE%98%E6%96%B9UE5python%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/29/UE%E5%BC%80%E5%8F%91-%E5%AE%98%E6%96%B9UE5python%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><a name="LHv42"></a><h1>官网PythonAPI教程</h1><p>教程链接<a href="https://dev.epicgames.com/community/learning/courses/wk4/an-in-depth-look-at-using-python-for-game-development/vymW/an-in-depth-look-at-using-python-for-game-development-introduction">https://dev.epicgames.com/community/learning/courses/wk4/an-in-depth-look-at-using-python-for-game-development/vymW/an-in-depth-look-at-using-python-for-game-development-introduction</a><br><a name="QOSV4"></a></p><h2 id="获得路径下的所有文件路径">获得路径下的所有文件路径</h2><p>def listAssetPaths(path=‘/Game’):<br>    assetPaths = unreal.EditorAssetLibrary.list_assets(path)<br>    for assetPath in assetPaths: print(assetPath)<br><a name="nDCRa"></a></p><h2 id="EditorUtilityLibrary和EditorActorSubsystem">EditorUtilityLibrary和EditorActorSubsystem</h2><p>EditorUtilityLibrary可以让我们获取和内容浏览器有关的功能<br>EditorActorSubsystem可以可以提供和世界大纲视图有关的功能（这个类在UE5里面有，UE4.27里面没有）<br>EditorLevelLibrary 和 EditorActorSubsystem具有差不多的功能，UE4.27可以用这个来尝试代替EditorActorSubsystem<br><a name="fwq2A"></a></p><h3 id="EditorUtilityLibrary">EditorUtilityLibrary</h3><p>方法：get_selected_assets (获取选择的资产)<br>举例：<br># 输出选择的资产的对象信息<br>def getSelectionContentBrowser():<br>    selectAssets = unreal.EditorUtilityLibrary.get_selected_assets()<br>    for selectAsset in selectAssets: print(selectAsset)<br><a name="DN8Px"></a></p><h3 id="EditorActorSubsystem（这个类在UE5里面有，UE4-27里面没有）">EditorActorSubsystem（这个类在UE5里面有，UE4.27里面没有）</h3><p>方法：<br>get_all_level_actors(获取关卡中的所有ACtor)  <img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659084287467-26cef784-fa57-4d54-8cc8-1aa7956ac394.png#clientId=u8fad6bab-0b86-4&amp;from=paste&amp;height=170&amp;id=u128d9fb9&amp;originHeight=170&amp;originWidth=1099&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=94871&amp;status=done&amp;style=none&amp;taskId=ua1a325d8-2de6-4628-9b27-3a4fc16920b&amp;title=&amp;width=1099" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659084800653-dfeca916-20c0-4f22-9ce7-3180eddab54a.png#clientId=u8fad6bab-0b86-4&amp;from=paste&amp;height=173&amp;id=u345728e2&amp;originHeight=173&amp;originWidth=1506&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110930&amp;status=done&amp;style=none&amp;taskId=ucbb5a5f7-6189-4bcf-94e9-bff659c4f5b&amp;title=&amp;width=1506" alt="image.png">  EAS是变量名无需深究</p><p>get_selected_level_actors(获取选择的关卡actor)<br><a name="zgiY2"></a></p><h3 id="EditorLevelLibrary（4-27可以使用的和EditorActorSubSystem差不多功能的类）（UE5虽然也能使用但是将要废弃这个类）">EditorLevelLibrary（4.27可以使用的和EditorActorSubSystem差不多功能的类）（UE5虽然也能使用但是将要废弃这个类）</h3><p>方法：get_all_level_actors(获取关卡中的所有ACtor)  同样是获取关卡中的所有ACtor经过测试4.27版本的UE使用这个类是不需要参数传递的，EditorActorSubsystem的这个方法需要传递参数。<br><a name="Himck"></a></p><h2 id="按类组织资产">按类组织资产</h2><p><a name="UTtHB"></a></p><h3 id="EditorAssetLibrary">EditorAssetLibrary</h3><p>方法：find_asset_data(asset_path)→AssetData   接受资产路径返回资产的数据，类型为AssetData。什么是AssetData类型：AssetData类型存取了资产的各种信息，可以直接print AssetData类型的变量可以发现它是一个字典。这个类型也自带一些方法，比如获取资产的名字，长名，资产的类型，判断是否加载等。<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/AssetData.html#unreal.AssetData">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/AssetData.html#unreal.AssetData</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据类型列举物体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAssetClass</span>(<span class="params">classType</span>):</span><br><span class="line">    assetPaths = unreal.EditorAssetLibrary.list_assets(<span class="string">&#x27;/Game/MyAsset&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(assetPaths)</span><br><span class="line">    assets = []</span><br><span class="line">    <span class="keyword">for</span> assetPath <span class="keyword">in</span> assetPaths:</span><br><span class="line">        assetData = unreal.EditorAssetLibrary.find_asset_data(assetPath)</span><br><span class="line">        assetClass = assetData.asset_class</span><br><span class="line">        <span class="keyword">if</span> assetClass == classType:</span><br><span class="line">            assets.append(assetData.get_export_text_name())</span><br><span class="line">    <span class="keyword">for</span> asset <span class="keyword">in</span> assets: <span class="built_in">print</span>(asset)</span><br></pre></td></tr></table></figure><p><a name="YUoDU"></a></p><h2 id="获取特定类的信息">获取特定类的信息</h2><p>首先看到这一节可以明确的感知到，UEPython中有很多自定义的类型，然后这些类型都有属于自己的函数，因此帮助文档很重要。<br>staticMesh，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659319581581-f014ee27-7437-4f39-82d5-d7baa423fc60.png#clientId=udfa48b04-83fd-4&amp;from=paste&amp;height=829&amp;id=u7b24a215&amp;originHeight=829&amp;originWidth=1141&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=835848&amp;status=done&amp;style=none&amp;taskId=ue86b33e8-7ec2-4636-8a0b-aecb69c38d7&amp;title=&amp;width=1141" alt="image.png">编辑器属性就是这种类型的可调节的属性，我们可以通过staticMesh类型的对象中的get_editor_property方法来获取这些属性<br>它们都继承自_ObjectBase<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659319635544-9dbd8ad7-1777-45b5-9743-5bf5798f49da.png#clientId=udfa48b04-83fd-4&amp;from=paste&amp;height=566&amp;id=ua3616151&amp;originHeight=566&amp;originWidth=1217&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=331996&amp;status=done&amp;style=none&amp;taskId=ud882f472-031f-49ec-b64d-e408fefff7d&amp;title=&amp;width=1217" alt="image.png">所以对象也可以使用这些方法，例如get_name</p><p><a name="Naaq6"></a></p><h3 id="StaticMesh的AssetImportData与lod-group属性">StaticMesh的AssetImportData与lod_group属性</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据类型列举物体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAssetClass</span>(<span class="params">classType</span>):</span><br><span class="line">    assetPaths = unreal.EditorAssetLibrary.list_assets(<span class="string">&#x27;/Game&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(assetPaths)</span></span><br><span class="line">    assets = []</span><br><span class="line">    <span class="keyword">for</span> assetPath <span class="keyword">in</span> assetPaths:</span><br><span class="line">        assetData = unreal.EditorAssetLibrary.find_asset_data(assetPath)</span><br><span class="line">        assetClass = assetData.asset_class</span><br><span class="line">        <span class="keyword">if</span> assetClass == classType:</span><br><span class="line">            assets.append(assetData.get_asset())</span><br><span class="line">    <span class="comment"># for asset in assets: print(asset)</span></span><br><span class="line">    <span class="keyword">return</span> assets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取静态网格体的信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshData</span>():</span><br><span class="line">    staticMeshs = getAssetClass(<span class="string">&#x27;StaticMesh&#x27;</span>)  <span class="comment"># 获取所有类型为StaticMesh的对象</span></span><br><span class="line">    <span class="keyword">for</span> staticMesh <span class="keyword">in</span> staticMeshs:</span><br><span class="line">        <span class="comment"># assetImportData = staticMesh.get_editor_property(&#x27;asset_import_data&#x27;)  # 获取静态网格体对象的编辑器中的导入信息的属性</span></span><br><span class="line">        <span class="comment"># fbxFilePath = assetImportData.extract_filenames()  # 得到导入信息属性中的fbx路径</span></span><br><span class="line">        <span class="comment"># print(fbxFilePath)</span></span><br><span class="line">        <span class="comment"># print(staticMesh.get_editor_property(&#x27;lod_group&#x27;))</span></span><br><span class="line">        <span class="comment"># print(staticMesh.get_num_lods())</span></span><br><span class="line">        <span class="comment"># 如果静态网个体对象的lod组的属性为None并且lod数量只有一个时将lod组的属性改为LargeProp</span></span><br><span class="line">        <span class="keyword">if</span> staticMesh.get_editor_property(<span class="string">&#x27;lod_group&#x27;</span>) == <span class="string">&#x27;None&#x27;</span>:  </span><br><span class="line">            <span class="keyword">if</span> staticMesh.get_num_lods() == <span class="number">1</span>:</span><br><span class="line">                staticMesh.set_editor_property(<span class="string">&#x27;lod_group&#x27;</span>, <span class="string">&#x27;LargeProp&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="MDGTB"></a></p><h2 id="获取staticMesh的lod数据">获取staticMesh的lod数据</h2><p>先提一下名词解释，这里使用的方法除了利用了lod的索引外还利用了分段的索引，通过观看教程理解分段的意义：首先我们的目的是获取这里模型的三角形的数量<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659333726131-b93a1f65-9139-48dc-b96f-22467c908786.png#clientId=u061bcdf3-168e-4&amp;from=paste&amp;height=164&amp;id=u8c1da1d1&amp;originHeight=164&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50872&amp;status=done&amp;style=none&amp;taskId=u8c0d6aea-b569-4a81-8d54-bea8b6511dd&amp;title=&amp;width=340" alt="image.png">，当切换一个LOD时分段数量跟材质球的数量是相同的，也就是说分段的意思是当前LOD对应的模型的组成数量。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659333895148-76182373-68d5-49fe-b9c8-04b6dd1f395f.png#clientId=u061bcdf3-168e-4&amp;from=paste&amp;height=574&amp;id=uf15cd6ae&amp;originHeight=574&amp;originWidth=1414&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=756463&amp;status=done&amp;style=none&amp;taskId=uec2be367-4886-4f68-89d8-c818ac4af7a&amp;title=&amp;width=1414" alt="image.png"><br>涉及到的类与方法：<br>ProceduralMeshLibrary:get_section_from_static_mesh<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659333594626-58600156-f861-4320-b964-3450ce611c1c.png#clientId=u061bcdf3-168e-4&amp;from=paste&amp;height=292&amp;id=u2c801b66&amp;originHeight=292&amp;originWidth=802&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34735&amp;status=done&amp;style=none&amp;taskId=u826093ec-2f28-4aeb-9d33-02d08cb55db&amp;title=&amp;width=802" alt="image.png"><a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ProceduralMeshLibrary.html?highlight=proceduralmeshlibrary#unreal.ProceduralMeshLibrary">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/ProceduralMeshLibrary.html?highlight=proceduralmeshlibrary#unreal.ProceduralMeshLibrary</a><br>得到的数据经过输出可以看出来得到的是一个元组，元组里面有多个数组元素组成，有意向可以遍历这些数组来观察数组中的内容。因为我们需要得到三角形的数量遍历三角形的数据后发现官方输出了很多重复的数据，当我们把数组的长度除以3以后才能够得到我们需要的正确的三角形的数量。<br>“很多数值是重复的 我想这是因为输出了 和每个三角形有关的所有顶点 之所以这么认为是因为 如果让这个数字 这个长度 我们可以生成它 然后除以3 得到的结果 就是我们想要的数据 这是个窍门 只是个小窍门 只要让这个数组的长度除以3”这是官方教程的原话</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659335064023-274d427c-338b-4f40-b02c-a491dfa0f306.png#clientId=u061bcdf3-168e-4&amp;from=paste&amp;height=145&amp;id=ua07f9194&amp;originHeight=145&amp;originWidth=1483&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54381&amp;status=done&amp;style=none&amp;taskId=u668471d1-fcb7-41d2-992c-37dcd0eb4a6&amp;title=&amp;width=1483" alt="image.png"><br>StaticMesh: get_num_sections(lod)得到模型的lod对应的分段数<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/StaticMesh.html?highlight=staticmesh#unreal.StaticMesh.get_num_sections">https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/StaticMesh.html?highlight=staticmesh#unreal.StaticMesh.get_num_sections</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据类型列举物体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAssetClass</span>(<span class="params">classType</span>):</span><br><span class="line">    assetPaths = unreal.EditorAssetLibrary.list_assets(<span class="string">&#x27;/Game&#x27;</span>)</span><br><span class="line">    <span class="comment"># print(assetPaths)</span></span><br><span class="line">    assets = []</span><br><span class="line">    <span class="keyword">for</span> assetPath <span class="keyword">in</span> assetPaths:</span><br><span class="line">        assetData = unreal.EditorAssetLibrary.find_asset_data(assetPath)</span><br><span class="line">        assetClass = assetData.asset_class</span><br><span class="line">        <span class="keyword">if</span> assetClass == classType:</span><br><span class="line">            assets.append(assetData.get_asset())</span><br><span class="line">    <span class="comment"># for asset in assets: print(asset)</span></span><br><span class="line">    <span class="keyword">return</span> assets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取静态网格体的lod信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshLODData</span>():</span><br><span class="line">    staticMeshs = getAssetClass(<span class="string">&#x27;StaticMesh&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> staticMesh <span class="keyword">in</span> staticMeshs:</span><br><span class="line">        staticMeshTriCount = []  <span class="comment"># 负责记录模型的三角形数量</span></span><br><span class="line">        numLODs = staticMesh.get_num_lods()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numLODs):</span><br><span class="line">            LODTriCount = <span class="number">0</span>  <span class="comment"># 记录当前LOD的三角形数量</span></span><br><span class="line">            numSections = staticMesh.get_num_sections(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(numSections):  <span class="comment"># 遍历LOD对应的分段得到LOD对应的三角形数量</span></span><br><span class="line">                <span class="comment"># 得到静态网格体对应的分段信息</span></span><br><span class="line">                sectionData = unreal.ProceduralMeshLibrary.get_section_from_static_mesh(staticMesh, i, j)</span><br><span class="line">                sectionTriCount = (<span class="built_in">len</span>(sectionData[<span class="number">1</span>]) / <span class="number">3</span>)  <span class="comment"># 把数组的长度除以3以后才能够得到我们需要的正确的三角形的数量。</span></span><br><span class="line">                LODTriCount += sectionTriCount</span><br><span class="line">            staticMeshTriCount.append(LODTriCount)  <span class="comment"># 记录LOD对应的三角形数量</span></span><br><span class="line">        staticMeshReductions = [<span class="number">100</span>] <span class="comment"># 负责记录模型的LOD对应的三角形百分比</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, numLODs):</span><br><span class="line">            staticMeshReductions.append(<span class="built_in">int</span>(staticMeshTriCount[i]/staticMeshTriCount[<span class="number">0</span>]*<span class="number">100</span>))</span><br><span class="line">        <span class="built_in">print</span>(staticMesh.get_name())</span><br><span class="line">        <span class="built_in">print</span>(staticMeshTriCount)</span><br><span class="line">        <span class="built_in">print</span>(staticMeshReductions)</span><br></pre></td></tr></table></figure><p><a name="d3ZVW"></a></p><h2 id="获取关卡中的模型以及出现的数量">获取关卡中的模型以及出现的数量</h2><p>因为是要获取实例化的数量也即获取关卡中存在的Actor，因此要使用EditorLevelLibrary中的方法<br>在这里获得到了个小知识点，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659411906430-17ee0b86-6584-4501-9741-c49697d67a53.png#clientId=u0faa6e17-c546-4&amp;from=paste&amp;height=109&amp;id=u5b3be5bc&amp;originHeight=109&amp;originWidth=581&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22409&amp;status=done&amp;style=none&amp;taskId=uc4643842-8510-4db1-8fb4-5b3347b3ffd&amp;title=&amp;width=581" alt="image.png">当我们将内容浏览器中的资产拖入到关卡中，ue会自动将其变成staticMeshActor类型，因此找到关卡中出现的Actor以后还需要找到这个Acotr对应的组件，然后再根据组件找到对应的静态网格体。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取关卡中的模型以及出现的次数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshInstanceCounts</span>():</span><br><span class="line">    levelActors = unreal.EditorLevelLibrary().get_all_level_actors()  <span class="comment"># 获取关卡中的所有Actor</span></span><br><span class="line"></span><br><span class="line">    staticMeshActors = []  <span class="comment"># 负责记录所有staticMeshActor的名字</span></span><br><span class="line">    staticMeshActorCounts = []  <span class="comment"># 负责记录所有Actor在关卡中出现的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> levelActor <span class="keyword">in</span> levelActors:</span><br><span class="line">        <span class="keyword">if</span> (levelActor.get_class().get_name()) == <span class="string">&#x27;StaticMeshActor&#x27;</span>:</span><br><span class="line">            staticMeshComponent = levelActor.static_mesh_component  <span class="comment"># 得到这个Actor的组件</span></span><br><span class="line">            staticMesh = staticMeshComponent.static_mesh  <span class="comment"># 得到这个组件对应的静态网格体</span></span><br><span class="line">            staticMeshActors.append(staticMesh.get_name())</span><br><span class="line"></span><br><span class="line">    processedActors = []  <span class="comment"># 用来记录场景中的所有staticMeshActor但是不会出现相同的名字</span></span><br><span class="line">    <span class="keyword">for</span> staticMeshActor <span class="keyword">in</span> staticMeshActors:</span><br><span class="line">        <span class="keyword">if</span> staticMeshActor <span class="keyword">not</span> <span class="keyword">in</span> processedActors:</span><br><span class="line">            actorCounts = (staticMeshActor, staticMeshActors.count(staticMeshActor))  <span class="comment"># 元组，负责记录actor以及对应的关卡出现数量</span></span><br><span class="line">            staticMeshActorCounts.append(actorCounts)</span><br><span class="line">            processedActors.append(staticMeshActor)</span><br><span class="line">    <span class="comment"># key=lambda a: a[1]  的意思是按照列表中的元素中的第二项进行排列，在这里是按照actor出现的次数进行排序</span></span><br><span class="line">    staticMeshActorCounts.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> staticMeshActorCounts: <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><p><a name="OVQyH"></a></p><h2 id="LOD视图的开启与介绍">LOD视图的开启与介绍</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659411854494-ea279754-5f26-4577-a656-800fc51c9852.png#clientId=u0faa6e17-c546-4&amp;from=paste&amp;height=546&amp;id=u7fcc843f&amp;originHeight=546&amp;originWidth=1486&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=845097&amp;status=done&amp;style=none&amp;taskId=u678fdc5d-9d6d-48b8-8d8b-d20c60ce339&amp;title=&amp;width=1486" alt="image.png"><br>白色代表LOD0，红色代表LOD1，依次往后是绿色蓝色</p><p><a name="mfxpo"></a></p><h2 id="获取关卡中的模型名字以及对应的在场景中的LOD1的三角形数量">获取关卡中的模型名字以及对应的在场景中的LOD1的三角形数量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取静态网格体的lod信息</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshLODData</span>():</span><br><span class="line">    staticMeshs = getAssetClass(<span class="string">&#x27;StaticMesh&#x27;</span>)</span><br><span class="line">    staticMeshLODData = []</span><br><span class="line">    <span class="keyword">for</span> staticMesh <span class="keyword">in</span> staticMeshs:</span><br><span class="line">        staticMeshTriCount = []  <span class="comment"># 负责记录模型的三角形数量</span></span><br><span class="line">        numLODs = staticMesh.get_num_lods()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(numLODs):</span><br><span class="line">            LODTriCount = <span class="number">0</span>  <span class="comment"># 记录当前LOD的三角形数量</span></span><br><span class="line">            numSections = staticMesh.get_num_sections(i)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(numSections):  <span class="comment"># 遍历LOD对应的分段得到LOD对应的三角形数量</span></span><br><span class="line">                <span class="comment"># 得到静态网格体对应的分段信息</span></span><br><span class="line">                sectionData = unreal.ProceduralMeshLibrary.get_section_from_static_mesh(staticMesh, i, j)</span><br><span class="line">                sectionTriCount = (<span class="built_in">len</span>(sectionData[<span class="number">1</span>]) / <span class="number">3</span>)  <span class="comment"># 把数组的长度除以3以后才能够得到我们需要的正确的三角形的数量。</span></span><br><span class="line">                LODTriCount += sectionTriCount</span><br><span class="line">            staticMeshTriCount.append(LODTriCount)  <span class="comment"># 记录LOD对应的三角形数量</span></span><br><span class="line">        staticMeshReductions = [<span class="number">100</span>]  <span class="comment"># 负责记录模型的LOD对应的三角形百分比</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, numLODs):</span><br><span class="line">            staticMeshReductions.append(<span class="built_in">int</span>(staticMeshTriCount[i] / staticMeshTriCount[<span class="number">0</span>] * <span class="number">100</span>))</span><br><span class="line">        <span class="comment"># print(staticMesh.get_name())</span></span><br><span class="line">        <span class="comment"># print(staticMeshTriCount)</span></span><br><span class="line">        <span class="comment"># print(staticMeshReductions)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            LODData = (staticMesh.get_name(), staticMeshTriCount[<span class="number">1</span>])  <span class="comment"># 之所以try是因为有的模型只有LOD0,把只有LOD0的过滤掉</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        staticMeshLODData.append(LODData)</span><br><span class="line">    <span class="keyword">return</span> staticMeshLODData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取关卡中的模型以及出现的次数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getStaticMeshInstanceCounts</span>():</span><br><span class="line">    levelActors = unreal.EditorLevelLibrary().get_all_level_actors()  <span class="comment"># 获取关卡中的所有Actor</span></span><br><span class="line"></span><br><span class="line">    staticMeshActors = []  <span class="comment"># 负责记录所有staticMeshActor的名字</span></span><br><span class="line">    staticMeshActorCounts = []  <span class="comment"># 负责记录所有Actor在关卡中出现的数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> levelActor <span class="keyword">in</span> levelActors:</span><br><span class="line">        <span class="keyword">if</span> (levelActor.get_class().get_name()) == <span class="string">&#x27;StaticMeshActor&#x27;</span>:</span><br><span class="line">            staticMeshComponent = levelActor.static_mesh_component  <span class="comment"># 得到这个Actor的组件</span></span><br><span class="line">            staticMesh = staticMeshComponent.static_mesh  <span class="comment"># 得到这个组件对应的静态网格体</span></span><br><span class="line">            staticMeshActors.append(staticMesh.get_name())</span><br><span class="line"></span><br><span class="line">    processedActors = []  <span class="comment"># 用来记录场景中的所有staticMeshActor但是不会出现相同的名字</span></span><br><span class="line">    <span class="keyword">for</span> staticMeshActor <span class="keyword">in</span> staticMeshActors:</span><br><span class="line">        <span class="keyword">if</span> staticMeshActor <span class="keyword">not</span> <span class="keyword">in</span> processedActors:</span><br><span class="line">            actorCounts = (staticMeshActor, staticMeshActors.count(staticMeshActor))  <span class="comment"># 元组，负责记录actor以及对应的关卡出现数量</span></span><br><span class="line">            staticMeshActorCounts.append(actorCounts)</span><br><span class="line">            processedActors.append(staticMeshActor)</span><br><span class="line">    <span class="comment"># key=lambda a: a[1]  的意思是按照列表中的元素中的第二项进行排列，在这里是按照actor出现的次数进行排序</span></span><br><span class="line">    staticMeshActorCounts.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">1</span>], reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># for item in staticMeshActorCounts: print(item)</span></span><br><span class="line"></span><br><span class="line">    LODData = getStaticMeshLODData()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># for item in LODData: print(item)</span></span><br><span class="line"></span><br><span class="line">    aggregateTriCounts = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(staticMeshActorCounts)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(LODData)):</span><br><span class="line">            <span class="keyword">if</span> staticMeshActorCounts[i][<span class="number">0</span>] == LODData[j][<span class="number">0</span>]:</span><br><span class="line">                aggregateTriCount = (staticMeshActorCounts[i][<span class="number">0</span>],staticMeshActorCounts[i][<span class="number">1</span>] * LODData[j][<span class="number">1</span>])</span><br><span class="line">                aggregateTriCounts.append(aggregateTriCount)</span><br><span class="line"></span><br><span class="line">    aggregateTriCounts.sort(key=<span class="keyword">lambda</span> a: a[<span class="number">1</span>], reverse=<span class="literal">True</span>)  <span class="comment"># 存取场景中的actor的mesh名字以及对应的场景中的所有mesh的LOD1的三角形数量</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> aggregateTriCounts: <span class="built_in">print</span>(item)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="aFWsp"></a></p><h2 id="dir-与help-，材质实例">dir()与help()，材质实例</h2><p>当知道一个类的名字以后，如果想要得到这个类对应的所有方法，可以通过dir()函数来得到，并且有的方法官方文档可能没有。<br>例如如果想知道StaticMeshComponent的方法可以通过：<br>for item in dir(unreal.StaticMeshComponent): print (item)<br>得到类对应的所有方法，并且可以通过搜索得到对应的方法，知道方法的名字后可以使用help()函数来得到方法的细节：help(unreal.StaticMeshComponent.get_num_materials)<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661837162153-7f3ce4f5-898a-4cfa-b9b4-edcf8d6d1ad8.png#clientId=u12196a95-624c-4&amp;from=paste&amp;height=719&amp;id=udf236356&amp;originHeight=719&amp;originWidth=490&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31349&amp;status=done&amp;style=none&amp;taskId=u7d0944a4-abd2-4d3e-81d1-b68722fd1f9&amp;title=&amp;width=490" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661837204405-a5c9f43a-a01c-48a8-9c60-596eac11bb39.png#clientId=u12196a95-624c-4&amp;from=paste&amp;height=322&amp;id=ubcfb26de&amp;originHeight=322&amp;originWidth=611&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49628&amp;status=done&amp;style=none&amp;taskId=u16026c1d-52ea-4f44-bc33-1b56414123b&amp;title=&amp;width=611" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661837351487-3280c32f-1feb-49bb-8055-80d26ac7d865.png#clientId=u12196a95-624c-4&amp;from=paste&amp;height=88&amp;id=u3bd793ef&amp;originHeight=88&amp;originWidth=481&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10778&amp;status=done&amp;style=none&amp;taskId=ud66a72e0-288c-4bfc-9949-898bdd5e323&amp;title=&amp;width=481" alt="image.png"><br>将场景中的所有模型的材质更改为/Game/python/MI_test这个材质实例<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661838603634-35cbd362-12e3-4908-83e7-1f54783a6f72.png#clientId=u12196a95-624c-4&amp;from=paste&amp;height=637&amp;id=u456e4338&amp;originHeight=637&amp;originWidth=1337&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1314449&amp;status=done&amp;style=none&amp;taskId=u69fc4f34-9d6b-4779-9b6d-59b33d9fb2f&amp;title=&amp;width=1337" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">returnMaterialInformationSMC</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    levelActors =</span> unreal.<span class="built_in">EditorLevelLibrary</span>().<span class="built_in">get_all_level_actors</span>()</span><br><span class="line">    testMat = unreal.EditorAssetLibrary.<span class="built_in">find_asset_data</span>(<span class="string">&#x27;/Game/python/MI_test&#x27;</span>).<span class="built_in">get_asset</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> levelActor in levelActors:</span><br><span class="line">        <span class="keyword">if</span> (levelActor.<span class="built_in">get_class</span>().<span class="built_in">get_name</span>()) == <span class="string">&#x27;StaticMeshActor&#x27;</span>:</span><br><span class="line">            staticMeshComponent = levelActor.static_mesh_component</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i in <span class="built_in">range</span>(staticMeshComponent.<span class="built_in">get_num_materials</span>()):</span><br><span class="line">                staticMeshComponent.<span class="built_in">set_material</span>(i, testMat)</span><br></pre></td></tr></table></figure><p><a name="hfBFP"></a></p><h2 id="使用关卡蓝图更改模型材质">使用关卡蓝图更改模型材质</h2><p>根据场景中的staticmesh的material数量决定使用不同的材质实例，只在运行游戏时启用。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661843448805-260ec193-cd73-4fd1-9c12-601af3fa30cc.png#clientId=u12196a95-624c-4&amp;from=paste&amp;height=1410&amp;id=u739a9ddf&amp;originHeight=1410&amp;originWidth=2701&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=680063&amp;status=done&amp;style=none&amp;taskId=ub1dbbe98-555a-43d7-971f-13c89b67a0e&amp;title=&amp;width=2701" alt="Northwood-EventGraph.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1661843508233-41e09606-7efb-463d-86fe-20c5fb196f0c.png#clientId=u12196a95-624c-4&amp;from=paste&amp;height=906&amp;id=u2b8c6d2f&amp;originHeight=906&amp;originWidth=1684&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2535471&amp;status=done&amp;style=none&amp;taskId=udab98c93-ba35-4bd0-85c7-d61b8e17ec4&amp;title=&amp;width=1684" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEPython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>油管与B站uepython教程</title>
      <link href="/2023/08/29/UE%E5%BC%80%E5%8F%91-%E6%B2%B9%E7%AE%A1%E4%B8%8EB%E7%AB%99uepython%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/29/UE%E5%BC%80%E5%8F%91-%E6%B2%B9%E7%AE%A1%E4%B8%8EB%E7%AB%99uepython%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><a name="g4ESd"></a><h1>油管uepython教程</h1><p><a name="tlpxM"></a></p><h2 id="在UE中的python初始配置">在UE中的python初始配置</h2><p>可以看看这个文章<a href="https://www.yumefx.com/?p=3211">https://www.yumefx.com/?p=3211</a><br><a name="WYDR1"></a></p><h3 id="插件的选择">插件的选择</h3><p>找到scripting启用这三个<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655819812634-a0e15b6f-5e64-459a-97f8-4c12f0c1895d.png#clientId=u0d521281-290c-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=851&amp;id=uaec1a435&amp;originHeight=851&amp;originWidth=1458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=151187&amp;status=error&amp;style=none&amp;taskId=ubfd903d6-416e-4774-b8c2-3022ffcc8fc&amp;title=&amp;width=1458" alt="image.png"><br><a name="pu3hS"></a></p><h3 id="项目设置">项目设置</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655978185249-1579d6af-b989-4157-b733-991feb125622.png#clientId=ue8ca9c13-c3c0-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=346&amp;id=u733583c2&amp;originHeight=346&amp;originWidth=1177&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26571&amp;status=error&amp;style=none&amp;taskId=u9c8861d7-0598-4631-a733-6d30d9a2c14&amp;title=&amp;width=1177" alt="image.png"><br>第一个 startup scripts 中填写的是，当启动UE时自动加载的脚本的路径<br>第二个Additional paths 中填写的是 当在UE中使用import模块时 import的额外搜索路径<br><a name="Ouc7j"></a></p><h2 id="使用python导入资产">使用python导入资产</h2><p><a name="R7ckW"></a></p><h3 id="导入贴图和音频">导入贴图和音频</h3><p>用到的类：<br><a href="https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetImportTask.html">https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetImportTask.html</a><br><a href="https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html">https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html</a><br>首先先了解一下引擎中的文件路径：这里内容的路径为/Game,因此假如要在内容下创建一个新的Tex文件夹，那么Tex文件夹的路径就是/Game/Tex<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657100608789-ceeb2279-1791-464f-b2fc-99e3b59453bc.png#clientId=ua4789b34-f786-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=58&amp;id=u5e6699ed&amp;originHeight=58&amp;originWidth=133&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3362&amp;status=error&amp;style=none&amp;taskId=u2552f489-6209-44c2-8324-2c59e6fe67b&amp;title=&amp;width=133" alt="image.png"><br>在ue的编辑界面中按shitf+回车可以输入多行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">soundPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Sounds/soundTest.mp3&#x27;</span></span><br><span class="line">texPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Texture/test_ORM3.png&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">importMyAssets</span>():  <span class="comment"># 创建导入任务并执行导入</span></span><br><span class="line">    texture_task = buildImportTask(texPath, <span class="string">&#x27;/Game/Textures&#x27;</span>)  <span class="comment"># 通过buildImportTask函数创建一个AssetImportTask对象</span></span><br><span class="line">    sound_task = buildImportTask(soundPath, <span class="string">&#x27;/Game/Sounds&#x27;</span>)  <span class="comment"># 同理</span></span><br><span class="line">    executeImportTasks([texture_task, sound_task])  <span class="comment"># 执行导入操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildImportTask</span>(<span class="params">filename, destination_path</span>):  <span class="comment"># 构建导入任务</span></span><br><span class="line">    task = unreal.AssetImportTask()</span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;automated&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 设置为True后就不会弹出对话框，就是将其设置为自动化</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 可选的要导入的自定义名称，当属性为空时就按照文件名称命名</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_path&#x27;</span>, destination_path)  <span class="comment"># 导入的资源在引擎中的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;filename&#x27;</span>, filename)  <span class="comment"># 要导入的资源在电脑磁盘上的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;replace_existing&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 是否要覆盖资产</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;save&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 导入后保存</span></span><br><span class="line">    <span class="keyword">return</span> task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeImportTasks</span>(<span class="params">tasks</span>):  <span class="comment"># 执行导入任务</span></span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)  <span class="comment"># 通过这行代码将在buildImportTask函数中创建的task对象进行导入</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> task.get_editor_property(<span class="string">&#x27;imported_object_paths&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Imported: %s&#x27;</span> % path)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="m5PmG"></a></p><h3 id="导入静态网格体和骨骼网格体">导入静态网格体和骨骼网格体</h3><p>用到的类：<br><a href="https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxImportUI.html">https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxImportUI.html</a><br><a href="https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxMeshImportData.html">https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxMeshImportData.html</a><br><a href="https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxStaticMeshImportData.html">https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxStaticMeshImportData.html</a><br><a href="https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxSkeletalMeshImportData.html">https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/FbxSkeletalMeshImportData.html</a><br>我用的4.26版本的UE，使用这个代码没有办法导入骨骼体，代码已经反复检查几遍了没发现问题。教程中用的是4.21版本的UE。  后来测试后发现是可以的，应该是之前的资产有问题，后来测试用的小白人fbx2018的是可以导入进来的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">soundPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Sounds/soundTest.mp3&#x27;</span></span><br><span class="line">texPath = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Texture/test_ORM3.png&#x27;</span></span><br><span class="line">static_mesh_fbx = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/StaticMeshes/sphere.fbx&#x27;</span></span><br><span class="line">skeletal_mesh_fbx = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Skeletal/woman.fbx&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">importMyAssets</span>():  <span class="comment"># 创建导入任务并执行导入</span></span><br><span class="line">    <span class="comment"># texture_task = buildImportTask(texPath, &#x27;/Game/Textures&#x27;)  # 通过buildImportTask函数创建一个AssetImportTask对象</span></span><br><span class="line">    <span class="comment"># sound_task = buildImportTask(soundPath, &#x27;/Game/Sounds&#x27;)  # 同理</span></span><br><span class="line">    <span class="comment"># executeImportTasks([texture_task, sound_task])  # 执行导入操作</span></span><br><span class="line">    static_mesh_task = buildImportTask(static_mesh_fbx, <span class="string">&#x27;/Game/StaticMeshes&#x27;</span>, buildStaticMeshImportOptions())</span><br><span class="line">    skeletal_mesh_task = buildImportTask(skeletal_mesh_fbx, <span class="string">&#x27;/Game/SkeletalMeshes&#x27;</span>, buildSkeletalMeshImportOptions())</span><br><span class="line">    executeImportTasks([static_mesh_task, skeletal_mesh_task])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetImportTask.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildImportTask</span>(<span class="params">filename, destination_path, options=<span class="literal">None</span></span>):  <span class="comment"># 构建导入任务</span></span><br><span class="line">    task = unreal.AssetImportTask()</span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;automated&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 设置为True后就不会弹出对话框，就是将其设置为自动化</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_name&#x27;</span>, <span class="string">&#x27;&#x27;</span>)  <span class="comment"># 可选的要导入的自定义名称，当属性为空时就按照文件名称命名</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;destination_path&#x27;</span>, destination_path)  <span class="comment"># 导入的资源在引擎中的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;filename&#x27;</span>, filename)  <span class="comment"># 要导入的资源在电脑磁盘上的路径</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;replace_existing&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 是否要覆盖资产</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;save&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># 导入后保存</span></span><br><span class="line">    task.set_editor_property(<span class="string">&#x27;options&#x27;</span>, options)  <span class="comment"># 当导入fbx这种资产需要额外的导入选项，需要创建FbxImportUI对象来传递</span></span><br><span class="line">    <span class="keyword">return</span> task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里用到的属性可以参考文档：https://docs.unrealengine.com/5.0/en-US/PythonAPI/class/AssetTools.html</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeImportTasks</span>(<span class="params">tasks</span>):  <span class="comment"># 执行导入任务</span></span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)  <span class="comment"># 通过这行代码将在buildImportTask函数中创建的task对象进行导入</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> task.get_editor_property(<span class="string">&#x27;imported_object_paths&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Imported: %s&#x27;</span> % path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildStaticMeshImportOptions</span>():</span><br><span class="line">    options = unreal.FbxImportUI()</span><br><span class="line">    <span class="comment"># unreal.FbxImportUI</span></span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_mesh&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_textures&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_materials&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_as_skeletal&#x27;</span>, <span class="literal">False</span>)  <span class="comment"># Static Mesh</span></span><br><span class="line">    <span class="comment"># unreal.FbxMeshImportData</span></span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;import_uniform_scale&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="comment"># unreal.FbxStaticMeshImportData</span></span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;combine_meshes&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;generate_lightmap_u_vs&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.static_mesh_import_data.set_editor_property(<span class="string">&#x27;auto_generate_collision&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildSkeletalMeshImportOptions</span>():</span><br><span class="line">    options = unreal.FbxImportUI()</span><br><span class="line">    <span class="comment"># unreal.FbxImportUI</span></span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_mesh&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_textures&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_materials&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_as_skeletal&#x27;</span>, <span class="literal">True</span>)  <span class="comment"># Skeletal Mesh</span></span><br><span class="line">    <span class="comment"># unreal.FbxMeshImportData</span></span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_uniform_scale&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="comment"># unreal.FbxSkeletalMeshImportData</span></span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;import_morph_targets&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    options.skeletal_mesh_import_data.set_editor_property(<span class="string">&#x27;update_skeleton_reference_pose&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="VWzOM"></a></p><h3 id="导入动画">导入动画</h3><p>跟导入静态网格体差不多，就是导入动画时的额外设置略有不同，并且创建任务需要使用导入动画的设置时需要指定动画依赖的骨骼的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">buildAnimationImportOptions</span>(<span class="params">skeleton_path</span>):</span><br><span class="line">    options = unreal.FbxImportUI()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 是否导入动画</span></span><br><span class="line">    options.set_editor_property(<span class="string">&#x27;import_animations&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 导入骨架的位置</span></span><br><span class="line">    options.skeleton = unreal.load_asset(skeleton_path)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置动画序列的内容</span></span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;import_translation&#x27;</span>, unreal.Vector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;import_rotation&#x27;</span>, unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))</span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;import_uniform_scale&#x27;</span>, <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动画的长度</span></span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;animation_length&#x27;</span>,</span><br><span class="line">                                                          unreal.FBXAnimationLengthImportType.FBXALIT_EXPORTED_TIME)</span><br><span class="line">    <span class="comment"># 去掉冗余的关键帧</span></span><br><span class="line">    options.anim_sequence_import_data.set_editor_property(<span class="string">&#x27;remove_redundant_keys&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    <span class="keyword">return</span> options</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeImportTasks</span>(<span class="params">tasks</span>):  <span class="comment"># 执行导入任务</span></span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().import_asset_tasks(tasks)  <span class="comment"># 通过这行代码将在buildImportTask函数中创建的task对象进行导入</span></span><br><span class="line">    <span class="keyword">for</span> task <span class="keyword">in</span> tasks:</span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> task.get_editor_property(<span class="string">&#x27;imported_object_paths&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Imported: %s&#x27;</span> % path)</span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">importMyAssets</span>():  <span class="comment"># 创建导入任务并执行导入</span></span><br><span class="line">    animation_fbx = <span class="string">&#x27;D:/ZhangRuiChen/UETest/TestFile/Animation/Animation.fbx&#x27;</span></span><br><span class="line">    animation_fbx_task = buildImportTask(animation_fbx, <span class="string">&#x27;/Game/Animations&#x27;</span>, buildStaticMeshImportOptions(<span class="string">&#x27;/Game/SkeletalMeshes/man_Skeleton&#x27;</span>))</span><br><span class="line">    executeImportTasks([animation_fbx_task])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="NZzHf"></a></p><h3 id="创建、复制、删除、重命名资产和文件夹">创建、复制、删除、重命名资产和文件夹</h3><p>这些东西可以直接复制到UE的代码编辑框中执行看看效果<br>针对资产编辑器中的内容都要使用unreal.EditorAssetLibrary中的方法，例如创建复制删除重命名文件夹，复制删除重命名资产，判段资产是否存在。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDirectory</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.make_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duplicateDirectory</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorAssetLibrary.duplicate_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>,</span><br><span class="line">                                                         <span class="string">&#x27;/Game/MyAsset/MyNewDirectory_Duplicated&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteDirectory</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.delete_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">renameDirectory</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorAssetLibrary.rename_directory(<span class="string">&#x27;/Game/MyAsset/MyNewDirectory_Duplicated&#x27;</span>,</span><br><span class="line">                                                      <span class="string">&#x27;/Game/MyAsset/MyNewDirectory_Renamed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duplicateAsset</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorAssetLibrary.duplicate_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3&#x27;</span>,</span><br><span class="line">                                                     <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_duplicate&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteAsset</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.delete_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断资产是否存在</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">assetExist</span>():</span><br><span class="line">    <span class="built_in">print</span>(unreal.EditorAssetLibrary.does_asset_exist(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3&#x27;</span>))  <span class="comment"># False</span></span><br><span class="line">    <span class="built_in">print</span>(unreal.EditorAssetLibrary.does_asset_exist(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_duplicate&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重命名资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">renameAsset</span>():</span><br><span class="line">    unreal.EditorAssetLibrary.rename_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_duplicate&#x27;</span>,</span><br><span class="line">                                           <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示复制资产提示框</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">duplicateAssetDialog</span>(<span class="params">show_dialog=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">if</span> show_dialog:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().duplicate_asset_with_dialog(<span class="string">&#x27;test_ORM3_Duplicated&#x27;</span>,</span><br><span class="line">                                                                               <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>,</span><br><span class="line">                                                                               unreal.load_asset(</span><br><span class="line">                                                                                   <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().duplicate_asset(<span class="string">&#x27;test_ORM3_Duplicated&#x27;</span>, <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>,</span><br><span class="line">                                                                   unreal.load_asset(</span><br><span class="line">                                                                       <span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示重命名提示框</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">renameAssetDialog</span>(<span class="params">show_dialog=<span class="literal">True</span></span>):</span><br><span class="line">    first_rename_data = unreal.AssetRenameData(unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Renamed&#x27;</span>),</span><br><span class="line">                                               <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>, <span class="string">&#x27;test_ORM3_Renamed_2&#x27;</span>)</span><br><span class="line">    second_rename_data = unreal.AssetRenameData(unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/test_ORM3_Duplicated&#x27;</span>),</span><br><span class="line">                                                <span class="string">&#x27;/Game/MyAsset/Textures&#x27;</span>, <span class="string">&#x27;test_ORM3_Duplicated_Renamed&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> show_dialog:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().rename_assets_with_dialog([first_rename_data, second_rename_data])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        unreal.AssetToolsHelpers.get_asset_tools().rename_assets([first_rename_data, second_rename_data])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="PpzFb"></a></p><h2 id="使用python调用C-函数">使用python调用C++函数</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657180848774-09e0c281-f9ff-4319-8543-572f2578bf66.png#clientId=u05c02e16-dea5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=1055&amp;id=uc2993bf1&amp;originHeight=1055&amp;originWidth=1694&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=464364&amp;status=error&amp;style=none&amp;taskId=ub4686a20-e257-4b92-8c09-42873fc6f90&amp;title=&amp;width=1694" alt="image.png"><br>取名字为ZFunctions<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657181259643-9ffac0ff-7d24-4cec-b669-1c639a650814.png#clientId=u05c02e16-dea5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=426&amp;id=u3724a30b&amp;originHeight=426&amp;originWidth=1294&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=236790&amp;status=error&amp;style=none&amp;taskId=ufa38904a-fc3f-41d5-9673-5d2f3346b54&amp;title=&amp;width=1294" alt="image.png"><br>创建这个类以后，UE会自动编译打开VisualStudio。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657181358854-4381aeec-353e-4adf-b83b-df6db40f2d58.png#clientId=u05c02e16-dea5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=56&amp;id=u6d9a0b40&amp;originHeight=56&amp;originWidth=280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3120&amp;status=error&amp;style=none&amp;taskId=u829356b5-6591-486c-975e-1e13799faf8&amp;title=&amp;width=280" alt="image.png"><br>ZFunctions.h文件内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ZFunctions.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UZFunctions : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable) <span class="comment">// 将函数暴露给蓝图</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CalledFromPython</span><span class="params">(FString InputString)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ZFunctions.cpp文件内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ZFunctions.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UZFunctions::CalledFromPython</span><span class="params">(FString InputString)</span> </span>&#123;</span><br><span class="line"><span class="built_in">UE_LOG</span>(LogTemp, Error, <span class="built_in">TEXT</span>(<span class="string">&quot;%s&quot;</span>), *InputString);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内容写好后就可以<br>然后我们可以在编辑器中通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">sorted</span><span class="params">(dir(unreal))</span>:</span></span><br><span class="line"><span class="function">print (x)</span></span><br></pre></td></tr></table></figure><p>打印出目前UE项目中所有的类。<br>可以在输出中找到<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657182694150-31ce542e-d3cb-4b0e-a93b-6c225785a350.png#clientId=u05c02e16-dea5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=145&amp;id=u2a52dbed&amp;originHeight=145&amp;originWidth=313&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8849&amp;status=error&amp;style=none&amp;taskId=ufa7c4b05-c548-4d88-9499-f68a1155c1e&amp;title=&amp;width=313" alt="image.png">那就可以使用了。<br>然后我们可以在编辑器中通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">for</span> x in <span class="title">sorted</span><span class="params">(dir(unreal.ZFunctions))</span>:</span></span><br><span class="line"><span class="function">print (x)</span></span><br></pre></td></tr></table></figure><p>打印出ZFunctions中的所有方法。<br>可以找到刚才定义的方法：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657183307392-331af0d3-d301-40f4-a2a0-98c7462fc9be.png#clientId=u05c02e16-dea5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=34&amp;id=u421c198a&amp;originHeight=34&amp;originWidth=188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2734&amp;status=error&amp;style=none&amp;taskId=u21569621-69ee-42c7-80a6-99daa375831&amp;title=&amp;width=188" alt="image.png"> 可以发现我们明明写的是CalledFromPython，但是UE会自动将命名更改为called_from_python<br>然后我们就可以在UE中使用这个方法了<br>通过代码 unreal.ZFunctions.called_from_python(‘11111’)<br>会使用这个方法的功能，让UE打印一个UE_LOG<br>UE_LOG(LogTemp, Error, TEXT(“%s”), *InputString)<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657183613159-578d21d4-7ccc-4af3-b559-eacbac054041.png#clientId=u05c02e16-dea5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=39&amp;id=u0407f35d&amp;originHeight=39&amp;originWidth=453&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5632&amp;status=error&amp;style=none&amp;taskId=u05975b26-9e44-47a8-955a-cc3ea483de2&amp;title=&amp;width=453" alt="image.png"><br><a name="WPpVr"></a></p><h2 id="改变文件夹的颜色">改变文件夹的颜色</h2><p>要想修改文件夹的颜色依然需要使用C++，只不过可以通过python语句调用C++函数来实现简单的批量操作…<br>因此依然通过继承Blueprint  Fuction Library 类来创建我们的自定义类。取名为CppLib<br><a name="wCOD1"></a></p><h3 id="CppLib-h">CppLib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="UvDZx"></a></p><h3 id="CppLib-cpp">CppLib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="W75gc"></a></p><h3 id="写完c-后可以通过蓝图调用函数">写完c++后可以通过蓝图调用函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657531899356-6d006729-9afd-4c8d-97fa-7e4c83175f8d.png#clientId=uc78214b9-d920-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=698&amp;id=u8d7183c3&amp;originHeight=698&amp;originWidth=1749&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=152825&amp;status=error&amp;style=none&amp;taskId=ufda12786-170b-4acb-949b-2e9b50aaa76&amp;title=&amp;width=1749" alt="image.png"><br>勾选自定义事件的 Call In Editor 就可以在外面手动点击触发自定义事件了。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657531961768-a20a0216-2c47-4822-b19d-a691543d9ee1.png#clientId=uc78214b9-d920-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=624&amp;id=uf50a7119&amp;originHeight=624&amp;originWidth=610&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58905&amp;status=error&amp;style=none&amp;taskId=ud772c6cb-8db3-4fb6-8261-c2ea8d3d472&amp;title=&amp;width=610" alt="image.png">如果是已经存在的文件夹路径，那么点击按钮后不会立刻改变文件夹的颜色，需要重新启动才能够发现改变。不存在的文件夹路径，当创建好对应的文件夹后，文件夹会自动改变颜色。<br><a name="oHHlX"></a></p><h3 id="python调用函数实现批量更改">python调用函数实现批量更改</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># import folderColor as fc</span></span><br><span class="line"><span class="meta"># from imp import reload</span></span><br><span class="line"><span class="meta"># reload(fc)</span></span><br><span class="line"><span class="meta"># fc.generateColoredDirectories()</span></span><br><span class="line"></span><br><span class="line"><span class="function">def <span class="title">generateColoredDirectories</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function">    for x in range(<span class="number">100</span>, <span class="number">400</span>):</span></span><br><span class="line"><span class="function">        dir_path =</span> <span class="string">&#x27;/Game/PythonGenerated/&#x27;</span> + <span class="built_in">str</span>(x)</span><br><span class="line">        linear_color = <span class="built_in">getGradientColor</span>(x)</span><br><span class="line">        unreal.CppLib.<span class="built_in">set_folder_color</span>(dir_path, linear_color)</span><br><span class="line">        unreal.EditorAssetLibrary.<span class="built_in">make_directory</span>(dir_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="built_in">getGradientColor</span>(x):</span><br><span class="line">    x = x - <span class="number">100</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">100</span>:</span><br><span class="line">        r = <span class="number">1.0</span> - x / <span class="number">100.0</span></span><br><span class="line">        g = <span class="number">0.0</span> + x / <span class="number">100.0</span></span><br><span class="line">        b = <span class="number">0.0</span></span><br><span class="line">    elif x &lt; <span class="number">200</span>:</span><br><span class="line">        r = <span class="number">0.0</span></span><br><span class="line">        g = <span class="number">1.0</span> - (x - <span class="number">100</span>) / <span class="number">100.0</span></span><br><span class="line">        b = <span class="number">0.0</span> + (x - <span class="number">100</span>) / <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r = <span class="number">0.0</span> + (x - <span class="number">200</span>) / <span class="number">100.0</span></span><br><span class="line">        g = <span class="number">0.0</span></span><br><span class="line">        b = <span class="number">1.0</span> - (x - <span class="number">200</span>) / <span class="number">100.0</span></span><br><span class="line">    <span class="keyword">return</span> unreal.<span class="built_in">LinearColor</span>(r, g, b, <span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1657534605188-5fd07b83-fbb3-4314-a553-0d49666f707e.png#clientId=uc78214b9-d920-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=434&amp;id=ud7d21ee3&amp;originHeight=434&amp;originWidth=2058&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=136042&amp;status=error&amp;style=none&amp;taskId=u862795a0-5e66-40c1-a790-af9d4d9819b&amp;title=&amp;width=2058" alt="image.png"><br><a name="yacQ4"></a></p><h2 id="如何使用c-和Python打开和关闭资产">如何使用c++和Python打开和关闭资产</h2><p>python 只能打开资产，关闭资产需要通过C++来实现。<br><a name="UIkJl"></a></p><h3 id="先看python如何打开资产">先看python如何打开资产</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="comment"># 在ue中执行的调用命令</span></span><br><span class="line"><span class="comment"># from imp import reload</span></span><br><span class="line"><span class="comment"># import openAssets_10 as oa</span></span><br><span class="line"><span class="comment"># reload(oa)</span></span><br><span class="line"><span class="comment"># oa.openAssets()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">openAssets</span>():</span><br><span class="line">    assets = [unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Sounds/soundTest&#x27;</span>),</span><br><span class="line">              unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/light_setAOVs&#x27;</span>),</span><br><span class="line">              unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/light_createShot&#x27;</span>),</span><br><span class="line">              unreal.load_asset(<span class="string">&#x27;/Game/MyAsset/Textures/light_importLight&#x27;</span>)]</span><br><span class="line">    unreal.AssetToolsHelpers.get_asset_tools().open_editor_for_assets(assets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用自定义的C++类中的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAllOpenedAssets</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.CppLib.get_assets_opened_in_editor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">closeAssets</span>():</span><br><span class="line">    assets = getAllOpenedAssets()</span><br><span class="line">    unreal.CppLib.close_editor_for_assets(assets)</span><br></pre></td></tr></table></figure><p><a name="HUW7O"></a></p><h3 id="UE中模块修改">UE中模块修改</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659002804160-678071e2-135e-4dff-9291-df6ea04cb85e.png#clientId=u88952200-365e-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=583&amp;id=uc0dc5e8a&amp;originHeight=583&amp;originWidth=324&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20749&amp;status=error&amp;style=none&amp;taskId=u71ae05de-611d-40ba-86c3-3f49a71bef2&amp;title=&amp;width=324" alt="image.png">这个.Build.cs格式的是当前项目的模块<br>进入这个模块需要修改：<br>主要是增加了一项：“UnrealEd”</p><p><a name="JrJq3"></a></p><h3 id="CPlusPlusTest-Build-cs">CPlusPlusTest.Build.cs</h3><p>首先说明一下这里的CPlusPlusTest是ue4.27中创建的项目名<br>在原有的基础上新增了&quot;UnrealEd&quot;<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659003281786-9ec3ec8a-52f6-43de-969b-357743238a21.png#clientId=u88952200-365e-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=527&amp;id=u4e1a4527&amp;originHeight=527&amp;originWidth=2030&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=92636&amp;status=error&amp;style=none&amp;taskId=u602760b9-d2f1-40d6-9760-60ca217cda8&amp;title=&amp;width=2030" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright Epic Games, Inc. All Rights Reserved.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnrealBuildTool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CPlusPlusTest</span> : ModuleRules</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CPlusPlusTest</span><span class="params">(ReadOnlyTargetRules Target)</span> : base(Target)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line">PCHUsage = PCHUsageMode.UseExplicitOrSharedPCHs;</span><br><span class="line"></span><br><span class="line">PublicDependencyModuleNames.<span class="built_in">AddRange</span>(<span class="keyword">new</span> string[] &#123; <span class="string">&quot;Core&quot;</span>, <span class="string">&quot;CoreUObject&quot;</span>, <span class="string">&quot;Engine&quot;</span>, <span class="string">&quot;InputCore&quot;</span>, <span class="string">&quot;HeadMountedDisplay&quot;</span>, <span class="string">&quot;UnrealEd&quot;</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="IxqdD"></a></p><h3 id="CppLib-h-2">CppLib.h</h3><p>在上一节的基础上 新增了两个函数：<br>CloseEditorForAssets<br>GetAssetsOpendInEditor</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;UObject*&gt; <span class="title">GetAssetsOpenedInEditor</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="YAVAV"></a></p><h3 id="CppLib-cpp-2">CppLib.cpp</h3><p>这里除了定义函数功能还有个要注意的是要include “Editor.h”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/UnrealEd/Public/Toolkits/AssetEditorManager.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line"><span class="keyword">for</span> (UObject* Asset : Assets) &#123;</span><br><span class="line">AssetEditorSubsystem-&gt;<span class="built_in">CloseAllEditorsForAsset</span>(Asset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;UObject*&gt; <span class="title">UCppLib::GetAssetsOpenedInEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;<span class="built_in">GetAllEditedAssets</span>();</span><br><span class="line"><span class="keyword">return</span> EditedAssets;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="mq42D"></a></p><h3 id="在UE中进行调用">在UE中进行调用</h3><p>from imp import reload<br>import openAssets_10 as oa<br>reload(oa)<br>oa.openAssets()# 打开资产<br>oa.closeAssets()# 关闭资产<br>oa.getAllOpenedAssets()#得到当前打开的资产的信息（需要用一个变量来接受它，是一个列表）<br><a name="KycrD"></a></p><h2 id="使用Python和C-选择内容浏览器的资产">使用Python和C ++选择内容浏览器的资产</h2><p><a name="Nghfs"></a></p><h3 id="python">python</h3><p>使用python来选择有弊端，就是它不能选择文件夹以及关卡，因此还要介绍通过C++如何选择</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="comment"># from imp import reload</span></span><br><span class="line"><span class="comment"># import selectAssets_11 as sa</span></span><br><span class="line"><span class="comment"># reload(sa)</span></span><br><span class="line"><span class="comment"># sa.showAssetsInContentBrowser()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showAssetsInContentBrowser</span>():</span><br><span class="line">    paths = [<span class="string">&#x27;/Game/MyAsset/Sounds/SoundTest&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;/Game/MyAsset/Textures/light_setAOVs&#x27;</span>]</span><br><span class="line">    unreal.EditorAssetLibrary.sync_browser_to_objects(paths)</span><br></pre></td></tr></table></figure><p><a name="Eu4Sv"></a></p><h3 id="CPlusPlusTest-Build-cs-2">CPlusPlusTest.Build.cs</h3><p>又新增了这三个，因为.cpp用到了Module<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659063963423-a412bbf8-0b53-46af-b1dd-7d79fe83847f.png#clientId=u765cde32-d8a7-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=241&amp;id=u5e93f960&amp;originHeight=241&amp;originWidth=1013&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78968&amp;status=error&amp;style=none&amp;taskId=u8231aafe-0b3a-498c-80ca-6d9b767c64a&amp;title=&amp;width=1013" alt="image.png">  最后的EditorWidgets不添加的话编译不了，教程中没有加这个，UE4.27，VS2019需要加EditorWidgets，加了以后就可以用了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659071465975-e002a595-a779-4c77-b83a-343028d3efd2.png#clientId=u765cde32-d8a7-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=252&amp;id=u6df4cf01&amp;originHeight=252&amp;originWidth=1590&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27687&amp;status=error&amp;style=none&amp;taskId=u2ffc3186-426c-469f-b854-54204f052d9&amp;title=&amp;width=1590" alt="image.png"><br><a name="O69Kh"></a></p><h3 id="CppLib-h-3">CppLib.h</h3><p>到现在我才发现在头文件里面写了构造函数后可以通过左边的螺丝刀图标快速创建在源文件中<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659064115807-08559492-b055-410a-ab08-a01ba6e0b0a1.png#clientId=u765cde32-d8a7-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=105&amp;id=uc3682901&amp;originHeight=105&amp;originWidth=321&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12833&amp;status=error&amp;style=none&amp;taskId=u4f3b1f25-c1f6-4aca-ba83-1859c310e14&amp;title=&amp;width=321" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">GENERATED_BODY</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>; <span class="comment">// 批量创建文件夹并修改颜色</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span></span>; <span class="comment">// 关闭打开的资产的窗口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;UObject*&gt; <span class="title">GetAssetsOpenedInEditor</span><span class="params">()</span></span>; <span class="comment">// 获得已经打开资产窗口的资产的路径字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedAssets</span><span class="params">()</span></span>; <span class="comment">// 获得选择的资产的路径字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedFolders</span><span class="params">()</span></span>; <span class="comment">// 获得选择的文件夹的路径字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的资产</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的文件夹</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="W1fC1"></a></p><h3 id="CppLib-cpp-3">CppLib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/UnrealEd/Public/Toolkits/AssetEditorManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Public/ContentBrowserModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Private/ScontentBrowser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/AssetRegistry/Public/AssetRegistryModule.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line"><span class="keyword">for</span> (UObject* Asset : Assets) &#123;</span><br><span class="line">AssetEditorSubsystem-&gt;<span class="built_in">CloseAllEditorsForAsset</span>(Asset);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;UObject*&gt; <span class="title">UCppLib::GetAssetsOpenedInEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;<span class="built_in">GetAllEditedAssets</span>();</span><br><span class="line"><span class="keyword">return</span> EditedAssets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedAssets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">TArray&lt;FAssetData&gt; SelectedAssets;</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedAssets</span>(SelectedAssets);</span><br><span class="line">TArray&lt;FString&gt; Result;</span><br><span class="line"><span class="keyword">for</span> (FAssetData&amp; AssetData : SelectedAssets) &#123;</span><br><span class="line">Result.<span class="built_in">Add</span>(AssetData.PackageName.<span class="built_in">ToString</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedFolders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedFolders</span>(SelectedFolders);</span><br><span class="line"><span class="keyword">return</span> SelectedFolders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">FAssetRegistryModule&amp; AssetRegistryModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetRegistryModule&gt;(<span class="string">&quot;AssetRegistry&quot;</span>);</span><br><span class="line">TArray&lt;FName&gt; PathsName;</span><br><span class="line"><span class="keyword">for</span> (FString Path : Paths) &#123;</span><br><span class="line">PathsName.<span class="built_in">Add</span>(*Path);</span><br><span class="line">&#125;</span><br><span class="line">FARFilter AssetFilter;</span><br><span class="line">AssetFilter.PackageNames = PathsName;</span><br><span class="line">TArray&lt;FAssetData&gt; AssetDatas;</span><br><span class="line">AssetRegistryModule.<span class="built_in">Get</span>().<span class="built_in">GetAssets</span>(AssetFilter, AssetDatas);</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToAssets</span>(AssetDatas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToFolders</span>(Paths);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="vAd5P"></a></p><h2 id="如何用Python显示缓慢的任务进度">如何用Python显示缓慢的任务进度</h2><p>执行循环的过程的同时显示进度：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1659079195804-be1a6f84-5236-4712-95d1-5eaf4518c3cd.png#clientId=u765cde32-d8a7-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=166&amp;id=u12c81568&amp;originHeight=166&amp;originWidth=859&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29624&amp;status=error&amp;style=none&amp;taskId=u05ec8549-fa39-408c-8a5d-d38cf9c9741&amp;title=&amp;width=859" alt="image.png"><br><a name="w8RHJ"></a></p><h3 id="python-2">python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># from imp import reload</span></span><br><span class="line"><span class="comment"># import showSlowTasksProgression_12 as test</span></span><br><span class="line"><span class="comment"># reload(test)</span></span><br><span class="line"><span class="comment"># test.executeSlowTask()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeSlowTask</span>():</span><br><span class="line">    quantity_steps_in_slow_task = <span class="number">10000</span></span><br><span class="line">    <span class="keyword">with</span> unreal.ScopedSlowTask(quantity_steps_in_slow_task, <span class="string">&#x27;My Slow Task Text ...&#x27;</span>) <span class="keyword">as</span> slow_task:</span><br><span class="line">        slow_task.make_dialog(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(quantity_steps_in_slow_task):</span><br><span class="line">            <span class="keyword">if</span> slow_task.should_cancel():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            slow_task.enter_progress_frame(<span class="number">1</span>, <span class="string">&#x27;My Slow Task Text ...&#x27;</span> + <span class="built_in">str</span>(x) + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">str</span>(quantity_steps_in_slow_task))</span><br><span class="line">            <span class="comment"># Execute slow logic</span></span><br><span class="line">            deferredSpawnActor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deferredSpawnActor</span>():</span><br><span class="line">    world = unreal.EditorLevelLibrary.get_editor_world()</span><br><span class="line">    actor_class = unreal.EditorAssetLibrary.load_blueprint_class(<span class="string">&#x27;/Game/MyBluePrint/BPActor&#x27;</span>)</span><br><span class="line">    actor_location = unreal.Vector(random.uniform(<span class="number">0.0</span>, <span class="number">2000.0</span>), random.uniform(<span class="number">0.0</span>, <span class="number">2000.0</span>), <span class="number">0.0</span>)</span><br><span class="line">    actor_rotation = unreal.Rotator(random.uniform(<span class="number">0.0</span>, <span class="number">360.0</span>), random.uniform(<span class="number">0.0</span>, <span class="number">360.0</span>), random.uniform(<span class="number">0.0</span>, <span class="number">360.0</span>))</span><br><span class="line">    actor_scale = unreal.Vector(random.uniform(<span class="number">0.1</span>, <span class="number">2.0</span>), random.uniform(<span class="number">0.1</span>, <span class="number">2.0</span>), random.uniform(<span class="number">0.1</span>, <span class="number">2.0</span>))</span><br><span class="line">    actor_transform = unreal.Transform(actor_location, actor_rotation, actor_scale)</span><br><span class="line">    <span class="comment"># actor = unreal.GameplayStatics.begin_deferred_actor_spawn_from_class(world, actor_class, actor_transform)</span></span><br><span class="line">    <span class="comment"># unreal.GameplayStatics.finish_spawning_actor(actor, actor_transform)</span></span><br><span class="line">    actor = unreal.CppLib.get_actor(world, actor_class, actor_transform)</span><br><span class="line">    unreal.CppLib.set_actor(actor,actor_transform)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="FhjgO"></a></p><h3 id="CppLib-h-4">CppLib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CoreMinimal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Kismet/BlueprintFunctionLibrary.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.generated.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">UCLASS</span>()</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">CPLUSPLUSTEST_API</span> UCppLib : <span class="keyword">public</span> UBlueprintFunctionLibrary</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">GENERATED_BODY</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span></span>; <span class="comment">// 批量创建文件夹并修改颜色</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span></span>; <span class="comment">// 关闭打开的资产的窗口</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> TArray&lt;UObject*&gt; <span class="title">GetAssetsOpenedInEditor</span><span class="params">()</span></span>; <span class="comment">// 获得已经打开资产窗口的资产的路径字符串列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedAssets</span><span class="params">()</span></span>; <span class="comment">// 获得选择的资产的路径字符串列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> TArray&lt;FString&gt; <span class="title">GetSelectedFolders</span><span class="params">()</span></span>; <span class="comment">// 获得选择的文件夹的路径字符串列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的资产</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span>; <span class="comment">// 选择路径字符串列表中的文件夹</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> AActor* <span class="title">GetActor</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject,TSubclassOf&lt; AActor &gt; ActorClass,<span class="type">const</span> FTransform&amp; SpawnTransform)</span></span>; <span class="comment">// 获取ActorBP</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line">    <span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">setActor</span><span class="params">(<span class="keyword">class</span> AActor* Actor,<span class="type">const</span> FTransform&amp; SpawnTransform)</span></span>; <span class="comment">// 创建AcotrBP</span></span><br><span class="line">    </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="JryYA"></a></p><h3 id="CppLib-cpp-4">CppLib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Fill out your copyright notice in the Description page of Project Settings.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;CppLib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/UnrealEd/Public/Toolkits/AssetEditorManager.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Public/ContentBrowserModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Editor/ContentBrowser/Private/ScontentBrowser.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/AssetRegistry/Public/AssetRegistryModule.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Runtime/Engine/Classes/Kismet/GameplayStatics.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetFolderColor</span><span class="params">(FString FolderPath, FLinearColor Color)</span> </span>&#123;</span><br><span class="line">    GConfig-&gt;<span class="built_in">SetString</span>(<span class="built_in">TEXT</span>(<span class="string">&quot;PathColor&quot;</span>), *FolderPath, *Color.<span class="built_in">ToString</span>(), GEditorPerProjectIni);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::CloseEditorForAssets</span><span class="params">(TArray&lt;UObject*&gt; Assets)</span> </span>&#123;</span><br><span class="line">    UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">    <span class="keyword">for</span> (UObject* Asset : Assets) &#123;</span><br><span class="line">        AssetEditorSubsystem-&gt;<span class="built_in">CloseAllEditorsForAsset</span>(Asset);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;UObject*&gt; <span class="title">UCppLib::GetAssetsOpenedInEditor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UAssetEditorSubsystem* AssetEditorSubsystem = GEditor-&gt;<span class="built_in">GetEditorSubsystem</span>&lt;UAssetEditorSubsystem&gt;();</span><br><span class="line">    TArray&lt;UObject*&gt; EditedAssets = AssetEditorSubsystem-&gt;<span class="built_in">GetAllEditedAssets</span>();</span><br><span class="line">    <span class="keyword">return</span> EditedAssets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedAssets</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    TArray&lt;FAssetData&gt; SelectedAssets;</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedAssets</span>(SelectedAssets);</span><br><span class="line">    TArray&lt;FString&gt; Result;</span><br><span class="line">    <span class="keyword">for</span> (FAssetData&amp; AssetData : SelectedAssets) &#123;</span><br><span class="line">        Result.<span class="built_in">Add</span>(AssetData.PackageName.<span class="built_in">ToString</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetSelectedFolders</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">GetSelectedFolders</span>(SelectedFolders);</span><br><span class="line">    <span class="keyword">return</span> SelectedFolders;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedAssets</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    FAssetRegistryModule&amp; AssetRegistryModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FAssetRegistryModule&gt;(<span class="string">&quot;AssetRegistry&quot;</span>);</span><br><span class="line">    TArray&lt;FName&gt; PathsName;</span><br><span class="line">    <span class="keyword">for</span> (FString Path : Paths) &#123;</span><br><span class="line">        PathsName.<span class="built_in">Add</span>(*Path);</span><br><span class="line">    &#125;</span><br><span class="line">    FARFilter AssetFilter;</span><br><span class="line">    AssetFilter.PackageNames = PathsName;</span><br><span class="line">    TArray&lt;FAssetData&gt; AssetDatas;</span><br><span class="line">    AssetRegistryModule.<span class="built_in">Get</span>().<span class="built_in">GetAssets</span>(AssetFilter, AssetDatas);</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToAssets</span>(AssetDatas);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::SetSelectedFolders</span><span class="params">(TArray&lt;FString&gt; Paths)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    FContentBrowserModule&amp; ContentBrowserModule = FModuleManager::<span class="built_in">LoadModuleChecked</span>&lt;FContentBrowserModule&gt;(<span class="string">&quot;ContentBrowser&quot;</span>);</span><br><span class="line">    TArray&lt;FString&gt; SelectedFolders;</span><br><span class="line">    ContentBrowserModule.<span class="built_in">Get</span>().<span class="built_in">SyncBrowserToFolders</span>(Paths);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">AActor* <span class="title">UCppLib::GetActor</span><span class="params">(<span class="type">const</span> UObject* WorldContextObject, TSubclassOf&lt;AActor&gt; ActorClass, <span class="type">const</span> FTransform&amp; SpawnTransform)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> UGameplayStatics::<span class="built_in">BeginDeferredActorSpawnFromClass</span>(WorldContextObject, ActorClass, SpawnTransform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::setActor</span><span class="params">(AActor* Actor, <span class="type">const</span> FTransform&amp; SpawnTransform)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UGameplayStatics::<span class="built_in">FinishSpawningActor</span>(Actor, SpawnTransform);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ywGiE"></a></p><h2 id="打印类的所有属性">打印类的所有属性</h2><p><a name="ToiOf"></a></p><h3 id="Cpplib-h">Cpplib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="type">static</span> TArray&lt;FString&gt;<span class="built_in">GetAllProperties</span>(UClass* Class);  <span class="comment">//获取类的所有属性</span></span><br></pre></td></tr></table></figure><p><a name="Zvf6B"></a></p><h3 id="Cpplib-cpp">Cpplib.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">TArray&lt;FString&gt; <span class="title">UCppLib::GetAllProperties</span><span class="params">(UClass* Class)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TArray&lt;FString&gt; Ret;</span><br><span class="line"><span class="keyword">if</span> (Class != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (TFieldIterator&lt;UProperty&gt; <span class="built_in">It</span>(Class); It; ++It) &#123;</span><br><span class="line">UProperty* Property = *It;</span><br><span class="line"><span class="keyword">if</span> (Property-&gt;<span class="built_in">HasAnyPropertyFlags</span>(EPropertyFlags::CPF_Edit)) &#123;</span><br><span class="line">Ret.<span class="built_in">Add</span>(Property-&gt;<span class="built_in">GetName</span>());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="p9fCp"></a></p><h3 id="python-3">python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getAllProperties</span>(<span class="params">object_class</span>):</span><br><span class="line">    <span class="keyword">return</span> unreal.CppLib.get_all_properties(object_class)  <span class="comment"># 通过自定义C++的类中的函数，得到所有属性的字符串列表</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printAllProperties</span>():</span><br><span class="line">    obj = unreal.Actor()  <span class="comment"># 将打印actor类型的所有属性</span></span><br><span class="line">    object_class = obj.get_class()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> getAllProperties(object_class):</span><br><span class="line">        y = x</span><br><span class="line">        <span class="comment"># while循环的作用是为了对齐字符串</span></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(y) &lt; <span class="number">42</span>:</span><br><span class="line">            y = <span class="string">&#x27; &#x27;</span> + y</span><br><span class="line">        <span class="built_in">print</span>(y + <span class="string">&#x27;:&#x27;</span> + <span class="built_in">str</span>(obj.get_editor_property(x)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ABily"></a></p><h3 id="执行效果">执行效果</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662010703000-8b4963c7-8191-4200-9333-ddecc3455391.png#clientId=u22a16aa5-3892-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=559&amp;id=u9b275170&amp;originHeight=559&amp;originWidth=979&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110690&amp;status=error&amp;style=none&amp;taskId=u296b7b42-73fd-42fe-9c35-1f927f96924&amp;title=&amp;width=979" alt="image.png"><br><a name="taWQV"></a></p><h2 id="一次性执行多个cmd命令">一次性执行多个cmd命令</h2><p><a name="tIQjq"></a></p><h3 id="CppLib-h-5">CppLib.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">UFUNCTION</span>(BlueprintCallable, Category = <span class="string">&quot;Unreal Python&quot;</span>)</span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">ExecuteConsoleCommand</span><span class="params">(FString ConsoleCmd)</span></span>; <span class="comment">//执行多行命令行</span></span><br></pre></td></tr></table></figure><p><a name="nVxcr"></a></p><h3 id="CppLib-cpp-5">CppLib.cpp</h3><p>需要#include “Editor.h”</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">UCppLib::ExecuteConsoleCommand</span><span class="params">(FString ConsoleCmd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (GEditor) &#123;</span><br><span class="line">UWorld* World = GEditor-&gt;<span class="built_in">GetEditorWorldContext</span>().<span class="built_in">World</span>();</span><br><span class="line"><span class="keyword">if</span> (World) &#123;</span><br><span class="line">GEditor-&gt;<span class="built_in">Exec</span>(World, *ConsoleCmd, *GLog);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a name="kAYMM"></a></p><h3 id="python-4">python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">executeConsoleCommand</span>():</span><br><span class="line">    console_cmd = [<span class="string">&#x27;r.ScreenPercentage 0.1&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;r.Color.Max 6&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;stat fps&#x27;</span>,</span><br><span class="line">                   <span class="string">&#x27;stat unit&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> console_cmd:</span><br><span class="line">        unreal.CppLib.execute_console_command(x)</span><br></pre></td></tr></table></figure><p><a name="jqYhG"></a></p><h2 id="选择场景中的actor与清除选择">选择场景中的actor与清除选择</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_selected_actors</span>():</span><br><span class="line">    <span class="keyword">return</span> unreal.EditorLevelLibrary.get_selected_level_actors()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_selected_actors_EXAMPLE</span>():</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> get_selected_actors():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_actors</span>(<span class="params">actors_to_select=[]</span>):</span><br><span class="line">    unreal.EditorLevelLibrary.set_selected_level_actors(actors_to_select)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select_actors_EXAMPLE</span>():</span><br><span class="line">    all_actors = unreal.EditorLevelLibrary.get_all_level_actors()</span><br><span class="line">    actors_to_select = []</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(all_actors)):</span><br><span class="line">        actors_to_select.append(all_actors[x])</span><br><span class="line">    select_actors(actors_to_select)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_actor_selection_EXAMPLE</span>():</span><br><span class="line">    select_actors()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="mW84U"></a></p><h2 id="生成默认资源（材质粒子关卡等）">生成默认资源（材质粒子关卡等）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建基础资产</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_generic_asset</span>(<span class="params">asset_path=<span class="string">&#x27;&#x27;</span>, unique_name=<span class="literal">True</span>, asset_class=<span class="literal">None</span>, asset_factory=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> unique_name:  <span class="comment"># 如果命名冲突的话会自动生成一个新的唯一的路径名字(后缀加数字)</span></span><br><span class="line">        asset_path, asset_name = unreal.AssetToolsHelpers.get_asset_tools().create_unique_asset_name(</span><br><span class="line">            base_package_name=asset_path, suffix=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> unreal.EditorAssetLibrary.does_asset_exist(asset_path=asset_path):</span><br><span class="line">        path = asset_path.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        name = asset_path.rsplit(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> unreal.AssetToolsHelpers.get_asset_tools().create_asset(</span><br><span class="line">            asset_name=name,</span><br><span class="line">            package_path=path,</span><br><span class="line">            asset_class=asset_class,</span><br><span class="line">            factory=asset_factory</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> unreal.load_asset(asset_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用创建基础资产的举例</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_generic_asset_EXAMPLE</span>():</span><br><span class="line">    base_path = <span class="string">&#x27;/Game/GenericAssets/&#x27;</span></span><br><span class="line">    generic_assets = [</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;sequence&#x27;</span>,</span><br><span class="line">            unreal.LevelSequence,</span><br><span class="line">            unreal.LevelSequenceFactoryNew()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;material&#x27;</span>,</span><br><span class="line">            unreal.Material,</span><br><span class="line">            unreal.MaterialFactoryNew()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">            unreal.World,</span><br><span class="line">            unreal.WorldFactory()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;particle_system&#x27;</span>,</span><br><span class="line">            unreal.ParticleSystem,</span><br><span class="line">            unreal.ParticleSystemFactoryNew()</span><br><span class="line">        ],</span><br><span class="line">        [</span><br><span class="line">            base_path + <span class="string">&#x27;paper_flipbook&#x27;</span>,</span><br><span class="line">            unreal.PaperFlipbook,</span><br><span class="line">            unreal.PaperFlipbookFactory()</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> asset <span class="keyword">in</span> generic_assets:</span><br><span class="line">        <span class="built_in">print</span>(create_generic_asset(asset[<span class="number">0</span>], <span class="literal">True</span>, asset[<span class="number">1</span>], asset[<span class="number">2</span>]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="qpNWT"></a></p><h2 id="在蓝图中使用python">在蓝图中使用python</h2><p>在4.25版本之前的ue中需要用c++添加蓝图节点但是在新版本已经内置了能在蓝图中使用python的节点。但是无法在运行时可用的蓝图类（例如直接从 <strong>Actor</strong> 派生的类）中使用此方法。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1662020863952-4b2f949c-5fa1-4fd2-a215-cb7b1022281e.png#clientId=u22a16aa5-3892-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=108&amp;id=u57ca3ead&amp;originHeight=108&amp;originWidth=321&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14297&amp;status=error&amp;style=none&amp;taskId=ua8e75acd-6305-48ec-b2d7-8a9fe9078f6&amp;title=&amp;width=321" alt="image.png"><br><a name="wWH8n"></a></p><h1>B站搬运Udemy教程</h1><p>链接：<a href="https://www.bilibili.com/video/BV1GY4y1s7qM?p=8&amp;spm_id_from=pageDriver&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1GY4y1s7qM?p=8&amp;spm_id_from=pageDriver&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a><br><a href="https://www.bilibili.com/video/BV18q4y1X7DH?p=11&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV18q4y1X7DH?p=11&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a><br>这两个教程链接内容是一样的，但是有的教程链接中的内容可能有点损坏，互补一下。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663053942549-57973196-eff2-418d-a600-2a293b1f5040.png#clientId=ue9ce22a4-2e2e-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=178&amp;id=ue78a2402&amp;originHeight=178&amp;originWidth=209&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35533&amp;status=error&amp;style=none&amp;taskId=u1a865568-c0b5-4975-b5d3-97ee5e65145&amp;title=&amp;width=209" alt="image.png"></p><p><a name="u403x"></a></p><h2 id="P10工厂和资产创造">P10工厂和资产创造</h2><p>什么是工厂：当我们需要创建一个资产的时候（蓝图，声音，关卡等），我们就需要去工厂去取（factory），因此我们需要先找到对应的工厂：<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/LevelFactory.html">LevelFactory</a>，<a href="https://docs.unrealengine.com/4.27/en-US/PythonAPI/class/BlueprintFactory.html">BlueprintFactory</a>等。<br>以创建蓝图举例：<br>创建工厂对象相当于点击这些：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663056902672-816725d5-0293-46a5-bbef-68c4cfeda9f5.png#clientId=ua74dfa99-2388-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=632&amp;id=u82702c01&amp;originHeight=632&amp;originWidth=216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33231&amp;status=error&amp;style=none&amp;taskId=u182c88b2-bc5b-42e1-a89b-335b71af25b&amp;title=&amp;width=216" alt="image.png"></p><p>创建完工厂后（点击后）需要选择继承的类<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663056967314-be14bd41-e4ad-4cbf-824a-6be26d61a8a1.png#clientId=ua74dfa99-2388-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=743&amp;id=u8a06f157&amp;originHeight=743&amp;originWidth=544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98896&amp;status=error&amp;style=none&amp;taskId=ue20e6a4d-6f9c-4763-9eb4-4bbfa2f4259&amp;title=&amp;width=544" alt="image.png"><br>初始设置完成后开始创造资产，创造资产需要使用unreal.AssetToolsHelpers.get_asset_tools()<br>利用这个工具中的create_asset方法创建。<br>创建完后用unreal.EditorAssetLibrary.save_loaded_asset进行保存<br>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">blueprintName = <span class="string">&quot;python_create_BP&quot;</span></span><br><span class="line">blueprintPath = <span class="string">&quot;/Game/MyBluePrint&quot;</span></span><br><span class="line"></span><br><span class="line">factory = unreal.BlueprintFactory()</span><br><span class="line">factory.set_editor_property(<span class="string">&quot;ParentClass&quot;</span>, unreal.Actor)</span><br><span class="line"></span><br><span class="line">assetTools = unreal.AssetToolsHelpers.get_asset_tools()</span><br><span class="line">myFancyNewAssetFile = assetTools.create_asset(blueprintName, blueprintPath, <span class="literal">None</span>, factory)</span><br><span class="line"></span><br><span class="line">unreal.EditorAssetLibrary.save_loaded_asset(myFancyNewAssetFile)</span><br></pre></td></tr></table></figure><p><a name="x0zPC"></a></p><h2 id="P11制作任务进度条：">P11制作任务进度条：</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663060403285-f485f6df-06a3-4c80-8f52-fc9c526f60c0.png#clientId=ua74dfa99-2388-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=133&amp;id=uc0d5f7e7&amp;originHeight=133&amp;originWidth=648&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7070&amp;status=error&amp;style=none&amp;taskId=u6fc3c721-c9d7-46ef-80dd-352a5047316&amp;title=&amp;width=648" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">totalFrames = <span class="number">1000000</span></span><br><span class="line">textDisplay = <span class="string">&quot;i love python, an i guess i&#x27;ll be using this for a while!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(totalFrames, textDisplay) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(totalFrames):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.log(<span class="string">&quot;one step!!!!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><a name="b21xj"></a></p><h2 id="P12综合案例：批量创建继承自actor的蓝图资产（带进度条）">P12综合案例：批量创建继承自actor的蓝图资产（带进度条）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">totalRequiredBlueprints = <span class="number">20</span></span><br><span class="line">newAssetName = <span class="string">&quot;BP_pythonMade_%d&quot;</span></span><br><span class="line">createdAssetsPath = <span class="string">&quot;/Game/TestStuff&quot;</span></span><br><span class="line">slowTaskDisplayText = <span class="string">&quot;Createing new assets.....&quot;</span></span><br><span class="line"></span><br><span class="line">factory = unreal.BlueprintFactory()</span><br><span class="line">factory.set_editor_property(<span class="string">&quot;ParentClass&quot;</span>, unreal.Actor)</span><br><span class="line"></span><br><span class="line">assetTools = unreal.AssetToolsHelpers.get_asset_tools()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(totalRequiredBlueprints, slowTaskDisplayText) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(totalRequiredBlueprints):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        newAsset = assetTools.create_asset(newAssetName % (x), createdAssetsPath, <span class="literal">None</span>, factory)</span><br><span class="line">        unreal.EditorAssetLibrary.save_loaded_asset(newAsset)</span><br><span class="line">        unreal.log(<span class="string">&quot;Just created an asset BP_PythonMade_%d via PYTHON API&quot;</span> % (x))</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="E5UPW"></a></p><h2 id="P13-根据选择的资产创建Actor-在关卡中的都叫actor">P13 根据选择的资产创建Actor(在关卡中的都叫actor)</h2><p>教程上的获取选择的资产是这样：<br>@unreal.uclass()<br>class MyEditorUtility(unreal.GlobalEditorUtilityBase):<br>    pass</p><p>selectedAssets = MyEditorUtility().get_selected_assets()<br>但是官网教程有教可以通过这样获取选择的资产：<br>selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">actorsCount = <span class="number">50</span></span><br><span class="line">slowTaskDisplayText = <span class="string">&quot;Spawning actors in the level.....&quot;</span></span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(actorsCount, slowTaskDisplayText) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(actorsCount):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.EditorLevelLibrary.spawn_actor_from_object(selectedAssets[<span class="number">0</span>], unreal.Vector(<span class="number">1.0</span>+x*<span class="number">100</span>, <span class="number">1.0</span>+x*<span class="number">100</span>, <span class="number">30.0</span>),  unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">10.0</span>*x))</span><br><span class="line">        unreal.log(<span class="string">&quot;Just added an actor to the level!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a name="XtLCO"></a></p><h2 id="P15修改选择的资产或者actor的属性">P15修改选择的资产或者actor的属性</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663135564986-6b21ac2f-abd0-4932-a01d-b3a0984e89f0.png#clientId=u2c683694-c481-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=378&amp;id=uf92eda78&amp;originHeight=378&amp;originWidth=2305&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=259521&amp;status=error&amp;style=none&amp;taskId=ubcce0a4d-a366-4670-a268-197dd9edee4&amp;title=&amp;width=2305" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663135493400-bab6c656-b4d8-41bf-b30a-15bd0ab1b0db.png#clientId=u2c683694-c481-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=418&amp;id=u7ab464ca&amp;originHeight=418&amp;originWidth=472&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28019&amp;status=error&amp;style=none&amp;taskId=u6eb5e81a-b64f-41db-b98c-33cf6616fe7&amp;title=&amp;width=472" alt="image.png"><br>例如如果我们要修改这些属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> selectedAsset <span class="keyword">in</span> selectedAssets:</span><br><span class="line">    selectedAsset.set_editor_property(<span class="string">&quot;BlueprintDisplayName&quot;</span>, <span class="string">&quot;Some BP&quot;</span>)</span><br><span class="line">    selectedAsset.set_editor_property(<span class="string">&quot;BlueprintCategory&quot;</span>, <span class="string">&quot;Collectable&quot;</span>)</span><br><span class="line">    selectedAsset.set_editor_property(<span class="string">&quot;BlueprintDescription&quot;</span>, <span class="string">&quot;This is a blueprint generated by Python or something&quot;</span>)</span><br><span class="line"></span><br><span class="line">selectedActors = unreal.EditorLevelLibrary.get_selected_level_actors()</span><br><span class="line"><span class="keyword">for</span> actor <span class="keyword">in</span> selectedActors:</span><br><span class="line">    actor.set_editor_property(<span class="string">&quot;canRotate&quot;</span>, <span class="literal">True</span>)</span><br><span class="line">    actor.set_editor_property(<span class="string">&quot;bHidden&quot;</span>, <span class="number">1</span>)</span><br><span class="line">    actor.set_editor_property(<span class="string">&quot;SpriteScale&quot;</span>, <span class="number">7.5</span>)</span><br></pre></td></tr></table></figure><p>其中bHidden和SpriteScale对应的是ActorHiddenInGame和EditorBillboardScale<br>之所以使用的不是ue编辑器显示的界面名字是因为ue源码中设置的这些是编辑器中显示的名字，实际上源码中使用的变量名字并不是这些，并且bHidden在ue中显示的是名字是ActorHiddenInGame而且看起来是布尔变量，但是源码中实际上是int类型的名字叫bHidden。<br>那么如何在源码中查找真正的变量名字与类型呢？<br>例如这里设置actor的属性，我们就可以去Actor.h文件中搜索ue界面编辑器中显示的名字，然后就可以查找出来真正的名字与类型。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663225180561-c530c9ec-dd16-48f7-8259-85e0e4a71ede.png#clientId=ueac702c7-aad3-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=1214&amp;id=u1544bd73&amp;originHeight=1214&amp;originWidth=3437&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=408022&amp;status=error&amp;style=none&amp;taskId=ua187c3b2-5425-48b5-a5b6-fd3c22603e2&amp;title=&amp;width=3437" alt="image.png"><br><a name="evWjm"></a></p><h2 id="br-P16-python与蓝图的结合"><br>P16 python与蓝图的结合</h2><p>把P12的功能做成一个带UI的工具：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150571998-5f5deac5-591b-4ab2-bd80-7690ed71f044.png#clientId=u2c683694-c481-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=200&amp;id=u75eda6c1&amp;originHeight=200&amp;originWidth=584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21438&amp;status=error&amp;style=none&amp;taskId=u6a8d9efc-4497-4c5f-bf99-b06cc6c4a2a&amp;title=&amp;width=584" alt="image.png"><br>其中滑块与文本之间可以通过函数进行绑定：<br>在UI编辑器中选择文本控件：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150642231-c9236cc6-f52f-41a1-9967-e40c33db75bd.png#clientId=u2c683694-c481-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=84&amp;id=u7ecbe491&amp;originHeight=84&amp;originWidth=1217&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7777&amp;status=error&amp;style=none&amp;taskId=ua94a5c18-8902-4582-ad52-1833ec1f8a4&amp;title=&amp;width=1217" alt="image.png">在text处进行绑定：<br>参考：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150677829-f9671f11-a34e-41d9-b565-0aff32be9f0c.png#clientId=u2c683694-c481-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=384&amp;id=u42e0dfe8&amp;originHeight=384&amp;originWidth=1265&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=93090&amp;status=error&amp;style=none&amp;taskId=uffde632b-5fe1-47ca-943f-c4ecc154a5e&amp;title=&amp;width=1265" alt="image.png"><br>python在蓝图节点中使用：<br>步骤：使用FormatText节点，节点中使用花括号框住的变量会自动产生引脚，为引脚传递数值配合python代码使用executePythonCommand节点执行。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663150698315-ca5c5d83-c521-43ab-b632-359171aae0ca.png#clientId=u2c683694-c481-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=707&amp;id=u395b52ea&amp;originHeight=707&amp;originWidth=1709&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170315&amp;status=error&amp;style=none&amp;taskId=u141b2d81-9c0a-45e2-bde4-9f73a053767&amp;title=&amp;width=1709" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line">actorsCount = <span class="built_in">int</span>(&#123;actorsCount&#125;)</span><br><span class="line">rotationStep = <span class="built_in">int</span>(&#123;rotationStep&#125;)</span><br><span class="line">positionOffset = &#123;positionOffset&#125;</span><br><span class="line">slowTaskDisplayText = <span class="string">&quot;Spawning actors in the level....&quot;</span></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"><span class="keyword">with</span> unreal.ScopedSlowTask(actorsCount, slowTaskDisplayText) <span class="keyword">as</span> ST:</span><br><span class="line">    ST.make_dialog(<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(actorsCount):</span><br><span class="line">        <span class="keyword">if</span> ST.should_cancel():</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        unreal.EditorLevelLibrary.spawn_actor_from_object(selectedAssets[<span class="number">0</span>],unreal.Vector(positionOffset * i, positionOffset * i, <span class="number">30.0</span>), unreal.Rotator(<span class="number">0.0</span>, <span class="number">0.0</span>, rotationStep * i))</span><br><span class="line">        unreal.log(<span class="string">&quot;Just added an actor to the level!&quot;</span>)</span><br><span class="line">        ST.enter_progress_frame(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><a name="lh29O"></a></p><h2 id="P19-清理动画序列的修改">P19 清理动画序列的修改</h2><p>清理动画序列的这些：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663230536696-b7ad4db0-2360-4f31-9505-93e2de6ace26.png#clientId=ueac702c7-aad3-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=929&amp;id=u5bcafe5b&amp;originHeight=929&amp;originWidth=1872&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=981489&amp;status=error&amp;style=none&amp;taskId=u1201cab3-2bad-4287-8d1f-dcfeb4abae8&amp;title=&amp;width=1872" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.get_selected_assets()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> asset <span class="keyword">in</span> selectedAssets:</span><br><span class="line">    asset.modify(<span class="literal">True</span>)</span><br><span class="line">    unreal.AnimationLibrary.remove_all_animation_notify_tracks(asset)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>教程中使用的方式:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1663230739632-4fbabd10-0237-4f9f-a0b6-6fc6f78ada35.png#clientId=ueac702c7-aad3-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=543&amp;id=u262d67d0&amp;originHeight=543&amp;originWidth=782&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174522&amp;status=error&amp;style=none&amp;taskId=u33d17a86-ffd7-447c-806b-8d0b86506e7&amp;title=&amp;width=782" alt="image.png"><br><a name="PYMbD"></a></p><h2 id="P20-清理未使用的资产">P20 清理未使用的资产</h2><p>使用后将无法撤回，看看就好，并且如果资产过多会直接崩溃。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">workingPath = <span class="string">&quot;/Game&quot;</span></span><br><span class="line"></span><br><span class="line">allAssets = unreal.EditorAssetLibrary.<span class="built_in">list_assets</span>(workingPath)</span><br><span class="line"></span><br><span class="line">processingAssetPath = <span class="string">&quot;&quot;</span></span><br><span class="line">allAssetsCount = <span class="built_in">len</span>(allAssets)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (allAssetsCount &gt; <span class="number">0</span>):</span><br><span class="line">    with unreal.<span class="built_in">ScopedSlowTask</span>(allAssetsCount, processingAssetPath) as ST:</span><br><span class="line">        ST.<span class="built_in">make_dialog</span>(True)</span><br><span class="line">        <span class="keyword">for</span> asset in allAssets:</span><br><span class="line">            processingAssetPath = asset</span><br><span class="line">            deps = unreal.EditorAssetLibrary.<span class="built_in">find_package_referencers_for_asset</span>(asset)  # 寻找资产的依赖项</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">len</span>(deps)&lt;=<span class="number">0</span>):</span><br><span class="line">                unreal.<span class="built_in">log</span>(<span class="string">&quot;&gt;&gt;&gt;&gt;&gt;&gt; Deleteing &gt;&gt;&gt;&gt;&gt; %s&quot;</span> % asset)</span><br><span class="line">                unreal.EditorAssetLibrary.<span class="built_in">delete_asset</span>(asset)</span><br><span class="line">            <span class="keyword">if</span> ST.<span class="built_in">should_cancel</span>():</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            ST.<span class="built_in">enter_progress_frame</span>(<span class="number">1</span>, processingAssetPath)</span><br></pre></td></tr></table></figure><p><a name="ZMWsY"></a></p><h2 id="P21-批量创建材质实例">P21 批量创建材质实例</h2><p>这里值得注意的是，使用get_path_name得到的是path.name格式的字符串，因此如果仅仅需要path则需要替换字符串。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unreal</span><br><span class="line"></span><br><span class="line">totalRequiredInstances = <span class="number">15</span></span><br><span class="line"></span><br><span class="line">newAssetName = <span class="string">&quot;&quot;</span></span><br><span class="line">sourceAssetPath = <span class="string">&quot;&quot;</span></span><br><span class="line">createdAssetsPath = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">selectedAssets = unreal.EditorUtilityLibrary.<span class="built_in">get_selected_assets</span>()</span><br><span class="line"></span><br><span class="line">factor = unreal.<span class="built_in">MaterialInstanceConstantFactoryNew</span>()</span><br><span class="line"></span><br><span class="line">assetTools = unreal.AssetToolsHelpers.<span class="built_in">get_asset_tools</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> selectedAsset in selectedAssets:</span><br><span class="line">    newAssetName = selectedAsset.<span class="built_in">get_name</span>() + <span class="string">&quot;_%s_%d&quot;</span></span><br><span class="line">    sourceAssetPath = selectedAsset.<span class="built_in">get_path_name</span>()  # /Game/MyTools/NewMaterial.NewMaterial</span><br><span class="line">    createdAssetsPath = sourceAssetPath.<span class="built_in">replace</span>(selectedAsset.<span class="built_in">get_name</span>(), <span class="string">&quot;-&quot;</span>)  # /Game/MyTools/-.-</span><br><span class="line">    createdAssetsPath = createdAssetsPath.<span class="built_in">replace</span>(<span class="string">&quot;-.-&quot;</span>, <span class="string">&quot;&quot;</span>)  # /Game/MyTools/</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x in <span class="built_in">range</span>(totalRequiredInstances):</span><br><span class="line">        newAsset = assetTools.<span class="built_in">create_asset</span>(newAssetName % (<span class="string">&quot;inst&quot;</span>, x + <span class="number">1</span>), createdAssetsPath, None, factor)</span><br><span class="line">        unreal.MaterialEditingLibrary.<span class="built_in">set_material_instance_parent</span>(newAsset, selectedAsset)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> UE开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UEPython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE 3D数学材质</title>
      <link href="/2023/08/29/UnrealEngine-UE-3D%E6%95%B0%E5%AD%A6%E6%9D%90%E8%B4%A8/"/>
      <url>/2023/08/29/UnrealEngine-UE-3D%E6%95%B0%E5%AD%A6%E6%9D%90%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="TZArI"></a></p><h1>材质编辑介绍</h1><p>材质节点是封装好的HLSL高级着色器语言<br>流程：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639839036217-b374ced7-3ad6-49c2-82bb-2cc86738d45a.png#clientId=u557a0c86-ccd3-4&amp;from=paste&amp;height=203&amp;id=u86f78514&amp;originHeight=203&amp;originWidth=989&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31713&amp;status=done&amp;style=none&amp;taskId=ucfa534c5-87fc-4156-a946-f5beb296c21&amp;title=&amp;width=989" alt="image.png"><br>shader graph→HLSL Code →Assembly Instructions→ Graphics Driver<br>材质连接图转换为HLSL代码再转换为汇编语言指令然后传递给驱动程序。<br><a name="AUXE1"></a></p><h1>渲染管线介绍<img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2623605/1639819907016-f9658307-c340-4f5e-a6c1-7ac52f1e616a.jpeg#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=1920&amp;id=myKKR&amp;originHeight=1920&amp;originWidth=719&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=196953&amp;status=done&amp;style=none&amp;taskId=ue03dc7c0-b22d-4cf6-8d86-04190867ee9&amp;title=&amp;width=719" alt="2EAC1D4764798088F91EE7505ED1418B.jpg"></h1><p><a name="F0tnJ"></a></p><h1>各种贴图的作用与介绍</h1><p><a href="https://zhuanlan.zhihu.com/p/396841468">https://zhuanlan.zhihu.com/p/396841468</a><br><a name="E7vpQ"></a></p><h2 id="贴花">贴花</h2><p>创建一个材质，材质域改为延迟贴花，混合模式改为半透明，需要透明贴图，颜色贴图，法线贴图，粗糙度贴图。<br>贴图可以在bridge下载。延迟贴花对静态光照支持程度不太好，适用于动态光照。<br>可以在模型的细节面板中调节是否接受贴花<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622358469128-b4fed55c-0286-4f7f-8071-ff3c6596b249.png#clientId=ua3f34d0a-8152-4&amp;from=paste&amp;height=87&amp;id=u75cd1e93&amp;originHeight=87&amp;originWidth=191&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2947&amp;status=done&amp;style=none&amp;taskId=u84b8df24-eb5e-40be-b5c1-51d96173a06&amp;title=&amp;width=191" alt="image.png"><br>多个贴花重合时可以通过更改贴花的排序顺序来控制贴花的出现前后<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622358596114-53e5e10a-3790-42a7-9f85-570911f7ceda.png#clientId=ua3f34d0a-8152-4&amp;from=paste&amp;height=203&amp;id=ufbc92ebe&amp;originHeight=203&amp;originWidth=308&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12668&amp;status=done&amp;style=none&amp;taskId=uf4b16f49-efc5-4411-a899-713edb60769&amp;title=&amp;width=308" alt="image.png"><br>材质中可以更改贴花混合模式。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639839846269-97525207-40d8-48ed-af56-67ec63ea82ec.png#clientId=u557a0c86-ccd3-4&amp;from=paste&amp;height=241&amp;id=u1e1a0a36&amp;originHeight=241&amp;originWidth=327&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32752&amp;status=done&amp;style=none&amp;taskId=uc163f8a2-65ad-424c-ac46-eb5925ebb54&amp;title=&amp;width=327" alt="image.png"><br><a name="H8EDr"></a></p><h2 id="节点函数">节点函数</h2><p>BreakMaterialAttributes（中断材质属性）:<br>在使用 <a href="https://docs.unrealengine.com/latest/CHN/Engine/Rendering/Materials/LayeredMaterials/index.html">分层材质</a> （“材质功能”系统的一项特性）时，**BreakMaterialAttributes（中断材质属性）**表达式十分理想。在材质中使用 <strong>材质层功能</strong> 时，您可能想只使用材质层的某一个方面。例如，您可能有一个定义漂亮的一般材质（如钢铁）的材质层。您可能希望在最终材质中仅使用该材质层的“粗糙度”和“底色”属性，而不是使用整个材质层。在此类情况下，您可使用 BreakMaterialAttributes（中断材质属性）节点对材质层的所有传入属性进行拆分，然后仅连接所需的属性。这也使您能够对各种材质属性进行复杂混合。<br><a name="cNexr"></a></p><h2 id="纹理">纹理</h2><p>AO，Displacement，normal，roughness，metalness（金属贴图）都是不需要勾选srgb的。ORM三合一贴图也是需要将srgb关掉。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614606570846-3d0c9150-321c-478d-b522-0c0c8485d26c.png#height=216&amp;id=b1bHt&amp;originHeight=216&amp;originWidth=452&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12008&amp;status=done&amp;style=none&amp;title=&amp;width=452" alt="image.png"><br><a name="l15wd"></a></p><h2 id="混合模式">混合模式</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596578224-5f339e07-99ae-4489-b3bf-90345ff24120.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=113&amp;id=ufce5a515&amp;originHeight=113&amp;originWidth=158&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7225&amp;status=done&amp;style=none&amp;taskId=ua3bb1b7e-fc0a-458c-848b-153bf90f674&amp;title=&amp;width=158" alt="image.png"><br><strong>不透明</strong>它定义了光线无法通过或穿透的表面。此模式适用于大部分塑料、金属、石头以及较大比例的其他表面类型。<br><strong>已遮罩</strong>混合模式用于您需要以二元（开/关）方式选择性地控制可见性的对象。例如，假定一个材质要模拟铁丝网围栏或格栅。某些区域看起来像是固体，而其他区域不可见。此类材质适合于&quot;遮罩&quot;（Masked）混合模式。<br>半透明：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596885579-3328e4d3-acb5-4203-915c-bf0437c82308.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=362&amp;id=u4348c84f&amp;originHeight=362&amp;originWidth=1108&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=265741&amp;status=done&amp;style=none&amp;taskId=ua76816ff-de7d-4848-9c9e-94669d3f375&amp;title=&amp;width=1108" alt="image.png"><br>“<strong>叠加型</strong>”（Additive）混合模式无非获取材质的像素，并将其与背景的像素相加。这与Photoshop中的_线性减淡（添加）_混合模式非常相似。这表示不会进行暗化；因为所有像素值都_添加_到一起，因此黑色将直接渲染为透明。这种混合方式适合于各种特殊效果，例如火焰、蒸汽或全息图。<br>其他混合模式详情：<br><a href="https://docs.unrealengine.com/zh-CN/RenderingAndGraphics/Materials/MaterialProperties/BlendModes/index.html">https://docs.unrealengine.com/zh-CN/RenderingAndGraphics/Materials/MaterialProperties/BlendModes/index.html</a><br><a name="DXGN0"></a></p><h2 id="光照模式（半透明）">光照模式（半透明）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596049790-5c72563d-2e11-4909-bc03-1897e81f9c85.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=139&amp;id=u2719413e&amp;originHeight=139&amp;originWidth=285&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13390&amp;status=done&amp;style=none&amp;taskId=u76305dd3-2e84-468c-9f1f-62f12f67686&amp;title=&amp;width=285" alt="image.png"><br>体积无方向 适用于烟雾和沙尘之类的粒子效果<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596115402-fd312db0-f22a-4b6f-9799-7f70e11b826e.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=45&amp;id=u7e60c9e8&amp;originHeight=45&amp;originWidth=383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9739&amp;status=done&amp;style=none&amp;taskId=ub2b92e6a-39cc-4c5e-94f6-0f6798004fb&amp;title=&amp;width=383" alt="image.png"><br>体积方向  <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596142792-ce989fcc-e798-4382-95b8-ae8a253b78e1.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=37&amp;id=u1bfc0b64&amp;originHeight=37&amp;originWidth=602&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11291&amp;status=done&amp;style=none&amp;taskId=u348b2c1a-d067-4ac5-b3b1-93ce6c9b08c&amp;title=&amp;width=602" alt="image.png"><br>逐顶点体积无方向<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596205695-e3079f20-f9e9-40e0-b16d-0ce44841d241.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=50&amp;id=uc0d642ca&amp;originHeight=50&amp;originWidth=426&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11105&amp;status=done&amp;style=none&amp;taskId=u3189812b-f7e9-4158-90e9-59e584de81d&amp;title=&amp;width=426" alt="image.png"><br>逐顶点体积方向<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596219490-a7c054b8-efc3-4c4d-b0c7-68c7e035d18e.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=53&amp;id=uc1aef0de&amp;originHeight=53&amp;originWidth=426&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11101&amp;status=done&amp;style=none&amp;taskId=uda14fa1b-dbc4-48c5-99dd-f8441feace0&amp;title=&amp;width=426" alt="image.png"><br>表面半透明体积<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596251734-ef0df32d-8a05-4437-b3cf-de2e4af7c8dc.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=58&amp;id=uf94c5f00&amp;originHeight=58&amp;originWidth=420&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11751&amp;status=done&amp;style=none&amp;taskId=u166d1f95-5a69-414e-af69-4f414aa2784&amp;title=&amp;width=420" alt="image.png"><br>表面向前着色<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596288652-9c28538f-d0ad-44a9-bb11-0e09425c5a91.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=57&amp;id=u69e9a5ed&amp;originHeight=57&amp;originWidth=513&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15594&amp;status=done&amp;style=none&amp;taskId=u66e58623-a587-41e2-a97c-3f60fbf341a&amp;title=&amp;width=513" alt="image.png"><br>从上往下依此消耗性能越来越大，质量越来越高。<br><a name="I0ugw"></a></p><h2 id="着色模型">着色模型</h2><p><a href="https://docs.unrealengine.com/zh-CN/RenderingAndGraphics/Materials/MaterialProperties/LightingModels/index.html">https://docs.unrealengine.com/zh-CN/RenderingAndGraphics/Materials/MaterialProperties/LightingModels/index.html</a><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635594646901-98b4639c-3b4f-4532-82c8-347775cf7658.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=206&amp;id=u53912f8e&amp;originHeight=206&amp;originWidth=133&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11039&amp;status=done&amp;style=none&amp;taskId=u717043bd-f75b-4fac-8699-3794b4bb138&amp;title=&amp;width=133" alt="image.png"><br>其中<strong>无光照（Unlit）</strong> 着色模型仅输出颜色自发光，非常适用于特殊效果，例如火焰或照明物。它看起来会发光，但是此对象不会投射光线或阴影。<br>只提供自发光的灯棒可以使用此着色模型，之所以使用无光照模式是因为这样<br><strong>默认光照（Default Lit）</strong> 是默认着色模型，而且很可能是最常用的模型。 此着色模型使用直接和间接光照，以及反射高光。<br><strong>次表面（Subsurface）</strong> 着色模型能够模拟次表面散射效果。适用于植物（树叶，荷叶），皮肤，冰面，大理石，蜡烛，牛奶，雪。<br><strong>预整合蒙皮（Pre-integrated Skin）</strong> 着色模型的性质与次表面（Subsurface）模型非常相似，适用于人类角色的低性能开销皮肤渲染。尽管在物理效果上并不完美， 但此着色模型渲染开销低于次表面（Subsurface）法，而且通常能实现不错的角色效果。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635594881809-ac688f8e-dbad-45fa-b142-02d7780a20b9.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=692&amp;id=uc9542bce&amp;originHeight=692&amp;originWidth=1176&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1516255&amp;status=done&amp;style=none&amp;taskId=ube75fcf3-7c43-4d27-b77e-5a2bdfa9b26&amp;title=&amp;width=1176" alt="image.png"><br><a href="https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Materials/LightingModels/SubSurfaceProfile">次表面轮廓着色模型</a>的性质与次表面（Subsurface）和预整合皮肤（Preintegrated Skin）着色模型非常相似， 但该模型只适用于高端皮肤渲染。如果希望模拟皮肤，尤其是人类皮肤，该模型为着色模型最佳选择。<br><strong>双面植被</strong> 着色模型允许光线穿透材质表面，形成自然、统一的外观效果，比如光线穿透树叶那种效果。次表面颜色（使用此着色模型后可以访问的输入）用于定义光线穿透量，同时用于为叶片茎脉等部分创建遮罩。<br><strong>单层水面</strong>：可以通过 <strong>单层水（Single Layer Water）</strong> 着色模型在使用 <strong>不透明（Opaque）</strong> 混合模式时实现透明水面的效果。这样可以降低需要使用 <strong>透明（Transparent）</strong> 混合模式的材质的使用开销和复杂性。更多详情请参阅<a href="https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Materials/MaterialProperties/LightingModels/SingleLayerWater">单层水体着色模型</a>。<br><strong>薄半透明（Thin Translucent）</strong> 着色模型支持基于物理原理的半透明材质类型，可以通过该模型创建能准确处理高光度和背景对象的真实有色或彩色玻璃。<br><strong>From材质表达式（From Material Expression）</strong> （或逐像素（Per-Pixel））着色模型是一种高级功能，用于通过材质图表中的逻辑将多个着色模型合并到单个材质（或材质实例）中。当 <strong>着色模型（Shading Model）</strong> 设置为 <strong>From材质表达式（From Material Expression）</strong> 时，<strong>着色模型</strong> 输入将变为可用，可以使用材质图表（Material Graph）中的 <strong>阴影模型（Shading Model）</strong> 节点进行设置。<br><a name="jMzSL"></a></p><h1>各种材质的制作方法</h1><p><a name="rtMGg"></a></p><h2 id="玻璃制作">玻璃制作</h2><p>玻璃：细节面板要为<img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1603892333269-d11d9480-9f06-43fa-997a-217bc0d7aaa9.png#height=96&amp;id=BX6rg&amp;originHeight=96&amp;originWidth=226&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5030&amp;status=done&amp;style=none&amp;title=&amp;width=226" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635667818122-07248991-5042-4466-b633-3b1dc6d9d59a.png#clientId=u5e27514f-481f-4&amp;from=paste&amp;height=231&amp;id=uf9ec0117&amp;originHeight=231&amp;originWidth=359&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15228&amp;status=done&amp;style=none&amp;taskId=ud47fff24-c9bc-456b-a2ca-6a501321648&amp;title=&amp;width=359" alt="image.png">使用此光照模式是因为这个效果最好但是性能消耗也最高,并且使用此光照模式的话需要通过<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635667870402-73a502e2-5e8c-4ed2-b381-bbd6a5ac8c26.png#clientId=u5e27514f-481f-4&amp;from=paste&amp;height=200&amp;id=u5ea62eeb&amp;originHeight=200&amp;originWidth=515&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32073&amp;status=done&amp;style=none&amp;taskId=u0e8c7d19-e48f-47a3-a069-51df0f35cea&amp;title=&amp;width=515" alt="image.png">Thin Translucent Material节点来控制玻璃的颜色（只有在使用表面向前着色的光照模式下，才能更好的控制玻璃的颜色）。如果想要制作性能消耗较低的光照模式可以使用<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635667942722-c270a14c-1909-49f9-a46a-0a1423ae3285.png#clientId=u5e27514f-481f-4&amp;from=paste&amp;height=138&amp;id=u4ea18df8&amp;originHeight=138&amp;originWidth=309&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13505&amp;status=done&amp;style=none&amp;taskId=u354645a3-9a0c-4938-874c-09039c927c6&amp;title=&amp;width=309" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635599022924-dc5ee01e-884f-43ea-a021-b3720560727d.png#clientId=ud7cd252e-d380-4&amp;from=paste&amp;height=297&amp;id=u63b7e6f1&amp;originHeight=297&amp;originWidth=338&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17793&amp;status=done&amp;style=none&amp;taskId=u806d782a-97fa-4e6a-987a-b04f5db52e9&amp;title=&amp;width=338" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639551318005-6b557f24-fdd5-4b61-b477-a85ae543912b.png#clientId=ue4c5f072-399b-4&amp;from=paste&amp;height=126&amp;id=u391ada27&amp;originHeight=126&amp;originWidth=274&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6663&amp;status=done&amp;style=none&amp;taskId=u130357de-7be1-40f8-ba69-35223a427b0&amp;title=&amp;width=274" alt="image.png">屏幕空间反射的勾选和高品质反射可以进一步提升质量<br>景深后渲染影响的是玻璃物体是否受到景深的影响<br>玻璃有菲涅尔效应<br>玻璃的边缘不透明度高，中间不透明度低。<br>边缘折射率高，中间折射率低。<br>可以设置的折射模式介绍：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639551411028-c0a5049e-2c84-4fd7-8864-4d669cc010b0.png#clientId=ue4c5f072-399b-4&amp;from=paste&amp;height=97&amp;id=uc6bfab09&amp;originHeight=97&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32642&amp;status=done&amp;style=none&amp;taskId=u02cd2817-d8f9-48a3-876b-5044db2b120&amp;title=&amp;width=619" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639551439310-e9fba1af-c87e-4d0a-b006-a3fa23d32cf8.png#clientId=ue4c5f072-399b-4&amp;from=paste&amp;height=130&amp;id=uef88a596&amp;originHeight=130&amp;originWidth=670&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45308&amp;status=done&amp;style=none&amp;taskId=u51308d5e-cc30-4d5b-80d3-7f3b6d7ac2e&amp;title=&amp;width=670" alt="image.png"><br>假反射的hdr贴图需要将贴图属性的srgb关掉<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635596924292-a89a203c-d05f-4c96-a761-ccbe9cf28a1a.png#clientId=u95208703-94e3-4&amp;from=paste&amp;height=362&amp;id=u7597db1d&amp;originHeight=362&amp;originWidth=1108&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=265741&amp;status=done&amp;style=none&amp;taskId=u000a38e6-b200-4740-a994-069f26d955f&amp;title=&amp;width=1108" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635668650441-7e9363de-d192-41f1-a4bc-3086462b1947.png#clientId=u5e27514f-481f-4&amp;from=paste&amp;height=1322&amp;id=u06be75d2&amp;originHeight=1322&amp;originWidth=881&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=286837&amp;status=done&amp;style=none&amp;taskId=u6be51e1a-6a52-4107-a80c-6bf2eeba19b&amp;title=&amp;width=881" alt="PreviewMaterial_2-MaterialGraph_0.png"><br>截图中的颜色是显示错误的，按照数值创建不会显示为白色<br><a name="OLPOl"></a></p><h2 id="植被材质">植被材质</h2><p>混合模式改为已遮罩，着色模型改为双面植物，开启双面<br>two sided sign节点 ：双面迹象（可以在做双面材质比如植物的时候配合multiply节点）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612351443750-80944f94-7aa9-4fb4-aaf2-8d08c62403e9.png#height=257&amp;id=YB9RM&amp;originHeight=257&amp;originWidth=443&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161941&amp;status=done&amp;style=none&amp;title=&amp;width=443" alt="image.png"><br><strong>实现让法线贴图影响双面的效果。</strong><br>想让草动可以加个simple grass wind 节点<br> <img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1603964129805-87459fde-00c0-4b36-86e9-3c5d1235ffb9.png#height=395&amp;id=lQuZh&amp;originHeight=395&amp;originWidth=599&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170485&amp;status=done&amp;style=none&amp;title=&amp;width=599" alt="image.png">（其中WPO应该连接color贴图这里图片弄错了，作用是提供植物图不让植物动时产生撕裂感。）如果是整个植物一起动那么就用world position和object pivot point（对象轴心点）和distance（测量距离节点） <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612355887036-ca31d6c5-cc36-458d-8df2-6e1bc75f8bd5.png#height=254&amp;id=NJjKR&amp;originHeight=254&amp;originWidth=696&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=140012&amp;status=done&amp;style=none&amp;title=&amp;width=696" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612355943413-ad942e65-d1fe-40f7-903e-3b0fb89e3bde.png#height=321&amp;id=CRwWe&amp;originHeight=321&amp;originWidth=871&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=247740&amp;status=done&amp;style=none&amp;title=&amp;width=871" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612355989741-3164766b-69e0-4f40-9007-f59ea209cabf.png#height=771&amp;id=aEVwa&amp;originHeight=771&amp;originWidth=1152&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=631680&amp;status=done&amp;style=none&amp;title=&amp;width=1152" alt="image.png">（1,1,0目的是使植物不向上移动，那个黑白贴图是根据植物的UV绘制的，将根涂黑，使根不产生位置偏移。）<br><strong>最终节点连接到世界场景位置偏移</strong><br><a name="IY74j"></a></p><h2 id="简单的土壤材质制作：通过使用matlayerblend-standard节点配合vertex-color节点制作可以使用顶点绘制控制土壤材质的混合材质">简单的土壤材质制作：通过使用matlayerblend_standard节点配合vertex color节点制作可以使用顶点绘制控制土壤材质的混合材质</h2><p>（vertex color节点还可以配合浪花贴图，制作出可以手动绘制岸边浪花效果的材质。）<br>各个材质函数基本连线：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612273911544-fc8ac3b0-cd0e-4905-be10-e2981fcdc2d2.png#height=926&amp;id=Z4uhW&amp;originHeight=926&amp;originWidth=942&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=986850&amp;status=done&amp;style=none&amp;title=&amp;width=942" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612273094749-ee11f75d-6c95-4440-9038-e84919c540ae.png#height=336&amp;id=mE0Tz&amp;originHeight=336&amp;originWidth=730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=227132&amp;status=done&amp;style=none&amp;title=&amp;width=730" alt="image.png"><br><a name="iKAJN"></a></p><h2 id="地形材质">地形材质</h2><p>做地形材质之前首先要有一个 材质函数（在内容浏览器中右键→材质和纹理中找到），在使用材质函数时可以使用MakeMaterialAttributes节点，地形的UV坐标节点是使用LandscapeCoords，将节点细节中的映射缩放改为1<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612274090802-f94edf41-3b38-42b4-af7b-d286198ffda4.png#height=653&amp;id=QVWWH&amp;originHeight=653&amp;originWidth=1094&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=304376&amp;status=done&amp;style=none&amp;title=&amp;width=1094" alt="image.png"><br>材质函数创建好后，可以在新建的材质中调用这个材质函数。FunctionInput为输入函数，调用时：<img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1604663780993-8b2e1d90-ecdc-44a2-a497-166c6ef1b161.png#height=54&amp;id=JJNBs&amp;originHeight=54&amp;originWidth=118&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14419&amp;status=done&amp;style=none&amp;title=&amp;width=118" alt="image.png">(Grass为材质函数名字，UV为输入函数名字)<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612273408701-8513a439-efcd-449b-930b-7f5cbe37e1ad.png#height=559&amp;id=LnoTx&amp;originHeight=559&amp;originWidth=936&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=240657&amp;status=done&amp;style=none&amp;title=&amp;width=936" alt="image.png">最后通过landscape layer blend节点将制作的各个材质函数混合到一起，预览权重改成1。<br>这里的layer blend 既可以连接贴图也可以连接材质。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612273458337-0f936354-d978-402a-811b-379df852bf17.png#height=405&amp;id=Gr6jB&amp;originHeight=405&amp;originWidth=382&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31069&amp;status=done&amp;style=none&amp;title=&amp;width=382" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1605183590540-f99f2f13-bc2b-4ec6-8ed1-3b8df1bc9910.png#height=183&amp;id=iltTd&amp;originHeight=183&amp;originWidth=303&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=81531&amp;status=done&amp;style=none&amp;title=&amp;width=303" alt="image.png">创建地形混合材质时，如果混合的贴图过多，在绘制时会出现这种编译不出来的情况，解决办法：将混合的材质的每个贴图的采样器源改为包裹<img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1605183729341-7602145e-a93f-42b7-a349-c914c784bea5.png#height=227&amp;id=LDNvw&amp;originHeight=227&amp;originWidth=346&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19537&amp;status=done&amp;style=none&amp;title=&amp;width=346" alt="image.png"><br><a name="ijB9R"></a></p><h3 id="混合类型的功能区别：">混合类型的功能区别：</h3><table><thead><tr><th>混合类型</th><th>功能</th></tr></thead><tbody><tr><td><strong>LB权重混合</strong></td><td>如层来自外部程序，如World Machine，或需要独立绘制各层，而无需担心层顺序，即可使用此类型。</td></tr><tr><td><strong>LB Alpha混合</strong></td><td>如要绘制细节并需要已定义的层顺序，则使用此类型。例如，在岩石和草地上绘制雪层会遮住，但擦除后会显示下放岩石和草地。</td></tr><tr><td><strong>LB高度混合</strong></td><td>此与LBWeightBlend相同，但会基于高度图将细节添加至层间的过渡。利用此项，可进行如岩石间缝隙中的层过渡点出现泥土等操作，而不仅仅是岩石和泥土平滑混合。</td></tr></tbody></table><p>此为 <strong>LB高度混合</strong> 的操作范例。正如所见，岩石缝隙间的层过渡点出现了泥土。如此便可在层交回处实现自然过渡。<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2623605/1617938242088-d8af1f12-21ee-4824-8fea-e101474f413c.jpeg#height=192&amp;id=fLtdT&amp;originHeight=192&amp;originWidth=343&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=0&amp;status=done&amp;style=none&amp;title=&amp;width=343" alt><br>LB权重混合的意思类似于PS中的：<br>两个不同的贴图使用同一个图层<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642325780853-9ddd526a-6b76-4388-8ae3-78093122ef4d.png#clientId=u9093c321-2e3a-4&amp;from=paste&amp;height=520&amp;id=u3b962f7d&amp;originHeight=520&amp;originWidth=636&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46906&amp;status=done&amp;style=none&amp;taskId=u163ced1b-48ed-42df-a54a-50ee6c6e0ec&amp;title=&amp;width=636" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642325796912-c4c3ce81-b065-43db-9c20-c4f704c65351.png#clientId=u9093c321-2e3a-4&amp;from=paste&amp;height=88&amp;id=u7b3f7ded&amp;originHeight=88&amp;originWidth=221&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11458&amp;status=done&amp;style=none&amp;taskId=u0d86ee6f-b565-44ac-b539-0972db22501&amp;title=&amp;width=221" alt="image.png"><br>LB Alpha混合类似于PS中的：<br>两个不同的贴图在不同的图层，权重小的不能够覆盖在权重大的上面，图层关系通过预览权重来决定（UE5教程是这样，但是UE4.26亲测不行，UE4.26是根据图层顺序排布的,看官方文档上说的预览权重影响的是材质编辑器上预览的权重大小。），预览权重高的在上面<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642325983704-3f71470d-0666-47e7-9fac-a1834c6e20c0.png#clientId=u9093c321-2e3a-4&amp;from=paste&amp;height=329&amp;id=u3737fd3d&amp;originHeight=329&amp;originWidth=239&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44270&amp;status=done&amp;style=none&amp;taskId=uf3c8f95b-6028-472c-b907-825b03cf9e6&amp;title=&amp;width=239" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642325882136-0be3f978-3e37-43c9-a10f-e99e215e3b81.png#clientId=u9093c321-2e3a-4&amp;from=paste&amp;height=505&amp;id=u15094e17&amp;originHeight=505&amp;originWidth=739&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56031&amp;status=done&amp;style=none&amp;taskId=u85bf72ef-19d3-4055-ba52-dab6873498d&amp;title=&amp;width=739" alt="image.png"><br>使用Alpha混合时需要使用<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642326035669-a6a4204a-f545-4e43-a83d-732ec42fe5b5.png#clientId=u9093c321-2e3a-4&amp;from=paste&amp;height=156&amp;id=uba5811f8&amp;originHeight=156&amp;originWidth=379&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32851&amp;status=done&amp;style=none&amp;taskId=u99c01b44-1a33-4057-9476-f07e7af7296&amp;title=&amp;width=379" alt="image.png">非权重混合层。其他两种方法使用权重混合层。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642326102122-87476718-ccd4-4367-a1c4-521b5458cc5b.png#clientId=u9093c321-2e3a-4&amp;from=paste&amp;height=157&amp;id=u532267b0&amp;originHeight=157&amp;originWidth=797&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86385&amp;status=done&amp;style=none&amp;taskId=u94fbc29d-c81f-478c-a5c1-7d17f066a43&amp;title=&amp;width=797" alt="image.png"><br>LB高度混合使用height图后高度效果只会影响同一权重的贴图效果而不会影响Alpha混合类型的贴图。<br><a name="d1spx"></a></p><h3 id="地形绘制出现黑斑的处理方法">地形绘制出现黑斑的处理方法</h3><p>官方文档描述：总结就是将默认地形材质层混合模式设置为LB_AlphaBlend<br>使用层混合模式的特定组合时，地形上不同层交叉的位置将出现大量黑斑。将LB_HeightBlend模式用于多地形层时，此问题尤其常见。LB_HeightBlend的工作原理是使用指定权重值调制层的混合系数或权重。如区域上绘制有多个层，且均被设为LB_HeightBlend，则可能特定区域中绘制的所有层将同时拥有0高度值，因此各层的理想混合系数将变为0。<br>由于无隐式或显式排序，且无层对该区域有贡献，因此结果会产生黑斑。由于混合法线贴图会产生法线值(0,0,0)，且该值无效，会导致照明渲染问题，因此混合法线贴图时情况会更糟。针对此问题的解决方案是对其中一个层使用 <strong>LB_AlphaBlend</strong>，如以下范例所示。<br>左图中所有层均为LB_HeightBlend，会导致部分区域变黑。在右图中，红色&quot;1&quot;层已改为使用LB_AlphaBlend，从而解决该问题。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1642335303431-7f3b458a-1f62-4ce2-9e7f-5ac2b30cc2cb.jpeg#clientId=u9093c321-2e3a-4&amp;from=paste&amp;id=uc7c1fccc&amp;originHeight=238&amp;originWidth=800&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=uacb7756b-aa70-4007-aa21-7257f843f4f&amp;title=" alt><br>以下是混合起来的所有层的 <strong>Landscape Layer Blend</strong> 节点属性范例。务必注意 <strong>土壤</strong> 层将其混合模式设为LB_AlphaBlend，而其他层则设为LB_HeightBlend。此设置旨在避免发生上文中的问题（层交汇处出现黑斑）。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1642335301028-179625af-8d1c-4541-8502-37c758d14dfa.jpeg#clientId=u9093c321-2e3a-4&amp;from=paste&amp;id=u0b9e4c29&amp;originHeight=486&amp;originWidth=355&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u8556172d-81ca-4e71-b58f-3b56d59ecba&amp;title=" alt><br><a name="ZJe73"></a></p><h2 id="高级地形">高级地形</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613034372161-c181a6d0-c1ea-4aba-966e-c3abc85cc3ac.png#height=109&amp;id=QHk4h&amp;originHeight=109&amp;originWidth=298&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22160&amp;status=done&amp;style=none&amp;title=&amp;width=298" alt="image.png">：材质混合节点(和线性插值节点作用很相近，区别在于材质混合节点针对的是材质)<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613036346149-64fe3870-b39a-49dc-a4dc-863e1b547001.png#height=58&amp;id=UDm67&amp;originHeight=58&amp;originWidth=136&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14721&amp;status=done&amp;style=none&amp;title=&amp;width=136" alt="image.png">(常量偏差比例)：默认功能是将数据都加上1然后都乘0.5，可以手动更改数值，可以配合sine实现数值的偏移。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613042120130-dbf953ff-8691-41ca-b48d-6664cfa296a3.png#height=263&amp;id=bATz3&amp;originHeight=263&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=217849&amp;status=done&amp;style=none&amp;title=&amp;width=976" alt="image.png"><br>第二个节点：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613458507334-4d3e00d7-8e9b-4cd4-a9b3-875b25454ea8.png#height=75&amp;id=AmNqp&amp;originHeight=75&amp;originWidth=196&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17166&amp;status=done&amp;style=none&amp;title=&amp;width=196" alt="image.png">此处节点作用是将切线空间转换为世界场景空间<br>此节点也可以设置其他的空间的转换：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613458678994-6baf3f93-154e-4b7b-ae0c-95414a5b9873.png#height=142&amp;id=btc1m&amp;originHeight=142&amp;originWidth=254&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10144&amp;status=done&amp;style=none&amp;title=&amp;width=254" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613042145106-8187858b-056d-4bda-acf6-04810bd4d6f7.png#height=425&amp;id=eZgAC&amp;originHeight=425&amp;originWidth=825&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=394237&amp;status=done&amp;style=none&amp;title=&amp;width=825" alt="image.png"><br>整体：<br><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2623605/1613040091971-ef4aed46-5cc5-447e-b82e-34143da64a88.jpeg#height=534&amp;id=ObJOZ&amp;originHeight=534&amp;originWidth=1225&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=81262&amp;status=done&amp;style=none&amp;title=&amp;width=1225" alt="QQ截图20210211184108.jpg"><br><a name="NHSVN"></a></p><h2 id="地形自带植物效果：">地形自带植物效果：</h2><p>LandscapeLayerSample节点：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613041412591-cafec830-5d23-4e48-9854-b9c3da70c6d5.png#height=59&amp;id=dwJpW&amp;originHeight=59&amp;originWidth=113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6796&amp;status=done&amp;style=none&amp;title=&amp;width=113" alt="image.png">其中None为参数名，使用时将None改为<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613041449356-7c967f0f-f9c1-4425-b009-baa1e846d2f4.png#height=173&amp;id=E2t26&amp;originHeight=173&amp;originWidth=121&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14121&amp;status=done&amp;style=none&amp;title=&amp;width=121" alt="image.png">layer blend中的名字，作用是将混合的材质取样出来然后配合landscape grass output节点<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613041591836-3c9f0067-143d-4bb2-9a59-68322e8a1b9b.png#height=238&amp;id=O0l3U&amp;originHeight=238&amp;originWidth=304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65007&amp;status=done&amp;style=none&amp;title=&amp;width=304" alt="image.png">实现地貌使用对应地形材质时上面附带植物。其中grass节点参数即植物类型可以通过<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613041774477-1b7775e1-c22a-451c-bf0d-499d3d720f77.png#height=163&amp;id=iGPIO&amp;originHeight=163&amp;originWidth=348&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18020&amp;status=done&amp;style=none&amp;title=&amp;width=348" alt="image.png">地形草地类型来创建。<br>如果有根据斜率实现混合材质功能时，如果不想让有高度的地形出现植物则可以使用以下方法。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613042193892-6162b1f0-7525-4d91-bfa4-983401e3a396.png#height=370&amp;id=ixeih&amp;originHeight=370&amp;originWidth=777&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=366337&amp;status=done&amp;style=none&amp;title=&amp;width=777" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613041766912-c9e9e76e-5345-4509-b54a-8329cd4d542f.png#height=163&amp;id=GfNwq&amp;originHeight=163&amp;originWidth=348&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18020&amp;status=done&amp;style=none&amp;title=&amp;width=348" alt="image.png"><br><a name="iIMBB"></a></p><h2 id="地貌岩石材质">地貌岩石材质</h2><p>材质函数：<br>中间的节点为world aligned textures_complex<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613457701489-432a45cf-98be-402e-92cf-de7f02da3afc.png#height=600&amp;id=lLWDn&amp;originHeight=600&amp;originWidth=798&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=565967&amp;status=done&amp;style=none&amp;title=&amp;width=798" alt="image.png"><br>VertexNormalWS的作用是获取世界顶点坐标，和1，1，1相乘的作用是确保是三维数据。Normalize的作用是规范化，防止无限大无限小的值的出现。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613457803448-31da451e-29f1-41d4-90d1-562870d1ed53.png#height=563&amp;id=ALg2H&amp;originHeight=563&amp;originWidth=711&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=320222&amp;status=done&amp;style=none&amp;title=&amp;width=711" alt="image.png"><br><a name="wljWo"></a></p><h2 id="海洋材质">海洋材质</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615283334627-72267a65-3a4b-4cfc-aa50-69afaff788fa.png#height=475&amp;id=xWo6m&amp;originHeight=475&amp;originWidth=1018&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=422392&amp;status=done&amp;style=none&amp;title=&amp;width=1018" alt="image.png"><br>越接近岸边海洋的折射率越低，通过<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615286149675-67f72aa5-a806-4819-a411-a1443664f048.png#height=711&amp;id=u3Mne&amp;originHeight=711&amp;originWidth=1138&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=608561&amp;status=done&amp;style=none&amp;title=&amp;width=1138" alt="image.png">控制。ref上方的结果是<br>海与其他物体交接处的透明度变化：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615292625446-a3c6299b-81e7-46ba-be68-a011aa96310c.png#height=196&amp;id=nko10&amp;originHeight=196&amp;originWidth=367&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=89676&amp;status=done&amp;style=none&amp;title=&amp;width=367" alt="image.png"><br>法线：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615289251998-25dbd2fc-a1f2-4bb4-b6b8-40e82047fa61.png#height=488&amp;id=ToCf5&amp;originHeight=488&amp;originWidth=833&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=444221&amp;status=done&amp;style=none&amp;title=&amp;width=833" alt="image.png"><br>海浪波动效果（使海浪有起伏感）：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615289306870-3b4fdf8c-ce0e-464d-8945-b055227c2866.png#height=635&amp;id=fUJTX&amp;originHeight=635&amp;originWidth=1127&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=763206&amp;status=done&amp;style=none&amp;title=&amp;width=1127" alt="image.png">整体连接到world displacement（需要开启<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615290174869-ddc0f7a1-5239-4fb3-a011-40a4206bb56c.png#height=89&amp;id=INcst&amp;originHeight=89&amp;originWidth=321&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6727&amp;status=done&amp;style=none&amp;title=&amp;width=321" alt="image.png">）这里texture图片显示有错误，应该四个贴图都是一样的。<br>浪花：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615289119637-89c67e81-eddc-475a-b1de-7ed55c44a22a.png#height=619&amp;id=qNDwf&amp;originHeight=619&amp;originWidth=1295&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1083964&amp;status=done&amp;style=none&amp;title=&amp;width=1295" alt="image.png"><br>使四张贴图混合的节点叫blend_screen。<br>与物体接触边缘海浪：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615292252884-3b2bed61-919d-44ef-84f4-c4c0f046cdc3.png#height=493&amp;id=wvm89&amp;originHeight=493&amp;originWidth=1144&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=565776&amp;status=done&amp;style=none&amp;title=&amp;width=1144" alt="image.png"><br>其中water_color可以扩展成<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615292514786-d85f3ee4-d1ad-4ec3-9201-24311a50051d.png#height=552&amp;id=v4YlR&amp;originHeight=552&amp;originWidth=1061&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=647333&amp;status=done&amp;style=none&amp;title=&amp;width=1061" alt="image.png">效果是实现不同深度的地方水的透明度不同所造成的颜色差别。</p><p><a name="KZSG9"></a></p><h2 id="角色材质">角色材质</h2><p><a name="SLzee"></a></p><h3 id="角色制作技巧">角色制作技巧</h3><p>眼球：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614583548867-04491506-03e7-43fa-a74e-288d3ab64135.png#height=515&amp;id=xU2AW&amp;originHeight=515&amp;originWidth=587&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=533688&amp;status=done&amp;style=none&amp;title=&amp;width=587" alt="image.png"><br>眼球和眼睑外层制作湿润效果（透明）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614583575515-8d0690d2-9899-4a29-aa54-bb9c6d68ff74.png#height=239&amp;id=HMuNt&amp;originHeight=239&amp;originWidth=716&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=312665&amp;status=done&amp;style=none&amp;title=&amp;width=716" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614583641110-573ed8c8-1577-48c2-874b-36b4304e7746.png#height=249&amp;id=LEdED&amp;originHeight=249&amp;originWidth=591&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=268056&amp;status=done&amp;style=none&amp;title=&amp;width=591" alt="image.png"><br>内眼角和眼球的过渡：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614583759941-0ee93bc4-5244-4a7a-847b-88021a49b634.png#height=122&amp;id=cT1b3&amp;originHeight=122&amp;originWidth=207&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77119&amp;status=done&amp;style=none&amp;title=&amp;width=207" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614583768543-792b55a5-1c61-4399-a56b-0cc2b8865388.png#height=182&amp;id=spW0h&amp;originHeight=182&amp;originWidth=451&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=240882&amp;status=done&amp;style=none&amp;title=&amp;width=451" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614583817622-5f69a76b-a0e8-442b-af32-685b25ab012c.png#height=194&amp;id=VIyi1&amp;originHeight=194&amp;originWidth=477&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=138493&amp;status=done&amp;style=none&amp;title=&amp;width=477" alt="image.png">用来制造眼球到内眼角之间的过渡效果<br>男士睫毛要做的比女士睫毛短，双眼皮的睫毛比单眼皮的睫毛要长一些<br>从maya导出模型时设置：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614584404639-2739d35a-4822-4161-99c4-b529b895f09e.png#height=138&amp;id=ilpSh&amp;originHeight=138&amp;originWidth=380&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24363&amp;status=done&amp;style=none&amp;title=&amp;width=380" alt="image.png"><br><a name="x47bj"></a></p><h3 id="人体材质">人体材质</h3><p>制作皮肤材质时着色模型选择次表面轮廓（<a href="https://docs.unrealengine.com/zh-CN/RenderingAndGraphics/Materials/LightingModels/SubSurfaceProfile/index.html">次表面轮廓着色模型</a> 的性质与次表面（Subsurface）和预整合蒙皮（Preintegrated Skin）着色模型非常相似， 但该模型只适用于高端皮肤渲染。如果希望模拟皮肤，尤其是人类皮肤，该模型为着色模型最佳选择。）其中不透明度控制的是次表面散射的强度（光透过去效果的强度，为1时是完全开启的）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614601555244-a1fe1e72-09cb-4ca1-a9fd-5415a996c9cc.png#height=182&amp;id=FOVWd&amp;originHeight=182&amp;originWidth=389&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13424&amp;status=done&amp;style=none&amp;title=&amp;width=389" alt="image.png">其中subsurfaceProfile通过右键<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614601608600-41e67ae0-0900-44ec-ae5f-7dde6998edb6.png#height=304&amp;id=TTYFy&amp;originHeight=304&amp;originWidth=427&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50014&amp;status=done&amp;style=none&amp;title=&amp;width=427" alt="image.png">创造（整理时将次文件放置在新创建的DataTypes文件夹里，方便整理）命名规范举例：SSS_ColorSubsurfaceProfile。<br>次表面描述文件作用是可以通过参数调节次表面散射的颜色和衰减效果等。即描述次表面的文件。<br><a name="w50Kh"></a></p><h4 id="皮肤毛孔">皮肤毛孔</h4><p>两张贴图<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614750506362-00a3c1da-9c3b-489f-b6a4-ae9de21eaef9.png#height=105&amp;id=UVvxA&amp;originHeight=105&amp;originWidth=140&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18663&amp;status=done&amp;style=none&amp;title=&amp;width=140" alt="image.png">第一个是控制粗糙度贴图，第二个是法线贴图，首先将第一个贴图的srgb关掉，将调整属性中的最大透明度改为0，在复合属性中<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614750609639-da0a4cda-c2bf-4ded-b014-16122498fae6.png#height=180&amp;id=fCnCr&amp;originHeight=180&amp;originWidth=490&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20797&amp;status=done&amp;style=none&amp;title=&amp;width=490" alt="image.png">。这样调整后使用第一张贴图的alpha通道来实现效果<br><a name="k1ImJ"></a></p><h3 id="眼睛材质">眼睛材质</h3><p>详细解析网站:<a href="https://www.bbsmax.com/A/obzbDw665E/">https://www.bbsmax.com/A/obzbDw665E/</a><br>眼球材质的着色模型为眼睛，混合模式改为遮罩。<br>眼球的虹膜边缘有轻微黑色的叫角膜缘<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614842835228-023910bf-423c-4045-893f-752f28be83cf.png#height=374&amp;id=v9ua8&amp;originHeight=374&amp;originWidth=485&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=341187&amp;status=done&amp;style=none&amp;title=&amp;width=485" alt="image.png"><br><a name="FGA3z"></a></p><h2 id="布料材质">布料材质</h2><p>要制作不了材质首先要了解布料的特点，布料外边的绒毛在受到光的照射的情况下是发白的。因此做布料要制作边缘发白的效果。<br>UE4提供了专门的布料的着色模型，因此制作材质时首先更改为布料的着色模型，改为布料的着色模型后会为材质自动带有边缘发白的效果。材质属性变为这个：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635318382748-0ab67202-d9c2-478d-b90b-7e98f8d41d0b.png#clientId=ufe9bab15-286b-4&amp;from=paste&amp;height=456&amp;id=uf571cf9a&amp;originHeight=456&amp;originWidth=135&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50505&amp;status=done&amp;style=none&amp;taskId=u2c7ba794-a5de-41ad-bb0f-82ecd940734&amp;title=&amp;width=135" alt="image.png">其中Fuzz Color控制的是绒毛的颜色，Cloth控制的是边缘发白的强度。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635347078425-1e5b8371-4dcf-413e-aea9-d7b9d6a747eb.png#clientId=ubdb7170a-bac4-4&amp;from=paste&amp;height=353&amp;id=ud21cc3b5&amp;originHeight=353&amp;originWidth=974&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=132697&amp;status=done&amp;style=none&amp;taskId=ue5fb323c-adb4-4cbe-8d94-6d14afa8a3a&amp;title=&amp;width=974" alt="image.png"><br><a name="z5qrt"></a></p><h1>各种材质效果的实现</h1><p><a name="isttJ"></a></p><h2 id="摄像机的距离测量公式">摄像机的距离测量公式</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613462337362-9ddc1ada-45bb-47c6-835c-f7a5c9798c22.png#height=378&amp;id=Kkdev&amp;originHeight=378&amp;originWidth=1103&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=378605&amp;status=done&amp;style=none&amp;title=&amp;width=1103" alt="image.png"><br><a name="YCGrE"></a></p><h2 id="调节法线强度节点连线">调节法线强度节点连线</h2><p>第一种：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614050931370-0e9f23f6-40f2-4774-8eec-7601f10e7cb5.png#height=542&amp;id=r1SnC&amp;originHeight=542&amp;originWidth=1179&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=660497&amp;status=done&amp;style=none&amp;title=&amp;width=1179" alt="image.png"><br>第二种：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614051425655-afb8aef8-86be-404e-a862-25e2efdc6ede.png#height=430&amp;id=qTjpj&amp;originHeight=430&amp;originWidth=893&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=111909&amp;status=done&amp;style=none&amp;title=&amp;width=893" alt="image.png"><br><a name="tLoIj"></a></p><h2 id="置换材质效果的制作">置换材质效果的制作</h2><p>首先更改<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622280261851-4652856f-dc56-4124-96f5-39de914d3b98.png#clientId=uf173c60b-90e8-4&amp;from=paste&amp;height=146&amp;id=P9WnM&amp;originHeight=146&amp;originWidth=390&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10335&amp;status=done&amp;style=none&amp;taskId=u99040f77-e488-4f83-85c9-95fb60a7b5f&amp;title=&amp;width=390" alt="image.png"><br>其中无裂纹置换的作用：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622280489711-185d6f76-0a2b-479a-a365-e4fb74cbe045.png#clientId=uf173c60b-90e8-4&amp;from=paste&amp;height=66&amp;id=fRRvq&amp;originHeight=66&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7178&amp;status=done&amp;style=none&amp;taskId=u8df61418-f63d-4df9-8573-900b9997d03&amp;title=&amp;width=340" alt="image.png">防止出现这种情况<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622280516237-c1e57047-67ab-46a2-81f1-b32865459be3.png#clientId=uf173c60b-90e8-4&amp;from=paste&amp;height=246&amp;id=BPYX9&amp;originHeight=246&amp;originWidth=270&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=109163&amp;status=done&amp;style=none&amp;taskId=ud0ba2e13-4634-405f-b042-fe8d79b3664&amp;title=&amp;width=270" alt="image.png"><br>如果出现模型闪烁的情况可以增大模型的边界缩放的值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622280721783-3653e809-ec9e-449c-ae1b-68a7fc1543a9.png#clientId=uf173c60b-90e8-4&amp;from=paste&amp;height=145&amp;id=UCGsi&amp;originHeight=145&amp;originWidth=415&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16216&amp;status=done&amp;style=none&amp;taskId=u2cb143c6-1a33-4da8-96c1-9a2c9a4db42&amp;title=&amp;width=415" alt="image.png"><br>制作置换效果时：其中乘以40时为了控制置换强度，乘以vertexnormalws是为了使置换效果应用的方向正确。20连接到曲面细分乘数的作用是通过材质增加模型的细分程度（平时使用不需要给那么大给20是为了效果明显）。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638424451517-3104071f-54e5-43a5-915a-821f0f69fe39.png#clientId=ucf3d029c-b5ee-4&amp;from=paste&amp;height=429&amp;id=u1b2e9c9e&amp;originHeight=429&amp;originWidth=954&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=236843&amp;status=done&amp;style=none&amp;taskId=u21929174-ddbb-456b-97cd-d702bce8993&amp;title=&amp;width=954" alt="image.png"><br>使用vertexnormalws的效果：左边为没有使用，右边为使用。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638424524549-b66b42e4-3236-4a4d-891a-4a446d5ccca1.png#clientId=ucf3d029c-b5ee-4&amp;from=paste&amp;height=301&amp;id=u88d7722b&amp;originHeight=301&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=105954&amp;status=done&amp;style=none&amp;taskId=u3e4ffc7a-45aa-4e6f-aad3-462720e6255&amp;title=&amp;width=296" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638424540047-78316d47-2290-4e08-9589-8a41e3404689.png#clientId=ucf3d029c-b5ee-4&amp;from=paste&amp;height=379&amp;id=u29e74f38&amp;originHeight=379&amp;originWidth=361&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161076&amp;status=done&amp;style=none&amp;taskId=ue6a4d350-0490-4f16-8e44-148c40a4683&amp;title=&amp;width=361" alt="image.png"><br>此效果通过连接到世界场景位置偏移实现，但是需要模型自身具有较高的细分，因为世界场景位置偏移是通过更改顶点的位置实现的。它与置换的区别在于置换是虚幻四替你进行模型细分。<br>还有一个实现此效果的方法是利用视差，视差不会更改模型本身，视差是一种视觉特效。<br><a name="UM3Wm"></a></p><h2 id="消融动画效果的实现">消融动画效果的实现</h2><p>首先材质混合模式改为已遮罩。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636470983592-b348db7a-c9e5-482d-a000-9f2ba1e93319.png#clientId=ue549dcdd-0c82-4&amp;from=paste&amp;height=1101&amp;id=u219197c6&amp;originHeight=1101&amp;originWidth=2789&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=523324&amp;status=done&amp;style=none&amp;taskId=u0948861d-cceb-4262-ab22-0eaa333e71e&amp;title=&amp;width=2789" alt="M_XiaoRong-MaterialGraph_0.png"><br><a name="f49vZ"></a></p><h2 id="配合SP为基础材质增加控制各种mask的效果（mask可以为控制灰尘Dust区域，边缘Edge区域，污垢Dirt等）">配合SP为基础材质增加控制各种mask的效果（mask可以为控制灰尘Dust区域，边缘Edge区域，污垢Dirt等）</h2><p>为了获得相应的mask贴图，需要在sp中增加相应的通道，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636903045017-717e05ab-da16-48f2-abdf-a405aa85df64.png#clientId=u74cbaf49-8f70-4&amp;from=paste&amp;height=301&amp;id=u9d6c626e&amp;originHeight=301&amp;originWidth=387&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11112&amp;status=done&amp;style=none&amp;taskId=u18555164-8489-4fb0-9d02-b54d394ce39&amp;title=&amp;width=387" alt="image.png"><br>其中User012可以更改名称,在SP中分别为User012通道绘制对应效果的遮罩，然后将3个通道合并成一个Mask贴图，最后将Mask贴图和未应用基础材质时的法线贴图一起导出。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637029936578-40e47b98-49df-4624-a127-5fb5b57f0711.png#clientId=u09b1e93e-5dc7-4&amp;from=paste&amp;height=2174&amp;id=u7f931045&amp;originHeight=2174&amp;originWidth=3845&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1067896&amp;status=done&amp;style=none&amp;taskId=ud91e0235-32f9-4bf7-a951-9be0847cae4&amp;title=&amp;width=3845" alt="M_Wood_Mask-MaterialGraph_0.png"><br><a name="ss5Vf"></a></p><h2 id="通过色温的数值控制颜色的变化（适用于自发光物体）">通过色温的数值控制颜色的变化（适用于自发光物体）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638509954586-a69180bc-f760-4309-bd1b-4a4f4a3d13ec.png#clientId=u98cdc558-cdd0-4&amp;from=paste&amp;height=361&amp;id=uffbb4125&amp;originHeight=361&amp;originWidth=898&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=151666&amp;status=done&amp;style=none&amp;taskId=u64115190-6177-42fb-b146-a4db6c467ac&amp;title=&amp;width=898" alt="image.png"><br>通过BlackBody（黑体），配合multiply来控制灯光强度。<br>注意：要想使自发光物体影响场景需要勾选勾选<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623845604794-ad5a08e9-71ee-4594-98c3-9d84bb4d8c34.png#clientId=ufc7f6dde-f510-4&amp;from=paste&amp;height=199&amp;id=u17108840&amp;originHeight=199&amp;originWidth=437&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43447&amp;status=done&amp;style=none&amp;taskId=u164db0d1-e23d-4290-8cf2-03f0ec0e278&amp;title=&amp;width=437" alt="image.png"><br><a name="G7nxU"></a></p><h2 id="顶点动画">顶点动画</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636373300447-e8f606e0-5f4f-435b-89da-a2065c77986a.png#clientId=uf195ba77-fd4a-4&amp;from=paste&amp;height=153&amp;id=oHSdN&amp;originHeight=153&amp;originWidth=414&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36777&amp;status=done&amp;style=none&amp;taskId=u4113c055-0ba1-4db9-a3d7-dd7b547df4d&amp;title=&amp;width=414" alt="image.png"><br><a name="gDptk"></a></p><h3 id="雨打函数（下雨时植物的上下晃动动画）">雨打函数（下雨时植物的上下晃动动画）</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636379307953-d491c212-799b-4faa-94ae-5ec124188b19.png#clientId=uf195ba77-fd4a-4&amp;from=paste&amp;height=154&amp;id=iML0E&amp;originHeight=154&amp;originWidth=742&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52632&amp;status=done&amp;style=none&amp;taskId=u9c7c3cc3-8dcc-46f1-8767-0fa8342b8cd&amp;title=&amp;width=742" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636373328912-11182695-8076-4fe4-86d8-28a5c8e2b4d3.png#clientId=uf195ba77-fd4a-4&amp;from=paste&amp;height=189&amp;id=gWJvR&amp;originHeight=189&amp;originWidth=723&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=76578&amp;status=done&amp;style=none&amp;taskId=u3c9ff52a-89d4-40f9-a574-70db34f1669&amp;title=&amp;width=723" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636441659065-326c2cb8-cb87-4afb-88c1-e2972c2414dd.png#clientId=ufd83120d-35e8-4&amp;from=paste&amp;height=1798&amp;id=fbk76&amp;originHeight=1798&amp;originWidth=3557&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=787588&amp;status=done&amp;style=none&amp;taskId=u1eabae2a-6305-4ec5-b2b4-3015219df95&amp;title=&amp;width=3557" alt="NewMaterial-MaterialGraph_0.png"><br>其中localmask和worldmask均为noise贴图。<br><a name="SPZPv"></a></p><h3 id="涟漪函数">涟漪函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636463886141-8fe78b1f-0e28-42ce-a746-c32da9e5638f.png#clientId=u80b837d7-74ae-4&amp;from=paste&amp;height=256&amp;id=kG8kX&amp;originHeight=256&amp;originWidth=617&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49674&amp;status=done&amp;style=none&amp;taskId=u52165ac5-ff13-428f-af6c-90417d60dc6&amp;title=&amp;width=617" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636463985926-92603e62-9a8a-4442-9f8d-46dccfe63d83.png#clientId=u80b837d7-74ae-4&amp;from=paste&amp;height=210&amp;id=wrnmB&amp;originHeight=210&amp;originWidth=1118&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69794&amp;status=done&amp;style=none&amp;taskId=u0c8aaa80-303b-416e-99ff-d621971dae2&amp;title=&amp;width=1118" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636463996557-fde6c6eb-89ad-4130-89d6-8504ca047cad.png#clientId=u80b837d7-74ae-4&amp;from=paste&amp;height=440&amp;id=RS9mQ&amp;originHeight=440&amp;originWidth=729&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=237239&amp;status=done&amp;style=none&amp;taskId=uea8f2e89-7a05-45e4-b5f2-5465487f130&amp;title=&amp;width=729" alt="image.png"><br><a name="ulTN5"></a></p><h3 id="通过材质实现模型自转：">通过材质实现模型自转：</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638429672433-edb10d94-c050-4921-96ee-952140860dc4.png#clientId=u86f14395-f274-4&amp;from=paste&amp;height=523&amp;id=u07e9360f&amp;originHeight=523&amp;originWidth=1000&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=268389&amp;status=done&amp;style=none&amp;taskId=uaf6fdb29-7672-48e1-a880-f4000742150&amp;title=&amp;width=1000" alt="image.png"><br>在材质中实现模型自转占用的是gpu的性能，而利用c++或者蓝图或者sequence等实现模型自转占用的是cpu的性能。<br><a name="DswQx"></a></p><h1>纹理</h1><p><a name="Eb6sr"></a></p><h2 id="纹理流送池">纹理流送池</h2><p>该纹理池的大小控制着实际用于要显示的纹理的空间量，<br>在制作场景时左上角可能会出现红字多少多少GiB预算上的纹理流送池。<br>虚幻默认的纹理流送池大小为2000MB，如果要更改纹理流送池的大小那么可以通过控制台输入<br>r.Streaming PoolSize 3000    其中3000是你想要更改的纹理流送池大小（单位是MB）<br>如果场景的纹理尺寸超过了纹理流送池的大小，那么虚幻将会通过Mipmap来降低纹理质量，这样会导致纹理模糊。<br>也可以通过项目文件夹中的DeaultEngine.ini文件中更改项目默认纹理流送池的大小。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638345137837-dec42d31-2773-4b19-95ea-cc1bb2eb005e.png#clientId=u956db895-dda4-4&amp;from=paste&amp;height=626&amp;id=u8df3f22b&amp;originHeight=626&amp;originWidth=556&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=319980&amp;status=done&amp;style=none&amp;taskId=uadfe382d-7ca9-4d07-ad5d-e0c76ebbb31&amp;title=&amp;width=556" alt="image.png"><br><a name="uJiOe"></a></p><h2 id="纹理尺寸与Mipmaps">纹理尺寸与Mipmaps</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619754012054-7be99799-91c3-4c6a-9aa7-dfa0e11baaba.png#clientId=u1bc18f3f-7228-4&amp;from=paste&amp;height=388&amp;id=u870426cd&amp;originHeight=388&amp;originWidth=1347&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=118494&amp;status=done&amp;style=none&amp;taskId=uf1e2e10e-7ac1-42d5-942a-d3ea49c4692&amp;title=&amp;width=1347" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619753841558-a30a8842-925c-4c32-a245-871ee9386bf7.png#clientId=u1bc18f3f-7228-4&amp;from=paste&amp;height=417&amp;id=u7e3fce28&amp;originHeight=417&amp;originWidth=861&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=101362&amp;status=done&amp;style=none&amp;taskId=u18bb0ea2-c22b-4af8-af7e-dee0af0d600&amp;title=&amp;width=861" alt="image.png"><br>Mipmap只支持2的n次幂的纹理大小<br>Mipmap的关闭：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619962459807-b407fe06-89bf-4c78-943a-2383ac2030ac.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=310&amp;id=ubb0016d3&amp;originHeight=310&amp;originWidth=222&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21808&amp;status=done&amp;style=none&amp;taskId=u663a4c81-e50e-42cb-8864-279958d700f&amp;title=&amp;width=222" alt="image.png">  无mip贴图的设置通常适用于HDRI贴图和UI贴图上面。<br>还可以通过使用不同的锐化等级或者模糊等级来额外控制贴图是否模糊或锐化。<br>左侧为启用mipmap，右侧为未启用mipmap<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638345284922-c01e33ff-dcdc-471b-9a06-f3534a2908e1.png#clientId=u956db895-dda4-4&amp;from=paste&amp;height=625&amp;id=uad0c6388&amp;originHeight=625&amp;originWidth=1742&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=801134&amp;status=done&amp;style=none&amp;taskId=u4a216204-8ac2-4078-8c79-0b9dfa7845b&amp;title=&amp;width=1742" alt="image.png"><br><a name="MEGCy"></a></p><h2 id="纹理文件格式和纹理压缩">纹理文件格式和纹理压缩</h2><p>无论导入的纹理是什么格式的（TGA,PNG等），导入到UE4后，纹理都会被压缩成同一个格式的。<br>纹理压缩的设置：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619754739643-32b2e756-b3b0-4f0e-8449-af9d091a1deb.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=226&amp;id=u24572081&amp;originHeight=226&amp;originWidth=384&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65567&amp;status=done&amp;style=none&amp;taskId=u1a669889-5510-4c98-8ab5-2ba9fbf27dd&amp;title=&amp;width=384" alt="image.png">通常只会使用前三个和HDR的设置，例如是法线贴图就使用Normalmap  灰度图就使用Masks（要想更高质量就用grayscale r8，需要确保只有一个通道）bc7格式需要满足dx11，bc7格式质量更好但是消耗内存会更大，bc7一般是如果分辨率较低的贴图才有可能会去使用。<br><a name="SxnAa"></a></p><h2 id="纹理组的使用">纹理组的使用</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638345995199-26f783f3-889b-48e5-9eb7-304e12a617c8.png#clientId=u956db895-dda4-4&amp;from=paste&amp;height=425&amp;id=u4e5abe8e&amp;originHeight=425&amp;originWidth=328&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=117219&amp;status=done&amp;style=none&amp;taskId=u0c61cce0-ef5f-4de5-ab7f-9236c313fe6&amp;title=&amp;width=328" alt="image.png">此处可以更改纹理组，默认情况下所有的纹理导入进项目中都将归为world组，导入纹理后可以为纹理归为不同的组，例如人物，武器，载具，虽然只进行组的归类并不会产生什么效果，但以后如果想要优化就可以针对组进行管理优化。<br>这些组其中除了UI和Color Lookup Table会更改纹理的效果控制，其他的组均没有额外控制，只是便于管理使用。<br>使项目针对不同设备对已经整理好的纹理组进行优化：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638346349812-e53c61ff-93f5-4c06-8276-917dfc44c6cc.png#clientId=u956db895-dda4-4&amp;from=paste&amp;height=732&amp;id=ucd2fea81&amp;originHeight=732&amp;originWidth=397&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=279398&amp;status=done&amp;style=none&amp;taskId=u219d5d56-c05d-495d-8abb-4e55e2a180b&amp;title=&amp;width=397" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638346428789-a14fb03a-852c-4c5f-9235-9655dad7d943.png#clientId=u956db895-dda4-4&amp;from=paste&amp;height=579&amp;id=u2ab6f100&amp;originHeight=579&amp;originWidth=725&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=262428&amp;status=done&amp;style=none&amp;taskId=ubf947451-97db-4f69-bbc1-3fb0786d994&amp;title=&amp;width=725" alt="image.png"><br><a name="k3izF"></a></p><h2 id="渲染目标">渲染目标</h2><p>渲染目标本质上是虚幻引擎或编辑器生成的纹理<br>在虚幻编辑器中通过过程化生成的纹理就是渲染目标，例如在材质编辑器中中通过noise节点创建的noise纹理还有通过场景捕获创建出来的纹理（通过搜索场景捕获可以创建<img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2623605/1638348514208-64db5869-d8fa-4ee6-9cce-40a4cc5adf25.jpeg#clientId=u7dbeae18-9745-4&amp;from=ui&amp;id=u6fe4950d&amp;originHeight=356&amp;originWidth=300&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46795&amp;status=done&amp;style=none&amp;taskId=u47b74db5-8543-4c4e-9420-5df8cf3d0a8&amp;title=" alt="IMG_20211201_164815.jpg">），。渲染目标占用的性能要更高。渲染目标会导致着色器开销过高。<br>渲染目标的使用可以实现雪的实时互动和水的实时互动等效果。<br><a name="kjJmU"></a></p><h2 id="虚拟纹理">虚拟纹理</h2><p><a href="https://zhuanlan.zhihu.com/p/127051539">https://zhuanlan.zhihu.com/p/127051539</a><br><a name="HUV5e"></a></p><h2 id="将贴图转换为纹理对象的好处">将贴图转换为纹理对象的好处</h2><p>将贴图转换为纹理对象再使用贴图采样节点使用贴图的好处是多次使用同一张贴图时这样更节省纹理内存。<br>对象<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642423516910-f47d4e0e-a975-4ebc-bd98-243d115447a8.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=520&amp;id=uc517dd6d&amp;originHeight=520&amp;originWidth=519&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=117785&amp;status=done&amp;style=none&amp;taskId=u72487d68-d907-48fe-9dcc-eb519c4de1e&amp;title=&amp;width=519" alt="image.png"><br><a name="g7Gr8"></a></p><h1>视窗、世界、物体和切线空间</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640009093546-7372dffb-119f-40bd-80b2-b57b89f38c17.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=528&amp;id=u7419cc96&amp;originHeight=528&amp;originWidth=804&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=114446&amp;status=done&amp;style=none&amp;taskId=u584f7901-37fa-4a46-8f27-1cd93290642&amp;title=&amp;width=804" alt="image.png"><br>世界空间：世界空间是恒定的，不管场景发生了什么，世界空间坐标系都不会改变。<br>物体空间：物体空间坐标系是随着物体改变的，随着物体的旋转平移，物体坐标系也会随着改变。<br>摄影机空间（视图空间）：摄影机空间坐标系由摄影机的照射位置为Z轴。<br>切线空间：切线空间是每个顶点都有对应的坐标系，坐标系的xyz是由法线，边法线，切线组成，边法线和切线能够代表UV坐标的U和V<br>如果是不同空间的向量，它们如果要进行运算就需要将它们转换为同一个空间。<br><a name="fTQWu"></a></p><h1>使用PS制作一张不同通道存储不同灰度图的贴图</h1><p>首先新建一个跟灰度图相同大小的文档<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619755127697-6734365f-8c95-4ef7-addf-8483f24cbcdf.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=211&amp;id=ucb3477ef&amp;originHeight=211&amp;originWidth=261&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=43062&amp;status=done&amp;style=none&amp;taskId=udd50a818-46bf-423f-8d9e-23221b5e944&amp;title=&amp;width=261" alt="image.png">分离出来三个通道<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619755195724-0beecce1-5c86-4635-bc2a-ea9f17d1caeb.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=66&amp;id=u25884a8c&amp;originHeight=66&amp;originWidth=631&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29628&amp;status=done&amp;style=none&amp;taskId=u6ecda9c5-d7d6-4b4f-8574-4b8f62b5f2a&amp;title=&amp;width=631" alt="image.png"><br>将三张贴图导入到不同通道的图层上，然后与背景合并起来。（Ctrl+E快捷键：是当前活动的操作图层和下一个图层合并。，Shift+Ctrl+E快捷键是合并可见图层，就是指图层前面有眼睛的图层都会被合并为一个图层。）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619755186979-22648a60-fba0-46c6-bd29-d2fa6df1aaf2.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=255&amp;id=u7a1b30a2&amp;originHeight=255&amp;originWidth=234&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49326&amp;status=done&amp;style=none&amp;taskId=ucfe6011a-f974-482c-9eb3-896f0e9278f&amp;title=&amp;width=234" alt="image.png">最后合并通道<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619755335276-8e5cfde1-22db-4716-80a2-1049aae0abed.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=224&amp;id=u9d58cf76&amp;originHeight=224&amp;originWidth=257&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37099&amp;status=done&amp;style=none&amp;taskId=u2083f708-13b8-4090-a6c7-f5a4983c99b&amp;title=&amp;width=257" alt="image.png">选择RGB颜色模式<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619755356890-80152e53-3939-4f21-9610-4b5b6cef4245.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=125&amp;id=u978ef58c&amp;originHeight=125&amp;originWidth=220&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48661&amp;status=done&amp;style=none&amp;taskId=u162e2846-9bca-416f-bb54-bf05915c8b5&amp;title=&amp;width=220" alt="image.png"><br><a name="DHUTy"></a></p><h1>sRGB与伽马矫正</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619755514807-2988e064-103f-4ca5-a36c-443472df7364.png#clientId=u56be4687-3a85-4&amp;from=paste&amp;height=731&amp;id=ubca638cd&amp;originHeight=731&amp;originWidth=1570&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=569832&amp;status=done&amp;style=none&amp;taskId=u5799db1d-e983-4622-a4b7-dc8301753f7&amp;title=&amp;width=1570" alt="image.png"><br>给人看的就打开srgb，给电脑看的就关闭srgb（法线，金属度，粗糙度等贴图）。<br><a name="idIeP"></a></p><h1>Alpha通道</h1><p>可以通过此方法添加Alpha通道<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619957171874-f8fe8182-0725-4039-bfe4-a98a992d1fa0.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=348&amp;id=u4bd3ccf4&amp;originHeight=348&amp;originWidth=307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34942&amp;status=done&amp;style=none&amp;taskId=u81b7e2cb-8ed0-4179-886f-1efba562bcd&amp;title=&amp;width=307" alt="image.png">，UE4对Alpha通道的压缩成都是很低的，如果使用Alpha通道会使图片容量大幅度提高，可以通过此选项使不使用Alpha通道<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619957257319-7a2e9c96-46c3-4683-bcbb-9834a16dfd2a.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=144&amp;id=uf32d514f&amp;originHeight=144&amp;originWidth=376&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17133&amp;status=done&amp;style=none&amp;taskId=ub74c1e87-3ff5-4ca9-ac86-3c5c80aaa2f&amp;title=&amp;width=376" alt="image.png">。<br><a name="ukIda"></a></p><h1>光栅化与前向渲染与延迟渲染</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619957319132-7c9160ff-27d2-4d5a-88df-4d0152016f2c.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=691&amp;id=ue4bb0515&amp;originHeight=691&amp;originWidth=1671&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=393171&amp;status=done&amp;style=none&amp;taskId=u1381c9a9-c667-4feb-b4c6-9bb844cb7eb&amp;title=&amp;width=1671" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619957521559-1f013277-ff6f-4bba-9d37-079bb3bea6e0.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=835&amp;id=u721cecf1&amp;originHeight=835&amp;originWidth=1753&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=655202&amp;status=done&amp;style=none&amp;taskId=u8591a17d-3a6e-4701-b1bd-7b7d461a66c&amp;title=&amp;width=1753" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619957584835-303cb504-e925-4f75-bedf-d2f6107a4909.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=847&amp;id=EdCJM&amp;originHeight=847&amp;originWidth=1753&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=715011&amp;status=done&amp;style=none&amp;taskId=u1c1c601e-f022-4652-b1a9-d8ee72fdfad&amp;title=&amp;width=1753" alt="image.png"><br>这里延迟渲染中介绍的G缓存中的图像合成就是可以将点光源当成周围有一个白色的球体遮罩，不同光源可以重叠相加在一起。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646306813242-d9946af1-70dc-4086-b44b-5ed09ff23aaf.png#clientId=u79105073-9823-4&amp;from=paste&amp;height=942&amp;id=ubb3dc8ed&amp;originHeight=1036&amp;originWidth=891&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=150703&amp;status=done&amp;style=none&amp;taskId=ufc258b72-f34e-4fbf-9aa8-23517ecbecf&amp;title=&amp;width=809.9999824437232" alt="image.png"><br><strong>延迟渲染因为会生成各种缓存所以会占用带宽，因此VR中一般不使用延迟渲染而使用前向渲染。</strong></p><p><a name="Lo4xh"></a></p><h1>遮蔽剔除和半透明材质</h1><p>计算遮蔽关系<br>在一个场景里会包含大量物体，渲染时，被遮挡的物体是不用被渲染出来的。<br>所以需要进行遮挡关系的计算，通常来说主要有以下几点:<br>距离剔除、视锥剔除、遮蔽剔除、深度检测<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619958070977-25a3102f-c6ff-4fa9-94c2-3def8ec079f9.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=809&amp;id=u37936850&amp;originHeight=809&amp;originWidth=1712&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=617637&amp;status=done&amp;style=none&amp;taskId=u15874052-6791-4b16-890d-84b8b313464&amp;title=&amp;width=1712" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619958348540-f0fda745-f046-44fd-99c0-3c89cbb82adb.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=837&amp;id=u76b43850&amp;originHeight=837&amp;originWidth=1720&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=494568&amp;status=done&amp;style=none&amp;taskId=ube8a88b6-fe14-415d-b61c-8c801203358&amp;title=&amp;width=1720" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619958399126-968c830d-639f-46b9-a3b8-548ae9e67e3b.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=697&amp;id=u526ef0cd&amp;originHeight=697&amp;originWidth=1634&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=396714&amp;status=done&amp;style=none&amp;taskId=u9ae57b4f-4cd3-427a-8e52-569a659b14a&amp;title=&amp;width=1634" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619958454418-d6e10a8f-c52e-48ae-be2d-1b9f40be3a87.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=443&amp;id=u269be023&amp;originHeight=443&amp;originWidth=1626&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=207567&amp;status=done&amp;style=none&amp;taskId=u64eb4a1e-fb6f-49d9-badc-6eb7508815f&amp;title=&amp;width=1626" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619958504144-1bee99b2-ce8f-4512-89fa-d74d72aff81b.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=611&amp;id=uc264b71b&amp;originHeight=611&amp;originWidth=1698&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=391659&amp;status=done&amp;style=none&amp;taskId=u084afd18-0c4a-4020-a08f-419b70f18bc&amp;title=&amp;width=1698" alt="image.png">若出现半透明物体的渲染排序问题时，可以通过更改半透明排序优先级来进行调整。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619959584997-f95b1737-7a13-42c7-a0c3-e5c7f404879c.png#clientId=u577c96fb-b414-4&amp;from=paste&amp;height=267&amp;id=u31112d85&amp;originHeight=267&amp;originWidth=391&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20502&amp;status=done&amp;style=none&amp;taskId=u1e733cb4-550e-42fc-a22b-5d7f09b857e&amp;title=&amp;width=391" alt="image.png"><br><a name="Os6qb"></a></p><h1>纹理采样</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619961450400-d5966482-3303-4153-b9e4-c4729887c586.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=561&amp;id=u65f3d95f&amp;originHeight=561&amp;originWidth=1216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=261231&amp;status=done&amp;style=none&amp;taskId=uc913801f-fa7c-48a9-bc8b-f95fcc1faa8&amp;title=&amp;width=1216" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619962887551-3af054f2-3ace-4d9f-a069-9aa6496af946.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=26&amp;id=u2832ef39&amp;originHeight=26&amp;originWidth=358&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2671&amp;status=done&amp;style=none&amp;taskId=u3a6e2901-a711-4b4d-a4ac-fe649113ade&amp;title=&amp;width=358" alt="image.png">：只会采样0~1，大于1，小于0都不会采样。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619962908557-384e4b8b-6a03-4f68-beb8-0c78eb0e061d.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=365&amp;id=u15dd2b68&amp;originHeight=365&amp;originWidth=722&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98189&amp;status=done&amp;style=none&amp;taskId=u3d0f3fa3-42b5-48f0-8417-d6f2822b072&amp;title=&amp;width=722" alt="image.png"><br><a name="d8ftO"></a></p><h1>极坐标</h1><p>把一张普通的贴图转换成极坐标形式可以直接用这个节点：VectorToRadiaValue<br>原来的纹理：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620360285961-d6eae720-8bde-41da-965a-707c41062d75.png#clientId=u521c939d-d097-4&amp;from=paste&amp;height=122&amp;id=uabdedaff&amp;originHeight=122&amp;originWidth=123&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18489&amp;status=done&amp;style=none&amp;taskId=u69d09ecb-e15a-4677-b1d2-7aadb389fd3&amp;title=&amp;width=123" alt="image.png"><br>经过节点转换后的纹理：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620360325525-a45f824e-4edc-4828-ae65-9e153a21855f.png#clientId=u521c939d-d097-4&amp;from=paste&amp;height=117&amp;id=uc2f3e792&amp;originHeight=117&amp;originWidth=350&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=41901&amp;status=done&amp;style=none&amp;taskId=u672f6796-d847-481b-b358-d89964063d7&amp;title=&amp;width=350" alt="image.png"><br>节点的X Y 通道：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620360348917-ca604f23-c3d9-4a94-afb2-bdae1d71f41d.png#clientId=u521c939d-d097-4&amp;from=paste&amp;height=240&amp;id=u05b69908&amp;originHeight=240&amp;originWidth=642&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=131748&amp;status=done&amp;style=none&amp;taskId=u7bb405d0-70c1-4b58-a10e-7c33c286c31&amp;title=&amp;width=642" alt="image.png"><br>制作技能CD的效果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620360484955-a570286c-79c0-4ed4-9487-7e337e10885c.png#clientId=u521c939d-d097-4&amp;from=paste&amp;height=531&amp;id=u68a65496&amp;originHeight=531&amp;originWidth=1052&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=467269&amp;status=done&amp;style=none&amp;taskId=u03031379-e930-4850-9dc1-5aa133467cb&amp;title=&amp;width=1052" alt="image.png"><br>只利用的他的x坐标，他的x坐标逆时针的大小是从1~0，所以给他慢慢加上0~1，这样他的x坐标就会慢慢的变成2~1。<br><a name="lVQiz"></a></p><h1>马赛克贴图的制作</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620630895052-c58177dc-32ac-417c-b153-3f7c9af74eb0.png#clientId=u103a9a56-7bc9-4&amp;from=paste&amp;height=407&amp;id=u5c77c9bc&amp;originHeight=407&amp;originWidth=895&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=416918&amp;status=done&amp;style=none&amp;taskId=u8d50c946-e3e7-40b4-aae2-c9024145f44&amp;title=&amp;width=895" alt="image.png"><br><a name="EIg5m"></a></p><h1>控制材质预览窗口的自动曝光</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620779255297-35d1ab45-421d-42f9-b345-63a58d0c9cb5.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=398&amp;id=u63f17cb5&amp;originHeight=398&amp;originWidth=194&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=93710&amp;status=done&amp;style=none&amp;taskId=ueb35ae2f-25cc-4bec-9b08-86f485a891c&amp;title=&amp;width=194" alt="image.png">将Auto取消勾选<br><a name="ckeyZ"></a></p><h1>消融材质效果制作</h1><p>首先将材质属性的混合模式更改为masked<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620779438114-b6d19876-7aaa-45d3-88e5-b4a1c54d8d79.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=171&amp;id=u20b2da9a&amp;originHeight=171&amp;originWidth=362&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36212&amp;status=done&amp;style=none&amp;taskId=uf0ef7426-c1c8-4fad-ab80-fc2595df2b1&amp;title=&amp;width=362" alt="image.png"><br>消融效果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620779519978-ddbd15a3-aaa9-4221-a446-7b74c33d650c.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=590&amp;id=u7f232097&amp;originHeight=590&amp;originWidth=1083&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=527604&amp;status=done&amp;style=none&amp;taskId=ue67a4a86-dc91-4d55-b27f-176dfd77591&amp;title=&amp;width=1083" alt="image.png"><br>增加边缘效果：<br><a name="r0BqE"></a></p><h1><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620779752614-fb047c8f-5226-4afd-834b-b0af7f134470.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=689&amp;id=u4b3a20e9&amp;originHeight=689&amp;originWidth=1130&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=624538&amp;status=done&amp;style=none&amp;taskId=uc4b3a31c-3d4d-4e51-ab49-ef8613d23ab&amp;title=&amp;width=1130" alt="image.png">还原ps图层混合模式</h1><p>multiply节点对应着ps混合模式中的正片叠底<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620780819673-de7fe43a-6336-4201-862f-43bce7b53dea.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=508&amp;id=u5daae255&amp;originHeight=508&amp;originWidth=418&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=238894&amp;status=done&amp;style=none&amp;taskId=uff42292f-96bb-4b4c-a2cb-f6537e21ee7&amp;title=&amp;width=418" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620780826901-04c7287b-0731-4dbc-a3cd-706a714f841d.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=195&amp;id=ued09da91&amp;originHeight=195&amp;originWidth=205&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30250&amp;status=done&amp;style=none&amp;taskId=u3d0f9b3e-2671-4df3-b952-2af4848a3be&amp;title=&amp;width=205" alt="image.png">（注意图层顺序是相反的）<br>Blend_ColorBurn 对应着ps的颜色加深混合模式，公式为<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620781635866-ac245a9c-b7fe-4d61-90f1-111d1744618d.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=538&amp;id=cFVkA&amp;originHeight=538&amp;originWidth=623&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=348738&amp;status=done&amp;style=none&amp;taskId=ue587a1f7-fb8d-4a47-b0d8-efd56c6b868&amp;title=&amp;width=623" alt="image.png"><br>ue4中有ps全部混合模式的算法的材质函数，只需要搜索混合模式的英文名称即可找出对应的材质函数。<br><a name="rdgv4"></a></p><h1>顶点着色器</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622274503310-147ada6a-a798-4d92-993e-de6ce365eea9.png#clientId=u97b50cb9-6869-4&amp;from=paste&amp;height=483&amp;id=u5fa2cb34&amp;originHeight=483&amp;originWidth=1293&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=158030&amp;status=done&amp;style=none&amp;taskId=u541e5d8c-d401-4193-bc00-7b87a1ce4fb&amp;title=&amp;width=1293" alt="image.png"><br><a name="XlIqB"></a></p><h1>WPO</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622274602868-5217a655-f7cc-4d9d-bfbf-d0c7986bd430.png#clientId=u97b50cb9-6869-4&amp;from=paste&amp;height=591&amp;id=u3eac71be&amp;originHeight=591&amp;originWidth=1336&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=233126&amp;status=done&amp;style=none&amp;taskId=u389769ac-9dd2-43c7-99da-65ebc8fd3b1&amp;title=&amp;width=1336" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622274650692-c1c2e6c2-f33b-4dfb-b7c3-e36309715ba6.png#clientId=u97b50cb9-6869-4&amp;from=paste&amp;height=411&amp;id=u900380cd&amp;originHeight=411&amp;originWidth=186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63142&amp;status=done&amp;style=none&amp;taskId=udf7f0990-dcf3-457a-bbc0-d136030345d&amp;title=&amp;width=186" alt="image.png"><br><a name="tf6AD"></a></p><h1>PDO</h1><p>PDO对应的是像素深度偏移（深度偏移即是像素离你的远近的偏移），可以通过控制像素深度偏移来制造材质边缘柔和的效果<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624093562030-8c9c08d7-fa43-45f5-9c2a-309880e9bd43.png#clientId=ucde280f4-b9e8-4&amp;from=paste&amp;height=780&amp;id=u626dac8f&amp;originHeight=780&amp;originWidth=1287&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=780820&amp;status=done&amp;style=none&amp;taskId=ud2180a53-7921-46ea-b2ae-d51b9da5ab9&amp;title=&amp;width=1287" alt="image.png"></p><p>PDO为0：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623753027889-b50713ba-64f1-4795-80a0-5896f8568fdc.png#clientId=u773f9f89-5434-4&amp;from=paste&amp;height=325&amp;id=u4a05cbf3&amp;originHeight=325&amp;originWidth=422&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=356271&amp;status=done&amp;style=none&amp;taskId=u790edb85-84b9-4f55-8303-cdea68975d2&amp;title=&amp;width=422" alt="image.png"><br>PDO为2：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623753044640-43ce3e66-78c5-4358-8434-6681780b366e.png#clientId=u773f9f89-5434-4&amp;from=paste&amp;height=281&amp;id=ucef49570&amp;originHeight=281&amp;originWidth=441&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=321666&amp;status=done&amp;style=none&amp;taskId=ub9ac40cb-541b-4427-bc3d-87315936f96&amp;title=&amp;width=441" alt="image.png"><br><a name="k8ymg"></a></p><h1>进阶边界混合</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624106716142-3548513f-2952-4300-9c1a-65e9452aac15.png#clientId=u14815254-052e-4&amp;from=paste&amp;height=674&amp;id=u4ce3d938&amp;originHeight=674&amp;originWidth=907&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=418062&amp;status=done&amp;style=none&amp;taskId=ue8f18a16-064c-49ef-818c-60d580c09e8&amp;title=&amp;width=907" alt="image.png"><br>注：Normal贴图对应WAN节点，其他例如base color ，roughness都可以使用WAT节点。 <br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624108433767-d6e70b32-8de1-4ec8-9457-7ae632f61344.png#clientId=u77e2c38b-537e-4&amp;from=paste&amp;height=268&amp;id=u89a96503&amp;originHeight=268&amp;originWidth=410&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=201297&amp;status=done&amp;style=none&amp;taskId=u5b9f8fac-d276-4381-95cb-1be2a1b67ef&amp;title=&amp;width=410" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624108456182-981bafa4-4292-48e0-8701-6f3d64b6545a.png#clientId=u77e2c38b-537e-4&amp;from=paste&amp;height=359&amp;id=ueaefe74b&amp;originHeight=359&amp;originWidth=525&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=331427&amp;status=done&amp;style=none&amp;taskId=udfbf4365-3769-4b46-b8ea-ccf1445383b&amp;title=&amp;width=525" alt="image.png"><br>基于世界坐标投影贴图，使不同物体在纹理的衔接更好。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624107697192-e6d32761-35ae-4540-aacd-90409eefcf1f.png#clientId=u9da7e89b-8b0b-4&amp;from=paste&amp;height=798&amp;id=ud77e11ed&amp;originHeight=798&amp;originWidth=1765&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=733078&amp;status=done&amp;style=none&amp;taskId=u760c218d-2176-46fc-bbf8-357adeb815a&amp;title=&amp;width=1765" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624108738641-78986a6c-7cb5-4bee-ad4f-db95fb71d948.png#clientId=u77e2c38b-537e-4&amp;from=paste&amp;height=233&amp;id=ud62c1a10&amp;originHeight=233&amp;originWidth=1203&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=297975&amp;status=done&amp;style=none&amp;taskId=ub795c806-5f85-4010-8ba5-9603227396e&amp;title=&amp;width=1203" alt="image.png"><br><a name="XlCyt"></a></p><h1>视差原理</h1><p>视差和置换相比，他是配合高度图，和camera vector来实现效果，如图所示节点连法（等同于bump offset 节点）。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288093205-bd3d58aa-c9ac-463f-9738-f2b53c1b7e4a.png#clientId=uc372ed77-5e71-4&amp;from=paste&amp;height=467&amp;id=u9d059d39&amp;originHeight=467&amp;originWidth=838&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=371817&amp;status=done&amp;style=none&amp;taskId=u272e336a-cbda-4a96-81b8-9f959cb7686&amp;title=&amp;width=838" alt="image.png"><br>等同于<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622290061565-d95fac6d-297d-43cc-8fee-b5e9a3d0b0c9.png#clientId=u31165324-4f0c-4&amp;from=paste&amp;height=582&amp;id=u297d1901&amp;originHeight=582&amp;originWidth=836&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=397139&amp;status=done&amp;style=none&amp;taskId=u35cfcadd-bedb-4649-86fc-fccd6c3b415&amp;title=&amp;width=836" alt="image.png"> <br>使用此原理实现的效果 相比置换的优势在于它不需要模型拥有很高的面数。<br><a name="CglMI"></a></p><h1>材质参数集</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622294520888-a0da46bb-7887-44fa-bb2c-66ee868ff202.png#clientId=ue4a00775-a6ca-4&amp;from=paste&amp;height=287&amp;id=uf4ae7b56&amp;originHeight=287&amp;originWidth=319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35356&amp;status=done&amp;style=none&amp;taskId=u24db4741-ea31-4df8-af5f-b9037118dc0&amp;title=&amp;width=319" alt="image.png"> 材质参数集的作用是  将材质参数集的参数放入到其他多个材质中，只需要调整材质参数集中的参数即可控制全部使用材质参数集的材质的参数。<br><a name="ie6xZ"></a></p><h1>光照函数材质</h1><p>材质中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622357345514-7ce3088f-1860-460b-a800-9d9c69d2cef5.png#clientId=ua3f34d0a-8152-4&amp;from=paste&amp;height=185&amp;id=u10794036&amp;originHeight=185&amp;originWidth=356&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14498&amp;status=done&amp;style=none&amp;taskId=udeb6c498-521f-4522-bf16-029c31c8eba&amp;title=&amp;width=356" alt="image.png">，光照函数材质是赋予聚光灯 点光源 等光源的材质，可以制造假投影的效果，针对图形的数学运算（例如旋转，平移，缩放）都可以在材质中实现，但是颜色是受灯光的颜色控制的。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622357561644-bf90c36f-e74e-4eb1-a338-357cbe79fb59.png#clientId=ua3f34d0a-8152-4&amp;from=paste&amp;height=428&amp;id=u95ce0b71&amp;originHeight=428&amp;originWidth=503&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=133059&amp;status=done&amp;style=none&amp;taskId=uc1b0fb97-03f9-4bf5-90ab-26f8a68c7e3&amp;title=&amp;width=503" alt="image.png"><br><a name="ljBiS"></a></p><h1>后期处理材质</h1><p>在材质中更改<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622359460917-f3019a92-cdd8-4504-bac4-15826fd5c836.png#clientId=u39820a50-c3e5-4&amp;from=paste&amp;height=112&amp;id=u1542e0ca&amp;originHeight=112&amp;originWidth=334&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11260&amp;status=done&amp;style=none&amp;taskId=u067e6182-dca6-4887-b938-745e3bae640&amp;title=&amp;width=334" alt="image.png"><br>scene texture<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622359592187-78e447e8-786d-4a1b-af08-c1987213ef99.png#clientId=u39820a50-c3e5-4&amp;from=paste&amp;height=139&amp;id=uc3dd4717&amp;originHeight=139&amp;originWidth=193&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21434&amp;status=done&amp;style=none&amp;taskId=u0dbe6d4c-435a-479b-a3bf-96a83ce5ac8&amp;title=&amp;width=193" alt="image.png"> 节点，只能在后期处理材质中使用<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622359630803-eae25867-9946-48fe-82e2-89fe9b8f94bf.png#clientId=u39820a50-c3e5-4&amp;from=paste&amp;height=454&amp;id=u0b970e88&amp;originHeight=454&amp;originWidth=415&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38397&amp;status=done&amp;style=none&amp;taskId=uaf10414d-3dde-4a48-9109-ecb66e214ab&amp;title=&amp;width=415" alt="image.png"><br><a name="BHKfb"></a></p><h1>BRDF 双向反射分布函数</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624083470756-54cbc62e-495f-4729-99b3-6b0cf2d187cd.png#clientId=u47f46ddb-e7a8-4&amp;from=paste&amp;height=287&amp;id=u8b4bff8b&amp;originHeight=287&amp;originWidth=943&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=211341&amp;status=done&amp;style=none&amp;taskId=u1557f700-8393-4738-a8d1-f23b2de54d6&amp;title=&amp;width=943" alt="image.png"><br><a name="jw08W"></a></p><h1>高光</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624083876740-1005ffdb-ef73-40f7-a442-e0a2345cb338.png#clientId=u47f46ddb-e7a8-4&amp;from=paste&amp;height=221&amp;id=uee15eef9&amp;originHeight=221&amp;originWidth=814&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77434&amp;status=done&amp;style=none&amp;taskId=u9e3cc8d3-1f15-439f-9cbf-0c988d6034a&amp;title=&amp;width=814" alt="image.png"><br><a name="dvGCP"></a></p><h1>subsurface scattering 次表面散射</h1><p>次表面散射简称SSS<br>具有次表面散射特性的物体有植物（树叶，荷叶），皮肤，冰面，大理石，蜡烛，牛奶，雪。<br>次表面散射是厚度敏感的，例如人的皮肤，越薄的地方次表面散射效果越明显<br><a name="Ty9Bf"></a></p><h1><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635066389482-f5ba55ff-9062-47e6-9c95-a11b427b6fe1.png#clientId=uf76c5918-398b-4&amp;from=paste&amp;height=685&amp;id=uc19254e0&amp;originHeight=685&amp;originWidth=1084&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=152430&amp;status=done&amp;style=none&amp;taskId=uafc09dba-eaf7-4098-ae8d-c1e4861e2b5&amp;title=&amp;width=1084" alt="image.png"></h1><p>在Bridge导入到UE4的植物的材质中提高SSS强度的数值会增加穿透过植物的光线量<br>SSS color tint控制的是穿透出来的颜色，一般不需要更改<br>color variation控制的是植物颜色变化（使叶子的颜色不那么统一）如果要更改数值，一般给很小的数值，0.02左右。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635067676329-727f04b9-6e61-4da2-a9a0-4c67f133c368.png#clientId=ub1b4b051-3ba9-4&amp;from=paste&amp;height=378&amp;id=ue3f60a12&amp;originHeight=378&amp;originWidth=388&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69526&amp;status=done&amp;style=none&amp;taskId=u749762e2-e0f0-4d2e-8234-39555a90ea4&amp;title=&amp;width=388" alt="image.png"><br>在UE4中制作SSS效果的材质：植物材质的着色模型给双面植物开启双面混合模式改为已遮罩。<br>其他的一些SSS材质着色模型改为次表面。<br>通过不透明度的大小来调整SSS的强度</p><p><a name="pdFYa"></a></p><h1>折射</h1><p>折射是厚度不敏感的。例如玻璃<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635066947285-d6885fa3-e9aa-4446-8810-e99366bb2874.png#clientId=ub1b4b051-3ba9-4&amp;from=paste&amp;height=854&amp;id=u9d0071ed&amp;originHeight=854&amp;originWidth=1308&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=136615&amp;status=done&amp;style=none&amp;taskId=udba11e4c-5214-4a63-a8d8-8783d08b664&amp;title=&amp;width=1308" alt="image.png"><br>如果折射出现了这种奇怪的效果，可以通过更改<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638442390663-8c102e84-d50c-4552-88f4-f88ee69327df.png#clientId=u021bd104-3fcf-4&amp;from=paste&amp;height=102&amp;id=u186d6ac5&amp;originHeight=102&amp;originWidth=255&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7855&amp;status=done&amp;style=none&amp;taskId=u6565a562-7c8f-4bd1-a2cf-a5538b3eb6c&amp;title=&amp;width=255" alt="image.png">，更改的这种折射模式适用于水这种大型折射表面。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638442259597-d049ed9d-61c7-4918-9719-7d5f03a7aecc.png#clientId=u021bd104-3fcf-4&amp;from=paste&amp;height=671&amp;id=u90bc2bef&amp;originHeight=671&amp;originWidth=1428&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=934020&amp;status=done&amp;style=none&amp;taskId=u3a98f32d-cd2c-4c10-a375-37bbc721e99&amp;title=&amp;width=1428" alt="image.png"><br><a name="KK2Ig"></a></p><h1>环境光遮蔽的正确使用</h1><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638431382054-8de0bff9-7e70-4a42-b0e2-ddc21879989c.png#clientId=u1a34cf16-c436-4&amp;from=paste&amp;height=671&amp;id=u93fbd439&amp;originHeight=671&amp;originWidth=769&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=270184&amp;status=done&amp;style=none&amp;taskId=uaa0aedd1-1204-48e2-aa23-988ecf1b1c2&amp;title=&amp;width=769" alt="image.png"><br>为了让环境光遮蔽效果更好  需要通过lerp节点控制高光的产生区域，使用lerp目的是在即使只有动态光照的情况下也能够显示正确的环境光遮蔽效果。</p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE 动画</title>
      <link href="/2023/08/29/UnrealEngine-UE-%E5%8A%A8%E7%94%BB/"/>
      <url>/2023/08/29/UnrealEngine-UE-%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="IFtLj"></a></p><h1>之前的一些总结</h1><p><a name="M6ohn"></a></p><h2 id="蒙皮与FK-IK的概念">蒙皮与FK,IK的概念</h2><p>三维软件的角色是通过骨骼控制角色模型动作的，骨骼和角色模型相互独立，将骨骼绑定到角色模型的技术叫蒙皮。<br>FK与IK：FK是正向运动，IK是反向运动，FK是级别高的骨骼带动级别低的骨骼，例如走路时手臂的摇摆，IK与FK相反，是级别低的骨骼带动级别高的骨骼，例如擦玻璃时，是手掌带动整个胳膊运动。<br><a name="jTR27"></a></p><h2 id="角色导入与动画混合">角色导入与动画混合</h2><p>创建一个新的文件夹名字为角色名→文件夹里创建文件夹为Mesh和Animation→导入无动画的骨骼模型放到Mesh文件夹中→导入各种动画的骨骼（无需再次导入模型）放入Animation文件夹→<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615548358755-7ee34d49-9bcc-4da9-bc13-bfe0a2833990.png#averageHue=%23c19118&amp;height=298&amp;id=e6Ovq&amp;originHeight=298&amp;originWidth=601&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=103244&amp;status=done&amp;style=none&amp;title=&amp;width=601" alt="image.png">创建一个混合空间1D（因为示例是混合的从行走到奔跑动画的混合，比较简单所以使用1D）→点开混合空间1D<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615549809742-da96efc0-10dc-44b0-9cb9-c016a7ed0367.png#averageHue=%23bab49c&amp;height=1058&amp;id=GZHFN&amp;originHeight=1058&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1031036&amp;status=done&amp;style=none&amp;title=&amp;width=1920" alt="image.png"><br>在混合框中按住shift再移动鼠标可以查看混合效果。<br>混合空间1D和混合空间的区别：<a href="https://docs.unrealengine.com/zh-CN/AnimatingObjects/SkeletalMeshAnimation/Blendspaces/Overview/index.html">https://docs.unrealengine.com/zh-CN/AnimatingObjects/SkeletalMeshAnimation/Blendspaces/Overview/index.html</a><br><a name="dKJUB"></a></p><h2 id="动画蓝图">动画蓝图</h2><p><a name="Pyiv4"></a></p><h3 id="动画蓝图的创建：">动画蓝图的创建：</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615554001545-da3cb170-d8ea-4e68-b989-06a7b953c446.png#averageHue=%2344741f&amp;height=444&amp;id=AL8dX&amp;originHeight=444&amp;originWidth=997&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=390803&amp;status=done&amp;style=none&amp;title=&amp;width=997" alt="image.png"><br><a name="lckbi"></a></p><h3 id></h3><p><a name="Na1iN"></a></p><h3 id="基础的动画蓝图（行走，跑步，跳跃）">基础的动画蓝图（行走，跑步，跳跃）</h3><p>事件图表：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615556227574-0246dd87-0a23-4b28-b224-2433ae58a074.png#averageHue=%232f2e2e&amp;height=1058&amp;id=eUU7c&amp;originHeight=1058&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=522547&amp;status=done&amp;style=none&amp;title=&amp;width=1920" alt="image.png"><br>动画图表：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615556271429-c31a0768-12a4-4b21-8c1a-073ffb3789ed.png#averageHue=%232d2d2c&amp;height=291&amp;id=cTZM7&amp;originHeight=291&amp;originWidth=663&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52988&amp;status=done&amp;style=none&amp;title=&amp;width=663" alt="image.png"><br>Movement状态机：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615556297568-1578366a-f80a-44cb-863d-44fcf946d628.png#averageHue=%232a2a29&amp;height=639&amp;id=H9Pow&amp;originHeight=639&amp;originWidth=1220&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88627&amp;status=done&amp;style=none&amp;title=&amp;width=1220" alt="image.png"><br>idle/Run到Jumpstart（规则）：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559203195-43f7e2fa-bb06-4a42-a80f-445a687a1d93.png#averageHue=%23322e2c&amp;height=96&amp;id=kwatC&amp;originHeight=96&amp;originWidth=432&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21499&amp;status=done&amp;style=none&amp;title=&amp;width=432" alt="image.png"><br>顺时针规则依次为<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559269527-61fc6d75-e5f1-4e1e-8980-5c9ce2774916.png#averageHue=%232a2929&amp;height=138&amp;id=jxMgW&amp;originHeight=138&amp;originWidth=843&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39577&amp;status=done&amp;style=none&amp;title=&amp;width=843" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559282458-1e36f717-8aa9-4953-8b05-7691d37eb2a2.png#averageHue=%232d2a2a&amp;height=142&amp;id=ObIUN&amp;originHeight=142&amp;originWidth=620&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29628&amp;status=done&amp;style=none&amp;title=&amp;width=620" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559289478-541de89d-b2ef-47cc-abdd-e203b88f72cf.png#averageHue=%23292928&amp;height=171&amp;id=uqyB1&amp;originHeight=171&amp;originWidth=829&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=41223&amp;status=done&amp;style=none&amp;title=&amp;width=829" alt="image.png"><br>idle/Run（状态）（双击Idle/Run进入）：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559339765-20bc365f-c448-466c-94d3-8753c3d24c0e.png#averageHue=%23292929&amp;height=300&amp;id=hILRR&amp;originHeight=300&amp;originWidth=683&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53813&amp;status=done&amp;style=none&amp;title=&amp;width=683" alt="image.png"><br>顺时针依次为：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559372216-d7948de0-6b90-46e2-bcd7-814f58e4f066.png#averageHue=%232e2c2c&amp;height=186&amp;id=zq3y6&amp;originHeight=186&amp;originWidth=500&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28827&amp;status=done&amp;style=none&amp;title=&amp;width=500" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559384434-0a791d0a-a1c4-423c-9531-657ea38ed96f.png#averageHue=%232e2d2c&amp;height=178&amp;id=yE9mm&amp;originHeight=178&amp;originWidth=519&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29165&amp;status=done&amp;style=none&amp;title=&amp;width=519" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559393797-ebe05444-d852-4221-b518-ed161f95df97.png#averageHue=%232c2b2a&amp;height=221&amp;id=wjXNt&amp;originHeight=221&amp;originWidth=571&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31392&amp;status=done&amp;style=none&amp;title=&amp;width=571" alt="image.png"><br>其中播放什么什么的节点是通过将<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615559417447-b07afcec-bf28-4a94-8ba5-b72e08751cac.png#averageHue=%23494949&amp;height=241&amp;id=xCfd4&amp;originHeight=241&amp;originWidth=251&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16163&amp;status=done&amp;style=none&amp;title=&amp;width=251" alt="image.png">拖到图表来创建的。<br><a name="TQgH7"></a></p><h2 id="角色蓝图">角色蓝图</h2><p>新建一个蓝图类，父类为角色<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615625351811-731fa83f-a4ec-4053-826c-86699f263070.png#averageHue=%234a4a4a&amp;height=445&amp;id=b0jUE&amp;originHeight=445&amp;originWidth=540&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72593&amp;status=done&amp;style=none&amp;title=&amp;width=540" alt="image.png"><br>在蓝图中导入角色模型，调节胶囊体的大小使胶囊体大小来匹配角色，调节角色模型的方向来匹配胶囊体，因为胶囊体本身自带pawn模板的碰撞预设，所以将模型的碰撞预设改为NoCollision。在蓝图视口右面动画里调节如图所示，来使用之前创建好的动画蓝图。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615625507086-69dce2ec-5aa9-4f78-bd4d-8a4c86995c82.png#averageHue=%234c4c4c&amp;height=128&amp;id=QhDV2&amp;originHeight=128&amp;originWidth=458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9754&amp;status=done&amp;style=none&amp;title=&amp;width=458" alt="image.png"><br>创建这两个组件<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632023400-e23049e1-acd7-4ce2-b11c-f9b0bfaf661d.png#averageHue=%23826a2b&amp;height=45&amp;id=Nili5&amp;originHeight=45&amp;originWidth=162&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2733&amp;status=done&amp;style=none&amp;title=&amp;width=162" alt="image.png">弹簧臂移动到模型后方。弹簧臂属性设置勾选使用pawn控制旋转的作用是试弹簧臂跟随鼠标进行旋转<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632067826-edfdec9d-81af-46e3-8dc3-e5bc133aac90.png#averageHue=%23434040&amp;height=150&amp;id=JYiJP&amp;originHeight=150&amp;originWidth=256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7692&amp;status=done&amp;style=none&amp;title=&amp;width=256" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632091115-967e07f7-60d8-4122-aaf1-6844a0b4755a.png#averageHue=%23585241&amp;height=175&amp;id=NqAQO&amp;originHeight=175&amp;originWidth=291&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14248&amp;status=done&amp;style=none&amp;title=&amp;width=291" alt="image.png">的属性<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632109396-a07b56ee-c041-4bfd-bc17-2866b1e3e6c8.png#averageHue=%23464444&amp;height=131&amp;id=TpXvn&amp;originHeight=131&amp;originWidth=271&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8178&amp;status=done&amp;style=none&amp;title=&amp;width=271" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632126086-d0bc6a25-a388-4f7b-ad12-d8c90191fa73.png#averageHue=%235c5238&amp;height=96&amp;id=Uwucs&amp;originHeight=96&amp;originWidth=292&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8198&amp;status=done&amp;style=none&amp;title=&amp;width=292" alt="image.png">的属性<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632154301-99fb7881-2724-435d-a1d3-26421ef850b7.png#averageHue=%234d4b4b&amp;height=114&amp;id=IA5sA&amp;originHeight=114&amp;originWidth=443&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11530&amp;status=done&amp;style=none&amp;title=&amp;width=443" alt="image.png"><br>项目设置中的输入中的操作映射:<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632263645-635be495-51d3-4b54-919c-694e904f95c5.png#averageHue=%236c6c6c&amp;height=409&amp;id=x9uz5&amp;originHeight=409&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34995&amp;status=done&amp;style=none&amp;title=&amp;width=536" alt="image.png"><br>LookUP中的缩放为-1.0个人认为应该是因为UE4使用的坐标轴是左手坐标系，向右移动鼠标是X轴正向对应的Y轴正向则是向下移动鼠标，因此LookUP的缩放调为-1.0.<br>操作映射中的命名对应的可以在蓝图中输入操作事件寻找到<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632772337-1bd7fda2-15dd-41a2-903f-f93cc20eda2e.png#averageHue=%23616060&amp;height=118&amp;id=r3mHa&amp;originHeight=118&amp;originWidth=410&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10670&amp;status=done&amp;style=none&amp;title=&amp;width=410" alt="image.png"><br>轴映射中的命名对应的可以在蓝图中输入坐标轴事件中寻找到<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615632761979-253ab8b4-d933-4d0a-8103-a86f141b8044.png#averageHue=%23474747&amp;height=191&amp;id=nzlaY&amp;originHeight=191&amp;originWidth=411&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14103&amp;status=done&amp;style=none&amp;title=&amp;width=411" alt="image.png"><br>事件图表：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615633553083-73f5b40e-465a-4116-88b4-bb3adb1d3fb3.png#averageHue=%234e4b49&amp;height=619&amp;id=HjAw1&amp;originHeight=619&amp;originWidth=600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=142678&amp;status=done&amp;style=none&amp;title=&amp;width=600" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615633569535-5d36995e-506a-4817-9cb3-a500192ed777.png#averageHue=%23696868&amp;height=565&amp;id=Fku04&amp;originHeight=565&amp;originWidth=1053&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=210453&amp;status=done&amp;style=none&amp;title=&amp;width=1053" alt="image.png"><br>创建一个蓝图类<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615633711907-235c8741-6fbb-4807-ab47-d651db2de89e.png#averageHue=%234a4a4a&amp;height=442&amp;id=zCDLi&amp;originHeight=442&amp;originWidth=544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73146&amp;status=done&amp;style=none&amp;title=&amp;width=544" alt="image.png"><br>新创建的游戏模式基础中：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615633642494-7022e5b3-6af4-4511-9554-aadf6cb32771.png#averageHue=%23494848&amp;height=442&amp;id=apIxw&amp;originHeight=442&amp;originWidth=544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73280&amp;status=done&amp;style=none&amp;title=&amp;width=544" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615633681906-d25af82f-d896-4c67-a686-faf42ceb40c8.png#averageHue=%23504f4f&amp;height=296&amp;id=TC0qJ&amp;originHeight=296&amp;originWidth=406&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30832&amp;status=done&amp;style=none&amp;title=&amp;width=406" alt="image.png"><br>类属性中的默认pawn类改为自己创建的角色蓝图，项目设置中的“地图和模式”中的默认游戏模式改为自己创建的游戏模式基础类即可使游戏中的角色使用角色蓝图中的设置<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1615633802123-d51f6960-02f8-4087-bf82-2ed6dd12eb93.png#averageHue=%23403f3f&amp;height=196&amp;id=zvn90&amp;originHeight=196&amp;originWidth=889&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23868&amp;status=done&amp;style=none&amp;title=&amp;width=889" alt="image.png"><br><a name="vj90n"></a></p><h2 id="官方的详细的介绍如何设置人物运动">官方的详细的介绍如何设置人物运动</h2><p><a href="https://docs.unrealengine.com/zh-CN/InteractiveExperiences/HowTo/CharacterMovement/index.html">https://docs.unrealengine.com/zh-CN/InteractiveExperiences/HowTo/CharacterMovement/index.html</a><br><a name="FwDzF"></a></p><h2 id="动画轨道的启用">动画轨道的启用</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621387425981-57d4c7a9-2f71-421c-9149-b36189eef93f.png#averageHue=%233d403c&amp;clientId=udf1f7f8e-2c48-4&amp;from=paste&amp;height=363&amp;id=uc34b967d&amp;originHeight=363&amp;originWidth=683&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161279&amp;status=done&amp;style=none&amp;taskId=udbfd489f-36f4-4050-abee-d489888268c&amp;title=&amp;width=683" alt="image.png">在sequence中选择动画轨道，使角色有动作。<br><a name="uryI5"></a></p><h2 id="在UE4中进行布料模拟">在UE4中进行布料模拟</h2><p>首先布料在导入的时候是需要骨骼的，需要选中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392462972-bb9364ff-9f04-416b-bae4-8949e0b0f970.png#averageHue=%235b5b5b&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=92&amp;id=u9f104a18&amp;originHeight=92&amp;originWidth=283&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13433&amp;status=done&amp;style=none&amp;taskId=ua4808d98-38f2-49f2-94a9-d26c491fcb1&amp;title=&amp;width=283" alt="image.png">。不需要导入动画。<br>第一步：将布料的物理栏中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392531351-1f9df593-1b66-4f27-9498-629b336fe631.png#averageHue=%233f413d&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=81&amp;id=uc5869ab7&amp;originHeight=81&amp;originWidth=270&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23829&amp;status=done&amp;style=none&amp;taskId=u40144062-4e97-4add-887b-d329431d3c1&amp;title=&amp;width=270" alt="image.png">的碰撞体移动到其他位置，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392563469-c8eb9f9e-8efd-46fa-a5a4-5a47a5487542.png#averageHue=%2370735f&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=550&amp;id=u39a49f22&amp;originHeight=550&amp;originWidth=651&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=304668&amp;status=done&amp;style=none&amp;taskId=ufc03a6dd-eb06-4554-a04d-af88e608697&amp;title=&amp;width=651" alt="image.png"><br>在网格体一栏中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392590459-91695e25-1f61-4892-8004-c1e800145a4e.png#averageHue=%23565249&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=70&amp;id=u01948b43&amp;originHeight=70&amp;originWidth=253&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20480&amp;status=done&amp;style=none&amp;taskId=u4e48150a-912b-49cf-b05f-36247c7d627&amp;title=&amp;width=253" alt="image.png">使用片段选择<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392580227-1256a7cc-92aa-4172-8ae0-03e4aeb4d5cf.png#averageHue=%239c6e34&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=99&amp;id=u949c9863&amp;originHeight=99&amp;originWidth=477&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58026&amp;status=done&amp;style=none&amp;taskId=ufb33b485-b879-4faa-ad0a-25182c80edf&amp;title=&amp;width=477" alt="image.png">，选择布料，鼠标右键<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392613463-cf46d75c-5c6c-4e45-a656-65bd0fb9bcd3.png#averageHue=%235f2f1c&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=324&amp;id=u927e9da4&amp;originHeight=324&amp;originWidth=570&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=182977&amp;status=done&amp;style=none&amp;taskId=uade32625-06af-4bc4-9866-5fdadc98ba6&amp;title=&amp;width=570" alt="image.png"><br>此时会出现一个布料窗口<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392663913-e916a3c4-8646-40a6-862e-822a9886210e.png#averageHue=%23424241&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=94&amp;id=u7ea763ca&amp;originHeight=94&amp;originWidth=390&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23729&amp;status=done&amp;style=none&amp;taskId=ud09c7b87-9548-405c-9a61-8b8866a70ad&amp;title=&amp;width=390" alt="image.png"><br>再次在布料位置按鼠标右键，应用布料数据<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392637858-814f50a6-bf78-4f63-bfef-688af3551cc7.png#averageHue=%23707370&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=253&amp;id=u8f78309d&amp;originHeight=253&amp;originWidth=459&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=157162&amp;status=done&amp;style=none&amp;taskId=u4e28b63a-faa9-419d-aa55-d0a13cf09b9&amp;title=&amp;width=459" alt="image.png"><br>选择布料数据<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392701276-fbe41e8e-6d4a-4c41-ade9-50d79db1b620.png#averageHue=%236d6a67&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=60&amp;id=uaba4ea62&amp;originHeight=60&amp;originWidth=255&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13085&amp;status=done&amp;style=none&amp;taskId=ub27e5bc6-6e80-400e-b021-f888bb8926c&amp;title=&amp;width=255" alt="image.png">并启用布料绘制<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392732238-6875c75c-1622-41b6-abae-2448331ca65e.png#averageHue=%23b67626&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=114&amp;id=ue472f69d&amp;originHeight=114&amp;originWidth=306&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45447&amp;status=done&amp;style=none&amp;taskId=u6f506d37-dc48-4213-af15-68fa0a9e516&amp;title=&amp;width=306" alt="image.png">其中paint Value为100时<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392786068-765b813e-59ab-457d-8cc4-d448f7e3121b.png#averageHue=%23504f4f&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=221&amp;id=ud2477192&amp;originHeight=221&amp;originWidth=261&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23141&amp;status=done&amp;style=none&amp;taskId=ufc2a8a67-f6a1-4265-a12a-1782791753c&amp;title=&amp;width=261" alt="image.png">绘制出来的区域是激活布料模拟的，Paint value 为0时绘制出来的区域是不激活布料模拟的。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1623392920477-ab820f75-cd43-4382-a375-9dbdb8fbd381.png#averageHue=%23a19c7a&amp;clientId=uce2ddf78-b2e0-4&amp;from=paste&amp;height=779&amp;id=u1ff747cd&amp;originHeight=779&amp;originWidth=681&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=222062&amp;status=done&amp;style=none&amp;taskId=u9bc3bbb1-3908-41c9-a1e7-ff42264fe3c&amp;title=&amp;width=681" alt="image.png">其中紫色区域是不激活布料物理模拟（是处于固定的状态），白色是激活。<br>绘制好保存后，在场景中加一个Wind 可以模拟出布料飘动的效果<br><a name="hn1Vx"></a></p><h2 id="影片渲染队列（MRQ-Movie-Render-Queue）">影片渲染队列（MRQ,Movie Render Queue）</h2><p>4.25版本：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1625644722731-f998bb61-c5f3-49bb-b234-94861da9540d.png#averageHue=%234e4e43&amp;clientId=u3554465d-f9aa-4&amp;from=paste&amp;height=117&amp;id=u33038160&amp;originHeight=117&amp;originWidth=303&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67657&amp;status=done&amp;style=none&amp;taskId=ub3cf7309-927f-43a6-b1de-277570647a3&amp;title=&amp;width=303" alt="image.png"><br>4.26版本需要在插件中手动打开<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635668910398-5d153750-c83b-4ce4-a4a5-601aefc297a6.png#averageHue=%23433f3e&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=157&amp;id=u62fab3a8&amp;originHeight=157&amp;originWidth=752&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20441&amp;status=done&amp;style=none&amp;taskId=u862f47bb-b9b5-4dcc-83d6-5069f836520&amp;title=&amp;width=752" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635669655361-11af9979-19e4-496a-8291-3fa249a57fd8.png#averageHue=%232f2e2e&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=610&amp;id=u79804a76&amp;originHeight=610&amp;originWidth=1010&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80588&amp;status=done&amp;style=none&amp;taskId=u13d6a22f-4a68-436e-93f3-486a422c637&amp;title=&amp;width=1010" alt="image.png"><br>其中渲染（本地与远程）的区别:<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635670434088-268c173f-df1e-4dcc-9412-180b4914798d.png#averageHue=%23131313&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=389&amp;id=u9465ccae&amp;originHeight=389&amp;originWidth=525&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86702&amp;status=done&amp;style=none&amp;taskId=ub5e105f9-33f7-4c0b-8003-a0255ccaecc&amp;title=&amp;width=525" alt="image.png"><br><a name="Mkvhe"></a></p><h3 id="渲染输出视频设置">渲染输出视频设置</h3><p>渲染输出视频的尺寸应该是目标尺寸的1.5~2倍的大小，例如 如果要目标是3840<em>2160的视频,那么输出的视频尺寸大小就应该是7680</em>4320的尺寸。最后在视频剪辑软件中再将视频压缩到目标大小。并且如果渲染输出尺寸和摄影机尺寸不一样的话，MRQ会根据目标渲染输出尺寸来进行渲染输出，但是Sequence是根据摄影机画面尺寸渲染输出。<br><a name="nObCO"></a></p><h3 id="抗锯齿的设置：">抗锯齿的设置：</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635672394574-1006b4d0-4c5e-428a-8e5f-60c7095a5c8c.png#averageHue=%23191818&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=166&amp;id=u17343b87&amp;originHeight=166&amp;originWidth=736&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=104030&amp;status=done&amp;style=none&amp;taskId=u30cb3fd6-6066-497e-8a74-4227f5b68c1&amp;title=&amp;width=736" alt="image.png"><br>如果提高采样数值后提示<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635672122186-3c1aea19-247e-4b39-91d3-0f43e18069ae.png#averageHue=%23444444&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=46&amp;id=uc0d3e8ec&amp;originHeight=46&amp;originWidth=468&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8823&amp;status=done&amp;style=none&amp;taskId=ua3017bc0-57ac-4d4e-888e-2e4433f3484&amp;title=&amp;width=468" alt="image.png">那么就勾选<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635672133711-d3dfffc9-fc9e-469b-b467-51bf4b245ec1.png#averageHue=%234e4d4d&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=165&amp;id=ua4d8cbe5&amp;originHeight=165&amp;originWidth=403&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14088&amp;status=done&amp;style=none&amp;taskId=u5af2988e-fdb9-4a04-852e-73fe48daa4f&amp;title=&amp;width=403" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635672154667-1ba84219-6416-472b-a939-2cd16d5aef47.png#averageHue=%23393939&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=634&amp;id=u43a04bba&amp;originHeight=634&amp;originWidth=710&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=103216&amp;status=done&amp;style=none&amp;taskId=u12614be1-fe90-4f9a-b228-dbf473885c7&amp;title=&amp;width=710" alt="image.png"><br>其中 anti aliasing method 翻译是抗锯齿方法，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635673016416-02661fb3-1c8b-401f-a834-c548e5de9889.png#averageHue=%235f5845&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=82&amp;id=u7671959f&amp;originHeight=82&amp;originWidth=131&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3139&amp;status=done&amp;style=none&amp;taskId=u00fc8cdc-ab76-4971-8b9a-7d1acaf82f9&amp;title=&amp;width=131" alt="image.png">选择无并不代表影片中就没有抗锯齿了，这个属性的意思是是否在原来的基础之上再添加一个采样方法,一般选择无就可以了，不推荐FXAA，FXAA的效果并不是很理想。一般要是选择的话就选择临时AA（TAA）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635672235416-84d08b58-dedd-42fc-9dd1-448fa55172f0.png#averageHue=%23868e6f&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=572&amp;id=u1e389f47&amp;originHeight=572&amp;originWidth=1310&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=935045&amp;status=done&amp;style=none&amp;taskId=u087865d3-63f2-4b4b-aa37-ac7ff8577c0&amp;title=&amp;width=1310" alt="image.png">游戏重载（覆盖）的设置：<br>如果渲染输出的视频出现了mipmap的问题,那么就在游戏重载中找到并选择<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635670786158-468dd2d4-1d3a-4ccd-8a4f-8699bf6f1ab0.png#averageHue=%234c4a4a&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=200&amp;id=uef94a7fd&amp;originHeight=200&amp;originWidth=662&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23817&amp;status=done&amp;style=none&amp;taskId=u1f537005-46b3-486d-94fc-bf6183be5f8&amp;title=&amp;width=662" alt="image.png"><br>并确认勾选了Use LODZero。<br><a name="pkAvM"></a></p><h3 id="高分辨率渲染">高分辨率渲染</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635680313825-49341536-ca40-4074-8d5f-17fe9b3e68ff.png#averageHue=%234b4b4b&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=202&amp;id=ub8529881&amp;originHeight=202&amp;originWidth=373&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14488&amp;status=done&amp;style=none&amp;taskId=u8e1962c4-697f-4db0-bc96-d2dd4b760c2&amp;title=&amp;width=373" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635680362639-d4dd502c-7766-42c9-927a-9db96e52d9f0.png#averageHue=%234d4d4d&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=206&amp;id=u532c74c2&amp;originHeight=206&amp;originWidth=373&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26718&amp;status=done&amp;style=none&amp;taskId=u4769c3cc-5df9-4a7c-a34e-8a660a37daf&amp;title=&amp;width=373" alt="image.png"><br>其中瓦片数量控制的是渲染多少个图块，并且是按照瓦片数量平方的数值来决定渲染图块数量，例如瓦片数量为2时将渲染4个图块。<br>重叠比率控制的是每个图块的重叠面积，数值为0.1时意思就是有10%的重叠面积。如果重叠比率为0，那么渲染出来的影片或者是图片会产生接缝，这个接缝在不放大时可能看不出来，但是放大后就会非常明显。例如：<br>重叠比率为0时：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635681686605-45a7b805-fb0e-4432-8bb3-1724ad463c7d.png#averageHue=%236a7b84&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=795&amp;id=ud74c0bf5&amp;originHeight=795&amp;originWidth=1286&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1437607&amp;status=done&amp;style=none&amp;taskId=u530524b5-a6df-46db-bb94-e695cb0637d&amp;title=&amp;width=1286" alt="image.png">重叠比率为30%时：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635681741054-85cdea5c-71ec-4b4b-b34d-a2536673b948.png#averageHue=%23697a83&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=790&amp;id=u1488e640&amp;originHeight=790&amp;originWidth=1285&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1442968&amp;status=done&amp;style=none&amp;taskId=u32de095c-e249-4b21-b7fc-1344016258b&amp;title=&amp;width=1285" alt="image.png"><br>不同的工程所需要的重叠比率是不同的，因此输出影片时建议先输出单帧观察<br>刚开始不设置其他的参数应该会出现这个警告<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635680794329-9ff9cb43-7ce2-4270-a31f-7fdc95871de6.png#averageHue=%23545353&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=120&amp;id=u218b6557&amp;originHeight=120&amp;originWidth=465&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29991&amp;status=done&amp;style=none&amp;taskId=u0f7e1964-fe6d-44f2-8fc2-be4eb26d9cf&amp;title=&amp;width=465" alt="image.png"><br>解决办法是不使用后处理体积的曝光设置，而是将输出视频所使用的摄影机中的<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635681212708-e972ee81-db7b-4ab8-ac09-53cc30544a62.png#averageHue=%23434343&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=284&amp;id=ue68f0df0&amp;originHeight=284&amp;originWidth=349&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17699&amp;status=done&amp;style=none&amp;taskId=u87619216-6864-4085-91bc-2037f3341e2&amp;title=&amp;width=349" alt="image.png">计量模式改为手动，改为手动后又两种调整曝光的方法，一个是找到camera调整这些参数<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635681266713-2241e168-c87b-435d-9fcd-396fb1827c4d.png#averageHue=%234e4d4c&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=324&amp;id=uc94781f2&amp;originHeight=324&amp;originWidth=344&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21803&amp;status=done&amp;style=none&amp;taskId=u15bb6f88-b89c-4a70-919e-9edfdefac64&amp;title=&amp;width=344" alt="image.png">，另一种方法是直接调整<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635681304446-65f562f4-4385-45da-83ac-acffef836900.png#averageHue=%234a4a4a&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=241&amp;id=u4ca70e5e&amp;originHeight=241&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14444&amp;status=done&amp;style=none&amp;taskId=ue9fa43a6-945d-46b2-a45e-ee3190a676d&amp;title=&amp;width=296" alt="image.png">曝光补偿的数值<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635681894860-d9545c88-bc48-4fb4-9065-2a7b903ada0d.png#averageHue=%23131212&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=316&amp;id=u7fe41054&amp;originHeight=316&amp;originWidth=1458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=195040&amp;status=done&amp;style=none&amp;taskId=u63306234-a93f-426b-9f30-79b3e5c3116&amp;title=&amp;width=1458" alt="image.png"><br><a name="pkQAD"></a></p><h3 id="透明通道输出">透明通道输出</h3><p>要实现透明通道输出就需要先将项目设置中的渲染模块中的<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635688497092-a8b8235d-933d-4d11-a2aa-f0e1016ca52d.png#averageHue=%23464646&amp;clientId=ub694551b-85fe-4&amp;from=paste&amp;height=153&amp;id=u315a4a9d&amp;originHeight=153&amp;originWidth=554&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16208&amp;status=done&amp;style=none&amp;taskId=u41091537-d423-4e31-aae0-39a8f59af3c&amp;title=&amp;width=554" alt="image.png">。<br>然后在MRQ输出PNG或者EXR时勾选输出透明度。<br>输出透明通道的结果：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636636228768-64fe5bf7-f270-4ee6-bfe1-350f9bdf04b8.png#averageHue=%23040404&amp;clientId=u1c351bfa-9cc0-4&amp;from=paste&amp;height=366&amp;id=uba304ac1&amp;originHeight=366&amp;originWidth=645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=95165&amp;status=done&amp;style=none&amp;taskId=u1f06c99c-e09b-4e30-8d10-f1d6a919c34&amp;title=&amp;width=645" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636636238570-f2b2d7c5-c10d-4a8b-a946-e932593c3c23.png#averageHue=%23d9d9d9&amp;clientId=u1c351bfa-9cc0-4&amp;from=paste&amp;height=619&amp;id=u3b5c1e11&amp;originHeight=619&amp;originWidth=1357&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1057146&amp;status=done&amp;style=none&amp;taskId=u96279b77-32eb-4c6c-b1cc-50c6817c3a4&amp;title=&amp;width=1357" alt="image.png"><br><a name="TUhMg"></a></p><h2 id="Sequence">Sequence</h2><p><a name="ne0Cu"></a></p><h3 id="渐入渐出">渐入渐出</h3><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633327556613-8856d2cd-0a57-4c73-b73a-6774bbf85327.png#averageHue=%23594a38&amp;clientId=uab6e40ab-e77a-4&amp;from=paste&amp;height=165&amp;id=u7a428c95&amp;originHeight=165&amp;originWidth=405&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=41667&amp;status=done&amp;style=none&amp;taskId=u58008f2b-4a2b-4bc9-b824-677a65cf6e9&amp;title=&amp;width=405" alt="image.png">添加Fade 然后调整Fade的数值。<br><a name="puA2g"></a></p><h3 id="渲染的设置">渲染的设置</h3><p>最后渲染影片时在渲染设置中<img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1605011183285-b10a2be9-37f8-4c6f-8759-32a52b59e908.png#averageHue=%234c4b4b&amp;height=269&amp;id=bLHTE&amp;originHeight=269&amp;originWidth=329&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16739&amp;status=done&amp;style=none&amp;title=&amp;width=329" alt="image.png">设置一下。在后期处理体积的细节面板增大屏幕百分比<br><img src="https://cdn.nlark.com/yuque/0/2020/png/2623605/1605513552041-f1221ee5-946d-4c95-a0d8-d02a71a329e5.png#averageHue=%234c4c4c&amp;height=59&amp;id=CxhuW&amp;originHeight=59&amp;originWidth=281&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8362&amp;status=done&amp;style=none&amp;title=&amp;width=281" alt="image.png">，可以输出更高质量的视频。<br>反射球可以先拉一个大范围的，然后再小范围拖动到金属物体的影响金属。<br>如果反射效果不好时，可以将反射的分辨率调高，在项目设置中的正在渲染，反射采集分辨率调节。<br><a name="sg4BG"></a></p><h3 id="sequence快捷键">sequence快捷键</h3><p>s键是K帧的快捷键，选中一个没有添加到关卡序列的物体按s键可以快速的将物体添加到关卡序列中<br>选中关键帧按1，2，3，4，5可以快速更改为<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621742645834-128437b2-8a33-423d-8e56-8c65f6f3a91f.png#averageHue=%23282727&amp;clientId=ud9770c81-49b5-4&amp;from=paste&amp;height=128&amp;id=iQjui&amp;originHeight=128&amp;originWidth=145&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7322&amp;status=done&amp;style=none&amp;taskId=u7c0dff5c-0fc8-4702-836a-698d2e4cc08&amp;title=&amp;width=145" alt="image.png"></p><p><a name="hxX7x"></a></p><h1>[官方培训]08-UE动画基础</h1><p><a name="DJ4qv"></a></p><h2 id="UE动画概述">UE动画概述</h2><p><a name="K1cxL"></a></p><h3 id="影视CG相关常见动画种类浏览">影视CG相关常见动画种类浏览</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666762138411-e03bb7fc-aea3-4d47-aaad-938e565b5026.png#averageHue=%230c0b08&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1076&amp;id=u1a391ad2&amp;originHeight=968&amp;originWidth=1258&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=381504&amp;status=done&amp;style=none&amp;taskId=u711f80c6-68d6-4cfc-9342-be712c38e12&amp;title=&amp;width=1397.7778148062446" alt="image.png"><br><a name="JhroQ"></a></p><h4 id="骨骼网格体动画">骨骼网格体动画</h4><p>骨骼动画是通过骨骼位置和蒙皮信息带动骨骼网格体的顶点位置从而实现动画效果的一种方式<br><a name="xx4dm"></a></p><h5 id="变形目标">变形目标</h5><p>变形目标也就是maya中的blendshape，是通过在不同的模型顶点形态之间进行插值，结合动画曲线来实现形变动画的一种方式，通常用来制作角色身体和面部肌肉的变形动画<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666762483402-ec3dc12f-04ec-47f4-b819-4cd14c7b701c.png#averageHue=%233e3e36&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1022&amp;id=uc5115a91&amp;originHeight=920&amp;originWidth=1687&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=748879&amp;status=done&amp;style=none&amp;taskId=u72747f96-79a1-48b0-8acb-f5688215e48&amp;title=&amp;width=1874.444494100266" alt="image.png"><br><a name="KQWtb"></a></p><h5 id="动画曲线">动画曲线</h5><p>动画曲线是指在动画序列中通过某些属性来实现多种动画数据统一变化的一种方式，曲线有三种类型，分别是目标变形曲线，属性曲线和材质曲线<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666762660686-b29a3269-bd9d-47a7-aae2-547c3c2bad7a.png#averageHue=%23655b48&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1003&amp;id=u3caf6954&amp;originHeight=903&amp;originWidth=1689&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=805522&amp;status=done&amp;style=none&amp;taskId=u3808c262-fc6a-4528-a2aa-398a190c9d8&amp;title=&amp;width=1876.666716381357" alt="image.png"><br>可以在DCC软件中添加需要的属性并制作关键帧来制作属性曲线<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666762805094-e35ca1f6-590f-43d0-99ff-47209cab90c3.png#averageHue=%235c5958&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=651&amp;id=ua571acaa&amp;originHeight=586&amp;originWidth=307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19086&amp;status=done&amp;style=none&amp;taskId=u4ed094e5-eeba-4616-b542-0e74e61f352&amp;title=&amp;width=341.1111201474698" alt="image.png">，通过fbx导入UE<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666762923294-0a1be249-d11f-49ee-b53b-6abf4803369f.png#averageHue=%23272727&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=788&amp;id=udc0ec4e3&amp;originHeight=709&amp;originWidth=369&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=144462&amp;status=done&amp;style=none&amp;taskId=u8668202e-5da6-4a6f-85f9-c938d1bc1c0&amp;title=&amp;width=410.0000108612911" alt="image.png"><br><a name="MLjum"></a></p><h5 id="姿势资产（pose-asset）">姿势资产（pose asset）</h5><p>可以将包含多种曲线的动画序列逐帧转化为一组pose，通过在例如动画蓝图中输入数据的方式来驱动pose，实现基于曲线的动画效果。例如可以在DCC软件中制作好一段包含骨骼运动，变形目标变化和自定义材质曲线的动画，每一帧代表一个pose，将骨骼网格和动画导入UE后得到一段同时驱动骨骼，变形目标和材质曲线的动画序列，然后基于这些动画序列创建一个姿势资产并通过手动或批量复制的方式修改每个pose的名称，就可以在动画蓝图中通过驱动pose得到动画效果，目前主要用于驱动角色面部动画。<br><a name="Mk4bz"></a></p><h4 id="物理动画">物理动画</h4><p>物理动画是通过实时的物理模拟实现刚体布料破碎毛发等实时的物理模拟效果<br><a name="vqPTW"></a></p><h4 id="定点动画缓存">定点动画缓存</h4><p>也就是通过在DCC软件中导出abc格式的动画缓存，然后导入UE来播放<br><a name="LAk5i"></a></p><h4 id="顶点材质动画（世界顶点偏移）">顶点材质动画（世界顶点偏移）</h4><p>通过材质中的世界位置位移节点，配合UV信息的变化来表现例如植被水面环境布料等动态规律明显的几何形变动画效果。<br><a name="o5CyP"></a></p><h4 id="毛发GroomCache动画">毛发GroomCache动画</h4><p>可以将外部预解算的groom毛发动画通过abc格式导入到引擎中，在UE中运行（play）之后就可以看到动画效果。<br><a name="QRzbB"></a></p><h4 id="时间轴动画（sequencer动画）">时间轴动画（sequencer动画）</h4><p>在虚幻引擎的编辑器中通过直接修改场景对象属性，尤其是transform属性来生成的动画效果。UE也支持从DCC软件中导入时间轴动画数据，支持单个或批量导入，从DCC软件中制作带有动画的模型，然后用fbx格式导出，接着在时间轴面板中进行导入，导入后会自动根据名字一 一对应将动画数据进行匹配。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666764891732-49f4b847-a751-41a2-bee1-e3e2170b1600.png#averageHue=%23a29991&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=508&amp;id=ufd8bc509&amp;originHeight=457&amp;originWidth=546&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145074&amp;status=done&amp;style=none&amp;taskId=u8ef5558c-7ddc-4899-86db-596791fe96f&amp;title=&amp;width=606.6666827378453" alt="image.png"><br><a name="AVYB7"></a></p><h4 id="时间轴相机动画">时间轴相机动画</h4><p>跟时间轴动画操作一致，也是根据名字一一对应，不同的是，时间轴相机动画可以将焦距光圈等相机专用的属性动画导入。<br><a name="ERk6U"></a></p><h4 id="时间轴控制绑定动画control-rig">时间轴控制绑定动画control rig</h4><p>control rig 是虚幻引擎的实时绑定系统，除了可以在sequencer上手动创作控制器动画之外，现在还可以导入外部DCC中的控制器，时间轴动画数据。<br><a name="nRX76"></a></p><h3 id="骨骼动画系统">骨骼动画系统</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666765384572-a2b0e128-99c2-47ce-9776-28ca6d1c6a3b.png#averageHue=%230d0a07&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=594&amp;id=uc2a101ca&amp;originHeight=535&amp;originWidth=428&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=92070&amp;status=done&amp;style=none&amp;taskId=ud6d0681f-831e-4544-b199-cc3702f33c8&amp;title=&amp;width=475.55556815347586" alt="image.png"><br><a name="szx3H"></a></p><h4 id="DCC动画制作要求">DCC动画制作要求</h4><p>UE对于动画资产兼容性很强，唯一需要注意的是同一套骨架内的骨骼名称不能相同，否则会报错<br><a name="rMYE5"></a></p><h4 id="动画导入-导出">动画导入\导出</h4><p>选中几何体和骨骼，导出FBX，需要勾选动画<br>导入时确保勾选导入动画<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666765615792-823e9503-966c-479c-ba24-1b359ff606a0.png#averageHue=%23282827&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=97&amp;id=u0b4571d5&amp;originHeight=87&amp;originWidth=301&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10219&amp;status=done&amp;style=none&amp;taskId=u5730a025-516e-4485-9ed0-c696a64ac89&amp;title=&amp;width=334.4444533041968" alt="image.png"><br><strong>注意点：</strong> 系统单位：厘米，尽量不要在制作过程中修改系统单位。<br>导出时动画的帧范围设置成动画数据的范围，而不是时间轴的范围，因为默认导入是以时间轴范围导入的，可以通过在UE中更改动画长度为带动画的时间<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666765898335-8237cf85-bba7-411b-abd6-2b99c6f0e7b2.png#averageHue=%232c2c2c&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=170&amp;id=ucd6e6913&amp;originHeight=153&amp;originWidth=531&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44086&amp;status=done&amp;style=none&amp;taskId=u26287cb7-8809-4fc3-8937-d4834f8416c&amp;title=&amp;width=590.0000156296628" alt="image.png">然后重新导入动画来修复<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666765934319-20045651-1426-4c57-bc7e-b1e62754a42f.png#averageHue=%233a3737&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=124&amp;id=u6971dc49&amp;originHeight=112&amp;originWidth=528&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26416&amp;status=done&amp;style=none&amp;taskId=ucfd69f7f-b3f6-4ae6-94b0-9afe343ac00&amp;title=&amp;width=586.6666822080263" alt="image.png">。<br>从UE导出的FBX动画文件，再导入至DCC软件中时需要确保<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666766027159-147b17ab-fe6e-4fb9-950b-500d52d9f443.png#averageHue=%234c4949&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=142&amp;id=uf8c6e832&amp;originHeight=128&amp;originWidth=390&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11476&amp;status=done&amp;style=none&amp;taskId=u5f23d64d-fcd3-471f-8681-8b584659df6&amp;title=&amp;width=433.3333448127467" alt="image.png"><br><a name="ap99e"></a></p><h4 id="动画重定向">动画重定向</h4><p>是指将针对某个角色制作的动画数据适配到另一个角色身上。<br>UE5中进行了大幅增强，支持通过实时IK绑定提高动画重定向的效果，同时支持在不同结构或命名的骨架之间进行动画重定向。<br><a name="AIWjC"></a></p><h4 id="livelink">livelink</h4><p>livelinke是虚幻引擎的动画插件，可以用于从maya中将动画数据实时传输到虚幻引擎也可以通过移动设备进行面部实时动捕。<br><a name="N9V3P"></a></p><h4 id="control-rig">control rig</h4><p>实时绑定系统，可以使我们在虚幻引擎中创作骨骼动画，同时支持IKFK多种绑定模式，并且可以在控制绑定编辑器中通过图形脚本自定义绑定规则<br><a name="mNnHt"></a></p><h2 id="CG项目中的动画环节">CG项目中的动画环节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666769067727-b2ad1799-9f3b-421d-84d4-51476b63f82b.png#averageHue=%230b0908&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=420&amp;id=u9e404cf2&amp;originHeight=378&amp;originWidth=815&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=101931&amp;status=done&amp;style=none&amp;taskId=ud59f1637-29db-4234-a110-39d34a9ec89&amp;title=&amp;width=905.5555795445861" alt="image.png"><br><a name="J881m"></a></p><h3 id="如何确保骨骼动画数据保真度">如何确保骨骼动画数据保真度</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666769158021-ec5c7470-cdb5-4ac5-a93a-81918235669e.png#averageHue=%230c0a09&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=726&amp;id=uc143eb01&amp;originHeight=653&amp;originWidth=869&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=229941&amp;status=done&amp;style=none&amp;taskId=u4b7a23ad-539b-4632-a1b8-f61d7ccf2ba&amp;title=&amp;width=965.5555811340433" alt="image.png"><br><a name="DkW0z"></a></p><h4 id="maya关节方向导致的数据显示差异">maya关节方向导致的数据显示差异</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666769395476-ded51ff6-fc61-44b9-90c4-36ecbba078d7.png#averageHue=%23474747&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=307&amp;id=u91387983&amp;originHeight=276&amp;originWidth=394&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29218&amp;status=done&amp;style=none&amp;taskId=ucb44889d-5f42-4236-b119-dac67a5a4f4&amp;title=&amp;width=437.7777893749287" alt="image.png">需要归零后再蒙皮<br><a name="Hbt8K"></a></p><h4 id="坐标系转换导致精度的误差">坐标系转换导致精度的误差</h4><p>需要使用Z轴为上方向轴<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666769513652-7de6938a-5bd9-4fbd-a599-64f56aa8fa97.png#averageHue=%234f4f4f&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=557&amp;id=u4a5c6bd3&amp;originHeight=501&amp;originWidth=692&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66491&amp;status=done&amp;style=none&amp;taskId=uc6feb56b-ce83-44d1-ad26-f19026ca7e3&amp;title=&amp;width=768.888909257489" alt="image.png"><br><a name="qnK29"></a></p><h4 id="帧率差异导致动画长度不同">帧率差异导致动画长度不同</h4><p>原因：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666769834557-4d5b88dc-1a73-424c-8e96-84e78f8352e0.png#averageHue=%231e1b1b&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=962&amp;id=u9d1179df&amp;originHeight=866&amp;originWidth=1666&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=204004&amp;status=done&amp;style=none&amp;taskId=u8ded461a-04bd-4b55-9529-9ca038124ce&amp;title=&amp;width=1851.1111601488103" alt="image.png"><br>解决办法：从第0帧开始K动画<br><a name="rvHqW"></a></p><h4 id="Maya数据显示精度问题">Maya数据显示精度问题</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666771977438-183455d4-7fce-4865-83e9-cf9c38d22cbc.png#averageHue=%234a4a4a&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=972&amp;id=u876d6a34&amp;originHeight=875&amp;originWidth=566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=136505&amp;status=done&amp;style=none&amp;taskId=u0b120933-3bec-4264-8f18-caa72099d0b&amp;title=&amp;width=628.8889055487555" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666772003630-ea178f61-ca97-4956-8521-c4c782905641.png#averageHue=%23696967&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=204&amp;id=u7b5d2751&amp;originHeight=184&amp;originWidth=253&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20373&amp;status=done&amp;style=none&amp;taskId=u84327710-a19c-441e-85d8-2cae9c7a108&amp;title=&amp;width=281.1111185580126" alt="image.png"><br><a name="elkxZ"></a></p><h4 id="maya动画曲线信息无法导出到UE，导致帧之间插值方式有差异">maya动画曲线信息无法导出到UE，导致帧之间插值方式有差异</h4><p>提高maya动画帧率和ue的动画采样率。<br><a name="DzIAG"></a></p><h4 id="maya双精度浮点数和UE动画数据单精度浮点数的差异">maya双精度浮点数和UE动画数据单精度浮点数的差异</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666772258198-eefdfee9-ddf8-412e-9c3c-53b12656c551.png#averageHue=%238a8685&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1442&amp;id=u1332a5c0&amp;originHeight=1298&amp;originWidth=1430&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=555677&amp;status=done&amp;style=none&amp;taskId=uf3525aa8-3e51-4f93-82ee-b81b446a5fc&amp;title=&amp;width=1588.8889309800713" alt="image.png"><br><a name="QzJsZ"></a></p><h4 id="动画压缩导致高频信息丢失">动画压缩导致高频信息丢失</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666772772716-35380c77-3bfe-46a0-8ed6-969b22ce70f9.png#averageHue=%232d2d2d&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=442&amp;id=u1927cfc2&amp;originHeight=398&amp;originWidth=846&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80051&amp;status=done&amp;style=none&amp;taskId=ua17c82ce-837c-4407-ac0e-bfdbfb5b0a5&amp;title=&amp;width=940.0000249014967" alt="image.png"><br>可以新建压缩设置，选择<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666772817069-cf58d109-8add-4e00-9cf8-7051ddada3ab.png#averageHue=%2343413c&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=326&amp;id=ub6cf6988&amp;originHeight=293&amp;originWidth=618&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110901&amp;status=done&amp;style=none&amp;taskId=uf77065b1-2f86-4725-b3a3-f6477575cb8&amp;title=&amp;width=686.6666848571217" alt="image.png">使用动画压缩破坏性最低的设置<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666772844008-38b67a1f-69ea-4438-b4d2-d43b258d1c52.png#averageHue=%23202020&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=412&amp;id=ud0d63ebc&amp;originHeight=371&amp;originWidth=1420&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47291&amp;status=done&amp;style=none&amp;taskId=u530fcc13-6cf1-4142-b337-9a2cb97678b&amp;title=&amp;width=1577.7778195746162" alt="image.png"><br>或者直接取消勾选允许去除帧。<br><a name="ohBj8"></a></p><h4 id="插值方式会改变动画形态">插值方式会改变动画形态</h4><p>UE默认会根据帧与帧之间线性生成过度帧，如果想要动画是一帧一个变换形态，那么可以将插值选项改成跳过<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666772990114-168120c2-395d-4579-8f9c-f01689b21e73.png#averageHue=%23252525&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=159&amp;id=u8d60779d&amp;originHeight=143&amp;originWidth=505&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25300&amp;status=done&amp;style=none&amp;taskId=u28cd7ed8-d800-4fdd-ad9f-7fbf49f08d8&amp;title=&amp;width=561.1111259754797" alt="image.png">。<br><a name="nGeOc"></a></p><h4 id="总结">总结</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666773090276-9739d94d-b55f-4776-bfb6-ed6d1c93c76a.png#averageHue=%230a0907&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=889&amp;id=ue0893cba&amp;originHeight=800&amp;originWidth=1548&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=378855&amp;status=done&amp;style=none&amp;taskId=ufe169d8b-9d0e-4d17-a009-86996646e2e&amp;title=&amp;width=1720.0000455644408" alt="image.png"><br><a name="N0i37"></a></p><h3 id="如何选择动画实现方式">如何选择动画实现方式</h3><p><a name="z8VEC"></a></p><h4 id="离线渲染和实时渲染对动画方案的思路差异">离线渲染和实时渲染对动画方案的思路差异</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666773349534-9e9a7f31-51e9-4b3d-801e-b6d4910705c3.png#averageHue=%230b0805&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1432&amp;id=u11550b9a&amp;originHeight=1289&amp;originWidth=2478&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=733346&amp;status=done&amp;style=none&amp;taskId=ud6a94598-fdf1-43cd-9bcd-e24e5c4ba34&amp;title=&amp;width=2753.33340627176" alt="image.png"><br><a name="aratD"></a></p><h4 id="CG项目动画方案设计示例">CG项目动画方案设计示例</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666773992666-f94cff18-e70f-43cf-a263-fe14e48060de.png#averageHue=%230c0a07&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1247&amp;id=uc98532ad&amp;originHeight=1122&amp;originWidth=2279&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=659295&amp;status=done&amp;style=none&amp;taskId=u659d033f-62e6-4480-a2cb-6477959250c&amp;title=&amp;width=2532.2222893032044" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774193818-4803e135-2dc4-42a2-90db-81d2fc771c19.png#averageHue=%2360725a&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1020&amp;id=uc5e16442&amp;originHeight=918&amp;originWidth=1686&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=484630&amp;status=done&amp;style=none&amp;taskId=u1dd319f5-98df-40eb-ab7b-6e7d9ea84ca&amp;title=&amp;width=1873.3333829597204" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774208650-242f6f8a-4698-4d8f-80d6-b87f467027c2.png#averageHue=%2372776b&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1001&amp;id=ueb114dfc&amp;originHeight=901&amp;originWidth=1681&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=913562&amp;status=done&amp;style=none&amp;taskId=uc8cbeb45-c21e-415d-893c-7f8aeeb9f8c&amp;title=&amp;width=1867.7778272569929" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774226478-4d1429f0-eba1-4347-b73c-86f3b0d53ea3.png#averageHue=%23353b26&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1007&amp;id=u19a24cca&amp;originHeight=906&amp;originWidth=1688&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1292650&amp;status=done&amp;style=none&amp;taskId=u6b50114c-0953-437d-a674-70d7041df72&amp;title=&amp;width=1875.5556052408115" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774257477-36483c53-fffc-4380-a410-e75a65e2e2d2.png#averageHue=%235e5e57&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1016&amp;id=u5d73b3db&amp;originHeight=914&amp;originWidth=1646&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1088356&amp;status=done&amp;style=none&amp;taskId=uc4b23130-430f-4be9-8e88-046c1ea2087&amp;title=&amp;width=1828.8889373379002" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774280792-efa44aa6-7271-42c5-86fc-14be937729f8.png#averageHue=%23646460&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1002&amp;id=u98b9270c&amp;originHeight=902&amp;originWidth=1695&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=848571&amp;status=done&amp;style=none&amp;taskId=u4b404473-3424-41a2-adb1-841c4505ee4&amp;title=&amp;width=1883.3333832246299" alt="image.png"><br><a name="CSTWG"></a></p><h3 id="如何通过动画环节的快速迭代最大化实时流程的价值">如何通过动画环节的快速迭代最大化实时流程的价值</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774323148-f75ae1a6-f173-478b-b984-bb3adbcede3f.png#averageHue=%230b0908&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=529&amp;id=u45e8d676&amp;originHeight=476&amp;originWidth=899&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=140357&amp;status=done&amp;style=none&amp;taskId=u73a2ca43-b2ac-44fe-970e-4714cc9f20d&amp;title=&amp;width=998.8889153504084" alt="image.png"><br><a name="UNQ4D"></a></p><h4 id="通过原型-迭代的方式并行推进动画制作">通过原型+迭代的方式并行推进动画制作</h4><p>先使用获得成本很低的资产，然后迭代资产最终输出。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774471648-f599d581-dc16-41cf-b295-60f48e3cefc1.png#averageHue=%23605446&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1296&amp;id=ubc3d289e&amp;originHeight=1166&amp;originWidth=2413&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1132398&amp;status=done&amp;style=none&amp;taskId=u4c93e69c-8bab-4dcd-891e-bd950801e9b&amp;title=&amp;width=2681.111182136302" alt="image.png"><br><a name="Zbld3"></a></p><h4 id="通过LiveLink实时浏览引擎内效果">通过LiveLink实时浏览引擎内效果</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774545046-9ae16e25-9c21-41f0-8ea2-8b126da6800e.png#averageHue=%23080808&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=730&amp;id=u020b7ffb&amp;originHeight=657&amp;originWidth=1403&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=197168&amp;status=done&amp;style=none&amp;taskId=ud0c78c8d-2420-474d-aae6-8b938053807&amp;title=&amp;width=1558.8889301853426" alt="image.png"><br><a name="jywMk"></a></p><h4 id="引擎内修改和创作动画">引擎内修改和创作动画</h4><p>通过control rig 直接在引擎内制作动画，这种方式还能够避免maya与UE动画传输的失真。<br><a name="stH3i"></a></p><h4 id="引擎内实时动作捕捉">引擎内实时动作捕捉</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774668592-037b185d-b285-47bb-a1cc-6a078cf7406e.png#averageHue=%230c0c0c&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1450&amp;id=u3d789abe&amp;originHeight=1305&amp;originWidth=2350&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=634534&amp;status=done&amp;style=none&amp;taskId=u887bffc1-d18a-4171-b8e5-6328ea64ae7&amp;title=&amp;width=2611.111180281935" alt="image.png"><br><a name="yKWdb"></a></p><h2 id="动画案例简析">动画案例简析</h2><p><a name="qUjz6"></a></p><h3 id="Meerkat-Demo-狐獴-案例工程动画技术分析">Meerkat Demo 狐獴 案例工程动画技术分析</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666774853634-e9f09169-fcd7-4cd8-a6ce-6934874b82e7.png#averageHue=%230c0906&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=630&amp;id=u479b54f8&amp;originHeight=567&amp;originWidth=843&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=179839&amp;status=done&amp;style=none&amp;taskId=ue886ac1a-4c13-408c-ae66-49786d9a3bd&amp;title=&amp;width=936.6666914798602" alt="image.png"><br><a name="wXjIK"></a></p><h4 id="动画方法分析和相关注意事项介绍">动画方法分析和相关注意事项介绍</h4><p>动画是只用了一个动画序列<br>两个角色的根骨骼都始终在原点并且没有动画，角色的位移都是由第二节骨节的位移动画带动<br>注意事项：<br>给角色骨骼网格体指定合适的物理资产<br>如果没有指定合适的物理资产，由于动画范围较大，很多镜头中骨骼网格体的原点到了镜头之外，出于优化目的，角色会被视为不需要渲染的物体而剔除<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666775529501-84554f9b-4dae-438e-b2fd-ee7b92b85a12.png#averageHue=%232b2b2b&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=240&amp;id=u5172f1e3&amp;originHeight=216&amp;originWidth=688&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42662&amp;status=done&amp;style=none&amp;taskId=u64060eb3-c5c4-4b79-9142-89760bab711&amp;title=&amp;width=764.444464695307" alt="image.png"><br>如果仅仅为了避免角色被剔除，可以在控制角色移动的骨骼上制作一个简单的物理体（需要匹配全身），<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666775843237-4be5263f-841d-4e1a-a6a7-04dfa1ee2d74.png#averageHue=%233d3a31&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=499&amp;id=u4bd074a8&amp;originHeight=449&amp;originWidth=719&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=216773&amp;status=done&amp;style=none&amp;taskId=udd0f86a3-312d-415e-93bb-d8bccc2df23&amp;title=&amp;width=798.8889100522176" alt="image.png"></p><p><a name="zgfe6"></a></p><h4 id="把角色部件封装为蓝图">把角色部件封装为蓝图</h4><p>蓝图除了可以把骨骼网格毛发资产，服饰道具，特效等角色部件都封装到一起之外，还可以自定义一些函数变量把一些动画元素进行统一的调度。例如在sequencer中控制一个蓝图其中编写的少量事件或变量来批量设置一些东西，这样能够让sequencer轨道更加精简。角色蓝图也是同理。<br><a name="Hoeme"></a></p><h4 id="狐獴肢体骨骼动画和表情变形目标动画">狐獴肢体骨骼动画和表情变形目标动画</h4><p>在DCC软件中通过blendshape制作并作为曲线跟随骨骼动画数据一起导入到UE中，同时可以在动画序列编辑器中修改动画数值。<br><a name="w1Ldq"></a></p><h4 id="LiveLink应用">LiveLink应用</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666776436008-0c38de6a-6c81-47aa-96d9-43933adeeb2f.png#averageHue=%235592ce&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=686&amp;id=ua4cbd996&amp;originHeight=617&amp;originWidth=1788&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=955110&amp;status=done&amp;style=none&amp;taskId=ub3c8aa49-a02f-4357-aadf-cdd8a6fe4ec&amp;title=&amp;width=1986.6667192953619" alt="image.png"><br><a name="Qzm6W"></a></p><h4 id="基于ControlRig和动画模式的引擎内创作动画">基于ControlRig和动画模式的引擎内创作动画</h4><p>在骨骼网格体中提供控制绑定资产<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666776501614-72a0a3a6-5496-4ac4-92af-3e873a6cdc77.png#averageHue=%23272727&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=239&amp;id=ube09ed2f&amp;originHeight=215&amp;originWidth=712&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34482&amp;status=done&amp;style=none&amp;taskId=u4c48d501-fb3e-4f44-9eb1-23c27f28920&amp;title=&amp;width=791.1111320683991" alt="image.png"><br>在虚幻引擎中制作动画并烘焙成动画序列<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666776602026-f810029b-4ac4-4b46-95db-7e2a2b9cc624.png#averageHue=%23393a33&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1337&amp;id=ud77e7008&amp;originHeight=1203&amp;originWidth=1975&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1462499&amp;status=done&amp;style=none&amp;taskId=u3a8e54a1-a7b8-4a60-ad80-3ee65d397cd&amp;title=&amp;width=2194.444502577371" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666776624778-fb4bf275-5ec4-49ec-8566-b10f04d22e79.png#averageHue=%23302e2d&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=778&amp;id=u28d41eca&amp;originHeight=700&amp;originWidth=789&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=296236&amp;status=done&amp;style=none&amp;taskId=ua8d2fef5-21d4-473a-9787-47699bce13f&amp;title=&amp;width=876.666689890403" alt="image.png"><br>针对已经有的动画序列资产可以通过烘焙到控制绑定进行二次编辑。如果没有控制绑定资产也可以通过以FK控制绑定进行编辑。这样就不需要导出到maya修改完再导回来。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666776721185-9d286fd7-5527-4c96-b62f-5bee3c64f7b7.png#averageHue=%23817d63&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=340&amp;id=u93423e03&amp;originHeight=306&amp;originWidth=473&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99552&amp;status=done&amp;style=none&amp;taskId=ud2524f50-8ec8-4226-8d0c-38c4133e865&amp;title=&amp;width=525.5555694780236" alt="image.png"><br><a name="cu8GH"></a></p><h3 id="Slay-Animation-Sample-案例工程动画技术分析">Slay Animation Sample 案例工程动画技术分析</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666777052606-6443bdda-0284-4c5b-a549-e4046353ead7.png#averageHue=%230e0b08&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=649&amp;id=u73861860&amp;originHeight=584&amp;originWidth=748&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=182557&amp;status=done&amp;style=none&amp;taskId=ufb3f982a-b319-4802-b254-7723ce28952&amp;title=&amp;width=831.1111331280373" alt="image.png"><br><a name="frKlG"></a></p><h4 id="按镜头划分动画序列资产的管理方式">按镜头划分动画序列资产的管理方式</h4><p>主关卡序列<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666777889051-efb7745d-e706-4135-9af1-25290a2a2b07.png#averageHue=%23343434&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=377&amp;id=u5866709b&amp;originHeight=339&amp;originWidth=1814&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=146150&amp;status=done&amp;style=none&amp;taskId=ue5a66a0b-df99-4693-ad56-65362655949&amp;title=&amp;width=2015.5556089495449" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666778253748-73ab5802-6a01-4169-834f-7f91a4cf5d56.png#averageHue=%2367523a&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=541&amp;id=uf60641c7&amp;originHeight=487&amp;originWidth=323&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=92612&amp;status=done&amp;style=none&amp;taskId=u839ae04b-ed20-41e2-8ebc-2686b500aff&amp;title=&amp;width=358.88889839619793" alt="image.png"><br><a name="TGqhS"></a></p><h4 id="在角色蓝图中协同动画播放">在角色蓝图中协同动画播放</h4><p>通过设置总姿势组件来将角色动画和武器进行了关联<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666778346343-3dc010bb-0133-4af9-a640-25f4bc97b337.png#averageHue=%233f3121&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=453&amp;id=ud1f0fffd&amp;originHeight=408&amp;originWidth=1083&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=187792&amp;status=done&amp;style=none&amp;taskId=u2fdf5659-f96e-45c3-a498-fad9903bb53&amp;title=&amp;width=1203.3333652107813" alt="image.png"><br><a name="PqKOS"></a></p><h4 id="Sequnencer时间轴动画和骨骼动画结合应用">Sequnencer时间轴动画和骨骼动画结合应用</h4><p>在骨骼动画的基础上又进行了位置信息的微调。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666778558140-a6c5522b-d932-42bd-b603-bb5a085cf543.png#averageHue=%2328493e&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=311&amp;id=u48a5d06d&amp;originHeight=280&amp;originWidth=1803&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99518&amp;status=done&amp;style=none&amp;taskId=u472c2995-26ee-4c23-a9de-d641ee11ac1&amp;title=&amp;width=2003.3333864035444" alt="image.png"><br><a name="CFdCF"></a></p><h4 id="Addtive-表情动画和肢体动画结合应用">Addtive 表情动画和肢体动画结合应用</h4><p>将骨骼动画和表情动画分开<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666778653427-dd33aaae-a519-4de4-9cab-34b4f03d147e.png#averageHue=%23303630&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=364&amp;id=u16de53ff&amp;originHeight=328&amp;originWidth=1837&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=172946&amp;status=done&amp;style=none&amp;taskId=u85c3d4e1-570f-44fe-9373-db6efb68d58&amp;title=&amp;width=2041.1111651820916" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666778709250-8503e791-44f4-43b9-8237-4f9b479437d2.png#averageHue=%232d2d2c&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=311&amp;id=u1d3295d7&amp;originHeight=280&amp;originWidth=567&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54027&amp;status=done&amp;style=none&amp;taskId=udbfacf3a-3fb5-408b-86e3-a12bc902a0e&amp;title=&amp;width=630.000016689301" alt="image.png"><br><a name="RT62d"></a></p><h4 id="实时布料物理模拟动画的应用">实时布料物理模拟动画的应用</h4><p>布料模拟取决于物理资产的精细程度<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666778759391-1629d5b8-4811-4559-b5a1-86946bbde9ba.png#averageHue=%238e8a7e&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=1370&amp;id=u7d33d242&amp;originHeight=1233&amp;originWidth=2502&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1607019&amp;status=done&amp;style=none&amp;taskId=u850ce4ee-9528-4ecc-a6d6-c20506c19df&amp;title=&amp;width=2780.000073644852" alt="image.png"></p><p><a name="zOwkn"></a></p><h1>角色动画制作教程(旧教程，忽略了)</h1><p>这个教程有点老了，17年的。<br>教程链接<a href="https://www.bilibili.com/video/BV1Va4y1E7jQ?p=2&amp;spm_id_from=pageDriver&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1Va4y1E7jQ?p=2&amp;spm_id_from=pageDriver&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a><br><a name="Ju7P4"></a></p><h2 id="准备角色导出">准备角色导出</h2><p><a name="lnKDO"></a></p><h3 id="角色的属性查看">角色的属性查看</h3><p>首先角色有且只有一个根骨骼，骨骼组织不能被破坏。<br>蒙皮的方法使用线性<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666754263119-89d2368c-45e1-40bd-9092-ebc3ae28d317.png#averageHue=%234b4949&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=351&amp;id=u2d6cf9e8&amp;originHeight=351&amp;originWidth=726&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18810&amp;status=done&amp;style=none&amp;taskId=u0f526ff5-e453-46d0-8065-8a11301f7c8&amp;title=&amp;width=726" alt="image.png"><br><a name="G5VxO"></a></p><h3 id="为角色添加blendshape">为角色添加blendshape</h3><p>选中角色<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666755698031-9524d7ec-2b93-4311-be41-fb56bcb04033.png#averageHue=%237a7474&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=116&amp;id=u22dba22b&amp;originHeight=116&amp;originWidth=329&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6215&amp;status=done&amp;style=none&amp;taskId=u9d11b355-6fa9-4e84-9d07-0271d62382b&amp;title=&amp;width=329" alt="image.png">添加blendshape，然后在shape editor中<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666755734919-004aa9ea-cb9b-41de-b1cd-2ed6b3933de7.png#averageHue=%23525050&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=319&amp;id=ue101e01d&amp;originHeight=319&amp;originWidth=425&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24228&amp;status=done&amp;style=none&amp;taskId=u4b06c6fb-5f3a-4050-ac55-b470d256dbc&amp;title=&amp;width=425" alt="image.png">进行操作。<br>选中blendshape节点，右键添加目标<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666755754305-8447ab57-2d72-4954-b6d8-3c74ff1773bb.png#averageHue=%23b28462&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=45&amp;id=u997a1ddb&amp;originHeight=45&amp;originWidth=230&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1980&amp;status=done&amp;style=none&amp;taskId=u35ae9538-5184-4a14-b4e6-fb155555d1e&amp;title=&amp;width=230" alt="image.png">，然后会自动进入编辑模式，正在编辑的目标会显示为红色，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666755790632-01fa90ae-d652-4934-a540-43bdf7f1ba31.png#averageHue=%23a67953&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=129&amp;id=uba493448&amp;originHeight=129&amp;originWidth=607&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8731&amp;status=done&amp;style=none&amp;taskId=u730e500c-979f-4a14-9df5-84dae4768d5&amp;title=&amp;width=607" alt="image.png">显示为红色时会记录针对角色进行的变换，变换完以后，点击edit即可。<br>目标节点右键可以使用duplicate target 复制，然后使用flip target 翻转目标，即可快速制作一个对称方向的目标节点。（也就是做了右边后使用此操作快速生成左边的）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666755874202-9b19d9e0-541c-420b-8b57-78d342dc5a80.png#averageHue=%234f4e4e&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=403&amp;id=u849596ff&amp;originHeight=403&amp;originWidth=395&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14541&amp;status=done&amp;style=none&amp;taskId=ud87af53c-fe65-4c18-8974-ffd61a6f190&amp;title=&amp;width=395" alt="image.png">，mirror target是镜像，镜像和翻转的区别是，镜像是再原来的基础上生成一个对称的，翻转是将现在移动到对称位置。<br><a name="BVTsu"></a></p><h3 id="导出设置">导出设置</h3><p>以FBX格式导出，勾选平滑组<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666757047873-08f98dce-c52a-4e0c-b0e1-54a502883929.png#averageHue=%23515150&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=58&amp;id=u16a9770a&amp;originHeight=58&amp;originWidth=422&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2048&amp;status=done&amp;style=none&amp;taskId=u2f00fa10-c200-466c-85e4-fecbcec14a7&amp;title=&amp;width=422" alt="image.png">，如果有动画的话就bake一下动画：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666757080836-e18c46d6-ca5b-4b11-8db9-56703ca510cb.png#averageHue=%23484847&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=166&amp;id=u59c859ce&amp;originHeight=166&amp;originWidth=485&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5531&amp;status=done&amp;style=none&amp;taskId=ud54bb39e-42f4-4446-a1b0-063c1c6f833&amp;title=&amp;width=485" alt="image.png">，如果模型有进行变形操作那么就勾选这些<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666757119253-e5df2a52-847c-46b2-b58f-957a934fa865.png#averageHue=%234a4a49&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=103&amp;id=ub7ed4d78&amp;originHeight=103&amp;originWidth=324&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2864&amp;status=done&amp;style=none&amp;taskId=u95818301-f36e-4dd0-af17-0d853e15e82&amp;title=&amp;width=324" alt="image.png">，fbx版本用高版本就行，具体需要时去看虚幻官网的建议<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666757249631-b2bce30d-9a49-4598-ab52-33a94a0c61cf.png#averageHue=%23515050&amp;clientId=u7f0c56e4-b48f-4&amp;from=paste&amp;height=101&amp;id=u06cd5875&amp;originHeight=101&amp;originWidth=560&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5701&amp;status=done&amp;style=none&amp;taskId=ud6b994f9-70c8-44e6-8671-ae763fde05a&amp;title=&amp;width=560" alt="image.png"><br><a name="mKgFB"></a></p><h2 id="导入角色到引擎">导入角色到引擎</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666837540945-8181ae0f-64ff-4b77-afa5-ae5d0866623f.png#averageHue=%23434343&amp;clientId=u1f668136-c0b9-4&amp;from=paste&amp;height=899&amp;id=u289c643b&amp;originHeight=809&amp;originWidth=424&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=100620&amp;status=done&amp;style=none&amp;taskId=uecf65043-3842-4736-ab22-a1abe05a424&amp;title=&amp;width=471.11112359129385" alt="image.png"><br>带有变形目标的骨骼网格体使用的材质需要勾选使用变形目标，不勾选也行，当修改骨骼网格体的变形目标的参数时，编辑器会自动勾选，只需要保存一下材质即可。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666840836191-aa84d054-388a-48fa-85b9-e161cfe2c38f.png#averageHue=%23868e83&amp;clientId=u1f668136-c0b9-4&amp;from=paste&amp;height=389&amp;id=ubb9f8084&amp;originHeight=350&amp;originWidth=539&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=147146&amp;status=done&amp;style=none&amp;taskId=u670ffff3-8646-476c-b440-de6972d80f4&amp;title=&amp;width=598.8889047540268" alt="image.png"><br>导入动画时，推荐勾选删除变形目标曲线。<br><a name="O5gKt"></a></p><h2 id="相关知识点">相关知识点</h2><p><a href="https://docs.unrealengine.com/5.0/zh-CN/skeletal-mesh-sockets-in-unreal-engine/">https://docs.unrealengine.com/5.0/zh-CN/skeletal-mesh-sockets-in-unreal-engine/</a><br><a name="C1u6m"></a></p><h1>【官方培训】17-UE角色动画</h1><p><a href="https://www.bilibili.com/video/BV1m841177jW/?spm_id_from=333.999.0.0&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">[官方培训]17-UE角色动画 | Epic 戴浩军_哔哩哔哩_bilibili</a><br><a name="tgDyS"></a></p><h2 id="影视动画行业动画环节特点分析">影视动画行业动画环节特点分析</h2><ul><li>角色动画数据量大，保真度要求高</li><li>目前较为依赖外部DCC</li><li>是品质打磨的重点环节，需要频繁修改</li><li>同时存在动作捕捉和手调动画的需求</li><li>通常涉及到角色相关资产的整合</li></ul><p><a name="WtfXd"></a></p><h2 id="UE5角色动画相关工具和特性介绍">UE5角色动画相关工具和特性介绍</h2><p><a name="H5f1h"></a></p><h3 id="影视动画项目常用动画资产类型和动画概念">影视动画项目常用动画资产类型和动画概念</h3><p><a name="WxIef"></a></p><h4 id="骨骼动画">骨骼动画</h4><p>用骨骼位置和蒙皮信息带动骨骼网格体的模型顶点位置，从而实现模型的动画效果。<br><a name="WwUcU"></a></p><h4 id="动画曲线-2">动画曲线</h4><p>可以在引擎中读取，或者在动画编辑器中添加和编辑的动画曲线数据。有三种曲线：属性曲线，变形目标曲线，材质曲线。<br><a name="P8W7h"></a></p><h4 id="姿势资产">姿势资产</h4><p>通过将动画拆分成不同的姿势并储存为一个资产，让我们可以通过动画曲线驱动姿势的方式来实现动画效果。在影视动画项目中，通常用于驱动角色的面部表情动画<br><a name="qapkL"></a></p><h4 id="变形目标-2">变形目标</h4><p>对应maya的blend shape。是通过在不同的模型顶点形态之间插值，结合动画曲线来实现形变动画的一种方式。通常用来表现角色身体和面部的姿势变形。<br><a name="UEUA9"></a></p><h4 id="物理动画-2">物理动画</h4><p>通过结合物理资产，动画蓝图，动态动画节点等方式，在已有的动画表演基础上增加基于物理的角色动画修饰效果，在游戏等交互项目中应用比较广泛。在影视动画项目中通常可以用来制作例如马尾，尾巴，挂坠，天线等物理动画<br><a name="wYdQN"></a></p><h4 id="groom-cache毛发缓存动画">groom cache毛发缓存动画</h4><p>虚幻引擎专门针对groom毛发的动画缓存数据，专门用于将外部预解算的毛发动画通过alembic格式导入到引擎中，播放后能够看到动画效果，显然通常用来实现角色的毛发预计算动画效果。<br><a name="IZWXP"></a></p><h4 id="几何缓存动画">几何缓存动画</h4><p>通过alembic等中间格式，从外部DCC软件导入UE的顶点缓存动画。通过UE的的alembic导入器，我们可以选择导入为静态网格体加世界顶点偏移材质还是骨骼网格体加骨骼动画还是Geometry Cache几何缓存，通常用来制作角色服装上的较为飘逸的布料，飘带或是特殊镜头中角色形态剧变的动画。<br>不推荐大量使用几何缓存动画来实现常规的角色肢体动画需求<br><a name="ahrZk"></a></p><h4 id="控制绑定（ControlRig）">控制绑定（ControlRig）</h4><p>UE内置的实时绑定系统，让我们可以在引擎编辑器中通过类似编辑蓝图节点的方式，可视化，交互式的编写绑定逻辑脚本，同时支持前向后向解算，结合UE的动画模式让我们可以直接在sequence中手动创作动画数据，或者修改实时动捕得到的动画数据。<br><a name="xrafq"></a></p><h4 id="IK绑定-IK-Rig">IK绑定(IK Rig)</h4><p>UE5新增的实时绑定系统，让我们能够使用直观交互的方式为各类骨骼网格体创建实时的IK动画解算器，并保存到IKRig资产中。然后我们就可以在其他动画系统，例如动画蓝图中动态修改解算器参数，对角色进行基于IKRig的实时动画调整。<br><a name="rlMdK"></a></p><h4 id="IK重定向-IK-Retargeter">IK重定向(IK Retargeter)</h4><p>基于IKRig的重定向系统，为我们提供了全新的IK重定向资产编辑器，和批量重定向工具。相比以往UE4中的位移重定向方案，IK重定向支持在骨架结构完全不同的角色间进行动画资产重定向或实时动画重定向<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673504580078-d5d0f29c-565d-478f-9f0d-82c1c4b349a1.png#averageHue=%238f9281&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=694&amp;id=u4196e73c&amp;originHeight=694&amp;originWidth=816&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=343179&amp;status=done&amp;style=none&amp;taskId=ud74a242e-69af-4fb9-96bf-270f7c4f873&amp;title=&amp;width=816" alt="image.png"><br><a name="VwlbR"></a></p><h4 id="后处理动画蓝图">后处理动画蓝图</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673504724625-fc424f93-5e29-41c5-bf2f-8cc0d75c4c64.png#averageHue=%23515349&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=1187&amp;id=u0eb2fdce&amp;originHeight=1187&amp;originWidth=1685&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=712391&amp;status=done&amp;style=none&amp;taskId=u1cb248a0-0d82-448c-87ce-7aa004f981a&amp;title=&amp;width=1685" alt="image.png"><br>能够在角色现有的动画蓝图，最终动画效果基础上，利用类似IK，骨骼控制等程序化功能使角色得到更为丰富的实时动画效果，这在游戏类交互项目中更为常用，但对于影视动画来说同样可以作为优化动画流程的一种参考手段<br><a name="hwgWA"></a></p><h3 id="布料模拟动画">布料模拟动画</h3><ol><li>在类似MD，Maya，houdini等外部DCC软件中制作布料模型并进行物理解算之后，作为alembic动态几何体缓存数据导入虚幻引擎。(这样做虽然可以可以确保动画布料的精度，但如果相关设计需要频繁修改也会导致角色动画环节甚至环境制作环节都需要为此付出不可忽视的成本，比如在引擎内制作的角色骨骼动画可能和布料产生交互的物体等都需要导出到外部DCC软件，此外布料的风力和引擎内方向风源相互独立也需要手动匹配，同时如果资产比较重，也会带来导入导出管理传输相关的成本)</li><li>在创作阶段使用实时布料模拟结合角色骨骼动画预览整体效果，确定后再把角色骨骼动画导出到外部DCC软件并将物理解算后的布料几何缓存导回引擎。UE5的chaos布料编辑器操作和UE4的ncloth布料编辑器操作基本一致。 主要流程就是在制作布料模型时制作用于渲染的高精度模型和用于物理模拟的解算模型，指定不同的材质来确保导入引擎后成为不同的模型分段，<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673506618847-b11db02e-6a83-4876-82f8-e1afe38e9ad0.png#averageHue=%23272725&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=375&amp;id=ub589bc18&amp;originHeight=375&amp;originWidth=790&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75546&amp;status=done&amp;style=none&amp;taskId=u5f5521a8-5e59-4888-9d9c-ed9c41d8977&amp;title=&amp;width=790" alt="image.png">然后在骨骼网格体编辑器中对解算模型分段创建布料数据<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673505569747-89b046b1-1d3b-4263-9f03-92c2c4f47a41.png#averageHue=%235d6661&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=601&amp;id=OMG8B&amp;originHeight=601&amp;originWidth=971&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=320811&amp;status=done&amp;style=none&amp;taskId=u603bebbd-2e46-41aa-968d-c7e8346154d&amp;title=&amp;width=971" alt="image.png">调节物理模拟参数并使用笔刷针对不同目标绘制遮罩，比如最大距离，逆止距离等<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673505674409-65b439c1-f7e5-47b2-a818-55a041554d7b.png#averageHue=%23636361&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=329&amp;id=u31f01238&amp;originHeight=329&amp;originWidth=105&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36345&amp;status=done&amp;style=none&amp;taskId=ubcb4779f-f9b4-4ecc-811f-b95f054e019&amp;title=&amp;width=105" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673505643149-d006fd78-cf33-4bbb-8642-f151a4ace7da.png#averageHue=%233b3b35&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=477&amp;id=YMzBU&amp;originHeight=477&amp;originWidth=666&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=136928&amp;status=done&amp;style=none&amp;taskId=u94c347fd-4831-4906-a3a2-af224b49f5a&amp;title=&amp;width=666" alt="image.png">。     然后在渲染模型分段上应用布料数据<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673505741587-ecb1f70a-64c4-4c26-94af-7601c4ba406e.png#averageHue=%23a6aa53&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=434&amp;id=uafc472b5&amp;originHeight=434&amp;originWidth=844&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=200737&amp;status=done&amp;style=none&amp;taskId=u80eac1bc-0650-4835-9328-21e7fb675d5&amp;title=&amp;width=844" alt="image.png">并且进行布料平滑数据设置<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673505799055-e7cc1941-a7d8-438f-8ac2-f598a4741b41.png#averageHue=%23383e3c&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=346&amp;id=u51aaed53&amp;originHeight=346&amp;originWidth=464&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=115993&amp;status=done&amp;style=none&amp;taskId=u2f872d1e-ba47-40cd-828a-f1231d53f30&amp;title=&amp;width=464" alt="image.png">就可以得到实时的布料解算效果了。<br><a name="G4Pg7"></a></li></ol><h3 id="实时布料碰撞">实时布料碰撞</h3><p><a name="gHEMN"></a></p><h4 id="在UE5中存在两种布料碰撞形式：">在UE5中存在两种布料碰撞形式：</h4><p>1.环境碰撞<br>（包括角色骨骼网格体的其他分段以及场景），碰撞信息来自场景的简单碰撞。对于角色而言就是物理资产中跟随骨骼的物理体，对于场景而言就是静态网格体的简单碰撞(这里的简单碰撞不支持多边形碰撞<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673507583587-1ea73cc2-3c61-4467-b4e8-ffcb9a2a15c2.png#averageHue=%232d2d2c&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=231&amp;id=uc4419109&amp;originHeight=231&amp;originWidth=458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37615&amp;status=done&amp;style=none&amp;taskId=u4cd3c166-aad5-436f-a45a-214c033a16d&amp;title=&amp;width=458" alt="image.png">或者是将简单碰撞用作复杂碰撞<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673507612749-6684e881-7ebd-4dfc-be97-35219598f41d.png#averageHue=%23333333&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=181&amp;id=ud862f851&amp;originHeight=181&amp;originWidth=690&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56594&amp;status=done&amp;style=none&amp;taskId=ud4f58b0d-bc05-4c5c-937d-a6fd18a378c&amp;title=&amp;width=690" alt="image.png">)。<br>在UE5中为了提升角色肢体物理碰撞的精确度，除了手动为某根骨骼添加多个物理体之外，我们还可以从某个静态网格体中读取碰撞体形状来获得由多个简单物理形状组合而成的较为精确的物理体(可以跟随骨骼运动但不支持形变)<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673507847249-0ca3739d-cc23-458d-a448-c08a05f1e75b.png#averageHue=%2346544c&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=1042&amp;id=u81255a9c&amp;originHeight=1042&amp;originWidth=1820&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1005094&amp;status=done&amp;style=none&amp;taskId=uca5e2d85-103a-41f5-b00c-80258849b1f&amp;title=&amp;width=1820" alt="image.png"><br>2.布料自碰撞<br>仅限于布料解算模型分段自身的高精度碰撞检测<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673508037688-045784ea-f344-411c-9821-8b8cabc34848.png#averageHue=%2385873e&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=920&amp;id=u450c6f58&amp;originHeight=920&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=310080&amp;status=done&amp;style=none&amp;taskId=u542020b9-92e5-4d94-8eae-bce57dc09df&amp;title=&amp;width=1060" alt="image.png"><br>本身用来实现布料横向摩擦碰撞产生褶皱形态或者是同一模型分段的多层布料之间的碰撞效果，性能消耗较高，对于复杂模型要慎用，对于简单角色模型也可以使用自碰撞来实现布料和角色肢体局部之间的精确碰撞。<br><a name="pkSCu"></a></p><h3 id="chaos布料的更新内容">chaos布料的更新内容</h3><p>1.在UE5.1中chaos布料得到了多项更新，其中新增的布料模拟缓存功能让我们可以在sequence中将布料实时模拟的结果保存为一个资产并且可以高性能可控的回放，结合布料自碰撞为全实时流程带来了可能。<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673509700757-736a3ed5-3833-4e7a-b0bc-9cd0c9a9854d.png#averageHue=%2336342e&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=384&amp;id=u48592133&amp;originHeight=384&amp;originWidth=920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=129769&amp;status=done&amp;style=none&amp;taskId=u0a1d36e3-5051-4e3f-9b83-139da41a314&amp;title=&amp;width=920" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673509714532-d63d4836-38d3-433d-8cde-0257b413404a.png#averageHue=%23282828&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=114&amp;id=u0850b71f&amp;originHeight=114&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10604&amp;status=done&amp;style=none&amp;taskId=ub41cc258-354b-4080-bc12-cf3ef2e4c6c&amp;title=&amp;width=340" alt="image.png"><br>2.布料压力控制<br>用来模拟布料自身向外或向内的固有压力，对于制作比如气球等布料效果比较有帮助。还可以通过绘制布料压力遮罩来区分不同区域布料的压力数值<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673510346775-0a964490-96c8-407a-9569-b2923e01c88b.png#averageHue=%23323230&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=448&amp;id=u506ee790&amp;originHeight=448&amp;originWidth=612&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=129828&amp;status=done&amp;style=none&amp;taskId=u6f42f99a-9928-4c31-a303-2092076babd&amp;title=&amp;width=612" alt="image.png"><br>3.布料自碰撞的改进<br>可以针对自碰撞设置额外的步进值来提升碰撞精度，通过调整自穿插精度来修复默认碰撞无法应对的穿插问题，还可以通过新增的自碰撞摩檫力参数来调整布料的褶皱形态。<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673510548706-4763d3e4-8f40-4fe7-bd6b-858368c365cc.png#averageHue=%233e3e3e&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=344&amp;id=ua58d501f&amp;originHeight=344&amp;originWidth=634&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65626&amp;status=done&amp;style=none&amp;taskId=u9c6beb10-4c28-4df7-ae14-15edca77b2b&amp;title=&amp;width=634" alt="image.png"><br><a name="iErg9"></a></p><h3 id="Control-Rig-控制绑定">Control Rig 控制绑定</h3><p><a name="hRmeD"></a></p><h4 id="ControlRig蓝图编辑器如何使用">ControlRig蓝图编辑器如何使用</h4><p>1.加载插件<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673511329710-39e77c7c-1301-444a-8c8f-d62ea7f63646.png#averageHue=%233b3a31&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=432&amp;id=ubcd39bbe&amp;originHeight=432&amp;originWidth=906&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=130600&amp;status=done&amp;style=none&amp;taskId=u25e8be24-a5ba-4f4a-9a1c-6cf962c18ac&amp;title=&amp;width=906" alt="image.png"><br>2.创建蓝图<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673511452103-e8a6737b-c0a0-4995-921b-cd8a0e2b2d11.png#averageHue=%2351524d&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=522&amp;id=u2990ac02&amp;originHeight=522&amp;originWidth=651&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=151079&amp;status=done&amp;style=none&amp;taskId=u7742c8ac-09cd-4b58-932c-ba072f31ede&amp;title=&amp;width=651" alt="image.png"><br>进入ControlRig蓝图编辑器在左下角导入层级选择骨骼网格体<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673512285686-f1a33899-7db3-417d-a2ca-fc2a891a4094.png#averageHue=%23313131&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=215&amp;id=ue6c2fb10&amp;originHeight=215&amp;originWidth=788&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38361&amp;status=done&amp;style=none&amp;taskId=u9e57cadb-9ef4-4292-b1d2-26d2c7c8b57&amp;title=&amp;width=788" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673512536543-1496237e-5dc8-44ff-837b-fecdb354d821.png#averageHue=%23848870&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=1241&amp;id=u05e2d9a8&amp;originHeight=1241&amp;originWidth=686&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=492699&amp;status=done&amp;style=none&amp;taskId=u75ab3b6b-e009-4b00-864c-c74f30d4ae9&amp;title=&amp;width=686" alt="image.png"><br>这里的骨骼层级与ControlRig资产之间并不是绑定关系，而是纯粹的读取。<br>蓝图中的三个事件节点：<br>不同的绑定逻辑有不同的执行时机。<br>向前解析（用的最多的解析事件）：指的是在编辑器中，通过ControlRig来驱动骨骼时所执行的绑定逻辑。无论是在Sequence中用ControlRig的控制器来创作动画还是在运行时用ControlRig实时修饰动画，执行的都是向前解析节点之后的绑定逻辑。<br>向后解析：一般用于在Sequence中将现有的骨骼动画烘焙到控制器上。在这里一般用骨骼的数据来驱动控制器。<br>设置事件：只在ControlRig运行的时候执行一次，通常在这里编写用于初始化的绑定逻辑</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673513058013-bfac7832-a48b-42d2-a844-829b3535144d.png#averageHue=%232a2726&amp;clientId=u2524db96-4be8-4&amp;from=paste&amp;height=461&amp;id=u7c6676e9&amp;originHeight=461&amp;originWidth=336&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=89053&amp;status=done&amp;style=none&amp;taskId=u12b25e72-9684-4ec4-bbbb-4eed1150dae&amp;title=&amp;width=336" alt="image.png"></p><p><a name="ChdNJ"></a></p><h2 id="常见问题及最佳实践">常见问题及最佳实践</h2><p><a name="duoEv"></a></p><h3 id="如何在UE5中确保可控的动画品质">如何在UE5中确保可控的动画品质</h3><p>首先要通过各类参考来明确动画品质的目标，最好能针对重要的镜头提供较为精准的动画脚本和参考视频，来帮助动画设计师快速了解品质需求，降低沟通成本。<br>然后是通过技术手段和审查机制量化动画数据，提高动画数据的保真度，<br>另外要尽可能在统一的技术环境中生产和修改动画数据，减少数据交换频次，避免因为导入导出产生的差错和数据的精度损失。<br>推荐使用Control Rig结合动画模式在引擎中创作动画，最大程度减少角色动画数据的导入导出，最后在流程上，由于动画项目中对动画环节的修改较为频繁，最好能通过性价比较高的方式快速决定动画整体效果，然后再跟随项目阶段快速迭代细节。<br><a name="naT5B"></a></p><h3 id="如何在UE5中通过优化动画流程来降低协作成本">如何在UE5中通过优化动画流程来降低协作成本</h3><p>首先在设计阶段就可以把角色动画进行拆分，例如参考metahumen并且结合自身项目自身要求，把例如身体动画，表情动画，衣服布料动画，毛发动画，拆分成不同的资产和动画环节，按照统一的标准由专人分别负责制作。这样更便于提炼出更通用的绑定标准。 <br>针对例如角色身体，建立适合项目的通用绑定资产，适用于尽可能多的人形角色，最大化资产多次复用的可能性，也降低了因为绑定标准的不同带来的沟通成本。<br>在角色蓝图中将这些部件进行拼装整合，使动画设计师能够像操纵完整的骨骼网格体一样，针对这个角色蓝图在引擎中创作动画。</p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE4 BenCloward教程</title>
      <link href="/2023/08/29/UnrealEngine-UE4-BenCloward%E6%95%99%E7%A8%8B/"/>
      <url>/2023/08/29/UnrealEngine-UE4-BenCloward%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="ejnU5"></a></p><h1>Ben Cloward材质课</h1><p><a name="e2fe0"></a></p><h2 id="课程贴图设置">课程贴图设置</h2><p>如果实现的效果不是很好可能是贴图压缩设置问题，因为教程很多贴图都是混合的，因此虚幻引擎可能无法准确的判断出贴图的正确压缩以及颜色设置，因此将贴图设置成<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640693735902-705d7a68-90b5-483c-8d5b-9bae040f05b2.png#clientId=u434c1aaf-447b-4&amp;from=paste&amp;height=180&amp;id=uf5893fa2&amp;originHeight=180&amp;originWidth=420&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12156&amp;status=done&amp;style=none&amp;taskId=u7727b55e-ab61-4112-a383-16637572208&amp;title=&amp;width=420" alt="image.png">是最好的质量。<br><a name="VkO5s"></a></p><h2 id="什么是着色器">什么是着色器</h2><p>着色器是控制屏幕上每个像素颜色的代码<br><a name="B8xuo"></a></p><h2 id="扭曲着色器">扭曲着色器</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637824890952-3c76a9be-eb4f-4bb2-b42b-8019f1f99891.png#clientId=u6fdcd340-1ad3-4&amp;from=paste&amp;height=528&amp;id=ubf3f9b36&amp;originHeight=528&amp;originWidth=1043&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=556233&amp;status=done&amp;style=none&amp;taskId=ue3a43be0-e204-4efc-a1de-dc91c3d8e29&amp;title=&amp;width=1043" alt="image.png"><br>解析：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637825142570-c3b1db99-2d2b-4055-8a7d-f1c7af8b2a86.png#clientId=u6fdcd340-1ad3-4&amp;from=paste&amp;height=136&amp;id=uc37793d8&amp;originHeight=136&amp;originWidth=121&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32904&amp;status=done&amp;style=none&amp;taskId=u3a711a15-01db-47a3-868e-d41543479d5&amp;title=&amp;width=121" alt="image.png">此贴图相当于将不同的noise灰度图分别储存到3个通道中。<br>其中扭曲效果由此连接法产生，连接法的作用是为其不同地方添加很小的偏移数值实现扭曲。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637825278892-bdf103c3-8008-4c9d-a49a-e43446b8c532.png#clientId=u6fdcd340-1ad3-4&amp;from=paste&amp;height=536&amp;id=u60940a1d&amp;originHeight=536&amp;originWidth=890&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=382400&amp;status=done&amp;style=none&amp;taskId=u8a044fb5-4997-49ba-953e-4f3bf8139c5&amp;title=&amp;width=890" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637825300822-504d1743-0707-4d8b-99ff-76a5172e6380.png#clientId=u6fdcd340-1ad3-4&amp;from=paste&amp;height=283&amp;id=u3054bf31&amp;originHeight=283&amp;originWidth=321&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=247608&amp;status=done&amp;style=none&amp;taskId=u36df7276-5a00-4950-af1d-628d777d6e1&amp;title=&amp;width=321" alt="image.png"><br>其中time节点和texcoord节点相加可以使Texture Sample的贴图在对角线处匀速移动，于是为Time节点乘以不同数值的float 2 节点可以实现非线性运动，通过<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637825781598-c32fc9d7-2203-4fa5-a0d4-64b72c99fcfb.png#clientId=u6fdcd340-1ad3-4&amp;from=paste&amp;height=231&amp;id=u0c7049b4&amp;originHeight=231&amp;originWidth=227&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88831&amp;status=done&amp;style=none&amp;taskId=u5de3c631-3a66-4058-a4cc-2303bbf93bb&amp;title=&amp;width=227" alt="image.png">不同数值的灰度图的叠加可以打破重复度。<br>可以参考海洋材质的水的移动制作思想<br><a name="OlmB6"></a></p><h2 id="特效翻页动画（图像序列视图-Flipbook序列图）">特效翻页动画（图像序列视图/Flipbook序列图）</h2><p>**Flipbook 序列图：**在DCC软件中如maya，blender，houdini，embergen 把制作好的流体，烟雾等等，烘焙成序列帧的形式，到UE4的材质里用flipbook节点播放，或者在粒子里用subuvindex播放。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637911686717-6cc1837d-92d6-4913-a3b0-23b9159c5253.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=474&amp;id=uc0dddcdb&amp;originHeight=1423&amp;originWidth=1538&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1410491&amp;status=done&amp;style=none&amp;taskId=u230d5c74-d6c8-4065-8a2b-c10ae5a2a68&amp;title=&amp;width=512.6666666666666" alt="image.png">粒子特效纹理，相当于一个6<em>6=36帧的动画。<br>flipbook节点是专门读取这种贴图而存在的。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637912117136-137fa793-ef60-45cd-9a31-e9ff02158a0d.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=244&amp;id=ufadc4ae9&amp;originHeight=731&amp;originWidth=2398&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=684301&amp;status=done&amp;style=none&amp;taskId=ua8a19c07-5079-430c-9a55-d8b50b0da78&amp;title=&amp;width=799.3333333333334" alt="image.png"><br>其中乘以0.8的意义：如果不乘以0.8，那么此着色器得到的是每秒30帧的动画过程，如果需要的是输出每秒24帧的动画那么只需要乘以0.8就可以得到符合视频的动画效果。因为30</em>0.8=24。<br>6的意义是指纹理是6*6帧的。<br>如果不使用FlipBook可以使用此节点连法。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637913113991-839b256a-4758-42b9-9d8b-516a9a02394a.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=281&amp;id=u8d08f88c&amp;originHeight=844&amp;originWidth=2794&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=881736&amp;status=done&amp;style=none&amp;taskId=uc2aeefd8-b5f8-4131-a539-d8245b9e84d&amp;title=&amp;width=931.3333333333334" alt="image.png"><br>这里的time的结束时间是1.5，乘的数值是24（最终输出视频的每秒帧数），结果是36，36对应的是第36个的贴图，floor使线性的函数变成了，意义是使一个连续的动画变成了有间隔的动画。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637914787309-14f162e2-acde-469c-83d7-8f3c16c66d79.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=282&amp;id=ub4ec203b&amp;originHeight=845&amp;originWidth=965&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55509&amp;status=done&amp;style=none&amp;taskId=u27ec843a-d34b-4666-819d-0a5b0a097f5&amp;title=&amp;width=321.6666666666667" alt="image.png"><br>frac节点的意义是只输出小数点后的数值。<br>循环输出对角线从<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637911686717-6cc1837d-92d6-4913-a3b0-23b9159c5253.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=474&amp;id=K760z&amp;originHeight=1423&amp;originWidth=1538&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1410491&amp;status=done&amp;style=none&amp;taskId=u230d5c74-d6c8-4065-8a2b-c10ae5a2a68&amp;title=&amp;width=512.6666666666666" alt="image.png">左上角到右下角的动画：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637915295890-557b843b-f584-47bf-b1d5-f97bb5d58513.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=289&amp;id=uc62fcb26&amp;originHeight=868&amp;originWidth=2621&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=785328&amp;status=done&amp;style=none&amp;taskId=u4bd3e7da-b271-4b0d-9018-798a17a0297&amp;title=&amp;width=873.6666666666666" alt="image.png"><br>使可以从1~6，6~12，12~18，18~24,24~30,30~36依此播放。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637913113991-839b256a-4758-42b9-9d8b-516a9a02394a.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=281&amp;id=EAzPq&amp;originHeight=844&amp;originWidth=2794&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=881736&amp;status=done&amp;style=none&amp;taskId=uc2aeefd8-b5f8-4131-a539-d8245b9e84d&amp;title=&amp;width=931.3333333333334" alt="image.png"><br><a name="wPZYt"></a></p><h2 id="环境材质混合">环境材质混合</h2><p>基础实现：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639819852407-b2a2c87a-f59c-43be-b190-d67d19d11432.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=714&amp;id=u9deb2e31&amp;originHeight=714&amp;originWidth=1161&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=570030&amp;status=done&amp;style=none&amp;taskId=u25e319da-2e1e-4426-8fbf-eb06ee739df&amp;title=&amp;width=1161" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639820046474-9708d2d8-ac24-40b0-bb3f-d093de863a00.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=478&amp;id=u020bcc0c&amp;originHeight=478&amp;originWidth=535&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=308119&amp;status=done&amp;style=none&amp;taskId=ua3c4e59a-7aa5-4670-a9a9-980f9cfe58b&amp;title=&amp;width=535" alt="image.png"><br>vertexnormal的B通道得出模型从下到上-1~+1的数值，其中add加的数值控制的是混合范围，Power控制的混合的对比度，数值越大则边界线越明显，clamp使数值保持在0~1的范围之间，可以用saturate代替，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639820322614-423a8ad8-1dd9-447e-a980-956480c187b6.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=163&amp;id=ud900ed3c&amp;originHeight=163&amp;originWidth=540&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72062&amp;status=done&amp;style=none&amp;taskId=uab0cf812-73d4-4d97-9ea5-c015faab081&amp;title=&amp;width=540" alt="image.png">此过程得到的是一个黑白图，无论模型旋转到什么角度都会使另一个材质混合在上方。<br>法线贴图在切线空间中。VertexNormal是在世界空间中（由节点的WS（world space）可以得出）<br>将数学计算替换成</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639820713922-8fe4f4e7-fa94-4d64-8395-57fda9693839.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=283&amp;id=u9b3653d4&amp;originHeight=283&amp;originWidth=499&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=93922&amp;status=done&amp;style=none&amp;taskId=u98c6969d-e760-4fcc-ba2c-a1e25fe42a1&amp;title=&amp;width=499" alt="image.png">其中TransformVector作用是转换空间<br>通过将法线的切线空间转换为世界空间再进行B通道的遮罩<br>可以得到这样的遮罩黑白图<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639820757724-8e19f396-7aaf-468b-aa43-0ccbdcebce55.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=426&amp;id=udb14f857&amp;originHeight=426&amp;originWidth=501&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=257360&amp;status=done&amp;style=none&amp;taskId=ubbbe9d01-c289-41dd-9ed6-e9b2b9123cd&amp;title=&amp;width=501" alt="image.png"><br>可以使混合是依据法线细节的<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639820863870-a80cf8b0-35b2-4ae0-8e79-d16dd663734c.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=384&amp;id=u6d605816&amp;originHeight=384&amp;originWidth=470&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=279184&amp;status=done&amp;style=none&amp;taskId=u0d53dc13-1478-4184-8baf-69d4a96bf5c&amp;title=&amp;width=470" alt="image.png">。<br><a name="iTMOE"></a></p><h2 id="着色器性能优化">着色器性能优化</h2><p>第一种查看着色器复杂度方式：alt+8快捷键进入着色器复杂程度视图，绿色为简单，红色为中等，白色为复杂。<br>第二种：进入材质窗口中观察着色器执行的指令数量。但这不是一个很好的方式，因为并非所有的指令都是消耗相同的时间。<br>第三种：也是最准确的一种，将着色器应用于要使用的平台，对比着色器应用前后的性能差距。<br>优化着色器的方法<br>第一种：删除没有提供任何效果的节点连线。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639921294481-d2faa781-48d0-4d4b-b1b1-010d2e52b502.png#clientId=ua3196c8d-51d4-4&amp;from=paste&amp;height=169&amp;id=ueaf5d905&amp;originHeight=169&amp;originWidth=1663&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31462&amp;status=done&amp;style=none&amp;taskId=u2d15e8e9-ba25-4952-84d1-435c06a2b20&amp;title=&amp;width=1663" alt="image.png"><br>get rid of anything you’re not using<br>第二种：重构数学实现方式，使用不同的方法实现相同的效果。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639921368471-86dc01cd-a55f-4f23-981d-30d724898447.png#clientId=ua3196c8d-51d4-4&amp;from=paste&amp;height=149&amp;id=u5ca1321b&amp;originHeight=149&amp;originWidth=1324&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24804&amp;status=done&amp;style=none&amp;taskId=u21cc31b9-7fb6-43c5-b683-75b5248c48c&amp;title=&amp;width=1324" alt="image.png"><br>举例：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639977741793-4aedd784-ff86-4846-8bfa-afbb0cf7208a.png#clientId=u67341e96-c423-4&amp;from=paste&amp;height=737&amp;id=u4b29febd&amp;originHeight=737&amp;originWidth=1177&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=561789&amp;status=done&amp;style=none&amp;taskId=uf868a3ec-a4ee-44eb-aaeb-19e5787e496&amp;title=&amp;width=1177" alt="image.png">通过减乘加替换power节点可以节省需要的指令数，减乘加的思想解释：其中乘法的数值控制的是对比度强弱的程度，此处减0.5乘1加0.5是无对比度，运算思想是使接近0.5的数值（灰色）进行运算后向白色靠近，而小于0.5的数值进行运算后向黑色靠近，依据此运算思想达到增加对比的效果而且使着色器指令更少。<br>第三种：将数值结合到一起运算<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639978235390-5af6c2c3-2584-4e5f-99b5-69788e085905.png#clientId=u67341e96-c423-4&amp;from=paste&amp;height=172&amp;id=u074a40cd&amp;originHeight=172&amp;originWidth=1675&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51511&amp;status=done&amp;style=none&amp;taskId=ue7a94cdf-1d88-49dd-8ee8-491b5145f6a&amp;title=&amp;width=1675" alt="image.png"><br>举例:<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639978420828-a9d3031b-c732-4910-98d8-c335826076c1.png#clientId=u67341e96-c423-4&amp;from=paste&amp;height=733&amp;id=u4bb0f29c&amp;originHeight=733&amp;originWidth=1019&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=513116&amp;status=done&amp;style=none&amp;taskId=uc11833fb-b9d1-4f81-a0b7-d60e3a228f7&amp;title=&amp;width=1019" alt="image.png"><br>将相同的运算方式但是不同数值的数学整合到一起再分成不同通道使用。<br><strong>举例二</strong><br>将贴图合并，例如将只带有黑白信息的ORM贴图合并到一起。<br><a name="BboKl"></a></p><h2 id="凹凸与视差贴图">凹凸与视差贴图</h2><p>首先凹凸与视差节点的输出都是针对贴图的坐标UV的，它们依赖高度图。高度图中的白色为凸出，越白越凸出<br>BumpOffset与视差节点（POM）都是通过视觉效果实现的凹凸感，过程是通过渲染多张相同的材质效果但是带一些偏移来形成凹凸的视觉效果。<br>凹凸节点使用：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639821053805-28932542-f008-436d-91f7-83c452f8558c.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=556&amp;id=u22e96ca8&amp;originHeight=556&amp;originWidth=761&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=377764&amp;status=done&amp;style=none&amp;taskId=u75bad28a-92d7-4962-a8cc-585f307788d&amp;title=&amp;width=761" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639821463422-8d1bb732-f735-4eb8-93a0-6a7457cec01c.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=499&amp;id=u892cfbbf&amp;originHeight=499&amp;originWidth=767&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45948&amp;status=done&amp;style=none&amp;taskId=uc4ddfa89-ada9-4e8c-99ba-6aae8518837&amp;title=&amp;width=767" alt="image.png"><br>一般使用时通常只需要控制HeightRatio的数值来控制凹凸强度。<br>POM节点是bump节点的进阶用法，它可以获得相比bump offset更好的效果，但是相应的性能消耗也会提高。<br>一般只会使用这么多节点<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639821682286-b8f58f92-b6bc-432b-b9ba-d0c5280205bc.png#clientId=u5a00d30a-4e1f-4&amp;from=paste&amp;height=439&amp;id=u943eb42a&amp;originHeight=439&amp;originWidth=806&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=239017&amp;status=done&amp;style=none&amp;taskId=u2508ea62-e20a-4932-8f5d-f951f4f11e9&amp;title=&amp;width=806" alt="image.png"><br>其中Height Ratio控制凹凸强度<br>Min Setps（默认为2）  Max Step的数值越大得到的效果越好。  heightmap Channel控制的是要读取的高度贴图属于哪个通道的，例如如果将高度图放到了G通道就将0，1，0，0输入。<br>再进阶(栗子的课程)：<br>会有锯齿效果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288570864-eda1d8b0-7b52-4a2e-8c7a-2bffc425cb37.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=471&amp;id=u655081f8&amp;originHeight=471&amp;originWidth=752&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=517995&amp;status=done&amp;style=none&amp;taskId=u02e68282-2c4e-4d4a-b910-52a249e82e6&amp;title=&amp;width=752" alt="image.png"><br>配合dither temporal AA<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288627080-d98035b4-f3b6-436a-95b9-e567ae209f85.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=71&amp;id=ucf18f79c&amp;originHeight=71&amp;originWidth=315&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3963&amp;status=done&amp;style=none&amp;taskId=u72573e19-e6c2-49e9-94f2-85033b2cfab&amp;title=&amp;width=315" alt="image.png">可以模糊锯齿  DTAA可以理解为抖动像素，让不同深度的像素产生混合效果来来实现融合边缘的效果<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1626067046470-69f31526-9ad6-4438-b311-8a25c89588bd.png#clientId=udb44799c-ae35-4&amp;from=paste&amp;height=382&amp;id=u2ee0e05d&amp;originHeight=382&amp;originWidth=942&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=389067&amp;status=done&amp;style=none&amp;taskId=uc1e23757-b50e-441b-8f66-93d5ca6aadb&amp;title=&amp;width=942" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288717339-5630f847-4328-42bc-98f2-49e538f403c4.png?x-oss-process=image%2Fresize%2Cw_583%2Climit_0#from=url&amp;id=n6Uad&amp;originHeight=341&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt>。<br><a name="thLL4"></a></p><h2 id="织物着色器（不更改光照模型的情况下模拟）">织物着色器（不更改光照模型的情况下模拟）</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639978768281-8617e7c8-64f1-40e0-b492-40d2fbbda88c.png#clientId=u67341e96-c423-4&amp;from=paste&amp;height=734&amp;id=u38f7df64&amp;originHeight=734&amp;originWidth=918&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=450585&amp;status=done&amp;style=none&amp;taskId=u9aca3913-91d0-4ac0-bfb9-d3d6ae1060e&amp;title=&amp;width=918" alt="image.png"><br>其中camera vector 和pixelNormalWS进行dot运算的结果是类似菲涅尔的效果（边缘黑中间白）<br>然后power控制的是对比度，乘法运算控制的是强度。<br>反向和不反向的相加到一起是为了既能够控制中间的亮度也能够控制边缘的亮度（为了能够模拟不同布料的效果）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1639979004552-8b3db5a0-b4ce-4428-a533-08749b48d7ce.png#clientId=u67341e96-c423-4&amp;from=paste&amp;height=681&amp;id=u55f677d1&amp;originHeight=681&amp;originWidth=700&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=572017&amp;status=done&amp;style=none&amp;taskId=u39160624-4594-4b8f-86fc-b4ea4724d47&amp;title=&amp;width=700" alt="image.png"><br>将法线贴图从切线空间转换为世界空间再与camera vector 进行dot运算的作用是使菲涅尔效果是能够根据模型细节变化而变化的，（可以参考环境材质混合中使用法线贴图的作用)。<br><a name="Ifbbo"></a></p><h2 id="体积冰着色器">体积冰着色器</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640184918858-8bf2054b-36bb-4e34-a21e-afd13ed49b64.png#clientId=uff50c105-6843-4&amp;from=paste&amp;height=766&amp;id=u316f18bf&amp;originHeight=766&amp;originWidth=1716&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=298984&amp;status=done&amp;style=none&amp;taskId=ubc6172ff-d808-4b2a-a6c0-8792ad07f0d&amp;title=&amp;width=1716" alt="image.png"><br>其中<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640012241218-0be91701-b2df-4a6e-879e-4856ea103d1a.png#clientId=u8fc0f64a-3d05-4&amp;from=paste&amp;height=349&amp;id=ub8b7deba&amp;originHeight=349&amp;originWidth=874&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=234561&amp;status=done&amp;style=none&amp;taskId=u24027563-ded1-4621-99bd-9e2a04c76d4&amp;title=&amp;width=874" alt="image.png">作用是根据摄影机的改变纹理会跟着改变，法线贴图的作用是使表面不是光滑的（0,0,1）,是带有细节的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640012366609-4a3e9c3c-6d32-448c-baa4-ab6b330811ac.png#clientId=u8fc0f64a-3d05-4&amp;from=paste&amp;height=236&amp;id=ubbcffee1&amp;originHeight=236&amp;originWidth=731&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=141448&amp;status=done&amp;style=none&amp;taskId=u4cb41d63-9bb4-43a0-aaaf-c93cf901693&amp;title=&amp;width=731" alt="image.png"><br>除100控制的是纹理整体向远离摄影机位置偏移的大小，利用贴图替换100可以实现有些远离摄影机有些不远离。<br>后面乘1/512，是匹配贴图的分辨率。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640012600908-781b2689-998c-4f70-b9af-c2442f982c58.png#clientId=u8fc0f64a-3d05-4&amp;from=paste&amp;height=671&amp;id=u52d41c8c&amp;originHeight=671&amp;originWidth=652&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=408460&amp;status=done&amp;style=none&amp;taskId=u2b9b1af0-5752-48db-8b4c-506c3a4c55c&amp;title=&amp;width=652" alt="image.png"></p><p><a name="ehbso"></a></p><h2 id="MatCap着色器">MatCap着色器</h2><p>首先了解一下MatCap纹理<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640010694033-0879ceaf-e220-4d0f-a910-162eb9655979.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=232&amp;id=u70d26647&amp;originHeight=232&amp;originWidth=827&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=180360&amp;status=done&amp;style=none&amp;taskId=u0921b0b0-eecb-4873-8a79-d7027cabe9b&amp;title=&amp;width=827" alt="image.png"><br>制作MatCap着色器的主要思想是无论摄影机处于什么位置，物体总是以相同的纹理图案呈现在窗口上面。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640010773343-b3f56ebd-3172-431a-bad5-b8092ea9b946.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=713&amp;id=u8bd98e0b&amp;originHeight=713&amp;originWidth=1203&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=387029&amp;status=done&amp;style=none&amp;taskId=uf4a26742-733c-421f-883e-aab803c4dab&amp;title=&amp;width=1203" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640010914715-787dd504-2de7-490a-ad6b-645a71713825.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=212&amp;id=uf5de272a&amp;originHeight=212&amp;originWidth=208&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48717&amp;status=done&amp;style=none&amp;taskId=u1559e3cb-6b8c-42e6-9ed7-4c45d0818fe&amp;title=&amp;width=208" alt="image.png"><br>如果只是单纯的将顶点法线空间转换为视图空间的RG通道赋予贴图UV会得到<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640010955666-016cd180-fd9b-4de6-8db5-2a3068d79679.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=354&amp;id=u3fe7ab6d&amp;originHeight=354&amp;originWidth=349&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=139406&amp;status=done&amp;style=none&amp;taskId=u263ca96b-1fbd-4836-9d74-3d8834c3544&amp;title=&amp;width=349" alt="image.png">因此经过数学运算后<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640010986533-e89a7143-5cda-4055-ac60-4ee8ce8eabc1.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=184&amp;id=u47c846ba&amp;originHeight=184&amp;originWidth=576&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69184&amp;status=done&amp;style=none&amp;taskId=u95fcd003-29c8-454c-8470-7d9a1153903&amp;title=&amp;width=576" alt="image.png">其中带G通道进行了负号运算是为了进行垂直翻转。</p><p>MatCap着色器也称为球面投影，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640010823107-37f95846-afe4-4894-a060-648d824318b0.png#clientId=ucec13de9-5e0d-4&amp;from=paste&amp;height=393&amp;id=u9b808367&amp;originHeight=393&amp;originWidth=393&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98721&amp;status=done&amp;style=none&amp;taskId=u30480bf7-b9ef-4612-8969-3928953607d&amp;title=&amp;width=393" alt="image.png"><br><a name="ARc50"></a></p><h2 id="摇曳树叶着色器">摇曳树叶着色器</h2><p><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640185080436-b560ce33-0678-4fe0-99f7-c94baf50bec8.png#clientId=uff50c105-6843-4&amp;from=paste&amp;height=1013&amp;id=u3b6fc5f7&amp;originHeight=1013&amp;originWidth=1700&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=302947&amp;status=done&amp;style=none&amp;taskId=u77c46cb8-0611-41f5-ac19-c91025879aa&amp;title=&amp;width=1700" alt="image.png"><br><a name="UR2M7"></a></p><h2 id="雨水着色器">雨水着色器</h2><p>首先要了解下雨的特点<br>下雨后路面颜色改变，物体表面吸水会让颜色变暗饱和度变高。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640593305482-1f9acc9b-0380-485f-94b1-a7e93fca671c.png#clientId=u4aa6ce16-a77b-4&amp;from=paste&amp;height=317&amp;id=u4183c232&amp;originHeight=317&amp;originWidth=451&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=193900&amp;status=done&amp;style=none&amp;taskId=u3993464a-436c-4c3e-b0ac-17d35bc7fb0&amp;title=&amp;width=451" alt="image.png"><br>粗糙度降低，并且要注意有些物体是表面渗水的有些物体是表面不渗水的。<br>还有涟漪，水坑，水珠，流淌水滴的特点。<br><a name="lVeaB"></a></p><h3 id="雨的湿度着色器">雨的湿度着色器</h3><p>首先颜色饱和度的控制通过desaturation去饱和度节点<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640594273036-eb1db6d0-f18e-4bbb-8bcb-1ff65de0527b.png#clientId=u4aa6ce16-a77b-4&amp;from=paste&amp;height=212&amp;id=u2b52600a&amp;originHeight=212&amp;originWidth=426&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60206&amp;status=done&amp;style=none&amp;taskId=uf5d88c36-3f5a-4459-bd16-66d47ad265b&amp;title=&amp;width=426" alt="image.png">控制，为其设置一个负值可以增加饱和度。<br>这里是得到一个饱和度更高颜色更暗的颜色设置。<br>材质函数写法：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640795354567-dcceb492-fb52-4353-93f1-a5a172f48cb4.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=736&amp;id=ue93eb574&amp;originHeight=736&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=206137&amp;status=done&amp;style=none&amp;taskId=u2fdeb9c8-ab69-4201-9bb9-af62e41cf54&amp;title=&amp;width=1125" alt="image.png"><br>其中0.07和0.3控制的是有水的地方的粗糙度和高光。<br>水的高光值是比默认材质0.5的高光小的。<br><a name="Vl0ZK"></a></p><h3 id="表面水珠着色器">表面水珠着色器</h3><p>首先解析制作效果所需要的贴图<br>红绿通道：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640606750751-f951549d-8fc5-432c-b5a0-d199dbeef8d5.png#clientId=u4aa6ce16-a77b-4&amp;from=paste&amp;height=424&amp;id=u2a8fff45&amp;originHeight=424&amp;originWidth=420&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=231981&amp;status=done&amp;style=none&amp;taskId=ua5e5e54c-8312-46f8-ac7f-05013754d8a&amp;title=&amp;width=420" alt="image.png"><br>红绿通道是用来配合append一个数值为1的标量来充当法线的<br>蓝色通道：这是一个时间偏移遮罩，这个遮罩让每个雨滴都在不同的时间出现<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640606856194-29d82fa1-abc4-4b88-a5c4-db235ac6ed94.png#clientId=u4aa6ce16-a77b-4&amp;from=paste&amp;height=416&amp;id=uad940706&amp;originHeight=416&amp;originWidth=415&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=85327&amp;status=done&amp;style=none&amp;taskId=uf1ffdecc-8c8d-42a1-94dc-e177be59a91&amp;title=&amp;width=415" alt="image.png"><br>alpha通道：小黑点们代表我们想让他们成为静止的水滴，白色的代表我们想让他们动起来的水滴，动静结合<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640606889454-fd3953ac-a84c-458f-8b76-0c3495dfcd1a.png#clientId=u4aa6ce16-a77b-4&amp;from=paste&amp;height=421&amp;id=u474c48e9&amp;originHeight=421&amp;originWidth=421&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=211989&amp;status=done&amp;style=none&amp;taskId=u74a9db0a-681a-441d-88ce-a5b5cd55921&amp;title=&amp;width=421" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640790536664-9fb6ce5c-8887-4a9c-bafa-172f2c5a34be.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=1670&amp;id=u41ecaba1&amp;originHeight=1670&amp;originWidth=3635&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=761178&amp;status=done&amp;style=none&amp;taskId=u8b0a33d4-e90f-4cf3-8b8f-879c0789626&amp;title=&amp;width=3635" alt="image.png"><br>材质函数写法：<br>此处主要对水滴的UV进行了改变，这里水滴改成了依照世界坐标的形式，并且可以通过更改Rain的输入值来更改水滴的强弱。并将输出改成了MASK和Normal<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640789994366-5c86c8a8-7930-4c78-8c44-4c02ffe4f916.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=1240&amp;id=u4d81fa01&amp;originHeight=1240&amp;originWidth=2277&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=498473&amp;status=done&amp;style=none&amp;taskId=ua811c926-4a98-4cf0-919d-a5fbe445fb3&amp;title=&amp;width=2277" alt="image.png"><br><a name="jrmRK"></a></p><h3 id="流淌雨滴着色器">流淌雨滴着色器</h3><p>依然是先介绍所需要的贴图。<br>第一张：<br>红绿通道：用来制作法线贴图（需要乘2减1加一个数值为1的通道才能得到正确的法线效果）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640678519138-59ed052b-5dd4-4dfe-9d24-2244e4e140bb.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=313&amp;id=uc86088dd&amp;originHeight=313&amp;originWidth=311&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51143&amp;status=done&amp;style=none&amp;taskId=u5c3229de-adc6-4d34-881d-e0af5b3e6c5&amp;title=&amp;width=311" alt="image.png"><br>蓝通道：控制雨滴的掉落轨迹<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640678543574-c4f3ed09-9f29-4d6e-a407-3472dfcfae14.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=318&amp;id=u7eac0703&amp;originHeight=318&amp;originWidth=315&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=53243&amp;status=done&amp;style=none&amp;taskId=u30c9adc1-3730-4ec8-a7dd-9aff0dfddf2&amp;title=&amp;width=315" alt="image.png"><br>alpha通道：时间蒙版，为了使雨滴落下的时间是不统一的<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640678561321-a67ec3eb-aeeb-4891-9f24-9af3d0adf66d.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=319&amp;id=u9e184497&amp;originHeight=319&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1322&amp;status=done&amp;style=none&amp;taskId=u90637de8-a85a-4145-8a32-e70a8a49c2b&amp;title=&amp;width=316" alt="image.png"><br>第二张：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640678590613-2caad0da-0f5b-40f2-ad66-0e9e97d75ecd.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=551&amp;id=u57e0e850&amp;originHeight=551&amp;originWidth=202&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4397&amp;status=done&amp;style=none&amp;taskId=ub10f5ae2-5071-43d9-8dc9-21a15583ca5&amp;title=&amp;width=202" alt="image.png"><br>三个通道都是有一片区域为从1到0的一小块渐变<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640679220516-90f351ec-20a1-4cba-993a-05c0140470b7.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=661&amp;id=u054522a6&amp;originHeight=661&amp;originWidth=231&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6641&amp;status=done&amp;style=none&amp;taskId=u40265373-eb7f-4c5c-9062-5199f158126&amp;title=&amp;width=231" alt="image.png"><br>作用是制作雨滴的遮罩，使雨滴不是统一颜色的。<br>材质编辑器：<br>首先复习一下材质节点的作用：<br>world positon 绝对世界位置，作用是输出每个像素的世界位置信息<br>sign：正数输出1，零输出0，负数输出-1<br>round：  对小数部分四舍五入<br>实现此材质效果适用于任何模型，（纹理是随着世界空间平铺的）只针对XY不针对Z<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640683382755-20b24628-db94-4356-ab4a-07a531e19d84.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=207&amp;id=u895e1024&amp;originHeight=207&amp;originWidth=237&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=61506&amp;status=done&amp;style=none&amp;taskId=u73a15ef1-cedc-4c36-9941-ae3fe500023&amp;title=&amp;width=237" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640683266331-67157596-dfe4-4605-a709-8128712140e6.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=672&amp;id=u21fbda9e&amp;originHeight=672&amp;originWidth=1447&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=220507&amp;status=done&amp;style=none&amp;taskId=u6c0ac071-a76b-402d-8868-7f3d7c1f857&amp;title=&amp;width=1447" alt="image.png"><br>但是这种效果我觉得使用全局一致纹理也能达到差不多的效果。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640683432099-f8effe1c-20d7-4e99-abb4-87542d79a465.png#clientId=u1295fa07-04b8-4&amp;from=paste&amp;height=485&amp;id=ua58b76d8&amp;originHeight=485&amp;originWidth=735&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=82200&amp;status=done&amp;style=none&amp;taskId=u1a3ee947-f575-4ae4-98ab-1adf329d626&amp;title=&amp;width=735" alt="image.png"><br>整体：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640771339483-7bd04b38-d5e0-4170-8bb8-c87eaa609727.png#clientId=u8bffab1e-e229-4&amp;from=paste&amp;height=1672&amp;id=u1511cf5c&amp;originHeight=1672&amp;originWidth=3651&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=761846&amp;status=done&amp;style=none&amp;taskId=u35247144-fa08-4233-94e1-b7eb4e7f962&amp;title=&amp;width=3651" alt="image.png"><br>转换为材质函数：更改了一下数值使其更符合现实；输入雨的强度来控制水滴的强度（0~1）,输入表面渗入性来更改是否有雨滴的流淌速度。（但是我觉得这两个输入应该反过来）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640790682202-9bb20d91-ad1f-4033-aa13-6c24554ca2b6.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=1672&amp;id=uc2eb189d&amp;originHeight=1672&amp;originWidth=3625&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=727756&amp;status=done&amp;style=none&amp;taskId=u48a44b6b-b55e-4fdd-b8a3-12ef492016e&amp;title=&amp;width=3625" alt="image.png"><br><a name="BgdvE"></a></p><h3 id="雨滴涟漪着色器">雨滴涟漪着色器</h3><p>首先此连接目的是制作材质函数，为的是针对不同模型可以快速的使用此函数添加涟漪效果。<br>首先了解一下贴图<br>R通道：制作动态涟漪效果使用<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640694106552-b8d7fb0d-2deb-4ccb-87df-7f715c9497eb.png#clientId=u434c1aaf-447b-4&amp;from=paste&amp;height=366&amp;id=u0f210896&amp;originHeight=366&amp;originWidth=359&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=70259&amp;status=done&amp;style=none&amp;taskId=u8867158b-1af9-4155-bcb4-82677df5091&amp;title=&amp;width=359" alt="image.png"><br>GB通道：配合增加一个通道制造法线<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640694147023-46bc3905-a559-480e-a1f4-ace960b94b7d.png#clientId=u434c1aaf-447b-4&amp;from=paste&amp;height=365&amp;id=u52aeb41a&amp;originHeight=365&amp;originWidth=368&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=137551&amp;status=done&amp;style=none&amp;taskId=u9762d662-2ad0-4aa0-ba0e-66449d06e5c&amp;title=&amp;width=368" alt="image.png"><br>A通道：时间mask，使涟漪出现的时间有差别。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640694212837-e988bae2-f706-4d2a-8080-1d8a06bdb011.png#clientId=u434c1aaf-447b-4&amp;from=paste&amp;height=366&amp;id=ucf9a675a&amp;originHeight=366&amp;originWidth=361&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=74465&amp;status=done&amp;style=none&amp;taskId=ub875874f-1a24-4ca8-a727-e8475d98ccd&amp;title=&amp;width=361" alt="image.png"><br>先看涟漪材质的连接<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640695915304-3f9ec423-35f0-46ee-8f93-1f3b58da5d97.png#clientId=u434c1aaf-447b-4&amp;from=paste&amp;height=1014&amp;id=u9901e721&amp;originHeight=1014&amp;originWidth=2258&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=352188&amp;status=done&amp;style=none&amp;taskId=ucf353a9f-19de-447c-a633-1e7735994f2&amp;title=&amp;width=2258" alt="image.png"><br>函数制作以及改进版：<br>教程中在涟漪数量那里，乘了一个圆周率并将sine的周期改成了6.283185，我不知道为什么要这么改。<br>删除了控制涟漪速度的节点，因为等一下再创建一个材质函数，作用是将四个不同涟漪效果合并成一个涟漪效果，然后再创建一个最终的材质函数，在这个最终的函数中制造四个不同的数值赋予给涟漪函数和涟漪合并函数，最终输出法线。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640791382060-bdab80cd-fce9-4a47-8e45-3d580e499d1c.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=1032&amp;id=uea15afb8&amp;originHeight=1032&amp;originWidth=2319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=360917&amp;status=done&amp;style=none&amp;taskId=u9e03c6dd-ca61-4c5d-b0ac-9386eab8d18&amp;title=&amp;width=2319" alt="image.png"><br>合并涟漪效果函数：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640699311228-0b085e22-e738-4fe4-a296-d08b10c91e12.png#clientId=u434c1aaf-447b-4&amp;from=paste&amp;height=1008&amp;id=u15493db5&amp;originHeight=1008&amp;originWidth=2479&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=401937&amp;status=done&amp;style=none&amp;taskId=uc9917546-0f01-407f-a028-107f35dc21f&amp;title=&amp;width=2479" alt="image.png"><br>最终涟漪函数：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640792202517-2be328a6-84d4-4cda-9dfb-572d40c744e5.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=1462&amp;id=u2192e703&amp;originHeight=1462&amp;originWidth=2160&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=559557&amp;status=done&amp;style=none&amp;taskId=uf662bdd8-9aca-4ae2-87a7-aea0fd5f466&amp;title=&amp;width=2160" alt="image.png"><br><a name="eOu1V"></a></p><h3 id="水坑着色器">水坑着色器</h3><p>制作水坑着色器首先需要一个能够代表水坑位置的黑白图，此处使用之前课上的一张贴图的G通道图来代替。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640753890671-1b09e662-6938-427a-88b9-dc5734ce3558.png#clientId=u33b067b9-d59e-4&amp;from=paste&amp;height=475&amp;id=u22a2292f&amp;originHeight=475&amp;originWidth=472&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=104082&amp;status=done&amp;style=none&amp;taskId=uc44571d0-79c0-4d8c-a811-040e47f803e&amp;title=&amp;width=472" alt="image.png"><br>制作水坑仍然使用根据绝对世界位置映射贴图的方法。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640792255901-4a83e702-572d-4ef6-b613-c383854e3730.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=1432&amp;id=u150d4c8f&amp;originHeight=1432&amp;originWidth=2275&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=455151&amp;status=done&amp;style=none&amp;taskId=ue50628dc-b0d7-4f0c-a5d6-f6594463ff1&amp;title=&amp;width=2275" alt="image.png"><br>这里解释一下这为什么Puddles参数能控制蒙版的大小，可以直接看当Puddles为0时，减去0，除以一个特别小的值，那么蒙版就几乎全白，再1-x就几乎全黑就是无水坑，当Puddles趋向于1时，减去的数增加，除的数增大，黑色的就越多，然后再反转就得到了白色的。<br>风吹涟漪材质函数：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640760190145-a0503b32-84b9-41d5-988c-2d5a110fcc95.png#clientId=u33b067b9-d59e-4&amp;from=paste&amp;height=1336&amp;id=ue343dfb7&amp;originHeight=1336&amp;originWidth=2334&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=482359&amp;status=done&amp;style=none&amp;taskId=ue78a853d-7758-48e2-b812-c1efcec20eb&amp;title=&amp;width=2334" alt="image.png"><br><a name="bgLPn"></a></p><h3 id="完整雨水着色器">完整雨水着色器</h3><p>材质：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640795397412-8b927a8e-499e-445b-98a8-1e8305ae94fe.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=992&amp;id=u5a7a8a01&amp;originHeight=992&amp;originWidth=2605&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=437950&amp;status=done&amp;style=none&amp;taskId=u2011bf4f-43eb-4928-8d20-3170983d9ab&amp;title=&amp;width=2605" alt="image.png"><br>弄到材质函数中：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640798057257-0301bdb1-59ea-4d40-af8c-701c04c76bda.png#clientId=u00367ec4-d802-4&amp;from=paste&amp;height=992&amp;id=u3f60e464&amp;originHeight=992&amp;originWidth=2623&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=489545&amp;status=done&amp;style=none&amp;taskId=u851f15b6-c0e6-48d1-96a6-5ab5995f6b1&amp;title=&amp;width=2623" alt="image.png"><br>目前上面版本的shader可能是我们的下雨shader里性能消耗最昂贵的一种<br>所以我们要做的是，创建这个shader的不同版本<br>这取决于要施加雨水的对象的类型是什么<br>如果要把这个shader用到地板上，那么puddle肯定要的，但是我们不需要drips（因为他从侧面流下）<br>如果我们知道在雨中的这个物体没有大的平面，那么我们可能不需要puddle，需要drips和drops<br>所以可以的话我们需要根据这个shader创建这几种不同的版本，取决于应用的表面类型，去除不需要的效果</p><p>另外，在用蓝图做游戏的时候，我们这个shader所需要的参数可能是会从蓝图那边来（比如暴雨的启动和结束）<br>我们就需要了解蓝图以及如何从shader外引入值，这些自行了解即可<br><a name="pxAcb"></a></p><h2 id="程序化噪点">程序化噪点</h2><p>主要使用这个节点<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640841923591-6c3958d9-be4d-4217-9197-a62938f8b6fc.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=269&amp;id=udd89f437&amp;originHeight=269&amp;originWidth=363&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=70880&amp;status=done&amp;style=none&amp;taskId=u57a174f6-1d32-463a-b300-cd95fa03946&amp;title=&amp;width=363" alt="image.png"><br>perlin noise介绍：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640842067017-76d5eb20-260f-449a-a472-890608f37c56.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=378&amp;id=ua9917cc5&amp;originHeight=378&amp;originWidth=372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=71699&amp;status=done&amp;style=none&amp;taskId=ue11e5e6d-f586-419d-b6d8-9928637a4f7&amp;title=&amp;width=372" alt="image.png"><br>这是一个无限的非重复图案，图上展示的只是一小部分。我们通常不会直接使用它，因为我们可以以它为基本图案并对其进行大量修改。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640842115720-76a60e07-8a11-4aa1-86cc-b059f34c226a.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=690&amp;id=ua0594b1f&amp;originHeight=690&amp;originWidth=1547&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=455512&amp;status=done&amp;style=none&amp;taskId=u55c34a98-9879-46f0-adfb-67e8b03a837&amp;title=&amp;width=1547" alt="image.png"><br>右边这个图是我们比较熟悉的,PS中的渲染云彩滤镜就是使用了perlin noise<br>我们可以通过组合噪音来创建各种不同的噪音图案<br>perlin noise 的个别应用：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640842298008-90e4ef2f-3e85-4052-a33c-ec90563ba91e.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=833&amp;id=u3cae1ac3&amp;originHeight=833&amp;originWidth=1771&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2009031&amp;status=done&amp;style=none&amp;taskId=uae4eb8ca-2177-4a73-89c6-a4be06c15c0&amp;title=&amp;width=1771" alt="image.png"><br>perlin noise 广泛应用于地形生成过程纹理。<br>它是各种程序化生成的内容游戏的基础。<br>生成perlin noise的核心代码：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640842445861-8e5361cc-173b-4716-adf1-575176b75f4c.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=687&amp;id=ubc07aee9&amp;originHeight=687&amp;originWidth=1229&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=373147&amp;status=done&amp;style=none&amp;taskId=udf00e82b-a209-471e-bf89-13d464de921&amp;title=&amp;width=1229" alt="image.png"><br>当上面这些代码被shader编译的时候，大约会变成61个像素着色器的指令和8个纹理样本，Perlin噪声图用的时候，通常循环3~8次来获得所需要的图案作为mask（8次的话，就有488个指令和64个纹理样本）这样做虽然是可行的但是因为消耗过于昂贵，因此需要另外找其他办法。<br>方法一：利用三维空间重合perlin noise 将8个纹理样本合并为1个纹理样本。但是这样做会导致内存体积占的过于庞大这是它的缺点。并且要使用它的话需要使其在所有三个维度进行平铺，并且由于它是平铺的，因此不再是无限且非重复的。但是我们可以挑选彼此不对齐的纹理来隐藏平铺的效果。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640842902937-6bb7a37f-a9d6-45be-a262-10a28c57bf72.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=451&amp;id=u20a528da&amp;originHeight=451&amp;originWidth=779&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=160055&amp;status=done&amp;style=none&amp;taskId=u3f2fe5d7-11b9-455a-adc0-f9d1abce834&amp;title=&amp;width=779" alt="image.png"><br>在UE4中：如果选择3d纹理那一项，我们就是对Peilin噪声的体积纹理进行采样，而不是做代码中的各种数学运算<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640843210638-efaf0655-81bd-4d4f-82eb-b47dd2319ddc.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=621&amp;id=ucadb9091&amp;originHeight=621&amp;originWidth=1688&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=443953&amp;status=done&amp;style=none&amp;taskId=u380e2057-280f-4fb1-8223-31cc8fc4928&amp;title=&amp;width=1688" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640844427260-921ad68f-ed96-4f1f-822f-3cdcade7f7ae.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=372&amp;id=uc31d3ba8&amp;originHeight=372&amp;originWidth=367&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=317744&amp;status=done&amp;style=none&amp;taskId=ua5e018ca-1815-4dfd-8698-e0b3b1cf5f9&amp;title=&amp;width=367" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640844438583-e2580e63-80dd-4162-b25e-25e17a0cc732.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=140&amp;id=uf31a19ca&amp;originHeight=188&amp;originWidth=473&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29536&amp;status=done&amp;style=none&amp;taskId=udb660b81-51d8-4be3-94ba-2aaf6356000&amp;title=&amp;width=352" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640844457992-388dfdd1-f37c-43d6-8c88-8a1e0ea72883.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=392&amp;id=u9c8caa11&amp;originHeight=392&amp;originWidth=715&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=425319&amp;status=done&amp;style=none&amp;taskId=uf9dee7c8-eb0a-4c49-b6ae-c9054ff0515&amp;title=&amp;width=715" alt="image.png"><br>噪音节点的细节：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640845451506-2de3e84f-9506-4428-91ed-f9feedcd8610.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=290&amp;id=ua3604c09&amp;originHeight=290&amp;originWidth=290&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17571&amp;status=done&amp;style=none&amp;taskId=uc32492be-82e9-43f9-856d-f09545db6b3&amp;title=&amp;width=290" alt="image.png"><br>湍流的是否勾选决定了noise的组合方式，使用湍流noise更圆润<br>关卡的大小决定了noise的精细程度，最小输出和最大输出控制的是噪音的黑白程度。并且最小输出代表着黑色的值的大小。<br>一共可以选择这么多种噪音生成方式，一般使用第三个。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640845579087-4fda7db8-4589-4805-a79b-fdd564eaf1fa.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=105&amp;id=uc2543a33&amp;originHeight=105&amp;originWidth=142&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11111&amp;status=done&amp;style=none&amp;taskId=u0190978b-eef5-446d-8d2f-db664b19b8d&amp;title=&amp;width=142" alt="image.png"><br>Voronoi<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640845623337-ba131f42-8066-4577-b5a8-63e3274bc7ba.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=88&amp;id=pSuDE&amp;originHeight=88&amp;originWidth=314&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11187&amp;status=done&amp;style=none&amp;taskId=u281b6786-abcd-4670-b2f8-69cb69c65d5&amp;title=&amp;width=314" alt="image.png">可以生成这种noise。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640845685812-48aa7cc9-ab72-48d1-9d03-a645fea5af66.png#clientId=u6687c7fe-2385-4&amp;from=paste&amp;height=766&amp;id=uee2d63e7&amp;originHeight=766&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=296658&amp;status=done&amp;style=none&amp;taskId=u2c49658e-b62b-491b-a3f1-eb6eb5c9982&amp;title=&amp;width=1113" alt="image.png"><br><a name="rEwXr"></a></p><h3 id="枯木积雪着色器">枯木积雪着色器</h3><p>核心连法：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641449841802-b22aecf6-226f-40af-b020-2965e18594b1.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=896&amp;id=u23e400ab&amp;originHeight=896&amp;originWidth=1215&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=208445&amp;status=done&amp;style=none&amp;taskId=u8510db20-2707-4812-a94a-6a9974ea65b&amp;title=&amp;width=1215" alt="image.png"><br>作用：利用根据世界位置投射的noise使每个使用此材质的树都拥有不同的雪的覆盖。<br><a name="Olpot"></a></p><h3 id="层积岩着色器">层积岩着色器</h3><p>环境艺术家创造了一大堆岩石，我们要做的是把这些岩石塞在一起成为岩层<br>但是真正去做的时候，这些岩石就像是一堆混乱的石头，有什么方法能够让他们看起来像是放在一起的结构，方法便是程序化噪声<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641450069314-9c40d142-068c-47d6-95c7-16dd517f5b5e.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=582&amp;id=u349e25f0&amp;originHeight=582&amp;originWidth=648&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=427970&amp;status=done&amp;style=none&amp;taskId=ucd65cba6-9279-45bc-8735-a05bfb47077&amp;title=&amp;width=648" alt="image.png"><br>使用的贴图：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641453610761-6047aed4-2b6a-46d3-8b48-3ac385546775.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=677&amp;id=ufec94cff&amp;originHeight=677&amp;originWidth=188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11577&amp;status=done&amp;style=none&amp;taskId=ucff2b800-8fb1-4760-92e1-463d836b42c&amp;title=&amp;width=188" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641451420975-4040d394-8305-493a-bede-7ee87693d15e.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=719&amp;id=ue3223da9&amp;originHeight=719&amp;originWidth=1312&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=162645&amp;status=done&amp;style=none&amp;taskId=u9314de67-7829-4541-964e-ac2ffbe5be8&amp;title=&amp;width=1312" alt="image.png"><br>使用案例：将不同的岩石资产更好的拼接在一起。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641451138729-df004681-8800-4a0e-86be-58c0d929e91c.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=835&amp;id=u07806a82&amp;originHeight=835&amp;originWidth=1079&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1031232&amp;status=done&amp;style=none&amp;taskId=u2f5ae110-726d-4967-8e4a-d8fb8d80710&amp;title=&amp;width=1079" alt="image.png"><br><a name="lIX0a"></a></p><h3 id="与世界坐标对齐-World-Aligned-Shader">与世界坐标对齐 World-Aligned Shader</h3><p>适合程序化搭建时使用。例如洞穴<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641453340901-e1e8908f-c1d6-41d0-bc41-edfea2c68c2a.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=784&amp;id=u2917273e&amp;originHeight=784&amp;originWidth=1015&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=755985&amp;status=done&amp;style=none&amp;taskId=u68e7e8aa-3cba-4ec3-bfb2-456ffb31164&amp;title=&amp;width=1015" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641453264466-b8993b6c-26bc-4106-8dd2-63428fa8e9a3.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;id=uc9f873de&amp;originHeight=740&amp;originWidth=1398&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=583187&amp;status=done&amp;style=none&amp;taskId=ud1a8a878-27ae-4e0d-a405-fbdb173ce67&amp;title=" alt="image.png"><br><a name="MgtAQ"></a></p><h2 id="水流着色器">水流着色器</h2><p><a name="y108m"></a></p><h3 id="涟漪着色器">涟漪着色器</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641464792765-3532d6a5-6c05-4155-b630-eb6989ae7db6.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=1118&amp;id=u5cdce380&amp;originHeight=1118&amp;originWidth=2370&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=509613&amp;status=done&amp;style=none&amp;taskId=u4435fac7-a8b7-44d6-be00-c2313fa48c4&amp;title=&amp;width=2370" alt="image.png"><br>其中DeriveNormalZ_Function的作用是输入法线的XY信息通过计算得到Z的数值并附加XY最终输出正确的法线信息。<br>雨滴涟漪根据情况添加。<br><a name="XxeiS"></a></p><h3 id="水深着色器（根据水深得到河流不同地方的透明度）">水深着色器（根据水深得到河流不同地方的透明度）</h3><p>首先先回顾一下节点的介绍<br>Scene Depth：这个节点只适用于具有半透明属性的材质，它的作用是得到当前视口摄像机的位置与透过使用着色器的物体（河流）所看到的下一个物体之间的距离。<br>pixel depth：得到当前视口摄像机与像素之间的距离<br>绝对世界位置：物体每个像素的位置信息。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641470603052-ef0daf92-cd3c-4da2-bcf6-2b3571b710b0.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;id=u14ffb3da&amp;originHeight=609&amp;originWidth=908&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=170609&amp;status=done&amp;style=none&amp;taskId=ue216d92b-d2cc-47b7-aaa8-e5fd66f9580&amp;title=" alt="image.png"><br>首先先看ben教程中的计算水深的方法<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641470964059-285d7f4e-6e48-4fb0-a314-ab626685d7c7.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=776&amp;id=ue5719cfb&amp;originHeight=776&amp;originWidth=1384&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=196351&amp;status=done&amp;style=none&amp;taskId=u66227a01-50fd-431d-a86e-a300240ea54&amp;title=&amp;width=1384" alt="image.png"><br>此计算过程主要思想是通过相似三角形得到水深。<br>Scene Depth除以PixelDepth得到了比例。<br>之所以不直接通过摄像机减去object position得到摄像机到水面的距离是因为这样得到的数值是一个单一的值不是针对每个像素的，并且水面可能通过顶点动画而使一个平面有不同的高度值。这里不理解的是为什么要用1-x节点反转，他前面得到的是一个负值，后面应该乘-1或者用绝对值节点得到正确的。<br>这是示例图：举例ABCD四个地方通过此算法得到的水深数值。（原点在最下方）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641472168441-78ff309d-8430-4e97-8a02-b755338c74a7.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=761&amp;id=ua27db52e&amp;originHeight=761&amp;originWidth=967&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99974&amp;status=done&amp;style=none&amp;taskId=u8ab78ff4-8ff0-4073-ad68-70674e17359&amp;title=&amp;width=967" alt="image.png"><br>并且这个自我感觉有一些麻烦。<br>网上找的这个得到的结果应该是最精准的水深。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641472272521-4f76675c-5388-44d5-b6f1-1022c0fbf6f9.png#clientId=uf528f3e6-60a0-4&amp;from=paste&amp;height=393&amp;id=u1b2de2dc&amp;originHeight=393&amp;originWidth=646&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=125048&amp;status=done&amp;style=none&amp;taskId=u51e0291b-8785-4f22-b32c-285dabcd20f&amp;title=&amp;width=646" alt="image.png"><br>了解了水深的计算过程后我们需要的是通过水深得到相应的不透明度的变化<br>水越深的地方越颜色越暗不透明度越大，浅的地方是相反的。<br>水菲涅尔效应比较明显<br>因此通过此连接方法得到不透明度的变化和颜色变化。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641642774669-faa34c25-8093-4893-9d74-10dacdf3bde9.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=1030&amp;id=ue75a7156&amp;originHeight=1030&amp;originWidth=2689&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=370971&amp;status=done&amp;style=none&amp;taskId=uf53a6fc3-2d23-4b4d-8c8c-7031281f2ca&amp;title=&amp;width=2689" alt="image.png"><br><a name="h5VQx"></a></p><h3 id="水体反射与折射">水体反射与折射</h3><p>要在UE4中实现反射，应该一共有5种方法，教程中提到了三种，<br>第一种是天空盒，但水面只会反射天空，不能反射其他物体<br>第二种是<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641629493696-56145bee-0db7-4f37-a78a-0e192c7fc25b.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=95&amp;id=ub3d8aebb&amp;originHeight=95&amp;originWidth=218&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11878&amp;status=done&amp;style=none&amp;taskId=u53d64f95-c25d-4093-be3a-9d8477aa4af&amp;title=&amp;width=218" alt="image.png">作用是捕获四周的环境创建一个立方体贴图，然后利用立方体贴图进行反射。这个仅仅比天空盒好一些。<br>第三种是屏幕空间反射，需要在材质球中勾选<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641629805256-8efe9c9a-8532-46a8-89e6-2e77d3353c70.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=75&amp;id=u82eb49de&amp;originHeight=75&amp;originWidth=186&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5634&amp;status=done&amp;style=none&amp;taskId=u8b71f57e-532d-4529-b95e-f560d87abfb&amp;title=&amp;width=186" alt="image.png">这个效果很好，但是它只能实现反射窗口视图中的物体。举例：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641629869607-befe816f-1cc8-4686-934e-bc89df3cf186.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;id=ueb908d4a&amp;originHeight=574&amp;originWidth=1124&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=794824&amp;status=done&amp;style=none&amp;taskId=u679699b8-2776-45b9-8948-49ba24a8a69&amp;title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641629875080-c5e07e7f-7a72-41bc-8912-0286912f7d16.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;id=ueef530a8&amp;originHeight=620&amp;originWidth=1134&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=697135&amp;status=done&amp;style=none&amp;taskId=u21b9a011-8133-4857-a61f-fcc7e0ad093&amp;title=" alt="image.png"><br>这三种反射方法可以一起使用。<br>折射设置：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641635912570-003bf737-5894-44b6-88eb-98a67c8d1c39.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=141&amp;id=uda76913c&amp;originHeight=141&amp;originWidth=768&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50936&amp;status=done&amp;style=none&amp;taskId=u23fb302b-29df-47c9-a942-3d661d63610&amp;title=&amp;width=768" alt="image.png"><br>像素正常偏移适用于水面这类的大型折射表面。<br>使用折射率的造成的错误折射效果：<br>当视口向下偏移时一部分水面折射消失了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641636073194-b29a4da3-dd76-41a5-9cac-a600d4ba582c.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=567&amp;id=u3ce42f7a&amp;originHeight=567&amp;originWidth=1112&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=613226&amp;status=done&amp;style=none&amp;taskId=u3366bb7b-4a29-4243-9642-ebd3ddfed58&amp;title=&amp;width=1112" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641636092471-cd419fa3-04e9-47ac-858e-aea723c6f2af.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=398&amp;id=u742c7e48&amp;originHeight=398&amp;originWidth=1120&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=558236&amp;status=done&amp;style=none&amp;taskId=uc344c538-0af3-403b-a134-2d9e3d8429f&amp;title=&amp;width=1120" alt="image.png"><br>官网教程材质大师的举例：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641636412091-b5b82e8b-06d7-489e-92a5-ef5ec6612b79.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=586&amp;id=u14d42f5a&amp;originHeight=586&amp;originWidth=1454&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=839925&amp;status=done&amp;style=none&amp;taskId=u5670e1f8-4bcc-4853-92b5-010944690b0&amp;title=&amp;width=1454" alt="image.png"><br>河流的边缘折射率低，其余部分为标准折射率1.33。如下设置：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641643857352-2ca96b0b-53e7-4433-9d76-c15e2c715315.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;height=243&amp;id=u9cf8c003&amp;originHeight=243&amp;originWidth=752&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48427&amp;status=done&amp;style=none&amp;taskId=u3852f1b4-196b-459c-b07f-383a7b65924&amp;title=&amp;width=752" alt="image.png"><br><a name="zmHlL"></a></p><h3 id="Gerstner算法海浪">Gerstner算法海浪</h3><p>接下来通过顶点动画的形式通过数学计算配合函数生成海浪。<br>因为需要足够的顶点来实现顶点动画效果。增加模型的顶点数可以通过UE4自带的曲面细分来实现。<br>在材质球中的细节面板中为以下设置<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641716535084-545cc2e3-3c9e-4500-9d37-e7c4fd03a5d4.png#clientId=u290fc695-f701-4&amp;from=paste&amp;height=141&amp;id=u00faa88a&amp;originHeight=141&amp;originWidth=260&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11419&amp;status=done&amp;style=none&amp;taskId=ub1246599-3e8b-4113-a891-365787a3629&amp;title=&amp;width=260" alt="image.png"><br>通过曲面细分乘数来控制细分程度（不宜过大）。一般会使用相机和表面的距离来控制曲面细分乘数。<br>这里先使用0.5的细分乘数。<br>Gerstner算法的解释：<br>普通的sin波是上面那个趋势，而Gerstner波是下面这种趋势，Gerstner波更符合海浪的动画形式。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641644784764-5cea1759-544e-4c00-a8fb-5679eeb0cb05.png#clientId=ufc486b54-6866-4&amp;from=paste&amp;id=u525050e8&amp;originHeight=360&amp;originWidth=960&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=157092&amp;status=done&amp;style=none&amp;taskId=u11371af0-92a8-43d2-91d1-aa4c0a500fd&amp;title=" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641729954548-4e7ac442-368a-4e30-83e8-66910a0cfa8f.png#clientId=u290fc695-f701-4&amp;from=paste&amp;height=1430&amp;id=ub510fca3&amp;originHeight=1430&amp;originWidth=2015&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=632844&amp;status=done&amp;style=none&amp;taskId=u80951f8f-f930-4508-8d76-c2f81209321&amp;title=&amp;width=2015" alt="PreviewMaterial_12-MaterialGraph_0.png"><br>这里有个严重错误：最后append应该是反过来的应该是这样的，找了很长时间才发现的…<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641895036608-a048b0b9-7910-4bca-aeeb-02594d373187.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=315&amp;id=udbece243&amp;originHeight=315&amp;originWidth=367&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28469&amp;status=done&amp;style=none&amp;taskId=uab00becd-b579-44ec-9777-590db946486&amp;title=&amp;width=367" alt="image.png"><br>其中波长意思为这个距离<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641729274059-b05f026f-b7b4-42c5-8b4a-b7111913acf9.png#clientId=u290fc695-f701-4&amp;from=paste&amp;height=537&amp;id=u3def6b57&amp;originHeight=537&amp;originWidth=506&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=506230&amp;status=done&amp;style=none&amp;taskId=u997f00a0-2e81-472a-bbe7-1a57ffde95a&amp;title=&amp;width=506" alt="image.png"></p><p>陡度为1时：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641729379949-617ef62b-848d-4906-ac8a-f8b40dc66e41.png#clientId=u290fc695-f701-4&amp;from=paste&amp;height=222&amp;id=uff4c0a4d&amp;originHeight=222&amp;originWidth=513&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=193317&amp;status=done&amp;style=none&amp;taskId=ub13cc59c-1ec0-4fbb-a8e1-00a458c3fee&amp;title=&amp;width=513" alt="image.png"><br>陡度为0.3时<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641729398996-f0633fcc-c096-4710-a3d3-8594cb1ac1f5.png#clientId=u290fc695-f701-4&amp;from=paste&amp;height=153&amp;id=uca0be7db&amp;originHeight=153&amp;originWidth=428&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106682&amp;status=done&amp;style=none&amp;taskId=uc2f3e704-119d-49af-86a8-17fa9093074&amp;title=&amp;width=428" alt="image.png"><br>因为河流不是只有一个海浪而是很多个海浪因此将算法转换成材质函数多次调用。<br>只是简单的将方向 波长 波高 陡度（默认陡度给了0.3）变成了输入节点，输出有normal 和offset<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641729917884-a54bd738-8523-4ca5-83c8-bebf14edec3d.png#clientId=u290fc695-f701-4&amp;from=paste&amp;height=1268&amp;id=ud55711ef&amp;originHeight=1268&amp;originWidth=2133&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=637141&amp;status=done&amp;style=none&amp;taskId=u8742cd9a-bf15-4dc4-9b51-71a35c9044d&amp;title=&amp;width=2133" alt="Material_0-MaterialGraph_0.png"><br>这里转换为材质函数依然跟刚才那个错误一样：最后append应该是反过来的应该是这样的，找了很长时间才发现的…<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641895036608-a048b0b9-7910-4bca-aeeb-02594d373187.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=315&amp;id=BUjjC&amp;originHeight=315&amp;originWidth=367&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28469&amp;status=done&amp;style=none&amp;taskId=uab00becd-b579-44ec-9777-590db946486&amp;title=&amp;width=367" alt="image.png"><br>整合到主材质中：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641785599515-83fe85f9-076b-4710-a695-eff5a2717934.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=900&amp;id=u0d9cae6f&amp;originHeight=900&amp;originWidth=1495&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244736&amp;status=done&amp;style=none&amp;taskId=ucadb9e5e-611a-4c41-923f-8ba4b9d37b0&amp;title=&amp;width=1495" alt="image.png"><br>更改了一下颜色后的全部材质：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641785609795-57f5f180-dae4-4b90-9bdd-0cc94e7f453f.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=2366&amp;id=u609c585e&amp;originHeight=2366&amp;originWidth=3824&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1133349&amp;status=done&amp;style=none&amp;taskId=u824953ea-d65c-4fe0-8bd3-c833e6b91b9&amp;title=&amp;width=3824" alt="image.png"><br><a name="XQvXK"></a></p><h3 id="波光的焦散效果">波光的焦散效果</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641783233258-d2922861-e4d6-479c-834e-b39db59a09b8.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=757&amp;id=u20ff09a9&amp;originHeight=757&amp;originWidth=1364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=790695&amp;status=done&amp;style=none&amp;taskId=ud5bb871a-e760-431c-b1b0-84818b7cc01&amp;title=&amp;width=1364" alt="image.png"><br>要想在UE4中实现这种焦散效果，我们可以使用延迟贴花来达到。<br>步骤：<br>创建一个新的材质，将材质模式改为<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641786937226-74944c93-cbd1-4c06-b22c-0ba89b602417.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=162&amp;id=u4fa41727&amp;originHeight=162&amp;originWidth=315&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12765&amp;status=done&amp;style=none&amp;taskId=u3fb9e369-492c-49c8-abe5-4dfe1afb436&amp;title=&amp;width=315" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641794238126-dd873b8b-2f13-498d-92e3-96f49fe45a95.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=1076&amp;id=ua843d0b2&amp;originHeight=1076&amp;originWidth=3075&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=503360&amp;status=done&amp;style=none&amp;taskId=udb7ba1ba-729a-4811-b4db-a9ad56625c6&amp;title=&amp;width=3075" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645946005261-f2a494c4-c808-4e04-9356-67de1fd43643.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=530&amp;id=u9aaaf0d3&amp;originHeight=530&amp;originWidth=1030&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=144030&amp;status=done&amp;style=none&amp;taskId=u1cf6be62-39cb-4ce2-be3c-69c317a454d&amp;title=&amp;width=1030" alt="image.png"><br>这里利用世界场景法线进行绝对值并且四舍五入（只需要0或1的蒙版）然后取Z通道线性插值得到投射X平面和Z平面再进行通过线性插值得到投射XYZ平面<br>前后对比：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641794427238-a3ba6084-8550-4e1d-bb42-930935daa4f1.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=421&amp;id=ube6015d8&amp;originHeight=421&amp;originWidth=556&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=343389&amp;status=done&amp;style=none&amp;taskId=u4d6c2de6-11f6-4237-b16c-102eb9fed2a&amp;title=&amp;width=556" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641794432664-94caa0e0-bff1-47e6-9ac6-389c6bd37cdb.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=458&amp;id=ub4d940f3&amp;originHeight=458&amp;originWidth=626&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=451940&amp;status=done&amp;style=none&amp;taskId=ua10bb802-3e4f-493c-bc09-54cb73886f3&amp;title=&amp;width=626" alt="image.png"><br><a name="L6PaC"></a></p><h3 id="浪花泡沫">浪花泡沫</h3><p>先介绍一下所用到的纹理<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795360129-ce010ed5-897c-4b8d-9ce2-babc26fc39cd.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=729&amp;id=ufdba8470&amp;originHeight=729&amp;originWidth=725&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1116949&amp;status=done&amp;style=none&amp;taskId=udf80419b-7190-424c-a917-9073ce74f5a&amp;title=&amp;width=725" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795440128-341c2331-648c-4da6-a887-2cbfedcb3b90.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=162&amp;id=ud86df103&amp;originHeight=162&amp;originWidth=424&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11291&amp;status=done&amp;style=none&amp;taskId=u176c9185-a364-4833-b41f-f91c4ac2b8e&amp;title=&amp;width=424" alt="image.png"><br>这个纹理是将三个黑白图包装在了一起，红绿蓝分别对应了薄中厚三种不同的泡沫需求。<br>渐变纹理：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795525613-4b875c25-2ce6-4c5b-a294-dd367d4c479b.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=74&amp;id=uae564b89&amp;originHeight=74&amp;originWidth=924&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1554&amp;status=done&amp;style=none&amp;taskId=u85d64d2c-3345-4af6-8807-7dab2cf5e43&amp;title=&amp;width=924" alt="image.png"><br>红通道：对应的是薄泡沫<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795795909-474b325e-8f7b-41ee-ba6c-db0a9b4e92fb.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=39&amp;id=u829fd28f&amp;originHeight=39&amp;originWidth=859&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=437&amp;status=done&amp;style=none&amp;taskId=ubc4fd7e3-4c27-4db3-b40c-2308b40ebbb&amp;title=&amp;width=859" alt="image.png"><br>绿通道：对应的是中等泡沫<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795827672-f28bac4f-3bef-4133-b17c-f49118d09c8b.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=43&amp;id=ua24515d4&amp;originHeight=43&amp;originWidth=867&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=853&amp;status=done&amp;style=none&amp;taskId=u95eb0789-a501-46e7-b136-e278156360c&amp;title=&amp;width=867" alt="image.png"><br>蓝通道：对应的是厚泡沫<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795859582-699f08cf-d06d-4c72-8e2b-9b44f3489616.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=45&amp;id=ucc52bedc&amp;originHeight=45&amp;originWidth=873&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=783&amp;status=done&amp;style=none&amp;taskId=ue3c2cb3d-48a6-4724-938d-b586156db79&amp;title=&amp;width=873" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641795512957-4e8bdfa0-ef6a-4ae0-86eb-e01904584a64.png#clientId=uaeab7d83-ce22-4&amp;from=paste&amp;height=289&amp;id=uc90d426a&amp;originHeight=289&amp;originWidth=494&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20947&amp;status=done&amp;style=none&amp;taskId=u468edd47-4c3c-4a3e-ac9a-3865f5a5103&amp;title=&amp;width=494" alt="image.png"><br>这里将x轴平铺法和Y轴平铺法改为限制目的是为了使大小超过1的值限制到纹理的最左端，防止例如1.1的数值因为纹理是平铺的而对应的蒙版位置是黑色。<br>需要使用虚幻引擎自带的材质函数<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641887367065-8f8bdef8-147c-41a1-a608-392f9894ccdb.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=128&amp;id=uafd15147&amp;originHeight=128&amp;originWidth=83&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9393&amp;status=done&amp;style=none&amp;taskId=u4cfab179-2125-45cb-a5c4-ba8475a47c1&amp;title=&amp;width=83" alt="image.png">需要在<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641887376057-28494f14-2bde-45af-b025-97fac4e79941.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=28&amp;id=uef5bb32a&amp;originHeight=28&amp;originWidth=112&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1927&amp;status=done&amp;style=none&amp;taskId=u998038ce-c0ff-4550-8a03-0514726287e&amp;title=&amp;width=112" alt="image.png">中搜索。<br>这个材质函数的是采样一个纹理然后朝四个不同的方向进行位移的四元混乱函数，作用是使纹理更多样化。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641888210603-e42faf05-0a47-459f-853f-19e8ae897520.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=1377&amp;id=u06b3bfc7&amp;originHeight=1377&amp;originWidth=1953&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=531377&amp;status=done&amp;style=none&amp;taskId=ub0d8ceba-b118-4984-a0a9-3ac8c856041&amp;title=&amp;width=1953" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641888295698-fd3cc65f-2a2c-4671-b691-27a7d337e896.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=171&amp;id=uc86855f6&amp;originHeight=171&amp;originWidth=261&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17644&amp;status=done&amp;style=none&amp;taskId=ud8ceecbb-9d98-43fd-a908-7f295ca8785&amp;title=&amp;width=261" alt="image.png">由图可知divisor（除数）控制的是纹理亮度，除数越大亮度越高。<br>根据深度控制泡沫出现的地方：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645874197465-9c914edf-408e-4432-b5db-8935c9ff6cc2.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=390&amp;id=u5a381c6e&amp;originHeight=390&amp;originWidth=1256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=175155&amp;status=done&amp;style=none&amp;taskId=u92143b7f-a682-4bcd-acd6-0c411a1663c&amp;title=&amp;width=1256" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645874227987-68ac827c-276d-45fe-b44b-cd8bbf27fb36.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=2964&amp;id=ua35da101&amp;originHeight=2964&amp;originWidth=3779&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1410379&amp;status=done&amp;style=none&amp;taskId=ud396c65d-c1fd-4631-832b-ea2af0f23be&amp;title=&amp;width=3779" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641896144373-d9c5af40-30f9-4ce2-8c9d-6e096a2bcf2e.png#clientId=u331f69b2-277c-4&amp;from=paste&amp;height=95&amp;id=ue22cbf2d&amp;originHeight=95&amp;originWidth=295&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47669&amp;status=done&amp;style=none&amp;taskId=u1550fd78-e15f-4825-bc10-c62352d1b68&amp;title=&amp;width=295" alt="image.png"><br>这只是其中一种办法，也可以通过顶点绘制来决定泡沫出现的地方，或者在Gerstner的波峰的地方添加泡沫。<br><a name="l4rgn"></a></p><h3 id="水流映射">水流映射</h3><p>通过着色器制作的涟漪没有自定义的方向，如果我们想要在特定的地方使其拥有特定的流动方向就需要FlowMap（流动贴图）<br>要想绘制并得到FlowMap需要去<a href="http://teckartist.com/?page_id=107">网站</a>下载流图画家这个软件来进行绘制。<br>软件使用：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645879812783-5b8a3aef-66a4-4663-a065-d1b9d40b59f3.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=1054&amp;id=ud6d1929b&amp;originHeight=1054&amp;originWidth=1829&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2724224&amp;status=done&amp;style=none&amp;taskId=u008472ba-ffb4-499e-9400-d713324e4e6&amp;title=&amp;width=1829" alt="image.png"><br>绘制好FlowMap后导入到UE4中需要将贴图格式改为法线贴图，使用法线贴图的压缩设置可以使向量不被压缩得足够多，而且还将扩大颜色范围从0~1变成-1~1。<br>流动贴图的作用：它可以扭曲纹理。例如这里，取得流动贴图的RG数值，0.25控制强度，然后加上纹理坐标<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645877275394-8c820e67-5213-4387-b49e-5edd7040a6fc.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=296&amp;id=u3c762ae6&amp;originHeight=296&amp;originWidth=1054&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=196780&amp;status=done&amp;style=none&amp;taskId=u89874175-239c-4719-96c2-4a1af6fe652&amp;title=&amp;width=1054" alt="image.png"><br>它将原图<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645877287979-b8e46b1e-6bb9-40ac-9168-cfffaead4236.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=445&amp;id=u28a9b6ca&amp;originHeight=445&amp;originWidth=474&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107328&amp;status=done&amp;style=none&amp;taskId=u1b8e4152-4e70-41f0-9c44-93ab1594c1c&amp;title=&amp;width=474" alt="image.png">扭曲成了<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645877309473-e49d7231-1506-4fb0-96dd-e2a39064706d.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=458&amp;id=u9b7cbe60&amp;originHeight=458&amp;originWidth=469&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=102411&amp;status=done&amp;style=none&amp;taskId=u6c8b713a-f2ad-484e-bc90-b74fd8ce23a&amp;title=&amp;width=469" alt="image.png"><br>使用这种材质连法可以得到流动效果。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645881852624-c9d10943-7343-49b8-9d80-cf8480d94b09.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=1132&amp;id=uca1163c3&amp;originHeight=1132&amp;originWidth=1764&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=353931&amp;status=done&amp;style=none&amp;taskId=uc93f95ec-f745-40a7-8b39-d52c8c23cce&amp;title=&amp;width=1764" alt="image.png"><br>解析：这里的0.25控制的是扭曲强度。<br>这里时间节点frac后乘2减1再绝对值可以得到1~0~1~0~1的线性数值。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645881908150-0f1a4836-0ead-4ce0-a404-fc6d7fb04348.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=134&amp;id=u60fe8987&amp;originHeight=134&amp;originWidth=484&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36158&amp;status=done&amp;style=none&amp;taskId=ufcbbb8fb-42e5-4456-99d9-24c536bc9a5&amp;title=&amp;width=484" alt="image.png"><br>将两张相同的贴图（一个从0开始流动，一个从0.5开始流动）通过Lerp混合后可以使流动部分一直重复的进行下去。<br>Lerp混合解析：刚开始进行从0开始流动的动画，然后过渡到从0.5开始流动的动画，再然后过渡到从0开始流动的动画。这样重复过渡形成一直流动的视觉效果。<br>整理成材质函数：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645882724020-07bd0514-a7dc-4dd5-824d-ede09e4ca51b.png#clientId=ub4e925bb-ce1c-4&amp;from=paste&amp;height=731&amp;id=ue19241af&amp;originHeight=731&amp;originWidth=1298&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=188039&amp;status=done&amp;style=none&amp;taskId=ub842b302-d658-4c39-934e-6463d85c8fb&amp;title=&amp;width=1298" alt="image.png"><br>使用举例：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641900311734-fd6c3b35-a79b-4593-a307-4f6c4dccd651.png#clientId=ud3a46a59-9589-4&amp;from=paste&amp;height=382&amp;id=u5b1aa037&amp;originHeight=382&amp;originWidth=763&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=220240&amp;status=done&amp;style=none&amp;taskId=uc44dcb7c-6bdb-4389-9bc9-4a2dbb0b3d6&amp;title=&amp;width=763" alt="image.png"><br>将这些连接到normal上，最终结果就是按照法线贴图的形状依照流动贴图绘制的流动方向来源源不断的流动。<br>使用流动贴图的好处是可以自定义水流的流动方向。<br>在平时使用时通常是根据需要决定FlowMap，因此在顶视图中截取一张图并在PS裁剪好<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641900410388-b916a45a-a250-4471-9a73-568e9ab4c36c.png#clientId=ud3a46a59-9589-4&amp;from=paste&amp;height=737&amp;id=uf758dde1&amp;originHeight=737&amp;originWidth=805&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=859961&amp;status=done&amp;style=none&amp;taskId=u0bc94fe3-2097-4b65-b3b4-9a162b94284&amp;title=&amp;width=805" alt="image.png"><br>然后在绘制软件中<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1641900518708-48650671-ca16-433c-8d79-ad20b1a1793f.png#clientId=ud3a46a59-9589-4&amp;from=paste&amp;height=72&amp;id=u722c5710&amp;originHeight=72&amp;originWidth=267&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9151&amp;status=done&amp;style=none&amp;taskId=u57ff8787-680f-4da8-8b83-2607a2eee70&amp;title=&amp;width=267" alt="image.png">覆盖贴图再进行绘制。<br><a name="oTtQZ"></a></p><h1>Ben Cloward地编课</h1><p><a name="ag0Ld"></a></p><h2 id="创建地形">创建地形</h2><p>UE4官方文档：<br><a href="https://docs.unrealengine.com/4.27/zh-CN/BuildingWorlds/Landscape/TechnicalGuide/">https://docs.unrealengine.com/4.27/zh-CN/BuildingWorlds/Landscape/TechnicalGuide/</a><br>总结：</p><table><thead><tr><th><strong>颜色：</strong></th><th><strong>地形组件</strong></th></tr></thead><tbody><tr><td><strong>黄色：</strong></td><td>地形Actor边缘</td></tr><tr><td><strong>浅绿色：</strong></td><td>地形组件边缘</td></tr><tr><td><strong>中绿色：</strong></td><td>地形分段边缘</td></tr><tr><td><strong>深绿色：</strong></td><td>地形单独四边形</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1642250926346-4150f1e9-cecd-4d3c-bec8-3029a6a6e302.jpeg#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;id=u150b3704&amp;originHeight=474&amp;originWidth=741&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ua131f293-1636-4421-8f98-729735c9e44&amp;title=" alt><br>使用更少的组件通常可以获得更好的性能。<br>性能注意事项<br>组件大小与组件总数的选择是一种性能上的权衡。较小的组件大小可实现更快的LOD过渡，也可实现更多地形的遮挡，但是组件越小，需要的组件越多。<br>每个组件都有一个渲染线程CPU处理成本，每个分段都是一个绘制调用，所以尽量将这些数字保持在最小值。对于最大的地形，Epic建议最多使用1024个组件。<br>下面是一个单独的组件（其轮廓为绿色），包含四个分段。每个分段由9（3x3）个四边形组成。同样，您可以看到这些分段相交的顶点都是重复的。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1642251311284-3972b111-d6bc-4322-8798-fa23bedef413.jpeg#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;id=uc18fc317&amp;originHeight=256&amp;originWidth=256&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u9d8e54be-ccc4-4d82-9a80-4818cd14581&amp;title=" alt><br>如果我们从包含64x64个顶点的单个分段组成的组件开始，那么组件的大小就是63x63个四边形。假设我们有一个由10x10个这些组件组成的地形，那么地形中总共有630x630个四边形。现在，如果我们想要导入这样一个地形的高度，我们必须有一个有631x631个顶点的高度图，因为存在的顶点总是比四边形多一行（想象一个1x1四边形 - 它需要4个顶点）。因此631x631是一个有效的地形大小。<br>为了让事情变得更简单，这里有一些尺寸可以用于在最大化面积的同时最小化地形组件的数量。</p><table><thead><tr><th><strong>整体大小（Overall Size）（顶点）</strong></th><th><strong>四边形 / 分段（Quads / Section）</strong></th><th><strong>分段 / 组件（Sections / Component）</strong></th><th><strong>组件大小（Component Size）</strong></th><th><strong>组件总数（Total Components）</strong></th></tr></thead><tbody><tr><td>8129x8129</td><td>127</td><td>4 (2x2)</td><td>254x254</td><td>1024 (32x32)</td></tr><tr><td>4033x4033</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>1024 (32x32)</td></tr><tr><td>2017x2017</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>256 (16x16)</td></tr><tr><td>1009x1009</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>64 (8x8)</td></tr><tr><td>1009x1009</td><td>63</td><td>1</td><td>63x63</td><td>256 (16x16)</td></tr><tr><td>505x505</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>16 (4x4)</td></tr><tr><td>505x505</td><td>63</td><td>1</td><td>63x63</td><td>64 (8x8)</td></tr><tr><td>253x253</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>4 (2x2)</td></tr><tr><td>253x253</td><td>63</td><td>1</td><td>63x63</td><td>16 (4x4)</td></tr><tr><td>127x127</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>1</td></tr><tr><td>127x127</td><td>63</td><td>1</td><td>63x63</td><td>4 (2x2)</td></tr></tbody></table><p>默认创建的地形的密度是1m×1m的，为了增加地形的密度而获得更多的细节可以通过重设大小通过重采样将256×256方块的地形采样到之前创建的地形上来增加地形密度。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642251842374-2c9e3b8d-c066-4a68-8710-a8e9e7bf7ce8.png#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;height=317&amp;id=uf4977827&amp;originHeight=317&amp;originWidth=559&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69528&amp;status=done&amp;style=none&amp;taskId=ua23b3d61-de90-4a4c-90c9-3e56bd98b3b&amp;title=&amp;width=559" alt="image.png"><br>采样前：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642252084036-39df2890-3ddf-417a-8f94-5bed8c30dc68.png#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;height=565&amp;id=u52856789&amp;originHeight=565&amp;originWidth=566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=210052&amp;status=done&amp;style=none&amp;taskId=u0aec9ca6-eb65-4999-9ee7-e315798e21c&amp;title=&amp;width=566" alt="image.png"><br>采样后：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642252106289-f66200f0-30cb-40b5-8758-168186f63eb7.png#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;height=537&amp;id=ufbf8cd13&amp;originHeight=537&amp;originWidth=569&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18762&amp;status=done&amp;style=none&amp;taskId=u432de124-5e31-4e49-b2b8-465b7488d1f&amp;title=&amp;width=569" alt="image.png"><br>这样会导致密度增加的非常恐怖。<br>可以通过设置地形的LOD分布优化一下<br>原来的LOD分布：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642252228425-f774e8e3-5c2d-4bfa-8def-6f0dbb77baf9.png#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;height=131&amp;id=u7aeb842f&amp;originHeight=131&amp;originWidth=325&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6648&amp;status=done&amp;style=none&amp;taskId=u16216f6c-cb0f-467c-9dd6-0f1bd439475&amp;title=&amp;width=325" alt="image.png"><br>更改后的LOD分布：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642252265900-747266fb-cc30-4abe-879c-37c99bb3fbe7.png#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;height=115&amp;id=u2258ef3b&amp;originHeight=115&amp;originWidth=294&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5705&amp;status=done&amp;style=none&amp;taskId=u5af26956-a76b-4fb2-b866-be285d7f634&amp;title=&amp;width=294" alt="image.png"><br>拉远镜头时密度很小，但是当镜头近的时候密度会变大。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642252288328-9cace684-819d-4e7b-86c4-b4f9c5c65d61.png#clientId=u42d9bbbb-1a31-4&amp;from=paste&amp;height=508&amp;id=uc149a659&amp;originHeight=508&amp;originWidth=582&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=141422&amp;status=done&amp;style=none&amp;taskId=uc03d51cf-6706-49b1-b196-7cd42b6270f&amp;title=&amp;width=582" alt="image.png"><br><a name="sQ5ll"></a></p><h2 id="地形贴图">地形贴图</h2><p>因为制作地形材质需要的贴图数量很多，因此可以把Color和Roughness合并成一张贴图，后缀简称CR，RGB使用Base Color，A通道使用Roughness贴图。 然后法线贴图和AO贴图和Height贴图合并成一张贴图简称NOH。<br>合并过程：<br>SD中：<br>其中AO与Cavity贴图混合的方式为正片叠底。要想获得Cavity贴图需要在Bridge的下载设置中勾选<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642342948276-e0455f31-d3f5-4d46-8700-d86b88d6c86e.png#clientId=u7a0a6a04-b34e-4&amp;from=paste&amp;height=118&amp;id=u51b375c2&amp;originHeight=118&amp;originWidth=445&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4517&amp;status=done&amp;style=none&amp;taskId=u8b28d60c-d07c-4305-81f8-8ea43b68672&amp;title=&amp;width=445" alt="image.png"><br>其中一些贴图需要更改颜色模式<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646098207803-bb4109c8-5891-4951-a6b9-cc7b803a5779.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=118&amp;id=u7d1fe1a4&amp;originHeight=118&amp;originWidth=359&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2661&amp;status=done&amp;style=none&amp;taskId=u439d5081-f5e5-4442-be94-cb338369e45&amp;title=&amp;width=359" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646097846153-2d6ccbb3-f469-4978-a35a-f151f1343c3a.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=859&amp;id=uec2465f0&amp;originHeight=859&amp;originWidth=573&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=185604&amp;status=done&amp;style=none&amp;taskId=u146ef88a-9cb2-4d72-b96c-3da7b0d7333&amp;title=&amp;width=573" alt="image.png"><br>制作好后导出贴图并导入UE4中<br>贴图压缩设置：NOH贴图使用BC7压缩设置并且取消srgb<br>贴图准备好以后开始制作地形材质。<br><a name="Go6Ac"></a></p><h2 id="地形材质">地形材质</h2><p>首先先看一下地形贴图在材质编辑器中的设置：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642405039355-936c1d79-afc2-4c37-bae1-0e7e3160f477.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=955&amp;id=ue19b6343&amp;originHeight=955&amp;originWidth=1396&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=304170&amp;status=done&amp;style=none&amp;taskId=u8aaba81a-43f0-42e5-939b-023a54d3d6e&amp;title=&amp;width=1396" alt="image.png"><br>转换成材质函数：其中法线求B通道的方法改成了附加0.4并规范化，这样做的目的是达到差不多的效果并使材质性能消耗变得便宜一些。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642405668735-62e45ccf-2616-4030-a404-249d1730801e.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=975&amp;id=u328eda32&amp;originHeight=975&amp;originWidth=1278&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=212649&amp;status=done&amp;style=none&amp;taskId=u063acc08-47a4-49d5-9f36-b80196204b0&amp;title=&amp;width=1278" alt="image.png"><br>因为制作地形材质需要将很多个跟地形相关的材质进行混合，为了主材质的简单，利用这个材质函数再创建一个材质函数。只需要输入贴图纹理对象和贴图UV缩放数值（1m*1m的材质对应准确UV缩放大小为100），然后就能输出材质和高度图：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642422079160-e856b0f4-72fb-4fa6-9bc1-63daf84be814.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=1148&amp;id=uc99349ff&amp;originHeight=1148&amp;originWidth=1594&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=260939&amp;status=done&amp;style=none&amp;taskId=uf4af46a9-07e4-47a2-9a0d-ceb73e32b3d&amp;title=&amp;width=1594" alt="image.png"> 接着利用这个Mat材质函数创建对应的单一地形材质函数：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642422405872-f6b9abd7-3a0d-4c8f-8fd9-1b2d8d902cc3.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=560&amp;id=ufa402a98&amp;originHeight=560&amp;originWidth=746&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=128735&amp;status=done&amp;style=none&amp;taskId=u7dfae834-521c-4fc1-ac06-1cf5c083e4c&amp;title=&amp;width=746" alt="image.png"><br>一共有6个材质函数代表6个单一地形材质。对应的贴图UV缩放大小为<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642422553459-d9ea9f8a-c221-4d7e-9eeb-0d7323273c9e.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=516&amp;id=u50ebd9fd&amp;originHeight=516&amp;originWidth=263&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66282&amp;status=done&amp;style=none&amp;taskId=uecf4ae90-f666-4ee0-8123-5416b3f12bf&amp;title=&amp;width=263" alt="image.png">83，89，127，97，101，241.<br>最终地形材质：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642422601461-f71464a4-833f-4810-b9b0-4a0c502389d6.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=891&amp;id=u4c6c8b50&amp;originHeight=891&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=225822&amp;status=done&amp;style=none&amp;taskId=u6865b9f8-6590-42c3-9f7a-9537a56cf69&amp;title=&amp;width=1092" alt="image.png"><br>其中Layer Blend节点中除了第一个混合模式为透明度混合，其余都用高度混合。这样的作用时防止绘制时出现黑斑。<br>虽然这个地形材质可以用了，但是有严重的地形贴图重复率。接着来改进这个地形材质。<br><a name="DG0Cd"></a></p><h2 id="修正重复">修正重复</h2><p>修正重复度的方法有四种，首先介绍一下使用的蒙版贴图和第一种方法。<br>Mask贴图三通道混合程度从小到大<br>R通道<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642427863642-c72944d9-9263-49e9-9535-08f077aa47c3.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=517&amp;id=uee3110e9&amp;originHeight=517&amp;originWidth=519&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88973&amp;status=done&amp;style=none&amp;taskId=udc9ab9e9-893f-49ed-ba29-43105b25856&amp;title=&amp;width=519" alt="image.png"><br>G通道<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642427899060-55c4ba0b-a4a2-4c59-a9fc-e9cf9c65d61f.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=522&amp;id=ubc1dc340&amp;originHeight=522&amp;originWidth=518&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=124418&amp;status=done&amp;style=none&amp;taskId=u22327335-9ea7-46ee-8009-d650ae51a0c&amp;title=&amp;width=518" alt="image.png">、<br>B通道<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642427915447-98d23981-8c4e-4f9f-8b37-76702f0ad771.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=518&amp;id=u98dce2b2&amp;originHeight=518&amp;originWidth=521&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=198645&amp;status=done&amp;style=none&amp;taskId=u6b62b29f-4c25-44e8-997c-e08073acd7f&amp;title=&amp;width=521" alt="image.png"><br>RGB图<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642427960531-c3737da5-4230-4bb2-bf87-7db41ed5370c.png#clientId=udec924ca-7c97-4&amp;from=paste&amp;height=522&amp;id=u791fae2b&amp;originHeight=522&amp;originWidth=523&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=269766&amp;status=done&amp;style=none&amp;taskId=u99ee7cd6-0175-4314-b632-d67f6910d57&amp;title=&amp;width=523" alt="image.png"><br><a name="EgL6q"></a></p><h3 id="第一种方法">第一种方法</h3><p>通过将相同的贴图进行旋转后再混合,可以通过swizzle节点来使贴图XY通道数值交换输出充当贴图UV达到旋转的效果（但是使用swizzle节点不只是使贴图旋转还会镜像贴图（因此后面会将法线贴图XY通道交换来得到正确的法线效果））。<br>更改之前做的单一地形材质函数。<br>之前的：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642422079160-e856b0f4-72fb-4fa6-9bc1-63daf84be814.png?x-oss-process=image%2Fresize%2Cw_750%2Climit_0#from=url&amp;id=HeHkb&amp;originHeight=540&amp;originWidth=750&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;title=" alt><br>更改后：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642668637582-778388ca-fd16-44a9-b150-6fc92e3050a2.png#clientId=u5a97b1bf-4917-4&amp;from=paste&amp;height=1428&amp;id=uc2d67b0f&amp;originHeight=1428&amp;originWidth=2721&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=560134&amp;status=done&amp;style=none&amp;taskId=ue37b4d27-072c-4181-90d4-42b7754fbf9&amp;title=&amp;width=2721" alt="image.png"><br>就是简单的通过mask将旋转前和旋转后的贴图混合了。来得到更多样化的贴图。(这里mask贴图连接错了应该连接B通道。)<br>但是这样还是不够的,接下来利用第二种方法。<br><a name="JWvqV"></a></p><h3 id="第二种方法">第二种方法</h3><p>利用CameraDepthFade节点控制远处贴图。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642680444941-40425541-8511-4119-ab63-7cb5104886b2.png#clientId=u5a97b1bf-4917-4&amp;from=paste&amp;height=1924&amp;id=u963e1fa9&amp;originHeight=1924&amp;originWidth=2968&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=870514&amp;status=done&amp;style=none&amp;taskId=uf596e6cc-46ba-4a81-b574-40274e9cd14&amp;title=&amp;width=2968" alt="image.png"><br>CameraDepthFade：作用是通过相机距离得到黑白蒙版（离得远的输出白色离得近的输出黑色）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642670334188-3fc6330b-7550-4d75-9240-176068c93dab.png#clientId=u05a888fa-14ae-4&amp;from=paste&amp;height=110&amp;id=ucfdb74fa&amp;originHeight=110&amp;originWidth=218&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15217&amp;status=done&amp;style=none&amp;taskId=uad60a374-9ce2-40da-b349-7d863a535e3&amp;title=&amp;width=218" alt="image.png">第一个FadeLength控制的是开始产生白色向黑色渐变的距离，例如输入2000，那么当模型距离摄像机距离达到2000后就开始产生变黑的渐变。第二个Fade Offset控制的是完全变成黑色时的距离大小，当距离达到Fade Offset的大小后就完全变成黑色。<br>这个多添加的方法作用是离摄影机距离近的使用标准UV的贴图，而距离远的就使用大贴图。<br>好处是都使用同一组贴图不会产生额外的纹理内存。<br>但是这种方法使其看起来不真实。因此通过第三种方法改进<br><a name="yGowO"></a></p><h3 id="第三种方法">第三种方法</h3><p>为了让远处的大贴图不那么单调，因此通过sd来处理贴图，并通过Make it tile patch节点使纹理平铺并打乱纹理。<br>Make it tile patch节点属性：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642682132795-703001df-ea6d-429a-a723-4cd50cd060f9.png#clientId=u5a97b1bf-4917-4&amp;from=paste&amp;height=539&amp;id=u50fe484c&amp;originHeight=539&amp;originWidth=475&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10009&amp;status=done&amp;style=none&amp;taskId=u36c1763a-a81f-4d34-92ed-efb3b4d7685&amp;title=&amp;width=475" alt="image.png"><br>SD连接图：利用了两个substance图形，可以将这些理解为材质函数加入输入和输出就可以当节点来使用<br>分别是<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643021258779-693bfa5b-aae4-4e57-8751-7f0ef9853e71.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=92&amp;id=u891b3da8&amp;originHeight=92&amp;originWidth=229&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4171&amp;status=done&amp;style=none&amp;taskId=u84cac164-a134-4fe8-a7ba-7ab3cc71f51&amp;title=&amp;width=229" alt="image.png"><br>MakeCRNOH作用跟利用SD生成地形贴图的方法是一样的<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643021379439-0e3804ae-b5ff-4333-a184-d1c4c8a5e40d.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=883&amp;id=u1386e272&amp;originHeight=883&amp;originWidth=779&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80784&amp;status=done&amp;style=none&amp;taskId=u3c7f2ce3-1fb9-49f5-ab56-1f5d79b7c2a&amp;title=&amp;width=779" alt="image.png"><br>MaterialScrambie作用是将地形贴图转换成平铺打乱的形式<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643021394673-761b0998-c682-4535-9c97-7ed4fb7bf7ed.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=867&amp;id=u38d376d7&amp;originHeight=867&amp;originWidth=534&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50680&amp;status=done&amp;style=none&amp;taskId=u8d572eff-9c33-4131-ae72-2024ef4dcc0&amp;title=&amp;width=534" alt="image.png"><br>最后通过利用这两个substance图形，导入要更改的贴图就可以制作出8×8米的贴图了。最终导出时选择1024*1024的贴图因为是远处的所以不需要用那么高清的贴图了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643021843742-bcfadd37-91f6-4ca0-8fee-c5b4183bf854.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=803&amp;id=u2bc8eee2&amp;originHeight=803&amp;originWidth=818&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=321631&amp;status=done&amp;style=none&amp;taskId=u78fb80c7-1f92-4cbb-bbba-65eb41bca63&amp;title=&amp;width=818" alt="image.png"><br>然后将输出的贴图替换成第二种方法中新创建的远处贴图就是第三种方法。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026750554-894573fd-439b-42ae-a99c-8af8ccae1248.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=1909&amp;id=u532eeb37&amp;originHeight=1909&amp;originWidth=2964&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=945731&amp;status=done&amp;style=none&amp;taskId=u79c47f6e-8edf-41e0-aca3-8dca9cee3f6&amp;title=&amp;width=2964" alt="image.png"><br>其中通过在CameraDepthFade后面加一个AppendMany是为了解决UE4无法正确识别格式<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026492866-a547c98e-6dcc-49ac-ac76-46e379b62f69.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=266&amp;id=u71231b3c&amp;originHeight=266&amp;originWidth=819&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=164715&amp;status=done&amp;style=none&amp;taskId=u43cb4b70-42f3-4293-89e4-586380e2e5a&amp;title=&amp;width=819" alt="image.png"><br>这些材质函数的参数如图所示<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026573058-6b4887eb-f8cc-499e-8954-0325f913e215.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=784&amp;id=ufe875244&amp;originHeight=784&amp;originWidth=1006&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=232108&amp;status=done&amp;style=none&amp;taskId=u6ab6999d-780e-482d-8fba-52ab7d93948&amp;title=&amp;width=1006" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026584223-690b82ae-a0b5-4349-9186-a74e61630db0.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=784&amp;id=ue149f14c&amp;originHeight=784&amp;originWidth=874&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=235840&amp;status=done&amp;style=none&amp;taskId=u6792dae0-c371-4dd9-92ee-3d943417306&amp;title=&amp;width=874" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026589536-91433277-97b0-4494-88c3-bfe57658f7bb.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=768&amp;id=u57afbcb6&amp;originHeight=768&amp;originWidth=842&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=222746&amp;status=done&amp;style=none&amp;taskId=ubc1efdbd-fc73-42b1-90d8-e5c63e4f94a&amp;title=&amp;width=842" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026595605-1be803e7-4af3-41cc-ad1a-d5790481838a.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=768&amp;id=u6122eea4&amp;originHeight=768&amp;originWidth=906&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=230102&amp;status=done&amp;style=none&amp;taskId=u829921dd-d51f-4c88-8811-49507c1aa3a&amp;title=&amp;width=906" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026601114-6b490b39-b680-477d-ae01-9d5d756fd2c4.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=768&amp;id=udf536796&amp;originHeight=768&amp;originWidth=970&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=237935&amp;status=done&amp;style=none&amp;taskId=ud8801e81-395c-4119-8243-fde6cbccc83&amp;title=&amp;width=970" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643026606845-3f387d62-1fb1-4972-a34e-a58e36319242.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=784&amp;id=u7d9a4b24&amp;originHeight=784&amp;originWidth=974&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=239592&amp;status=done&amp;style=none&amp;taskId=u6ff75221-c39d-42cb-b3da-0906adf8f53&amp;title=&amp;width=974" alt="image.png"><br><a name="QZ2dQ"></a></p><h3 id="第四种方法">第四种方法</h3><p>在最终的地形材质中加一个全局mask来控制<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643029355716-1ea1d634-f7a7-41ee-ae3c-cf3d54c910ee.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=576&amp;id=u24072d59&amp;originHeight=576&amp;originWidth=613&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=436504&amp;status=done&amp;style=none&amp;taskId=uaad6cb10-72ef-4ed8-8ed0-2c3c31e9c74&amp;title=&amp;width=613" alt="image.png"><br>注意这张贴图是带有一些颜色的，但是他们的RGB数值都在0.5左右，RGB通道的数值有些微差别，但是在UE4中要将他们的压缩设置改为BC7并且取消srgb<br>通过这张MASK贴图使地形不同地方出现些许的颜色变化，<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643029534306-36cf43dd-f79b-4fb9-b2a9-0027051257d7.png#clientId=u8470106e-dd9c-4&amp;from=paste&amp;height=1278&amp;id=ua03fead2&amp;originHeight=1278&amp;originWidth=1620&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=405576&amp;status=done&amp;style=none&amp;taskId=u51fe19bd-6275-4d33-91a7-e080eaba2e6&amp;title=&amp;width=1620" alt="image.png"><br>将这四种方法结合起来为最终的降低重复度方法。<br><a name="cIev7"></a></p><h2 id="近景位移贴图">近景位移贴图</h2><p>因为虽然绘制地形材质后的法线能够起到的效果已经很好了，但是依然使地形看起来十分的平坦，因为地形的线框不够多。所以为了修复这点，首先将靠近相机的三角形细分，然后根据height贴图来偏移顶点。<br>要增加地形的细分首先需要在材质面板中<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643288230333-885c62f5-39da-42dc-b236-87259e7f3c6d.png#clientId=ua466f464-931b-4&amp;from=paste&amp;height=139&amp;id=u22d7c6bb&amp;originHeight=139&amp;originWidth=269&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10925&amp;status=done&amp;style=none&amp;taskId=u4716c732-57e4-4d6d-8861-b05e37b4ca6&amp;title=&amp;width=269" alt="image.png">Ben佬没有开无裂纹置换但是我觉得应该勾选比较好。<br>为此使用材质函数来创建这些功能：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643290814023-8c1f5b8e-8500-4c33-a76b-5bcd4a741247.png#clientId=u9d1d03da-d541-4&amp;from=paste&amp;height=918&amp;id=u04f6e02b&amp;originHeight=918&amp;originWidth=1933&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=306153&amp;status=done&amp;style=none&amp;taskId=u1f52f28b-2305-434c-acf4-60ae3aa79b8&amp;title=&amp;width=1933" alt="image.png"><br>最终地形材质：利用材质函数输出到细分乘数与世界场景位移<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643288922671-d2ebb3b0-3d89-43bb-88d7-55211febb117.png#clientId=ua466f464-931b-4&amp;from=paste&amp;height=1858&amp;id=u659d2255&amp;originHeight=1858&amp;originWidth=1937&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=651868&amp;status=done&amp;style=none&amp;taskId=u38a7173e-201d-4be7-97bc-f89b7eec638&amp;title=&amp;width=1937" alt="image.png"><br>实现的效果：近距离的地形材质不再看起来那么平坦了<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643288865780-0980aa49-9848-48a9-bd68-44a7a01ad8e5.png#clientId=ua466f464-931b-4&amp;from=paste&amp;height=342&amp;id=u191029fa&amp;originHeight=342&amp;originWidth=650&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=446338&amp;status=done&amp;style=none&amp;taskId=u655fa8e4-3a4a-46a4-8bac-71d7a8d3422&amp;title=&amp;width=650" alt="image.png"><br>这种增加细分的行为会带来性能压力，谨慎使用以及参数的控制。<br><a name="Tl2dN"></a></p><h2 id="植物编辑模式介绍和资产准备">植物编辑模式介绍和资产准备</h2><p>植物编辑模式中常用的就不多介绍了，介绍一下有用的但不常用的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643356795202-e55d6dd5-d74a-4fd8-aa06-8f27178fa767.png#clientId=u7ef93437-b075-4&amp;from=paste&amp;height=100&amp;id=udd168ea8&amp;originHeight=100&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9644&amp;status=done&amp;style=none&amp;taskId=u5ec70ee0-7d5a-40e0-9893-4f8844ac8a0&amp;title=&amp;width=340" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643357090303-1583ebb8-057f-4d65-a9c3-e22f087a9c9d.png#clientId=u7ef93437-b075-4&amp;from=paste&amp;height=85&amp;id=uca4a51a3&amp;originHeight=85&amp;originWidth=524&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31398&amp;status=done&amp;style=none&amp;taskId=ue48097d0-33a2-430e-95f4-3e2c8e1ae6f&amp;title=&amp;width=524" alt="image.png">剔除距离决定了模型在离摄像机多远的距离时会被剔除掉不显示。将资产的剔除距离更改为不完全相同可以使资产不同时消失。<br>还有可以单独设置绘制的模型是否投射阴影。如果一些小模型的阴影在其他大型模型的阴影之下那么就就可以取消小模型的投射阴影。这样可以节省很多性能。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643356840762-edee10da-dc4c-4a88-8ef2-68b54b51c6a9.png#clientId=u7ef93437-b075-4&amp;from=paste&amp;height=77&amp;id=ub9de9fe0&amp;originHeight=77&amp;originWidth=238&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6433&amp;status=done&amp;style=none&amp;taskId=uaca20107-2292-4680-8da3-2154e2c4907&amp;title=&amp;width=238" alt="image.png">可以在模型中确定是否接收贴花，默认是不接收贴花的，但是手动摆放的那些模型是默认接收贴花的。<br><a name="mlB1k"></a></p><h3 id="重应用工具">重应用工具</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1643355945209-50fda06b-e900-42c7-a4c3-ed0b584ce121.jpeg#clientId=u7ef93437-b075-4&amp;from=paste&amp;id=uae737dc0&amp;originHeight=94&amp;originWidth=94&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u5477e593-dbc3-414c-91f7-819fb5eebd8&amp;title=" alt><br>利用重应用工具可选择性地修改已放置在场景中的植被网格体的特定参数。 用启用的重应用工具在植被网格体上进行绘制时，在网格体列表中选中的植被网格体将更新，以反映在重应用工具中进行的修改。<br><a href="https://docs.unrealengine.com/4.27/Images/BuildingWorlds/Foliage/Foliage_Reapply.png"><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1643355945259-475bd11d-143a-496b-9ce0-51d288690734.jpeg#clientId=u7ef93437-b075-4&amp;from=paste&amp;id=ue909b58f&amp;originHeight=1700&amp;originWidth=913&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u36cc5100-646e-4a0e-9a66-7b1f2b1241e&amp;title=" alt></a><br>设置复选框后，在现有实例上绘制笔刷时将重新应用相应的参数。 使用绘制工具时多数设置均相同，然而也存在几点不同：</p><table><thead><tr><th><strong>项目</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>网格体</strong></td><td>在此处输入要使用的静态网格体类型。</td></tr><tr><td><strong>绘制</strong></td><td>可在此处覆盖将植被网格体添加到关卡时要发生的情况。</td></tr><tr><td><strong>放置</strong></td><td>可在此处覆盖植被网格体放置在关卡中的方式。</td></tr></tbody></table><p><a name="OJYOZ"></a></p><h3 id="剔除">剔除</h3><p>因为植被实例在单次绘制调用中被渲染为群集，所以每个群集将基于遮挡被渲染（或不被渲染）。如在 <strong>结束剔除距离</strong> 参数中设置了一个值，则超过此距离的群集也将被剔除。然而，此项将导致网格体分组因整个群集超出范围而突然消失。<br>添加一个 <strong>开始剔除距离</strong> 参数并正确设置材质即可解决此问题。 在顶点着色器中将计算一个逐实例淡化因子，其在开始距离处为1.0、结束距离处为0.0。 可使用 <strong>PerInstanceFadeAmount</strong> 节点在材质中进行访问。 如将此连接到一个不透明度或遮罩值，则可将其用于淡化一定距离之外的距离（在其到达 <strong>剔除距离结束</strong> 并从渲染中被移除之前）。<br>下方的材质范例将材质遮罩与淡化因子相乘，以弱化植被网格体的叶片，直到其完全消失。<br><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1643357113342-9e3e6b01-1a96-4578-84ce-0a561a479505.jpeg#clientId=u7ef93437-b075-4&amp;from=paste&amp;id=ude8cfc9c&amp;originHeight=1022&amp;originWidth=1397&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ube4b037a-149f-4a33-8171-9c925dd82d0&amp;title=" alt><br><a name="u9zWK"></a></p><h3 id="资产">资产</h3><p>Bridge石头：<br><a href="https://quixel.com/assets/tllhcelva">https://quixel.com/assets/tllhcelva</a><br><a href="https://quixel.com/assets/tlljeeyva">https://quixel.com/assets/tlljeeyva</a><br><a href="https://quixel.com/assets/tliiadmva">https://quixel.com/assets/tliiadmva</a><br>模型要LOD1 3 4 5 ，导出的LOD1<br>草使用4K的贴图其他的树干树桩和石头使用2k贴图即可<br>导入商城资源后，如果要摆放资产需要编译，因此为了能够保证摆放资产的流畅性推荐先将资源的地图打开，打开后电脑就会编译整个地图，这样在所有紫衫编译完后就可以流畅操作了。<br>树木：<a href="https://www.unrealengine.com/marketplace/en-US/product/interactive-spruce-forest">https://www.unrealengine.com/marketplace/en-US/product/interactive-spruce-forest</a>云杉树<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645853713958-3b0a317e-44af-4961-96f7-b877ff07314f.png#clientId=u3675ee11-97da-4&amp;from=paste&amp;height=502&amp;id=uc221ff58&amp;originHeight=502&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=496349&amp;status=done&amp;style=none&amp;taskId=u7cda1965-c6e9-4395-b79d-1d30ab4201d&amp;title=&amp;width=976" alt="image.png"></p><p>大石头：<br><a href="https://quixel.com/assets/pkeeM">https://quixel.com/assets/pkeeM</a><br><a href="https://quixel.com/assets/pjtsT">https://quixel.com/assets/pjtsT</a><br><a href="https://quixel.com/assets/pjEr1">https://quixel.com/assets/pjEr1</a><br><a href="https://quixel.com/assets/pkjsK">https://quixel.com/assets/pkjsK</a><br><a href="https://quixel.com/assets/pkjsG">https://quixel.com/assets/pkjsG</a><br><a href="https://quixel.com/assets/pjAxm">https://quixel.com/assets/pjAxm</a><br>树干和草：<br><a href="https://quixel.com/megascans/home?assetId=tjsicjffa">https://quixel.com/megascans/home?assetId=tjsicjffa</a><br><a href="https://quixel.com/megascans/home?assetId=tjrtcibda">https://quixel.com/megascans/home?assetId=tjrtcibda</a><br><a href="https://quixel.com/megascans/home?assetId=rdkeg">https://quixel.com/megascans/home?assetId=rdkeg</a><br><a href="https://quixel.com/megascans/home?assetId=rdeu3">https://quixel.com/megascans/home?assetId=rdeu3</a><br><a href="https://quixel.com/megascans/home?assetId=tg0qedqda">https://quixel.com/megascans/home?assetId=tg0qedqda</a><br><a href="https://quixel.com/megascans/home?assetId=qdyf7">https://quixel.com/megascans/home?assetId=qdyf7</a><br><a href="https://quixel.com/megascans/home?assetId=ti3mdirda">https://quixel.com/megascans/home?assetId=ti3mdirda</a><br><a href="https://quixel.com/megascans/home?assetId=okfch">https://quixel.com/megascans/home?assetId=okfch</a><br><a href="https://quixel.com/megascans/home?assetId=sbslY">https://quixel.com/megascans/home?assetId=sbslY</a><br><a href="https://quixel.com/megascans/home?assetId=seEoW">https://quixel.com/megascans/home?assetId=seEoW</a><br><a href="https://quixel.com/megascans/home?assetId=tefocd1r">https://quixel.com/megascans/home?assetId=tefocd1r</a><br><a name="ZXuhv"></a></p><h3 id="绘制前提推荐以及一些技巧">绘制前提推荐以及一些技巧</h3><p>绘制前可以将要绘制的模型全部都摆放在同一个平面上排列出来，这样就可以方便观察要绘制的模型的大小比例是否正确。还有颜色粗糙度SSS效果等是否符合想要的效果。<br>虽然绘制很方便，但是绘制的一般不如手动摆放的更好，一些前景的大型植物推荐手动摆放。<br>绘制效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645872369883-a91e3378-e6f6-40ae-83f0-1e3ea8624e67.png#clientId=ued2f573c-753b-4&amp;from=paste&amp;height=572&amp;id=u5d2f117b&amp;originHeight=572&amp;originWidth=1207&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1438719&amp;status=done&amp;style=none&amp;taskId=u1cdb446b-383e-4297-9c0f-049e350ebac&amp;title=&amp;width=1207" alt="HighresScreenshot00000.png"><br>接下来将溪水材质赋予到面片中，并且制作从高处向下流的水流。<br><a name="GniVQ"></a></p><h2 id="溪水着色器">溪水着色器</h2><p>溪水着色器与材质课中讲到的水流着色器差不多，主要区别在于溪水着色器不需要海浪计算，主要依靠flowmap达到想要的水流效果。溪水着色器不需要<br><a name="szOj4"></a></p><h3 id="流动效果制作">流动效果制作</h3><p>通常我们应该通过流动贴图来配合之前材质课中制作的flowmap材质函数来达到流动效果，但是因为我们想要的流动效果比较简单，就是仅仅需要让水流从平面的X轴的反方向流动，X轴对应的是纹理坐标中的U坐标，因此当U方向的数值增加时采样框向U方向移动形成纹理向U方向的反方向移动的错觉。因此FlowSpeed为负值时河流向X轴负方向移动，FlowSpeed为正值时河流向X轴反方向移动。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645925684899-2ad203f2-6d04-44e8-8c98-b2973fa14cec.png#clientId=u574f2ba5-a129-4&amp;from=paste&amp;height=472&amp;id=u5f468f91&amp;originHeight=472&amp;originWidth=854&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=776091&amp;status=done&amp;style=none&amp;taskId=u50ef966b-1dbf-46f5-8609-b9edb56e4e8&amp;title=&amp;width=854" alt="image.png"><br>这里参数化的四位数自定义了四个通道名以及默认数值。使R通道负责控制涟漪的大小，G通道负责控制流动的速度，B通道负责平面X轴方向的两端的蒙版大小来使平面衔接更好，A通道负责控制Y轴两端的蒙版大小来控制流水的区域。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645926185035-96505075-a5ab-49b3-a948-8d6c40410d72.png#clientId=u574f2ba5-a129-4&amp;from=paste&amp;height=598&amp;id=ub659c53a&amp;originHeight=598&amp;originWidth=605&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77745&amp;status=done&amp;style=none&amp;taskId=u61770d39-53dc-43d6-82ec-7786c6b1506&amp;title=&amp;width=605" alt="image.png"><br>如果直接使用单一的U方向有速度而V方向没有速度<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645930136962-5fb9b4a6-970f-49db-be3c-c787d8635d3a.png#clientId=u574f2ba5-a129-4&amp;from=paste&amp;height=208&amp;id=u3ace08d9&amp;originHeight=208&amp;originWidth=533&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47725&amp;status=done&amp;style=none&amp;taskId=u46a76b98-10e5-4f23-89e5-95f0558e748&amp;title=&amp;width=533" alt="image.png">会导致整个河流全部都以相同的速度直线移动，因此通过制作蒙版来使河流移动的有快有慢。<br>蒙版：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645941837638-cc124763-3452-4b99-9117-4d2324b51cad.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=239&amp;id=uc8a0ec80&amp;originHeight=239&amp;originWidth=855&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66938&amp;status=done&amp;style=none&amp;taskId=u54b3b209-91b9-430a-a9b5-dc7a503f93f&amp;title=&amp;width=855" alt="image.png"><br>这里如果想要容易理解建议从TexCoord拆分成两个通道再合并到一起的方法来理解。因为TexCoord的RG通道分别为从左到右，从上到下的渐变。将他们乘1-x可以得到两端为0中间为0.25的渐变图，然后再进行平方（在遮罩方面平方或三次方以上一般作用都是为了降低对比度。），对RG通道乘以不同的数值来分别控制UV方向的不同蒙版，因为是蒙版只需要0~1的数值，因此再使用Saturate将它们钳制到0~1的范围。<br>因为溪水是很多个平面组合而成的，它们都拥有不同的大小，因此将它们的ObjecScale乘以纹理坐标常量就可以得到相同的涟漪大小，最后再通过一个参数来实时控制涟漪的大小，NormalDamping控制涟漪的法线的衰减。<br>这样溪水的流动就做好了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645941817667-4da8240d-773c-44a0-af86-74b8b6505bbb.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=1060&amp;id=u05646f61&amp;originHeight=1060&amp;originWidth=1977&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=407713&amp;status=done&amp;style=none&amp;taskId=uebbd74d0-3625-480d-b9e5-57aea13d5c7&amp;title=&amp;width=1977" alt="image.png"><br><a name="Q7h4L"></a></p><h3 id="经过各种遮罩叠加最终连线">经过各种遮罩叠加最终连线</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645941780041-2e6cf81c-2ac2-479d-9be5-1c337301e42a.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=2772&amp;id=ue638f340&amp;originHeight=2772&amp;originWidth=3973&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1363234&amp;status=done&amp;style=none&amp;taskId=u11e0fbec-6de2-453b-a445-b3fcc2db2ed&amp;title=&amp;width=3973" alt="image.png"><br><strong>这里有一个细节需要提醒一下，水的高光值是比默认的0.5小的，这里高光值给了0.3。</strong><br><a name="QDWp1"></a></p><h2 id="潮湿贴花和焦散贴花">潮湿贴花和焦散贴花</h2><p>制造潮湿效果的贴花：<br>因为潮湿贴花的作用是将贴花范围内的粗糙度降低来达到潮湿的效果。因此贴花材质的材质属性设置如图所示：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645942547137-9b268813-8e57-4119-a7f2-04aae97764f7.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=157&amp;id=u2153e0cb&amp;originHeight=157&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12416&amp;status=done&amp;style=none&amp;taskId=u4c043543-49cc-4281-8110-4e25062e16f&amp;title=&amp;width=296" alt="image.png"><br>主要学习了程序化生成遮罩以及了解了可以通过贴花来影响其覆盖的模型的属性<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645943672730-1659a24a-72ef-4c05-8db1-e44716fbb975.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=814&amp;id=ue61a056b&amp;originHeight=814&amp;originWidth=1929&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=222079&amp;status=done&amp;style=none&amp;taskId=uebc2c5bd-c3f3-4e82-a8a8-78cb31525d9&amp;title=&amp;width=1929" alt="image.png"><br>焦散贴花和材质课的几乎一样改了一下投射纹理大小和自发光强度<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645948214329-1a8a3b94-d628-4602-9491-877eab3daabe.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=1061&amp;id=u24e2b286&amp;originHeight=1061&amp;originWidth=3039&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=541919&amp;status=done&amp;style=none&amp;taskId=u2946b8b2-9a2c-4f95-92d2-d4dbf50b228&amp;title=&amp;width=3039" alt="image.png"><br><a name="vRAGf"></a></p><h2 id="瀑布着色器">瀑布着色器</h2><p><a name="SlY42"></a></p><h3 id="着色器材质属性设置">着色器材质属性设置</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646038470398-4cfe139e-1d43-4cd4-903c-472d88375fa4.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=109&amp;id=u95f44c24&amp;originHeight=109&amp;originWidth=241&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7340&amp;status=done&amp;style=none&amp;taskId=u1bc2f9fb-eeba-43ff-87d7-ee6eabe072d&amp;title=&amp;width=241" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646038474992-7f7b4454-812a-4f53-9074-7c8af08974d3.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=121&amp;id=udc082a9d&amp;originHeight=121&amp;originWidth=279&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11386&amp;status=done&amp;style=none&amp;taskId=uba79c8d6-d1ac-4aff-9209-9d68f0da0f9&amp;title=&amp;width=279" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646038482239-b43d2cd1-1c45-4d71-b39e-2804b550799e.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=68&amp;id=ue88e6e97&amp;originHeight=68&amp;originWidth=267&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5241&amp;status=done&amp;style=none&amp;taskId=u8afd2bd9-6cc7-4a53-a403-ee3071df695&amp;title=&amp;width=267" alt="image.png"><br>为了制作从上向下流的效果，需要先根据这个高度制作模型片。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645954731252-7cf1dff9-5641-41cc-92a5-4883f6ff4f37.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=226&amp;id=u16fe2005&amp;originHeight=226&amp;originWidth=645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=248576&amp;status=done&amp;style=none&amp;taskId=ucfcfe8e3-d5ef-4b94-84c8-ec6fceab664&amp;title=&amp;width=645" alt="image.png"><br>所以将上下两个片导出到maya，根据这两个片确定高度，制作出瀑布模型。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645954913237-f944e40a-1803-44c8-bebf-7ee9a8840129.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=387&amp;id=u52fa981c&amp;originHeight=387&amp;originWidth=637&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20731&amp;status=done&amp;style=none&amp;taskId=u13f4e8b1-4aa9-449c-90fe-3cd863a8671&amp;title=&amp;width=637" alt="image.png"><br>这里在maya中绘制顶点颜色，四周为黑色其余为白色，目的是为了在虚幻引擎中可以直接通过顶点颜色<br>这里在绘制时因为maya的工作方式会导致绘制颜色出现显示问题<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645957397078-f9c8e528-d9ca-401b-952e-fdfa495c36fb.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=168&amp;id=ua5c742a5&amp;originHeight=168&amp;originWidth=231&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3005&amp;status=done&amp;style=none&amp;taskId=u7a9a5498-7a7c-4d33-bd4e-48f4720e43b&amp;title=&amp;width=231" alt="image.png">因此通过三角化解决显示问题。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645954927625-7ab54c91-84d1-4b0b-944e-22ff4d1cf313.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=365&amp;id=ua964a05e&amp;originHeight=365&amp;originWidth=746&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25816&amp;status=done&amp;style=none&amp;taskId=u165c2743-dfe1-4683-8dde-b06cf8ee15c&amp;title=&amp;width=746" alt="image.png"><br>将这个模型导出然后导入UE4。进行着色器制作：<br>这里导入到UE4中的操作中，通过<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645962293263-9862ed29-568a-47f1-9814-fe5e895d15b5.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=170&amp;id=u3aa6fbf9&amp;originHeight=170&amp;originWidth=310&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13678&amp;status=done&amp;style=none&amp;taskId=uc5d6cde7-b011-4072-821e-3a876384800&amp;title=&amp;width=310" alt="image.png">导入可以得到带顶点颜色的王个体，但是在UE4中又出现了这种现象<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645962339150-53da4c3d-4075-4d8f-93a1-58d0072d8250.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=327&amp;id=u10e4ef4f&amp;originHeight=327&amp;originWidth=803&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=82466&amp;status=done&amp;style=none&amp;taskId=uff88bdae-96cc-4d96-ba84-ed07a6b7f14&amp;title=&amp;width=803" alt="image.png"><br>因此干脆将模型文件全部改为这样再导入UE4中。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645962427753-0f5d47de-d8f8-425a-a7ac-75f77f104a91.png#clientId=u45d6690b-d952-4&amp;from=paste&amp;height=319&amp;id=u72133926&amp;originHeight=319&amp;originWidth=740&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25689&amp;status=done&amp;style=none&amp;taskId=u320e1e75-6f79-4e59-adf0-f9d3bbb10f4&amp;title=&amp;width=740" alt="image.png"><br><a name="DM3bM"></a></p><h3 id="法线动画">法线动画</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646030717875-bf07708b-907b-4515-a072-2cf73b90608a.png#clientId=u456c75c4-b091-4&amp;from=paste&amp;height=1000&amp;id=u2fd4b38a&amp;originHeight=1000&amp;originWidth=2136&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=388870&amp;status=done&amp;style=none&amp;taskId=ub1b94151-3538-4937-9c6f-68ec8f29226&amp;title=&amp;width=2136" alt="image.png"><br><a name="bo1Rd"></a></p><h3 id="不透明度与折射">不透明度与折射</h3><p>不透明度与折射也不太难理解<br>教程中的瀑布不透明度的连接法跟水一样主要思想就是通过菲涅尔来控制不透明度的变化。<br>教程中使用了Fresnel_Function节点，这个节点的功能跟Fresnel节点的功能差不多。并且Fresnel_Function中使用的是VertexNormalWS，教程中使用的是PixelNormalWS是因为想要得到更准确的结果。VertexColor对应了建模时的顶点颜色（顶点颜色也可以通过UE4手动绘制）。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645967156868-b3d59702-6220-487f-aac7-d9ecf1fae867.png#clientId=u2d7ca911-f0d4-4&amp;from=paste&amp;height=537&amp;id=uce7f08f6&amp;originHeight=537&amp;originWidth=1044&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=126018&amp;status=done&amp;style=none&amp;taskId=uf44d6ad5-7830-4e91-844f-15f962d75c6&amp;title=&amp;width=1044" alt="image.png"><br>折射就是将水的标准折射1.33，和1通过线性插值<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645967169079-ebe8c8d1-7dcf-464e-a00d-7cc07c8ac010.png#clientId=u2d7ca911-f0d4-4&amp;from=paste&amp;height=231&amp;id=u7fe9c7f6&amp;originHeight=231&amp;originWidth=281&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29990&amp;status=done&amp;style=none&amp;taskId=u3ba6eecb-5bd8-4ba8-b041-31684959177&amp;title=&amp;width=281" alt="image.png">得到。</p><p>目前的全部：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645967292440-7264e40b-680f-4b60-a366-d84c1bad8b92.png#clientId=u2d7ca911-f0d4-4&amp;from=paste&amp;height=1766&amp;id=ubfcb4116&amp;originHeight=1766&amp;originWidth=2499&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=660296&amp;status=done&amp;style=none&amp;taskId=udf13d212-5076-4009-90a8-f0f42791feb&amp;title=&amp;width=2499" alt="image.png"><br>目前效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646025335681-9fd325b2-aeba-4402-a8af-935acc3574d4.png#clientId=u456c75c4-b091-4&amp;from=paste&amp;height=423&amp;id=u7dcec680&amp;originHeight=423&amp;originWidth=629&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=502985&amp;status=done&amp;style=none&amp;taskId=uc5c06225-6831-44fe-9ed9-94809b00967&amp;title=&amp;width=629" alt="image.png"><br><a name="FAC1l"></a></p><h3 id="顶点位移动画">顶点位移动画</h3><p>在顶点法线方向进行的位移动画：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646026830457-41f694cd-7e21-4fc3-a677-166f13c664c5.png#clientId=u456c75c4-b091-4&amp;from=paste&amp;height=765&amp;id=ua7ff7424&amp;originHeight=765&amp;originWidth=2270&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=240334&amp;status=done&amp;style=none&amp;taskId=u8696b315-e6a1-43a3-bb6f-612c6894d7c&amp;title=&amp;width=2270" alt="image.png"><br>这里通过WPO_Tilling_U和WPO_Tilling_V得到渐变图，然后加上time节点配合sin使不同区域都对应不同数值（顶点位移），然后叠加上遮罩，以及决定位移的方向以及整体强度最终得到顶点法线方向的顶点动画。<br>在局部坐标X轴处进行的位移动画：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646030753813-c43b063f-8f94-49a3-b7f7-eb6f6870fce4.png#clientId=u456c75c4-b091-4&amp;from=paste&amp;height=643&amp;id=u2eb91210&amp;originHeight=643&amp;originWidth=1665&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=194815&amp;status=done&amp;style=none&amp;taskId=u15ba0248-36cc-4d70-857f-e90cf2aa199&amp;title=&amp;width=1665" alt="image.png"><br>通过让这两个位移动画加在一起获得最终的顶点动画。<br><a name="dnDoG"></a></p><h3 id="泡沫">泡沫</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646038260480-4ac8a7d7-9900-4424-8632-b417ad5166e3.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=891&amp;id=u7ea1412e&amp;originHeight=891&amp;originWidth=1813&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=318849&amp;status=done&amp;style=none&amp;taskId=uda1048f5-ea77-481f-8f9b-c48edaed703&amp;title=&amp;width=1813" alt="image.png"><br>将泡沫贴图通过panner节点进行位移然后（相同的贴图经过不同UV不同panner speed混合可以增加随机度），然后通过顶点颜色来控制泡沫生成的地方。这个泡沫连接到自发光。<br><a name="whnhi"></a></p><h3 id="总体">总体</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646038433618-dc11e10b-b11b-4ed0-b88b-92f0ad6e52d8.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=3929&amp;id=udbcd9d1a&amp;originHeight=3929&amp;originWidth=3278&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1609085&amp;status=done&amp;style=none&amp;taskId=u61cab073-4a1c-462f-81c9-b39b44e9baf&amp;title=&amp;width=3278" alt="image.png"><br><a name="EvoWJ"></a></p><h2 id="开放世界地图制作">开放世界地图制作</h2><p>前言：之前学习的都是通过手绘制作地形，手动绘制植物，手动绘制地形材质。这个系列主要学习通过程序化得到世界地图以及程序化生成植物，根据海拔斜率自动分配不同的材质。<br><a name="Es1PT"></a></p><h3 id="获得一个地形">获得一个地形</h3><p><a name="EPvIM"></a></p><h4 id="获取并使用真实世界的高度图">获取并使用真实世界的高度图</h4><p>首先了解一下虚幻引擎所需要的高度图规格。对于这些参数的东西，都可以通过虚幻文档查询。<br><a href="https://docs.unrealengine.com/4.27/zh-CN/BuildingWorlds/Landscape/Custom/#heightmapformats">https://docs.unrealengine.com/4.27/zh-CN/BuildingWorlds/Landscape/Custom/#heightmapformats</a><br>通过查询虚幻文档以及教程中的解释得到以下几点主要内容：<br><strong>高度图格式</strong><br>从第三方程序导出高度图时，只有以下格式才能在UE4中使用。</p><ul><li>16位灰阶PNG文件</li><li>16位灰阶.RAW文件，以小端字节排序</li></ul><p>如果使用Photoshop来导出高度图，则需要按下图对新图像进行设置： <img src="https://cdn.nlark.com/yuque/0/2022/jpeg/2623605/1646039175555-d9018559-a124-486a-bc02-46ecfae7a292.jpeg#clientId=u010597b5-ed69-4&amp;from=paste&amp;id=u2c2b4d8d&amp;originHeight=1397&amp;originWidth=2164&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=ude8e72c9-f375-4bfd-91f3-bca3e9d37f4&amp;title=" alt><br>在第三方应用程序中制作高度图时，<strong>白色</strong> 的值（在所有通道中为255）代表高度图上的最高点；<strong>黑色</strong> 的值（在所有通道中为0）代表高度图上的最低点。<br><a name="C547q"></a></p><h4 id="创建地形-2">创建地形</h4><p>再次将虚幻文档建议的地形大小亮出来：</p><table><thead><tr><th><strong>整体大小（Overall Size）（顶点）</strong></th><th><strong>四边形 / 分段（Quads / Section）</strong></th><th><strong>分段 / 组件（Sections / Component）</strong></th><th><strong>组件大小（Component Size）</strong></th><th><strong>组件总数（Total Components）</strong></th></tr></thead><tbody><tr><td>8129x8129</td><td>127</td><td>4 (2x2)</td><td>254x254</td><td>1024 (32x32)</td></tr><tr><td>4033x4033</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>1024 (32x32)</td></tr><tr><td>2017x2017</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>256 (16x16)</td></tr><tr><td>1009x1009</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>64 (8x8)</td></tr><tr><td>1009x1009</td><td>63</td><td>1</td><td>63x63</td><td>256 (16x16)</td></tr><tr><td>505x505</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>16 (4x4)</td></tr><tr><td>505x505</td><td>63</td><td>1</td><td>63x63</td><td>64 (8x8)</td></tr><tr><td>253x253</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>4 (2x2)</td></tr><tr><td>253x253</td><td>63</td><td>1</td><td>63x63</td><td>16 (4x4)</td></tr><tr><td>127x127</td><td>63</td><td>4 (2x2)</td><td>126x126</td><td>1</td></tr><tr><td>127x127</td><td>63</td><td>1</td><td>63x63</td><td>4 (2x2)</td></tr></tbody></table><p><a name="aPzYH"></a></p><h4 id="获得高分辨率的高度图">获得高分辨率的高度图</h4><p>教程中讲了很多种方法，这里就写其中一种。<br>首先进入网站<a href="https://opentopography.org/">https://opentopography.org/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646048377493-c36cee02-1167-4e1d-84cd-88ef7a3c3e28.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=312&amp;id=ued1a0b77&amp;originHeight=312&amp;originWidth=1305&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145097&amp;status=done&amp;style=none&amp;taskId=u8efe5059-e1a6-4ef6-b60a-eb8517ec30c&amp;title=&amp;width=1305" alt="image.png"><br>这个网站只能够选择红色区域的高度图，找到想要的区域后通过点击select来框选区域</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646049018584-a4629f13-b472-4ae5-aa97-4f4609631a5e.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=599&amp;id=u648945b8&amp;originHeight=599&amp;originWidth=1314&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1158446&amp;status=done&amp;style=none&amp;taskId=u41349d67-7a30-4a3c-84b5-74bc3aaced5&amp;title=&amp;width=1314" alt="image.png"><br>可以通过左下角的标尺推算自己框选区域的大小。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646049055430-8a86cede-b4bb-462f-897c-0a35c97b314f.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=126&amp;id=u45459f47&amp;originHeight=126&amp;originWidth=175&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=28137&amp;status=done&amp;style=none&amp;taskId=u627ed4d0-a0e6-48e2-89d5-a3ca52dfe6b&amp;title=&amp;width=175" alt="image.png"><br>因为要在虚幻4中创建一个8129×8129的地形，因此框选一个8公里×8公里的高度图。<br>框选完成后向下拉找到第二个的光栅点击进去。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646049329988-3fac06f8-dd9f-46b6-afd9-493a19cc9207.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=284&amp;id=u54fe1f40&amp;originHeight=284&amp;originWidth=1221&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57780&amp;status=done&amp;style=none&amp;taskId=ue9085f96-acb4-4c82-8fc1-3debc77dd27&amp;title=&amp;width=1221" alt="image.png"><br>在弹出的窗口中相比默认选择只需要取消勾选可视化中的从DEM生成山体阴影图像。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646049623484-61f1e7ca-52ce-423b-8b62-821b659891c6.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=528&amp;id=ue252b82b&amp;originHeight=528&amp;originWidth=1057&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38024&amp;status=done&amp;style=none&amp;taskId=u7f42473b-83fe-459b-b261-dfa4e1303d6&amp;title=&amp;width=1057" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646049813641-922a5871-f4ca-48bf-bfe0-78a226dc207c.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=404&amp;id=u2d3bef68&amp;originHeight=404&amp;originWidth=1301&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33612&amp;status=done&amp;style=none&amp;taskId=ud6bb389c-cb55-4ad2-a12a-09865435dc8&amp;title=&amp;width=1301" alt="image.png"><br>为了处理高度图使其能够被虚幻引擎所识别，需要下载一个软件来进行处理。<br>软件的网站连接：<br><a href="http://www.demenzunmedia.com/home/terresculptor/">http://www.demenzunmedia.com/home/terresculptor/</a><br>软件的使用：<br>在打开时的欢迎界面中选择import Terrain<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646050729278-23a1fd54-9549-4130-a738-79f0147a0463.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=650&amp;id=u795fb7e4&amp;originHeight=650&amp;originWidth=847&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=365297&amp;status=done&amp;style=none&amp;taskId=u1ffdf461-3a59-4dc4-973b-98d6e9a3168&amp;title=&amp;width=847" alt="image.png"><br>然后搜索的格式选择Geo TIFF raster imagery<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646050788692-4741d0b7-97e0-4672-b778-16bbd1d56cb6.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=154&amp;id=ufd77c882&amp;originHeight=154&amp;originWidth=265&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8773&amp;status=done&amp;style=none&amp;taskId=u6633e6e3-f3d6-4265-a5cc-11829899f7f&amp;title=&amp;width=265" alt="image.png"><br>然后找到下载的高度图。<br>读取成功后直接点击ok<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646051381643-4c5de3db-cbb7-490a-a308-1ba68c1e1654.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=487&amp;id=u66d7dc38&amp;originHeight=487&amp;originWidth=622&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17359&amp;status=done&amp;style=none&amp;taskId=u0c2f07c6-1e0f-42e2-b9b4-24da171eaa6&amp;title=&amp;width=622" alt="image.png"><br>刚开始导入时显示的是一个平的地形，通过更改Y轴的缩放可以查看地形的效果。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646051515145-dff36f48-8f24-400e-ba65-6505fd412aed.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=556&amp;id=u7fc7b264&amp;originHeight=556&amp;originWidth=551&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56973&amp;status=done&amp;style=none&amp;taskId=u98702463-cbc8-480c-9ee6-c82a50809b6&amp;title=&amp;width=551" alt="image.png"><br>接下来修改地形的分辨率：<br>首先在工具中选择Unreal Engine<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646052083529-0c96823a-e548-4cb2-8640-23a4629bf689.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=511&amp;id=ubf718efc&amp;originHeight=511&amp;originWidth=701&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36244&amp;status=done&amp;style=none&amp;taskId=ue35c0947-da87-49c7-a0f3-3b1ef915292&amp;title=&amp;width=701" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646051599077-de4fa522-2624-4f50-a6d9-68e87697c915.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=550&amp;id=u6d175ec1&amp;originHeight=550&amp;originWidth=293&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34139&amp;status=done&amp;style=none&amp;taskId=u2998be51-4a09-4cfb-ba5b-eea98d0a07d&amp;title=&amp;width=293" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646052438151-c43805af-9444-4c46-9aee-fa33e63b9107.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=709&amp;id=uc3659810&amp;originHeight=709&amp;originWidth=932&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=160513&amp;status=done&amp;style=none&amp;taskId=u175dac8a-9c2e-4905-b282-8c1963fc683&amp;title=&amp;width=932" alt="image.png"><br>可以选择材质赋予地形预览以下效果<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646052570096-8448f222-f1c9-4a6f-8255-b922026ecf61.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=590&amp;id=uf053eabd&amp;originHeight=590&amp;originWidth=554&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40108&amp;status=done&amp;style=none&amp;taskId=u02c1da02-034d-446f-91d6-086e02fa471&amp;title=&amp;width=554" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646052599332-1f21968b-0744-4dc4-8d24-ffa637e33d81.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=726&amp;id=ua748b9ed&amp;originHeight=726&amp;originWidth=1065&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=751701&amp;status=done&amp;style=none&amp;taskId=uc9c315a1-acb2-4d2b-89b4-1699aafbb60&amp;title=&amp;width=1065" alt="image.png"><br>然后导出成PNG格式16位灰度的高度图。<br>然后导入到虚幻引擎通过高度图新建地形<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646052872826-486bb193-e036-493a-ad66-2168e0dc9b00.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=527&amp;id=uf51a89e3&amp;originHeight=527&amp;originWidth=312&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45305&amp;status=done&amp;style=none&amp;taskId=uad895a11-6bc0-4a9d-a0c5-cfef92e13bb&amp;title=&amp;width=312" alt="image.png"><br>刚开始生成的地形同样具有高度缩放不正确的问题，可以通过调整Z轴方向的缩放大小来解决，如果想要获得严谨正确的缩放大小就去虚幻文档里面看一下，里面有教。<br><a name="jRoq2"></a></p><h4 id="地形初始设置">地形初始设置</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646055012059-629ba43e-6a1d-4d6b-ac8b-f4d853cb9baf.png#clientId=u010597b5-ed69-4&amp;from=paste&amp;height=109&amp;id=u4989e49a&amp;originHeight=109&amp;originWidth=273&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5631&amp;status=done&amp;style=none&amp;taskId=ucb6d5e95-611c-440a-af00-b893444d29a&amp;title=&amp;width=273" alt="image.png"><br><a name="Nrmsb"></a></p><h3 id="高级地形斜度混合材质">高级地形斜度混合材质</h3><p>做之前先去bridge下载两个surface<br><a href="https://quixel.com/assets/ukticbcdy">https://quixel.com/assets/ukticbcdy</a><br><a href="https://quixel.com/assets/tdloaf1r">https://quixel.com/assets/tdloaf1r</a><br>下载4k的<br>下载好后按照之前的方法将纹理压缩成CR,NOH的格式<br>转换法线贴图的压缩格式为BC7取消SRGB<br>先按照之前地形材质的做法为其设置UV缩放等参数。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646104939957-7a7d3559-59a2-41e5-85f6-d702ff361a8f.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=800&amp;id=u43652aeb&amp;originHeight=800&amp;originWidth=1134&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=249904&amp;status=done&amp;style=none&amp;taskId=u0bb698e6-1816-4ce6-a3f9-d654affb328&amp;title=&amp;width=1134" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646102434451-722b1ec2-9bad-4236-b5ee-a956a40a5494.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=800&amp;id=u2f280667&amp;originHeight=800&amp;originWidth=974&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=239352&amp;status=done&amp;style=none&amp;taskId=ue88781c2-41b6-4533-a84a-56694055a1b&amp;title=&amp;width=974" alt="image.png"><br>先介绍一下通过VertexNormal来控制两种地形的混合。看一下整体连接：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646109097680-877f75e2-b75e-4e94-bc3e-3332e581773e.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=838&amp;id=ooefA&amp;originHeight=838&amp;originWidth=2086&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=243798&amp;status=done&amp;style=none&amp;taskId=u5cfd37c3-0899-4fde-85f3-7a58f41438a&amp;title=&amp;width=2086" alt="image.png"><br>解析：<br>混合材质用到了BlendMaterialAttributes这个节点，这个节点的作用是通过蒙版混合两种材质。和之前使用LayerBlend节点不同，LayerBlend作用是使地形可以绘画，这里是程序生成地形材质的。<br>然后介绍一下锐化的理解：锐化就是增加对比度。<br>锐化强度为1：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646109574877-78b202ac-596f-4241-9295-36eb470fa444.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=114&amp;id=u4caf7959&amp;originHeight=114&amp;originWidth=131&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16839&amp;status=done&amp;style=none&amp;taskId=u52dbdfbf-6cae-49b2-bb20-08eb28dbcc4&amp;title=&amp;width=131" alt="image.png">锐化强度为100时：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646109584689-02acdded-7dc9-4d2c-ab5c-9464cae7655b.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=108&amp;id=u6d2a9118&amp;originHeight=108&amp;originWidth=126&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15497&amp;status=done&amp;style=none&amp;taskId=ub8876cd5-69f2-4365-b48a-e7a668d4593&amp;title=&amp;width=126" alt="image.png">锐化强度为1000时<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646109752188-c555adc5-d36d-462d-93cc-068e0dc755c9.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=100&amp;id=u9525901e&amp;originHeight=100&amp;originWidth=107&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11794&amp;status=done&amp;style=none&amp;taskId=uec646657-9762-4170-90c6-0251642a724&amp;title=&amp;width=107" alt="image.png"><br>总结锐化计算就是在数值为0.5的那条线上进行分界，将小于0.5的数值向0趋近，将大于0.5的数值向1趋近。要想好理解可以代入0.505，0.505减0.5后变成0.005再乘上100就变成了0.5再加上0.5就变成了1。<br>除了图中的锐化算法还有一种就是利用Power节点。<br>因为是蒙版所以最终加一个saturate。<br>目前整体：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646111645711-b55b4993-2091-4204-b2da-30c3d049555b.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=814&amp;id=u9a60a192&amp;originHeight=814&amp;originWidth=2054&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=233572&amp;status=done&amp;style=none&amp;taskId=uae17f7dc-bdc8-4307-9430-4c83676dfaa&amp;title=&amp;width=2054" alt="image.png"><br>目前效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646111801648-3926d9d7-ceb3-428f-8e88-f533fcb36da3.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=497&amp;id=u3f838f91&amp;originHeight=497&amp;originWidth=793&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=595770&amp;status=done&amp;style=none&amp;taskId=u53288066-aace-41ae-a523-aa19781abd2&amp;title=&amp;width=793" alt="image.png"><br>因为这里看起来就像是雪全部盖在来岩石上面，因此使用PixelNormal可以使计算的数据更大得到的效果更好。（材质课中有讲法线混合）。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646111999983-3d788e42-e6bd-4244-b3f6-a9a7da74f632.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=436&amp;id=uf2b7214b&amp;originHeight=436&amp;originWidth=615&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=420265&amp;status=done&amp;style=none&amp;taskId=u8184ced8-504e-483c-ae38-7bc50cdf00a&amp;title=&amp;width=615" alt="image.png"><br>如果换成使用PixelNormal混合，蒙版：这里不仅将路面混合了而且还将斜面也混合了不少。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646112803604-831163b3-2a3b-4bce-a284-c53ef7ef1001.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=473&amp;id=u8be00029&amp;originHeight=473&amp;originWidth=641&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=476646&amp;status=done&amp;style=none&amp;taskId=u2f3300a4-097c-4885-9e90-4b04c85f324&amp;title=&amp;width=641" alt="image.png"><br>最终选择采用将两者混合使用：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646113055575-5b5be623-6715-44f8-aa30-e5956ff00bba.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=441&amp;id=u2dd9c389&amp;originHeight=441&amp;originWidth=530&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=283218&amp;status=done&amp;style=none&amp;taskId=u67353b2b-b4eb-4416-8f6a-8d23d192e6e&amp;title=&amp;width=530" alt="image.png"><br>但是混合后会出现报错，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646113134623-6928acc9-6abd-4ffe-8fd3-e6616abf4f62.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=800&amp;id=u25dccdd5&amp;originHeight=800&amp;originWidth=1986&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=237767&amp;status=done&amp;style=none&amp;taskId=ua72b4897-e07a-4ba0-a53a-eda750b44bc&amp;title=&amp;width=1986" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646113142801-322bdf48-81f9-4af1-bce8-aa63a8bbde1c.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=44&amp;id=ufc7d8646&amp;originHeight=44&amp;originWidth=585&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5535&amp;status=done&amp;style=none&amp;taskId=u7a28e0f8-7a01-4c58-97d7-4f9fc09c4c4&amp;title=&amp;width=585" alt="image.png"><br>因为不能通过像素法线来混合输入到normal节点中，因此这个BlendMaterialAttributes节点就不使用了，所以我们自己创建一个用来混合材质的材质函数。将其他属性用顶点与像素混合的结果，normal属性只使用顶点法线。<br>创建材质函数前可以先参考一下引擎中自带的一个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646113592772-ef8957a7-25ba-4897-bbeb-7a52d9713f83.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=121&amp;id=u94efa749&amp;originHeight=121&amp;originWidth=261&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16155&amp;status=done&amp;style=none&amp;taskId=u4ebd824c-cb1f-4e97-9a5b-580cd6da471&amp;title=&amp;width=261" alt="image.png">将它复制到自己的材质函数中并进行一些修改可以让我们使用。<br>主要修改如下：<br>将之前的一个Alpha输入节点改成了两个Alpha输入节点，其中AlphaPixel用来接收依赖VertexNormal与PixelNormal混合生成的蒙版，AlphaVertex用来接收仅依赖VertexNormal生成的蒙版。<br>然后调整使法线属性和Height的混合使用仅依赖VertexNormal生成的蒙版，其他属性的混合都依赖VertexNormal与PixelNormal混合生成的蒙版。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646120060507-3107a5da-be6a-4b64-8ae5-d4a6f11f93b0.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=526&amp;id=u5531bc18&amp;originHeight=526&amp;originWidth=1184&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=187329&amp;status=done&amp;style=none&amp;taskId=ufd8bd3e2-6ea9-40b5-848d-c39e54eec47&amp;title=&amp;width=1184" alt="image.png"><br>目前整体：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646117837315-1c912785-d08f-471a-994b-8f08a6610fc3.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=916&amp;id=ue5fffcaf&amp;originHeight=916&amp;originWidth=2276&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=344071&amp;status=done&amp;style=none&amp;taskId=udf4db9cd-357c-4fca-be5e-5dd06d2b5e6&amp;title=&amp;width=2276" alt="image.png"><br>看效果：材质混合效果好了很多。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646117891177-bc8c4480-cbe7-4d0c-80d1-f96035c38f24.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=464&amp;id=u3776b3d1&amp;originHeight=464&amp;originWidth=847&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=714620&amp;status=done&amp;style=none&amp;taskId=u0aeeb8e6-96c2-45b8-994c-0148c6d2f80&amp;title=&amp;width=847" alt="image.png"><br>接下来将生成Alpha蒙版整理成材质函数，使其更加美观<br>材质函数名叫：MF_AngleBlendAplha<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646118632559-be46249a-14a3-40ca-ba7c-ac56d967cfdd.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=847&amp;id=ufae668ca&amp;originHeight=847&amp;originWidth=1811&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=266043&amp;status=done&amp;style=none&amp;taskId=ub7909c53-fa37-400d-b9cc-0f5dd718030&amp;title=&amp;width=1811" alt="image.png"><br>再配合之前做的MF_LandscapeDisplacement材质函数(需要开启细分)，目前的全部节点如下：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646119009607-3ed909eb-d794-48f0-80e8-4cfaddff154a.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=767&amp;id=u80041881&amp;originHeight=767&amp;originWidth=1256&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=194246&amp;status=done&amp;style=none&amp;taskId=uf6e32745-fbf2-4d23-a08a-3370ac89f95&amp;title=&amp;width=1256" alt="image.png"><br><a name="b2ldZ"></a></p><h3 id="高级地形自动材质">高级地形自动材质</h3><p>基本地形斜度混合材质已经做好了，接下来制作能够通过海拔以及地形斜度的大小来混合更多材质。<br>首先先再bridge下载课程中额外需要的纹理。<br><a href="https://quixel.com/megascans/home?assetId=ujldajxdy">https://quixel.com/megascans/home?assetId=ujldajxdy</a><br><a href="https://quixel.com/megascans/home?assetId=pjwky20">https://quixel.com/megascans/home?assetId=pjwky20</a><br>一个草地一个泥地。<br>依然按照之前的处理地形贴图的步骤处理一下。<br>对应材质参数设置：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646126377860-a6979a47-8ffd-4290-9781-ef9170447f51.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=784&amp;id=ua64534ce&amp;originHeight=784&amp;originWidth=1006&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=229317&amp;status=done&amp;style=none&amp;taskId=u439c8850-8a72-4add-931c-69cf9376c14&amp;title=&amp;width=1006" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646126478173-46775754-1a96-496e-8d19-8df435ea3625.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=713&amp;id=uba03eb7d&amp;originHeight=784&amp;originWidth=1002&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=219223&amp;status=done&amp;style=none&amp;taskId=ub32a383d-0470-476b-82af-aac9ad0b292&amp;title=&amp;width=910.9090711656685" alt="image.png"><br><a name="x8p9S"></a></p><h4 id="海拔高度混合">海拔高度混合</h4><p>这个材质又多利用了一个节点<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646121480273-321efcc0-4469-4f91-be9a-e8654955babb.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=134&amp;id=ue3009729&amp;originHeight=134&amp;originWidth=167&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11746&amp;status=done&amp;style=none&amp;taskId=ud4e4ca79-5d53-4299-b1ed-4e05c6ac8a9&amp;title=&amp;width=167" alt="image.png">这个节点的作用是根据Alpha的数值与Min和Max进行对比，趋向于Min就趋向于0，趋向于Max就趋向于1.<br>可以利用这个节点创建根据地形的海拔高度而产生的蒙版。<br>Min设置为地形Z轴最低数值，Max设置为地形Z轴最高数值，Alpha连接世界位置后得到的：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646124170691-30523c38-babf-4e1b-b010-558b5d0770d9.png#clientId=ub2041b83-99cc-4&amp;from=paste&amp;height=364&amp;id=u509db291&amp;originHeight=364&amp;originWidth=694&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21580&amp;status=done&amp;style=none&amp;taskId=u226316b3-35cc-4645-9604-d561c733697&amp;title=&amp;width=694" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646124409185-b02026d2-adae-4539-9298-ec99f47a3b02.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=210&amp;id=uec4eb615&amp;originHeight=210&amp;originWidth=520&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36021&amp;status=done&amp;style=none&amp;taskId=u0bced350-1ba9-422d-882c-f050d185faa&amp;title=&amp;width=520" alt="image.png"><br>Min和Max可以通过在地形的最低处和最高处放一个Box来查看<br>这里选择不包括材质偏移应该是因为地形具有根据摄像机于模型距离来增加细分和置换的功能，使用包括材质偏移的绝对世界位置的话会因为绝对世界位置一直在变化而重复计算影响性能。、<br>如果仅仅依靠smoothstep生成的遮罩充当混合时的依靠是不行的，因为这是一个平滑的过程，它是将低海拔的材质慢慢过渡到高海拔的材质，因此还需要一些其他操作。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646131499302-b67ae233-768a-4c56-a056-56c29297055f.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=438&amp;id=u10a6eead&amp;originHeight=482&amp;originWidth=986&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107604&amp;status=done&amp;style=none&amp;taskId=uea0b97f1-f272-4237-982d-323578dd29b&amp;title=&amp;width=896.3636169354781" alt="image.png"><br>要想让两种材质不仅仅依靠平滑的过渡进行混合，进行如下操作：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646133007373-9e946e25-8da2-4825-8ec6-31aa11ef43fc.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=371&amp;id=ubf74852c&amp;originHeight=408&amp;originWidth=1167&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106849&amp;status=done&amp;style=none&amp;taskId=ua0b86e99-1238-427d-bcea-0041112b88c&amp;title=&amp;width=1060.909067914506" alt="image.png"><br>这里Blend_Overlay中的Base和Blend的连接反了，应该SmoothStep连接Base，Moist_Stones连接Blend<br>blend_overlay之前：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646132208786-678dd773-4e77-4635-b4ee-14ebd93f31da.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=267&amp;id=u88fc29c5&amp;originHeight=294&amp;originWidth=339&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35827&amp;status=done&amp;style=none&amp;taskId=ud9d8cc3f-fe2b-49c4-be55-d3d7ecdb8e9&amp;title=&amp;width=308.1818115021573" alt="image.png"><br>blend_overlay之后：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646132261583-966ddb3b-43cb-4a87-9b8c-937154321016.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=226&amp;id=uc59b3cf9&amp;originHeight=398&amp;originWidth=549&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=246492&amp;status=done&amp;style=none&amp;taskId=u4bdbc322-ebfb-4909-aa24-fe4edee936e&amp;title=&amp;width=311.09088134765625" alt="image.png"><br>相当于混合时多加上了高度。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646132917643-4ef8a984-a60d-49d7-a740-07a2b435f831.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=313&amp;id=uabc103ab&amp;originHeight=344&amp;originWidth=454&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=290664&amp;status=done&amp;style=none&amp;taskId=u3cdc026d-ca3b-4153-9a5a-6f772665da2&amp;title=&amp;width=412.7272637816502" alt="image.png"><br>然后通过cheap_contrast节点增加对比度减少灰色的存在使混合更明显。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646132936633-23bf859d-e974-4008-b425-50c1001d9257.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=141&amp;id=uee0ace69&amp;originHeight=155&amp;originWidth=292&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=62029&amp;status=done&amp;style=none&amp;taskId=u803adf20-53b7-4e4d-bf06-4486acb0b91&amp;title=&amp;width=265.45453970097327" alt="image.png"><br><a name="zFpQp"></a></p><h4 id="高度与角度的混合">高度与角度的混合</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646140740380-a1bae642-ef1f-4b3b-a913-a81d5ae4d558.png#clientId=uda092ed3-089c-4&amp;from=paste&amp;height=1321&amp;id=ubc92a0ad&amp;originHeight=1453&amp;originWidth=3597&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=914440&amp;status=done&amp;style=none&amp;taskId=ua97c3a25-9cf3-4c1e-8951-0178d546639&amp;title=&amp;width=3269.9999291246604" alt="image.png"><br>教程中这些材质混合后再混合 依靠不同蒙版。要学习这个混合功能主要把前面的高度混合和角度混合再仔细看一下就好理解许多了。<br>这里角度混合AngleMult的数值为0时是<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646141081785-e61cc7b3-ca64-4648-8393-af30cf49f9d3.png#clientId=uc44a8ea9-3e91-4&amp;from=paste&amp;height=266&amp;id=u24fa1ee3&amp;originHeight=293&amp;originWidth=318&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86684&amp;status=done&amp;style=none&amp;taskId=u168d524a-d938-4f4c-b027-01392812d44&amp;title=&amp;width=289.0909028250325" alt="image.png">，数值增加为正值时就是白色越多，AngleMult为负值时就是黑色越多。意义就是白色越多就代表平坦程度要求越低（AngleMult数值越大），黑色越多就代表平坦程度要求越高（AngleMult数值越小。）平坦程度要求高意思是只有非常平坦的区域才会为白色蒙版区域。<br>这里还有一个巧的点在于通过海拔的高度来控制AngleMult和PixelNormalBlend。<br>就这样混合加混合就都混合在一起了。<br>目前成果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646142126625-7ace3179-eb14-4fac-b86f-db7dd3883594.png#clientId=uc44a8ea9-3e91-4&amp;from=paste&amp;height=495&amp;id=u91af599e&amp;originHeight=544&amp;originWidth=951&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=775082&amp;status=done&amp;style=none&amp;taskId=ua5f2b55c-ce1e-44bf-a0fc-00f9df6abd6&amp;title=&amp;width=864.5454358069369" alt="image.png"><br><a name="nmdg7"></a></p><h3 id="在自动材质上绘制材质">在自动材质上绘制材质</h3><p>经过刚开始的课程已经知道，要想实现绘制材质就要使用LayerBlend节点利用图层来达到绘制的效果。因此要实现在自动材质上绘制材质的功能可以如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646182997713-03a8e218-2475-4325-bf70-e904c8ac9240.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=489&amp;id=u5e670bba&amp;originHeight=538&amp;originWidth=1094&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=220396&amp;status=done&amp;style=none&amp;taskId=u717d8cf7-92c3-4e14-83bd-f28de532343&amp;title=&amp;width=994.5454329892628" alt="image.png"><br>就是将自动的地形材质和有斜度的地形材质和低海拔平坦的地形材质转换成地形图层，然后通过sample得到对应的图层使其能够在绘制的同时将高度信息一起绘制上去。<br>目前整体：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646183479988-e174db0c-12e1-4cf1-9020-65df27785dfb.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=1379&amp;id=ufaaba6d6&amp;originHeight=1517&amp;originWidth=4045&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1126364&amp;status=done&amp;style=none&amp;taskId=u1e55dc1e-481c-4228-ab95-726f3a6ba69&amp;title=&amp;width=3677.272647569989" alt="image.png"><br>这里Blend_Overlay中的Base和Blend的连接反了，应该SmoothStep连接Base，Moist_Stones连接Blend<br>更改材质后赋予地形图层就可以了<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646183707380-16179c73-6be5-46a7-949e-ec81e357b148.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=249&amp;id=u76945cea&amp;originHeight=274&amp;originWidth=286&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35402&amp;status=done&amp;style=none&amp;taskId=u552ea25b-9232-4cfe-97a8-b7839b128b9&amp;title=&amp;width=259.9999943646519" alt="image.png">如果没有地形图层就重新指定一下材质<br><a name="jiq33"></a></p><h3 id="程序化植被">程序化植被</h3><p><a name="J1HBS"></a></p><h4 id="资产准备以及基本程序化生成植被的操作">资产准备以及基本程序化生成植被的操作</h4><p>程序化植被功能做之前先了解一下植被的分布，如图所示：草都集中生长在更平坦的地方，有绿色的也有枯草。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646184370619-262a5558-a92d-4ec8-8ca7-d20b85799a44.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=389&amp;id=u7cf9434c&amp;originHeight=428&amp;originWidth=827&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=611270&amp;status=done&amp;style=none&amp;taskId=ucd6fa8b7-02ef-42d9-9ebc-f7b10241de5&amp;title=&amp;width=751.818165522962" alt="image.png"><br>先去下载一下需要的草丛（下载2k的）<br><a href="https://quixel.com/megascans/home?assetId=uddmcgbia">https://quixel.com/megascans/home?assetId=uddmcgbia</a><br><a href="https://quixel.com/assets/rbdoo">https://quixel.com/assets/rbdoo</a><br><a href="https://quixel.com/megascans/home?assetId=uddmcgbia">https://quixel.com/megascans/home?assetId=uddmcgbia</a><br>这三个之中有一个是之前做手绘地形时用过的<br>树：树使用之前做手绘地形用过的<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646185000636-afd98137-f9ce-4e74-91bb-0c24eff1b1c0.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=334&amp;id=uffd758ea&amp;originHeight=367&amp;originWidth=624&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=311115&amp;status=done&amp;style=none&amp;taskId=u3317b868-cfb9-40b5-8c4c-76b96115cfe&amp;title=&amp;width=567.2727149774223" alt="image.png"><br>先做程序化草：<br>我们已经知道了草生长的区域是低海拔以及平坦的范围之上。因此我们可以让根据海拔生成的蒙版以及根据斜率生成的蒙版结合得到低海拔以及平坦区域的蒙版，然后利用grass节点生成植被。<br>grass节点全名叫LandscaperGrassOutput<br>要使用grass节点需要在内容浏览器中自定义创建一个地形草地类型：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646186026981-906e282b-81a2-4974-a69e-f91879b3623f.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=156&amp;id=u9027af3e&amp;originHeight=172&amp;originWidth=389&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17725&amp;status=done&amp;style=none&amp;taskId=u36f443f9-b827-4fb8-8063-b1135256a5a&amp;title=&amp;width=353.63635597150204" alt="image.png"><br>介绍一下这个地形草地类型：<br>进去后可以通过草地种类可以指定要程序化生成的植被的种类。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646186111882-4053d35d-e5dc-4419-82a3-d6dc292c6c2f.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=715&amp;id=ufbe655f7&amp;originHeight=786&amp;originWidth=1064&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63403&amp;status=done&amp;style=none&amp;taskId=u243414be-c056-4093-93bc-8717629b532&amp;title=&amp;width=967.272706307656" alt="image.png"><br>其中草地密度是以十平方米为单位，<strong>使用网格</strong>的作用就是让植被生成时产生位置抖动使其看起来不那么对齐。<br>其中起始剔除距离以及结束剔除距离的过渡很生硬这里介绍的使用这个剔除距离需要使用PerInstanceFadeAmount材质节点这个在后面介绍，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646225174518-0527468a-a82b-4ae9-85bf-9a8112f8bbc0.png#clientId=u12e76c12-4131-4&amp;from=paste&amp;height=67&amp;id=ued01552d&amp;originHeight=74&amp;originWidth=529&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12395&amp;status=done&amp;style=none&amp;taskId=u8f563e34-5812-4910-9c82-1a1ed7a7a4a&amp;title=&amp;width=480.9090804856673" alt="image.png">然后下面的这些主要看一下要不要进行缩放，要不要接收贴花和投射动态阴影。还有这个Grass节点的使用：<br>要使用grass节点只需要指定草地类型然后将蒙版传给grass节点就可以了，grass节点会自动为蒙版区域生成指定的草地类型<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646187972956-102e3e38-1cdd-43a9-97d7-31b84277f91a.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=202&amp;id=ub5eca7fe&amp;originHeight=222&amp;originWidth=290&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17341&amp;status=done&amp;style=none&amp;taskId=ufdd64932-aba7-4363-9d0a-8f853b71da2&amp;title=&amp;width=263.63635792219947" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646187925324-7d310985-b029-4b45-8b43-f37bbd022fbe.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=213&amp;id=u03e7e9d9&amp;originHeight=234&amp;originWidth=590&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31592&amp;status=done&amp;style=none&amp;taskId=u24a80454-9874-43e2-baf2-642c41fba8e&amp;title=&amp;width=536.3636247382678" alt="image.png"><br>效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646188066657-e43ce263-0c78-4085-b1f0-483be0844e73.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=374&amp;id=u4afd5e54&amp;originHeight=411&amp;originWidth=661&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=626127&amp;status=done&amp;style=none&amp;taskId=u0cd62c8a-7b4b-4293-b468-437bd599f25&amp;title=&amp;width=600.9090778847374" alt="image.png"><br>教程中的LOD过渡比较明显，但是我的草的过渡不明显。然后发现我的bridge导入到引擎中的资源并没有Billboard的贴图，因此我手动找到billboard的贴图导入到引擎中并指定。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646200179077-b02e128a-f310-4179-8ba8-1773ff9443ce.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=435&amp;id=u231616d2&amp;originHeight=478&amp;originWidth=750&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=119132&amp;status=done&amp;style=none&amp;taskId=u582755ba-0c75-41d7-a2eb-e3e8867dab5&amp;title=&amp;width=681.818167040171" alt="image.png"><br>指定后就跟教程中的效果一样了。<br>先了解一下billboard，直译名字叫广告牌。就是这种面片，比如在游戏中平视这种面片时并没有面片的感觉，因为材质效果就是将这些面片会根据观察者的视角自动转换，而造成这种面片是立体的错觉，但是他是有弊端的，那就是当俯视或者仰视时会暴露这是面片。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646200105368-25519895-5722-46bd-bac7-9c92e993be9d.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=382&amp;id=ud198b5f5&amp;originHeight=420&amp;originWidth=717&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=624231&amp;status=done&amp;style=none&amp;taskId=uf040d48f-295c-426d-8b29-48dec5a114a&amp;title=&amp;width=651.8181676904035" alt="image.png"><br>接下来进行性能优化以及解决远处广告牌材质的显示问题以及解决过渡生硬的问题。<br><a name="YxRoy"></a></p><h4 id="草地种类介绍">草地种类介绍</h4><p>**1、草地密度管理<br>**我们可以为一个草地类型增加多个草地种类，为这多种草地设置不同的草地密度以及不同的起始剔除距离与结束剔除距离。通过这样设置可以制造近处，中处，远处的草地种类。使近处的草地密度高多边形密度高投射阴影，中处的草地密度低多边形密度低不投射阴影，依此类推。<br>如图设置：这里提示一下可以通过右键将属性复制粘贴<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646201476821-9e91c865-6139-4aba-ae00-e87461d88372.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=127&amp;id=uada11ec0&amp;originHeight=140&amp;originWidth=97&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6661&amp;status=done&amp;style=none&amp;taskId=u28a7258b-38f1-458d-a705-7228111bc12&amp;title=&amp;width=88.18181627052878" alt="image.png">并且我们手动在这里设置的起始剔除距离以及结束剔除距离需要在材质面板中通过一个节点来使这些参数具备剔除的功能，等下讲。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646201442381-d4edfe53-2a0c-46a6-9ed2-0b1a318120fc.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=644&amp;id=u3cce9dcb&amp;originHeight=708&amp;originWidth=916&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66058&amp;status=done&amp;style=none&amp;taskId=u2f82557b-3168-4934-8ea6-023c2edfc92&amp;title=&amp;width=832.7272546783955" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646201605027-500464de-c7c5-4a1e-9a31-42d0b61cf2d9.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=655&amp;id=u1f24cb30&amp;originHeight=721&amp;originWidth=994&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67856&amp;status=done&amp;style=none&amp;taskId=ue7439d81-6093-41ec-970b-0d926b9c689&amp;title=&amp;width=903.6363440505734" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646201657552-99e3b88b-49ab-4d6d-abee-264e5d69f77f.png#clientId=u208596d1-8506-4&amp;from=paste&amp;height=639&amp;id=u992eb426&amp;originHeight=703&amp;originWidth=347&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34035&amp;status=done&amp;style=none&amp;taskId=u7df99bf2-fd2b-42b7-bfb5-cf449517d36&amp;title=&amp;width=315.45453861725247" alt="image.png"><br><a name="dLK0n"></a></p><h4 id="解决过渡生硬的问题以及增加草的多样性">解决过渡生硬的问题以及增加草的多样性</h4><p>要想解决这个问题需要对母材质进行更改。<br>教程中是使用了PerInstanceFadeAmount材质节点<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646225174518-0527468a-a82b-4ae9-85bf-9a8112f8bbc0.png#clientId=u12e76c12-4131-4&amp;from=paste&amp;height=67&amp;id=FImIe&amp;originHeight=74&amp;originWidth=529&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12395&amp;status=done&amp;style=none&amp;taskId=u8f563e34-5812-4910-9c82-1a1ed7a7a4a&amp;title=&amp;width=480.9090804856673" alt="image.png"><br>将这个节点使用在母材质之中，将这个节点连接到基础颜色之中。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646273421761-29d5dfd2-3bc8-4563-ae31-41c3866d55cb.png#clientId=uaf76222c-30f6-4&amp;from=paste&amp;height=185&amp;id=u4761f8fa&amp;originHeight=204&amp;originWidth=486&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27680&amp;status=done&amp;style=none&amp;taskId=u2b2a1ed4-d084-43f3-97e6-4cf5ae9c8d6&amp;title=&amp;width=441.8181722420308" alt="image.png">会看到这些黑色的渐变<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646273406618-24d103ff-feef-4410-879f-a4d52c542b82.png#clientId=uaf76222c-30f6-4&amp;from=paste&amp;height=335&amp;id=ub70159ba&amp;originHeight=369&amp;originWidth=911&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=846834&amp;status=done&amp;style=none&amp;taskId=ud8a18b7d-46dd-4b3d-8a1c-f8e8520f493&amp;title=&amp;width=828.1818002314611" alt="image.png"><br>但是我自己做的时候并没有这些黑色的渐变，不知道为什么。<br>教程中利用这个节点配合DTAA节点使渐变更顺滑。DTAA的作用就是使像素随着时间的推移混合抖动。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646273595917-f2d5cd93-0b9c-48bd-a69a-80ef9c7d9dec.png#clientId=uaf76222c-30f6-4&amp;from=paste&amp;height=317&amp;id=ua371cf03&amp;originHeight=349&amp;originWidth=1162&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=131541&amp;status=done&amp;style=none&amp;taskId=u63713f30-545d-49e0-8229-af651ff7e0e&amp;title=&amp;width=1056.3636134675717" alt="image.png"><br>不连接到不透明度是因为使用不透明度消耗性能太高了。<br><strong>增加草的多样性：</strong><br>为了增加草的多样性，为草地类型添加多个草地种类，<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646275755792-e774361b-e1b6-4ac5-b7bd-85cc94f336ed.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=548&amp;id=u1dfeb254&amp;originHeight=603&amp;originWidth=845&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39842&amp;status=done&amp;style=none&amp;taskId=u6dc92e00-5017-4a49-a495-b34f6521df6&amp;title=&amp;width=768.181801531926" alt="image.png"><br>添加不同的草地种类主要是剔除距离有一些区别。<br><a name="er8DA"></a></p><h4 id="增加新的草地种类：树">增加新的草地种类：树</h4><p>要想程序化生成树，首先要先想树要生长在哪些区域，从真实世界上来看，树一般生长在低海拔的偏陡峭的区域。然后要知道树的生长跟倾斜地形的法线方向是不同的，树生长是直直的向上生长的，因此在地形草地类型中应该取消勾选对齐到表面。<br>这种树这样设置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646282006236-44715c32-feff-41d2-8114-1d8756526183.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=600&amp;id=u1b2d12f2&amp;originHeight=660&amp;originWidth=969&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=61970&amp;status=done&amp;style=none&amp;taskId=u0272cdce-90e2-448f-b8f0-e18c53e7db9&amp;title=&amp;width=880.909071815901" alt="image.png"><br>小一些的植物这样设置。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646282038661-eb9a062a-8040-441e-b90d-ca842ab3b125.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=571&amp;id=ua39893d4&amp;originHeight=628&amp;originWidth=943&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=58172&amp;status=done&amp;style=none&amp;taskId=uf1e3ad24-6679-46d4-8f4d-c94c6356a99&amp;title=&amp;width=857.2727086918417" alt="image.png"><br>在Grass节点上面新增加草地类型将蒙版赋予过去<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646282061892-205dff25-95f8-4de5-88e3-25e0e55e9204.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=272&amp;id=u3d60d18a&amp;originHeight=299&amp;originWidth=303&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20222&amp;status=done&amp;style=none&amp;taskId=ue4fb4df5-587f-4e41-a935-91a72c6d483&amp;title=&amp;width=275.4545394842291" alt="image.png"><br>效果：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646282282619-8c379c2e-8c81-4ff1-a002-2eab37fb440d.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=407&amp;id=ucf8e3485&amp;originHeight=448&amp;originWidth=857&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=706910&amp;status=done&amp;style=none&amp;taskId=uef280507-a6c3-4455-aa11-e2b3a4a7665&amp;title=&amp;width=779.0908922045687" alt="image.png"><br>整体节点：又把各种地方的蒙版整理解释了一遍。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646282341218-397f17b9-9a9c-46ea-8fed-78162326e6ca.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=1675&amp;id=u3edde52e&amp;originHeight=1843&amp;originWidth=4045&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1290450&amp;status=done&amp;style=none&amp;taskId=ue70d6451-6756-4a21-bfde-00a774c42c6&amp;title=&amp;width=3677.272647569989" alt="image.png"><br><a name="Pfg5x"></a></p><h4 id="解决广告牌材质的发光问题">解决广告牌材质的发光问题</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646282443876-9ec81649-9a79-4dfa-8ff2-a156a23bd750.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=289&amp;id=u4540614e&amp;originHeight=318&amp;originWidth=657&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=447829&amp;status=done&amp;style=none&amp;taskId=u45b50a8b-3219-45aa-9a1b-48efb1c2ef6&amp;title=&amp;width=597.2727143271899" alt="image.png"><br>为了解决这个问题需要对其母材质进行更改，因此将原来的母材质复制一个，将它改造成一个专门应用于广告牌的母材质。<br>先理解一下为什么远处的广告牌材质草的光照会这样，从世界场景法线的缓冲中查看法线远处的草不跟前面的草一样看起来像是朝向我们的。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646283386250-c4219055-c953-4d77-877e-3ded80089b6f.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=113&amp;id=u14923e86&amp;originHeight=124&amp;originWidth=247&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=79251&amp;status=done&amp;style=none&amp;taskId=ud395ded7-6481-4271-b7b6-4b95c69bfce&amp;title=&amp;width=224.545449678563" alt="image.png">所以我们需要自己创建一个专门针对这种面片草创建广告牌材质。<br>创建广告牌材质之前先了解一下引擎为广告牌材质做的材质函数SpeedTreeBillboardNormals<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646283841697-d4254159-7bb1-4c60-8b4f-3360c3b0e36b.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=76&amp;id=ua2e12c86&amp;originHeight=84&amp;originWidth=238&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11669&amp;status=done&amp;style=none&amp;taskId=u38636ac2-a9ca-42fd-8fd6-7cf113ad978&amp;title=&amp;width=216.36363167408095" alt="image.png"><br>为母材质进行了以下更改：<br>1、将粗糙度统统改为1，将Wind功能删除掉（因为就两个平面，wind功能实际上起不到什么作用还提高了性能消耗），将法线栏的节点重置为如下：<br>首先是使用将法线贴图替换成0，0，1节省资源，然后乘上TwoSideSign使法线在内外两端都为正的，然后利用SpeedTreeBillboardNormals材质函数使法线始终朝向摄像机，最后因为Normal接收的是切线空间的数值，因此利用transform节点进行世界空间与切线空间之间的转换。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646284380161-8fec5da5-0b24-4462-b3b0-f428a8059cf1.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=1884&amp;id=u980600e0&amp;originHeight=2072&amp;originWidth=1587&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=535711&amp;status=done&amp;style=none&amp;taskId=u8d0cb9b2-8b8b-4db7-82b3-3c1d146dd5a&amp;title=&amp;width=1442.7272414570018" alt="image.png"><br>让植物广告牌材质的母材质替换成修改后的母材质后，可以看到法线的效果更好了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646284954303-79de9b93-4fa8-457d-84e2-1da437009d7c.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=116&amp;id=uab5976d5&amp;originHeight=128&amp;originWidth=253&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75663&amp;status=done&amp;style=none&amp;taskId=u0696de97-17f8-43e9-8a62-388c7b57fb4&amp;title=&amp;width=229.99999501488438" alt="image.png"><br>法线效果的更正解决的是植物的发光问题。现在还需要解决一个的问题就是远处的草颜色太浅了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646285146371-0619d35b-64f3-4120-b381-8a6f18356dd2.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=113&amp;id=ud971e9a3&amp;originHeight=124&amp;originWidth=255&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=79401&amp;status=done&amp;style=none&amp;taskId=u41e81ece-4e34-4368-b63d-d4587d68804&amp;title=&amp;width=231.81817679365815" alt="image.png">要解决这个问题只需要进入材质调节广告牌材质的颜色调暗就可以了。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646285193519-16b4587c-6ae1-43e7-8172-da569db32cc2.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=317&amp;id=u11bdfb59&amp;originHeight=349&amp;originWidth=831&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20006&amp;status=done&amp;style=none&amp;taskId=uccd67dc5-91c4-4a0a-b2e2-d8c6d2fe083&amp;title=&amp;width=755.4545290805095" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646285244501-acb96bd3-4663-403a-b314-daf072917e68.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=115&amp;id=u8b197ede&amp;originHeight=127&amp;originWidth=289&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=82000&amp;status=done&amp;style=none&amp;taskId=u41e985f5-15db-4dcb-b4ed-974d88198b4&amp;title=&amp;width=262.72726703281256" alt="image.png">调整后颜色匹配了许多。<br><a name="cUXql"></a></p><h3 id="使用实时虚拟纹理优化">使用实时虚拟纹理优化</h3><p>使用控制台命令stat unit可以增加帧速率计数器提供的信息。输入后<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646286130525-4d5b1c51-5e29-4829-8e78-0b57424310d9.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=127&amp;id=zpZdG&amp;originHeight=140&amp;originWidth=156&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46225&amp;status=done&amp;style=none&amp;taskId=u8fa4c2c4-35f8-49b3-b374-09a64c85571&amp;title=&amp;width=141.81817874435558" alt="image.png"><br>其中Game和Draw是CPU的工作。<br>统计数据观察性能消耗的主要来源：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646286655545-e16d0289-8fe4-4ff1-afd6-695e34456d5f.png#clientId=u5bc2b642-bb2e-4&amp;from=paste&amp;height=437&amp;id=u1652a5e1&amp;originHeight=481&amp;originWidth=479&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=188070&amp;status=done&amp;style=none&amp;taskId=u6639637b-5847-44bc-8302-fc329020f59&amp;title=&amp;width=435.45453601632255" alt="image.png"><br>实时虚拟纹理：<br>实时虚拟纹理就是将我们生成的这些树当成纹理，在使用时只需要加载纹理而不需要一个个加载这些网格体了。<br>在项目设置中找到虚拟纹理打开。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646297078747-56e0b5ae-2f51-4d3c-a7f4-d8e6a9c56119.png#clientId=u4f14c30e-baac-4&amp;from=paste&amp;height=199&amp;id=ubd648798&amp;originHeight=219&amp;originWidth=733&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19206&amp;status=done&amp;style=none&amp;taskId=ue9c7de29-d265-4a46-9809-3745438fa45&amp;title=&amp;width=666.3636219205938" alt="image.png"><br>打开后需要重新编译一遍，然后将这个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646302466699-c33949d4-0c1b-48e5-9a40-4b14ec0122f6.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=112&amp;id=ua7e2fe5c&amp;originHeight=123&amp;originWidth=224&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9957&amp;status=done&amp;style=none&amp;taskId=u0ab155ae-8ff9-4b0b-b2f6-2b6230043cb&amp;title=&amp;width=203.63635922266442" alt="image.png">拖入场景，可以在这里设置虚拟纹理对应的Actor以及设置边界以匹配Actor（地形）以及新建运行时虚拟纹理。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646303376042-1b17e557-c4ca-4d50-99ee-49aefc932b5f.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=85&amp;id=u2da6be9a&amp;originHeight=94&amp;originWidth=456&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10499&amp;status=done&amp;style=none&amp;taskId=u20a193e8-b627-4f51-ad44-c5469c5fe57&amp;title=&amp;width=414.545445560424" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646303348046-5a371ffd-ed96-423a-afa4-cc01a092b022.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=515&amp;id=uc4a94095&amp;originHeight=566&amp;originWidth=500&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65243&amp;status=done&amp;style=none&amp;taskId=u80579c2b-0b45-4903-91e3-39b664f926b&amp;title=&amp;width=454.54544469344734" alt="image.png"><br>转到材质编辑器：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646302438859-9b9fc5df-06d5-401f-bafd-627f335865cb.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=224&amp;id=u5a2caff2&amp;originHeight=246&amp;originWidth=859&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72619&amp;status=done&amp;style=none&amp;taskId=ua38887cc-a193-48b5-b95d-bc46185554a&amp;title=&amp;width=780.9090739833425" alt="image.png"><br>这两个节点，一个是输出虚拟纹理并可以自定义输出哪个虚拟纹理以及虚拟纹理的内容，一个是决定虚拟纹理的各种信息。<br>在拥有了虚拟纹理后就可以在需要利用虚拟纹理时使用RuntimeVirtualTextureSample节点。<br>将虚拟纹理大小提高可以将分辨率提高不然地形就太糊了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646303012570-b7e5ac74-3f8d-489f-9a8b-8fe0e55432f7.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=143&amp;id=udec2dbbe&amp;originHeight=157&amp;originWidth=914&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16154&amp;status=done&amp;style=none&amp;taskId=u07ca4429-34e5-4399-80ce-8e7b3328f47&amp;title=&amp;width=830.9090728996217" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646303658867-d415984a-73eb-42cc-8c8f-1481443a8e27.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=1705&amp;id=uf3e44067&amp;originHeight=1875&amp;originWidth=4710&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1399123&amp;status=done&amp;style=none&amp;taskId=u680bc6f7-c9bc-46e7-99f6-bdc97325573&amp;title=&amp;width=4281.818089012274" alt="image.png"><br>这种操作相当于牺牲存储内存换取性能。<br><a name="gNKoi"></a></p><h3 id="RVT材质混合">RVT材质混合</h3><p>教程开始前，提到了之前做的为了降低贴图重复度，根据摄像机与地形之间的距离将1024的Mid贴图与4K的贴图混合的功能配合虚拟纹理会导致地形效果不好，于是把那个功能删掉了。<br>RVT材质混合的效果<br>混合前：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646303733203-f95a3dfe-065c-4800-a5d3-d1a712b2538d.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=403&amp;id=u5b5c9612&amp;originHeight=443&amp;originWidth=819&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=823369&amp;status=done&amp;style=none&amp;taskId=u8882f7d3-3ffb-4923-a572-fe357bfd50f&amp;title=&amp;width=744.5454384078668" alt="image.png"><br>混合后：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646303759257-6b92128d-a805-4650-b791-3ee64f47a07e.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=479&amp;id=u070b3d6c&amp;originHeight=527&amp;originWidth=659&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=719773&amp;status=done&amp;style=none&amp;taskId=uf5fbf84f-a372-41fd-b907-8d7bdf74956&amp;title=&amp;width=599.0908961059636" alt="image.png"><br>RVT材质混合的作用就是使不同模型之间混合更加自然。<br>首先我们需要为地形新增加一个虚拟纹理，这个虚拟纹理只需要获取地形的高度，因此不需要太高的分辨率<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646308171380-c86acffe-05e7-45cb-b8df-3cb28d6be3bf.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=350&amp;id=u9fc75225&amp;originHeight=385&amp;originWidth=950&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32965&amp;status=done&amp;style=none&amp;taskId=ud10d10e4-605a-4726-95e1-c9c1db11415&amp;title=&amp;width=863.63634491755" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646308287525-7627e12d-acec-4eab-990e-f21419996ca8.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=299&amp;id=u26daefd5&amp;originHeight=329&amp;originWidth=489&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=294151&amp;status=done&amp;style=none&amp;taskId=ue045c22b-9f29-4bd8-8283-8cca89706d6&amp;title=&amp;width=444.5454449101915" alt="image.png">要拥有这个效果需要对母材质进行一些更改，因此将其母材质复制一份，改成能够实现RVT混合效果的母材质。<br>利用这个得到地形与物体的蒙版。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646309631200-d43cf4b5-f949-4a57-90ef-1a099fc29fcf.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=325&amp;id=u0290137d&amp;originHeight=358&amp;originWidth=760&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=87271&amp;status=done&amp;style=none&amp;taskId=ube88f21f-1436-4a99-b65e-3fd26386b01&amp;title=&amp;width=690.90907593404" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646309852263-cd88c992-dbc2-4b7b-a0a5-fccec59976b7.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=132&amp;id=ud86aaba3&amp;originHeight=145&amp;originWidth=328&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27523&amp;status=done&amp;style=none&amp;taskId=u86cb330c-98fc-4e41-ab04-8f6743756c6&amp;title=&amp;width=298.1818117189015" alt="image.png">但是还是有些生硬，加一个除法后<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646309957097-62a8353c-2003-4135-82ab-c5bd7f3af796.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=185&amp;id=u69c54db5&amp;originHeight=204&amp;originWidth=459&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31154&amp;status=done&amp;style=none&amp;taskId=uee4126df-cbb2-4a1b-bf40-db2fab41404&amp;title=&amp;width=417.27271822858467" alt="image.png">提高blend的数值后过渡不那么生硬了<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646309944942-bc520b13-973a-44e1-8e05-a2625acf4b82.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=312&amp;id=u520b12fa&amp;originHeight=343&amp;originWidth=547&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99318&amp;status=done&amp;style=none&amp;taskId=u32527808-a386-4042-b3d6-4654e97c085&amp;title=&amp;width=497.2727164946314" alt="image.png"><br>利用这个蒙版混合地形与模型。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646311925982-d2e16cf3-ed54-4d63-bb32-1f00ebe0e41b.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=2126&amp;id=u71060c5b&amp;originHeight=2339&amp;originWidth=3662&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=845072&amp;status=done&amp;style=none&amp;taskId=u37425943-2d3f-4ec2-9af5-8cf3cbae7eb&amp;title=&amp;width=3329.0908369348085" alt="image.png"><br><a name="u0Gdc"></a></p><h3 id="4-26引擎自带的水系统">4.26引擎自带的水系统</h3><p>要使用引擎自带的水系统需要开启这两个插件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646312055680-0e9bacc9-5767-47d2-bc60-10846f2d1d68.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=297&amp;id=udf2a0420&amp;originHeight=327&amp;originWidth=1082&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36853&amp;status=done&amp;style=none&amp;taskId=ud57e9afc-5292-47b6-be2a-5c8db15e376&amp;title=&amp;width=983.6363423166201" alt="image.png"><br>其中landmass的作用是它能够使我们能够通过样条线编辑水，并且可以实时的改变地形。<br>因为这个水系统是非常消耗性能的，因此我们重新利用程序化生成一个2017*2017的地形。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646313876138-95d4832d-dba7-4e34-bde8-46c2a02cd161.png#clientId=u6978505f-af29-4&amp;from=paste&amp;height=439&amp;id=u0ec313a7&amp;originHeight=483&amp;originWidth=273&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40810&amp;status=done&amp;style=none&amp;taskId=u23cf4369-2122-4ef7-93be-02bda84c62a&amp;title=&amp;width=248.18181280262226" alt="image.png"><br>创建地形后将地形向上平移，只要地形最低点高于0就行。<br>接下来就是创建一个新的地形材质实例赋予新地形并为其指定之前创建的两个虚拟纹理（带颜色的和高度的），然后将地形启用编辑图层<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646359262225-6adc7510-b800-43c4-895e-4852bff4c211.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=76&amp;id=uca5ba39b&amp;originHeight=84&amp;originWidth=250&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4184&amp;status=done&amp;style=none&amp;taskId=u13925cb6-9b50-4229-8c62-60700b4759c&amp;title=&amp;width=227.27272234672367" alt="image.png">，最后拖入两个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646359286037-61ede9d1-1e71-4cee-b4a5-c24b7ab98844.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=45&amp;id=u5b3772d7&amp;originHeight=49&amp;originWidth=217&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5958&amp;status=done&amp;style=none&amp;taskId=ud213c836-e7b6-449f-b970-d926a0ef2ab&amp;title=&amp;width=197.27272299695616" alt="image.png">并设置边界指定虚拟纹理。<br>然后将地形的权重层赋予就可以出现材质效果了，然后因为这个新地形和之前的地形海拔不一样，因此将母材质中的控制海拔的参数暴露出来调整就可以出现跟之前地形差不多的效果。<br>接下来拖入河流：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646362208543-0d30cfbc-cbfd-4669-bb6b-3dda7f56e0c7.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=55&amp;id=u90b25816&amp;originHeight=60&amp;originWidth=174&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4174&amp;status=done&amp;style=none&amp;taskId=u98a93904-43d6-4a4d-a17c-fdd8cf47605&amp;title=&amp;width=158.18181475331968" alt="image.png">拖入河流后<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646362222879-002964cd-6cd7-4929-832d-2632ce0b03b7.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=381&amp;id=u8cc20bad&amp;originHeight=419&amp;originWidth=538&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=404786&amp;status=done&amp;style=none&amp;taskId=uce8f5883-885b-4ddd-89ab-be8f7386589&amp;title=&amp;width=489.09089849014936" alt="image.png"><br>这个河流是根据样条线生成的并且可以实时的改变地形，接下来介绍一下河流的各个参数：<br>介绍之前先提一下创建新的样条点的方法：选择样条点，然后使用alt+移动可以生成新的样条点。<br>这一栏是可以控制某一样条点处的宽度速度深度。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646366487147-90ff4612-678e-441c-b1d1-cccd9fdc537f.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=111&amp;id=u853c2fdd&amp;originHeight=122&amp;originWidth=295&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5636&amp;status=done&amp;style=none&amp;taskId=ue8e2f86b-e867-49c3-983e-e9eb0e1e898&amp;title=&amp;width=268.1818123691339" alt="image.png"><br>这一栏控制的是样条线对地形的影响。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646368558714-7b497834-9d50-4a99-991b-718706017abe.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=411&amp;id=u34b7fdfa&amp;originHeight=452&amp;originWidth=378&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33129&amp;status=done&amp;style=none&amp;taskId=u274b2654-9afb-4446-a624-271f28525bd&amp;title=&amp;width=343.6363561882462" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646370600421-932bca91-5cf9-4c3e-8666-26a2b42e504f.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=385&amp;id=u7c10d806&amp;originHeight=424&amp;originWidth=537&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=449464&amp;status=done&amp;style=none&amp;taskId=u11fa7084-4ae4-447a-8883-a4049a82e2d&amp;title=&amp;width=488.18180760076245" alt="image.png"><br><a name="yeqRv"></a></p><h4 id="自动河床系统">自动河床系统</h4><p>优化一下水：<br>首先先更改一下颜色：找到水材质<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646371329617-02ab66c6-9ab3-46e1-914b-e1b58313bfc7.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=87&amp;id=ua88130e8&amp;originHeight=96&amp;originWidth=453&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11414&amp;status=done&amp;style=none&amp;taskId=u434a132b-9cdb-4b13-9d23-30a00b090c6&amp;title=&amp;width=411.8181728922633" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646371297121-02067374-41b9-4bdc-9481-eaf466f0fec4.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=272&amp;id=u3b442590&amp;originHeight=299&amp;originWidth=816&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16750&amp;status=done&amp;style=none&amp;taskId=uf3f675d4-39a8-4547-9dfb-c02d6f1099f&amp;title=&amp;width=741.818165739706" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646371637291-513496f0-0469-45ae-9cf4-058a6e7fe320.png#clientId=u454bd992-af13-4&amp;from=paste&amp;height=49&amp;id=ufea1d481&amp;originHeight=54&amp;originWidth=319&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4636&amp;status=done&amp;style=none&amp;taskId=udd78b1e5-5450-48ba-8869-9430d4a7774&amp;title=&amp;width=289.9999937144194" alt="image.png"><br>优化好水之后，我们需要根据水流程序化生成水流地形以及水流旁的石头，需要这种效果：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646390301521-24ad6184-65a8-417a-8ad5-78d408b39efa.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=285&amp;id=uba18422c&amp;originHeight=314&amp;originWidth=795&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=363416&amp;status=done&amp;style=none&amp;taskId=u12edfc4e-a138-43d6-997a-245ad558a3c&amp;title=&amp;width=722.7272570625813" alt="image.png"><br>之前水流下都是程序化生成的草，现在改成了水流方向程序化生成石头以及水流覆盖区域材质对应更改。<br>要实现这个功能还是挺简单的，前提是需要知道伴随着水插件的使用会有这个actor<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646390800578-2105b5b0-0a75-4137-a3cf-d80fb8866f49.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=33&amp;id=uafa804c4&amp;originHeight=36&amp;originWidth=230&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5400&amp;status=done&amp;style=none&amp;taskId=u6636c8f6-c2cc-4487-9ba7-e622a100f1e&amp;title=&amp;width=209.09090455898578" alt="image.png">然后在它的设置之下有一个影响权重图和影响的权重图图层。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646390829782-645972b7-7bdc-4316-9041-44a7eaa9fa10.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=82&amp;id=ubef67573&amp;originHeight=90&amp;originWidth=372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7019&amp;status=done&amp;style=none&amp;taskId=u5218aa86-352c-4297-80aa-348ccdabc07&amp;title=&amp;width=338.1818108519248" alt="image.png">勾选影响权重图后的意思就是水插件的使用是可以伴随着权重的。权重就是这个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646390993764-6c77f86f-7fb3-44df-9c88-19bcfdd19408.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=305&amp;id=ua46ab9ee&amp;originHeight=335&amp;originWidth=304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40932&amp;status=done&amp;style=none&amp;taskId=u4cabeff2-47d4-45a4-a299-d149b91d221&amp;title=&amp;width=276.363630373616" alt="image.png">。然后为其影响的权重图图层添加一个数组元素自定义命名为River，然后找到WaterBodyRiver<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646391055357-a4d06f31-0b26-4fb0-b91f-867c93609538.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=29&amp;id=ud6cf0f7c&amp;originHeight=32&amp;originWidth=199&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4574&amp;status=done&amp;style=none&amp;taskId=uf895eb45-4c34-4d70-9f2a-75dbdb5e239&amp;title=&amp;width=180.90908698799205" alt="image.png">在下面添加River<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646391128966-8de44e92-9bed-4e87-abbd-7573a6d4d684.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=60&amp;id=u1489fb32&amp;originHeight=66&amp;originWidth=381&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6210&amp;status=done&amp;style=none&amp;taskId=uaf34ff19-944e-475a-9c69-abbf8bda315&amp;title=&amp;width=346.3636288564069" alt="image.png"><br>有了River权重图以后我们就可以通过这个River权重图对材质进行修改。<br>主要利用了这个节点获取River权重图，然后就可以根据这个river权重图作为蒙版混合其他的材质，以及配合Gras<br>s节点程序化生成节点。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646391222847-09f19239-2a28-4a1d-9115-b7a20b81064e.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=75&amp;id=u770a6bcf&amp;originHeight=82&amp;originWidth=163&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8623&amp;status=done&amp;style=none&amp;taskId=u208c189e-a0f9-446a-9937-147a54ac06e&amp;title=&amp;width=148.18181497006384" alt="image.png"><br>也就增加了这两个功能。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646391521733-db7e91ef-0bbf-4e39-955a-19fa125c91d0.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=585&amp;id=u3dff80de&amp;originHeight=643&amp;originWidth=955&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=157543&amp;status=done&amp;style=none&amp;taskId=ud15934b1-a2d2-41e5-9cbc-c16c53fc280&amp;title=&amp;width=868.1817993644845" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646391555915-d4e0061b-0715-4d98-a049-c09799fd8c34.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=231&amp;id=ubeba41ee&amp;originHeight=254&amp;originWidth=724&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=71667&amp;status=done&amp;style=none&amp;taskId=uf237bf68-801e-4228-9ac2-6faa324ff6a&amp;title=&amp;width=658.1818039161118" alt="image.png"><br>全部材质连接法：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646391768871-6ee917bd-cb6e-477a-a4af-f76665a65776.png#clientId=u0c5f0e94-5b73-4&amp;from=paste&amp;height=1763&amp;id=uc639c983&amp;originHeight=1939&amp;originWidth=5057&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1661274&amp;status=done&amp;style=none&amp;taskId=u1f681634-070d-4aca-8af4-a97dc4c29a9&amp;title=&amp;width=4597.272627629526" alt="image.png"><br>这里为了得到更好的贴图效果把之前为了优化而使用的RVT给关掉了。<br><a name="Xp98l"></a></p><h3 id="程序化水坑">程序化水坑</h3><p>程序化水坑的生成在之前的课中写过一次，可以复制过来改进一下，并且使其能够匹配地形，例如地形中的水坑不能张草，并且因为之前近距离细分的原因可能导致水坑的显示有问题需要调节一下height的值。<br>这里就直接截图了。<br>首先制作一个水坑的蒙版函数用来控制水坑的蒙版大小。 这里的两组二维数值控制的是水坑蒙版的大小，可以根据自己需要手动调整。 这只是一个大概的值，当PuddleSize大小超过1时，Lerp对应的数值也会超过B的数值依然可以增大水坑蒙版。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646444503666-e7dfd86a-12bf-48f1-b00a-0aa88c561bdb.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=1142&amp;id=uf5f1fe2f&amp;originHeight=1256&amp;originWidth=2329&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=363822&amp;status=done&amp;style=none&amp;taskId=u73aaee5a-014d-4a81-b621-9128ae71aea&amp;title=&amp;width=2117.2726813820777" alt="image.png"><br>其中水坑遮罩就是依靠世界位置作为UV进行投影。然后依靠VertexNormalWS使水坑只生长的平坦的区域。<br>有了水坑的遮罩以后，发现水坑的遮罩还会出现在河流的下面，因此还需要河流的遮罩来控制水坑不生长的区域。<br>因此依靠这个水坑遮罩函数继续创建一个水坑函数，水坑函数可以接收一个遮罩控制水坑的生成区域，以及通过接收地形材质使地形以及水坑混合。这里设置height混合是因为之前设置了近距离置换增强的效果会导致<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646444939905-bcb40a74-5537-42d9-a7c9-98b203fc9f0c.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=320&amp;id=uc39c8efc&amp;originHeight=352&amp;originWidth=556&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=300453&amp;status=done&amp;style=none&amp;taskId=u4e3ce06b-6085-4258-b1b5-32876b361a4&amp;title=&amp;width=505.45453449911344" alt="image.png">。因此也为水坑增加了Height变化<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646444880806-e7f16e92-e9a3-4585-b24e-d4f669b6de3c.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=1255&amp;id=u3e3053bc&amp;originHeight=1380&amp;originWidth=1923&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=420895&amp;status=done&amp;style=none&amp;taskId=u91e0ea21-17a6-412f-880c-05f1139f34b&amp;title=&amp;width=1748.1817802909986" alt="image.png"><br>使用水坑函数后的地形材质：这里主要是对于水坑的遮罩的处理，以及使植被不生长在水坑上面。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646445000899-3ddac9a3-cb40-4392-83ed-37eea3ee015e.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=1763&amp;id=u39e6016e&amp;originHeight=1939&amp;originWidth=5281&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1793077&amp;status=done&amp;style=none&amp;taskId=u7b323a31-5167-4a4f-8c4b-a5e73935536&amp;title=&amp;width=4800.908986852191" alt="image.png"><br><a name="pd0Kn"></a></p><h4 id="为水坑增加水流和涟漪">为水坑增加水流和涟漪</h4><p>利用之前的水流涟漪材质函数，因为要制造水流和涟漪就需要对法线进行操作。因此制作PuddleRipple材质函数将水坑的法线变成水流涟漪法线。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646449138561-78ffe1f2-3e86-47b1-9b79-b7ffb576a2c9.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=495&amp;id=uc012c752&amp;originHeight=544&amp;originWidth=1458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=175778&amp;status=done&amp;style=none&amp;taskId=u9fadc38e-69b7-49de-8a88-daf8cd74a43&amp;title=&amp;width=1325.4545167260926" alt="image.png"><br>这个Puddle Ripple的作用就是输入法线和水坑的mask，将地形的法线和水坑的法线混合起来然后输出法线。<br>然后整理到地形材质上面。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646449714243-0187f26d-acd6-45e9-a763-d4730c72599c.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=140&amp;id=u25ce4811&amp;originHeight=154&amp;originWidth=946&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=67041&amp;status=done&amp;style=none&amp;taskId=ubeffb639-938f-47c0-91f1-c7c6773c21a&amp;title=&amp;width=859.9999813600024" alt="image.png"><br><a name="poGzh"></a></p><h2 id="天空和雾气">天空和雾气</h2><p>创建户外场景时可以使用引擎提供的模板<br>新建关卡<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951324893-e7512f72-9b36-4248-8825-61585f8020d7.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=428&amp;id=u714d86b8&amp;originHeight=428&amp;originWidth=510&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=100570&amp;status=done&amp;style=none&amp;taskId=u7e90bd7d-5b53-4ff2-b4ac-908fc96f495&amp;title=&amp;width=510" alt="image.png">选择第二个，会给我们提供一个很好的户外坏境设置<br>主要需要这五个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951366134-e9a6b79b-8c15-4842-9dac-1993599eabbd.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=118&amp;id=ucc023783&amp;originHeight=118&amp;originWidth=198&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10231&amp;status=done&amp;style=none&amp;taskId=ub41e06e6-8cda-4be1-a021-66ee12b14f5&amp;title=&amp;width=198" alt="image.png">这里SkyDomeMesh的作用是填充地平线<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951553593-2d095796-b856-4179-8d71-ea5cc61a8099.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=193&amp;id=u53a86c4a&amp;originHeight=193&amp;originWidth=344&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52172&amp;status=done&amp;style=none&amp;taskId=u165fee2b-0691-4026-b913-6ad2d0c5cd2&amp;title=&amp;width=344" alt="image.png">→<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951533230-7cb75ecf-c390-401a-ac83-6bdc959b2f5a.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=231&amp;id=u9fc74b4f&amp;originHeight=231&amp;originWidth=353&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60586&amp;status=done&amp;style=none&amp;taskId=u2dd150e3-cf76-4371-bf15-34a0e1270c7&amp;title=&amp;width=353" alt="image.png"><br>与默认拖入比起来模板的设置：<br>定向光：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951415016-8da6fa5a-16a3-49cf-8d88-d2137cfd03cc.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=53&amp;id=udae0cd9e&amp;originHeight=53&amp;originWidth=286&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2925&amp;status=done&amp;style=none&amp;taskId=u7d94466e-f4bc-4202-a88b-e6e5af013ab&amp;title=&amp;width=286" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951387464-74d3883a-4c12-477d-bfbc-ab7dad9918d4.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=157&amp;id=u96c97b3f&amp;originHeight=157&amp;originWidth=218&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8313&amp;status=done&amp;style=none&amp;taskId=u587a7191-e11a-4810-a7c7-3a6f17679ba&amp;title=&amp;width=218" alt="image.png"><br>天光：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951578407-6d0125f1-224c-4526-bcbd-ffd0844eae2b.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=70&amp;id=u257d7eb6&amp;originHeight=70&amp;originWidth=220&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5793&amp;status=done&amp;style=none&amp;taskId=u3afd3de3-2a2d-417e-9a54-f0d0a8c764c&amp;title=&amp;width=220" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951583442-b8e5fe78-d4b2-4175-af8e-1f8d22aa616f.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=154&amp;id=u653d00fc&amp;originHeight=154&amp;originWidth=314&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10661&amp;status=done&amp;style=none&amp;taskId=u7d094d8d-cf19-453e-92ce-18b79830e8d&amp;title=&amp;width=314" alt="image.png"><br>体积云：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951591863-614e1dc4-2bf2-4992-883f-905033141cfa.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=155&amp;id=ufa5f53db&amp;originHeight=155&amp;originWidth=277&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7762&amp;status=done&amp;style=none&amp;taskId=uacb2b616-be9f-47cd-b244-93c0854f1a5&amp;title=&amp;width=277" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1645951612330-ce1ce6bf-4fac-4279-b2eb-648685a0f8a5.png#clientId=u4da8d356-351f-4&amp;from=paste&amp;height=161&amp;id=u1a42587e&amp;originHeight=161&amp;originWidth=324&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15912&amp;status=done&amp;style=none&amp;taskId=u241a500a-547e-4227-8b47-564c9ea3fdc&amp;title=&amp;width=324" alt="image.png"><br><strong>天空大气配合指数级高度雾：</strong><br>拖入指数级高度雾后发现天空大气并不能影响指数级高度雾，因为指数级高度雾自带<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646450100219-7d3c9adc-5c8b-4414-b1d6-f3da99fa1f0e.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=41&amp;id=u63ed134f&amp;originHeight=45&amp;originWidth=443&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3771&amp;status=done&amp;style=none&amp;taskId=ud2b85cd1-cf45-4ba8-815b-6db79d2cd8d&amp;title=&amp;width=402.72726399839433" alt="image.png"><br>因此为了能够使天空大气能够配合指数级高度雾，在项目设置中开启<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646450178272-c17e7dbf-91bd-4677-a911-5de0e7594edb.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=222&amp;id=ua504caa6&amp;originHeight=244&amp;originWidth=760&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17991&amp;status=done&amp;style=none&amp;taskId=ucc9e7578-3fb3-4b8a-84c2-bc11b13f4aa&amp;title=&amp;width=690.90907593404" alt="image.png"><br>开启后将指数级高度雾中的雾内散射颜色以及定向内散射颜色改为黑色，这样就可以实现天空大气影响指数级高度雾了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646450259353-84499481-428a-4c09-b8d2-6c048276bbc4.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=245&amp;id=uac186a9c&amp;originHeight=269&amp;originWidth=455&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23778&amp;status=done&amp;style=none&amp;taskId=u9b138d0f-30e6-42e6-a633-97c22c825c1&amp;title=&amp;width=413.6363546710371" alt="image.png"><br>接下来可以更改一下定向光（控制太阳的光）的设置，来使灯光更好看。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646450451501-0949fc10-ee53-4596-a491-592c3dcddb0d.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=230&amp;id=uf6ae5c50&amp;originHeight=253&amp;originWidth=431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18305&amp;status=done&amp;style=none&amp;taskId=u7d9e3e16-1c97-439a-95fe-76b610fb434&amp;title=&amp;width=391.8181733257516" alt="image.png"><br>更改了定向光设置以及增加了指数级高度雾以及使天空大气能够控制指数级高度雾后场景确实看起来更好看了。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646450553889-6cbf7ac0-48b0-4225-a8e5-ade7a1468995.png#clientId=ua6df4fa7-aa18-4&amp;from=paste&amp;height=410&amp;id=u6fd0949a&amp;originHeight=451&amp;originWidth=875&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=523543&amp;status=done&amp;style=none&amp;taskId=ucbc6f995-0ff3-4ec6-bc5e-5969d2754e8&amp;title=&amp;width=795.4545282135329" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE 材质节点</title>
      <link href="/2023/08/29/UnrealEngine-UE-%E6%9D%90%E8%B4%A8%E8%8A%82%E7%82%B9/"/>
      <url>/2023/08/29/UnrealEngine-UE-%E6%9D%90%E8%B4%A8%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>官方文档<a href="https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Materials/ExpressionReference/">https://docs.unrealengine.com/4.27/zh-CN/RenderingAndGraphics/Materials/ExpressionReference/</a><br><a name="wgttX"></a></p><h1>节点和英文介绍</h1><p>RGB对应三维的XYZ<br>parameter：参数  简称param<br>vectorparameter：向量参数  可以赋予颜色<br>ScalarParameter：标量参数<br>TextureCoordinate=texcoord：纹理坐标   按U加鼠标左键快速调出  可以实现放大和缩小UV的作用<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619752619455-bea75902-e4d8-48f4-a22f-49bbeda73b86.png#clientId=u13137d68-a3e4-4&amp;from=paste&amp;height=110&amp;id=gcaip&amp;originHeight=110&amp;originWidth=245&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12868&amp;status=done&amp;style=none&amp;taskId=u90999fba-e842-4265-8f77-79c6f2d2e04&amp;title=&amp;width=245" alt="image.png">其中坐标索引的数值从0到n控制的是第1到n+1套UV<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619961604648-682583ac-e6d6-45e4-8daa-98e716f1e881.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=592&amp;id=DKkIT&amp;originHeight=592&amp;originWidth=1268&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=274311&amp;status=done&amp;style=none&amp;taskId=uffc7fa51-4559-4cd3-bc26-f91ffa5bcd3&amp;title=&amp;width=1268" alt="image.png"><br>metallic：金属<br>debug…  ：针对不同参数的预览显示其效果，例如<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619960465388-8749855a-fee5-4c08-9e2f-87f405e4b252.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=256&amp;id=b9rCc&amp;originHeight=256&amp;originWidth=922&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=122741&amp;status=done&amp;style=none&amp;taskId=u58460e57-e82f-4670-868b-dc1b4cc388a&amp;title=&amp;width=922" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1619960510115-f9439be8-6b81-40fb-a83d-db4a36463e17.png#clientId=u68ae75f5-6fa7-4&amp;from=paste&amp;height=385&amp;id=WILkj&amp;originHeight=385&amp;originWidth=514&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=70368&amp;status=done&amp;style=none&amp;taskId=uaf0749e1-672c-470a-9861-ee02e7a6d4e&amp;title=&amp;width=514" alt="image.png"><br>ScaleUVsByCenter 从中心缩放UV<br>roughness： 粗糙度<br>set material： 设置材质<br>texture sample：材质表达式纹理采样<br>sine：正弦  注意：这个正弦对应的周期是1而不是2_π_<br>sine_remapped 正弦波动<br>BreakOutFloat2，3，4Components  将2，3，4维常数拆成2，3，4个通道单独调整，调整后再使用</p><p>break material attributes 打破材质属性 <br>make material attributes 创建材质属性<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622291299594-7e7a19f8-9a08-4071-bd56-e61fcfaf3a9b.png#clientId=u568321d7-3732-4&amp;from=paste&amp;height=565&amp;id=u0aeabfaf&amp;originHeight=565&amp;originWidth=468&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=81199&amp;status=done&amp;style=none&amp;taskId=u752bdc6a-2dc4-4bb2-9a3f-72ceb8c873d&amp;title=&amp;width=468" alt="image.png"><br>MakeFloat2，3，4节点将它们合成起来输出<br>ComponentMask：将R,G,B,A的数值按照R,G,B,A的顺序输出，比如如果只选择R,G的数值则按照R，G的顺序输出<br>splitcomponent：将颜色分解为三个通道，可以任意选择。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637823621560-8cb54eac-5652-4526-8026-82b10c71e4b2.png#clientId=u66a456f4-ad41-4&amp;from=paste&amp;height=94&amp;id=u576111a6&amp;originHeight=94&amp;originWidth=100&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11040&amp;status=done&amp;style=none&amp;taskId=u30a1e9d7-4f1b-45fd-8cf1-8408bc3b584&amp;title=&amp;width=100" alt="image.png"><br>BreakOutFloat3（2）Components<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636383630631-6b88944c-eda5-4c3e-8aa4-2679548cb98a.png#clientId=u40381fe2-24ea-4&amp;from=paste&amp;height=177&amp;id=NnUHK&amp;originHeight=264&amp;originWidth=326&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36804&amp;status=done&amp;style=none&amp;taskId=ue6d81656-7d48-4337-a8e8-2b2168f0d61&amp;title=&amp;width=219" alt="image.png">等同于<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636383729555-07ca8ece-e654-4680-8350-ce1cbc0a4736.png#clientId=u40381fe2-24ea-4&amp;from=paste&amp;height=160&amp;id=GC2FS&amp;originHeight=195&amp;originWidth=211&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30380&amp;status=done&amp;style=none&amp;taskId=u2f5aee1d-9924-4483-a22e-40325dec9a2&amp;title=&amp;width=173" alt="image.png"><br>swizzle 重新排列通道的顺序<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637823801354-9e97ac41-db8c-4389-81eb-3f8c1d480e5c.png#clientId=u66a456f4-ad41-4&amp;from=paste&amp;height=74&amp;id=u3fa49815&amp;originHeight=74&amp;originWidth=101&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10345&amp;status=done&amp;style=none&amp;taskId=u55c1ea06-ca5e-49b4-9116-16dcc018ae5&amp;title=&amp;width=101" alt="image.png">例如将XYZ的顺序改为YXZ<br>Abs 取绝对值<br>Frac  取小数<br>Ceil(天花板) 向上取整<br>Floor（地板） 向下取整<br>Round  四舍五入<br>saturate 钳制：将数约束在0~1之间（小于0的数取0，大于1的数取1）<br>Clamp 将数约束在一个最小和最大的范围之间（相比于钳制，可以自定义）<br>fmod 求余<br>add加  快捷键a<br>subtract 减<br>multiply 乘  快捷键m<br>divide 除  快捷键d<br>panner 材质平移<br>rotator 材质旋转<br>custom rotator 自定义材质旋转<br>ceramic：陶瓷<br>pixel：像素<br>lerp：线性插值这里的alpha是可以输入大于1的值的。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640754634560-225346f4-012e-4043-b2e9-51531fac0807.png#clientId=ub6ca5aa4-a416-4&amp;from=paste&amp;height=235&amp;id=uaeaad841&amp;originHeight=235&amp;originWidth=434&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57799&amp;status=done&amp;style=none&amp;taskId=u048a3df4-154a-4257-af34-8f84aa0b65b&amp;title=&amp;width=434" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640754650050-e69edb1c-d0cc-4895-a088-275078ac103a.png#clientId=ub6ca5aa4-a416-4&amp;from=paste&amp;height=214&amp;id=ub3add1a8&amp;originHeight=214&amp;originWidth=404&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51396&amp;status=done&amp;style=none&amp;taskId=u887fedf0-5852-436b-98a1-b4ee424687d&amp;title=&amp;width=404" alt="image.png"><br>1-x：反向节点<br>FlattenNormal：调节法线的强度（flatten是平坦的意思，里面有个flatness（平坦度）的节点，创建一个法线强度参数，再连接1-x节点最后连接flatness节点，即法线强度为0时平坦度为1即没有法线强度）<br>static switch parameter静态开关参数<br>Vertex Color :顶点颜色  通常将红绿蓝三个通道作为Alpha 配合shift+5来实现顶点绘制（顶点数量要足够），其默认为111<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1626590067068-3ee88b35-b1fb-4fa8-93da-18ca842c9a0c.png#clientId=uef5aaff1-4b36-4&amp;from=paste&amp;height=715&amp;id=ude46a255&amp;originHeight=715&amp;originWidth=1129&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=429431&amp;status=done&amp;style=none&amp;taskId=uaf3dbeda-23ed-4e3a-87ae-a9ea3c7caf7&amp;title=&amp;width=1129" alt="image.png"><br>绘制时默认是绘制白色，切换为黑色即可绘制，（shift配合鼠标左键实现反相绘制）<br><strong>凹凸贴图偏移（BumpOffset）</strong> 是虚幻引擎4术语，就是通常所谓的&quot;视差贴图&quot;。BumpOffset表达式可以使材质产生深度错觉，而不需要额外的几何体。BumpOffset材质使用灰阶_高度贴图_来提供深度信息。高度贴图中的值越亮，材质的&quot;凸出&quot;效果越明显；当摄像机在表面上移动时，这些区域将产生视差（移位）。高度贴图中较暗的区域将显得&quot;距离较远&quot;，其移位程度最小。</p><table><thead><tr><th><strong>项目</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>属性</strong></td><td></td></tr><tr><td><strong>高度比（HeightRatio）</strong></td><td>从_高度贴图_中取得的深度的乘数。这个值越大，深度越极端。典型值的范围是0.02到0.1。</td></tr><tr><td><strong>参考平面（ReferencePlane）</strong></td><td>指定纹理空间中要应用此效果的近似高度。值为0将使纹理完全离开表面，而值0.5（默认值）表示部分表面凸起而部分区域凹陷。</td></tr><tr><td><strong>Inputs</strong></td><td></td></tr><tr><td><strong>坐标（Coordinate）</strong></td><td>接收此表达式所要修改的基本纹理坐标。</td></tr><tr><td><strong>高度（Height）</strong></td><td>接收要用作高度贴图的纹理（或值）。</td></tr><tr><td><strong>高度比输入（HeightRatioInput）</strong></td><td>从_高度贴图_中取得的深度的乘数。这个值越大，深度越极端。典型值的范围是0.02到0.1。如果使用此输入，那么它将取代&quot;高度比&quot;（Height Ratio）属性中的任何值。</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/2623605/1638422579225-f16fdae8-7068-41a9-9415-61b88ff5abe1.jpeg#clientId=uf0b0f728-43de-4&amp;from=paste&amp;id=u2bc18566&amp;originHeight=361&amp;originWidth=1003&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=done&amp;style=none&amp;taskId=u23abe9b7-b572-47cd-b74d-b508cc3fed9&amp;title=" alt><br>可以利用此节点来模仿老式显像管电视机，如果要打造显像管电视机是一层玻璃且玻璃后面有其他结构的错觉。<br>如果要制作某种鱼缸，制作鱼缸样式的效果也可以使用此节点。<br>parallax occlusion mapping：视差映射贴图 （利用视差原理的改良版本）缩写为POM<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288451135-488259ee-6369-46aa-bb19-b0e6884d331d.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=529&amp;id=ufa8eb792&amp;originHeight=529&amp;originWidth=927&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=363378&amp;status=done&amp;style=none&amp;taskId=ufcc85dc4-3caf-4d58-90be-8c82516ff3a&amp;title=&amp;width=927" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288594012-063cf2ac-66d3-4b11-8543-c3a2006f0918.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=478&amp;id=u8ef2c083&amp;originHeight=478&amp;originWidth=475&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=71916&amp;status=done&amp;style=none&amp;taskId=u566fb910-d60b-41ed-9bd3-5b7d4bb4637&amp;title=&amp;width=475" alt="image.png"><br>会有锯齿效果：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288570864-eda1d8b0-7b52-4a2e-8c7a-2bffc425cb37.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=471&amp;id=u655081f8&amp;originHeight=471&amp;originWidth=752&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=517995&amp;status=done&amp;style=none&amp;taskId=u02e68282-2c4e-4d4a-b910-52a249e82e6&amp;title=&amp;width=752" alt="image.png"><br>配合dither temporal AA<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288627080-d98035b4-f3b6-436a-95b9-e567ae209f85.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=71&amp;id=ucf18f79c&amp;originHeight=71&amp;originWidth=315&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3963&amp;status=done&amp;style=none&amp;taskId=u72573e19-e6c2-49e9-94f2-85033b2cfab&amp;title=&amp;width=315" alt="image.png">可以模糊锯齿  DTAA可以理解为抖动像素，让不同深度的像素产生混合效果来来实现融合边缘的效果<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1626067046470-69f31526-9ad6-4438-b311-8a25c89588bd.png#clientId=udb44799c-ae35-4&amp;from=paste&amp;height=382&amp;id=u2ee0e05d&amp;originHeight=382&amp;originWidth=942&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=389067&amp;status=done&amp;style=none&amp;taskId=uc1e23757-b50e-441b-8f66-93d5ca6aadb&amp;title=&amp;width=942" alt="image.png"><br> <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622288717339-5630f847-4328-42bc-98f2-49e538f403c4.png#clientId=u4a9e6bbb-6167-4&amp;from=paste&amp;height=341&amp;id=u5ddeba8c&amp;originHeight=341&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=337969&amp;status=done&amp;style=none&amp;taskId=u9320dab8-b0ce-4322-88ca-2e6a16412be&amp;title=&amp;width=583" alt="image.png"><br>AA:抗锯齿的简称<br>rotator：可以使材质旋转<br>append:附加  <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1611219368550-94a35215-c413-4bd3-93ec-f938d3d4f3c2.png#height=470&amp;id=oj2ka&amp;originHeight=470&amp;originWidth=1458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=466361&amp;status=done&amp;style=none&amp;title=&amp;width=1458" alt="image.png"><br>append many:附加多个<br>desaturation：去饱和度  可以去色 <br>cheapContrast:简单的增加对比度的节点<br>sign 取符号   正数输出1，零输出0，负数输出-1。<br>two sided sign ：双面迹象（正面输出1，反面输出-1）（因为当使用双面效果时，因为法线方向原因会导致法线贴图造成的效果有错误，因此通过乘two sidedsign节点获得想要拥有的法线效果）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1612351443750-80944f94-7aa9-4fb4-aaf2-8d08c62403e9.png#height=257&amp;id=gCzII&amp;originHeight=257&amp;originWidth=443&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161941&amp;status=done&amp;style=none&amp;title=&amp;width=443" alt="image.png"><br>frac函数：作用是取函数的小数部分。<br>time节点：数值为游戏时间，逐渐递增。通常配合sine节点。time节点可以手动控制结束时间，例如填写25，那么这个节点就会输出0~25后再从0开始<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636385656990-50a399e4-3bfb-4cb2-a869-a9f7d487aeb0.png#clientId=u38e14856-2907-4&amp;from=paste&amp;height=107&amp;id=ueaaaf24b&amp;originHeight=107&amp;originWidth=333&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6589&amp;status=done&amp;style=none&amp;taskId=u6f085d19-b335-4ab9-ab16-2140439df44&amp;title=&amp;width=333" alt="image.png"><br>constant bias scale 节点（常量偏差比例）：默认功能是将数据都加上1然后都乘0.5。通常使用它将-1~1的范围（法线贴图的范围是-1~1）控制在0~1的范围之间。可以手动更改数值。可以配合sine和time实现平滑的0~1~0的明暗变换效果。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638361672199-3e283507-3e15-4694-a681-aec990f18247.png#clientId=u6e9069f6-a441-4&amp;from=paste&amp;height=194&amp;id=u1761e05c&amp;originHeight=194&amp;originWidth=501&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=82721&amp;status=done&amp;style=none&amp;taskId=u8d630652-c86c-4123-861a-03b19a9e384&amp;title=&amp;width=501" alt="image.png"><br>world aligned textures_complex全局一致纹理_复杂。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1613454773012-3fac412f-ddc7-441d-bd25-925cac7f2c42.png#height=585&amp;id=hQt63&amp;originHeight=585&amp;originWidth=519&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=250626&amp;status=done&amp;style=none&amp;title=&amp;width=519" alt="image.png"><br>world aligned texture<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1614062328579-37e73f76-8ac4-4b8b-b055-42a6fad3813b.png#height=181&amp;id=AYnkt&amp;originHeight=181&amp;originWidth=295&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63382&amp;status=done&amp;style=none&amp;title=&amp;width=295" alt="image.png">全局一致纹理。（使材质纹理不随着模型的缩放而缩放）(类似于SP中的三面投射，有助于拼贴遮罩)其中TextureObject连接贴图，TextureSize控制贴图平铺次数。一般只使用这两个节点作为输入。<a href="https://www.yuque.com/attachments/yuque/0/2021/mp4/2623605/1636380775279-a182eff7-bd54-4559-9588-ddaef1f2c7af.mp4?_lake_card=%7B%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2021%2Fmp4%2F2623605%2F1636380775279-a182eff7-bd54-4559-9588-ddaef1f2c7af.mp4%22%2C%22name%22%3A%22QQ%E5%BD%95%E5%B1%8F20211108221238.mp4%22%2C%22size%22%3A599597%2C%22type%22%3A%22video%2Fmp4%22%2C%22ext%22%3A%22mp4%22%2C%22status%22%3A%22done%22%2C%22taskId%22%3A%22u2ae2c685-6e66-4b46-a61b-31a670bf7b1%22%2C%22taskType%22%3A%22upload%22%2C%22id%22%3A%22SKoBL%22%2C%22card%22%3A%22file%22%7D">QQ录屏20211108221238.mp4</a><br>object pivot point 对象轴心点<br>BlendAngleCorrectedNormals混合角校正法线：用来实现法线叠加效果<br>DeriveNormalZ_Function  推出法线的Z数值：此函数通过输入法线的XY信息通过计算得到Z的数值并附加XY最终输出正确的法线信息。<br>scene color :场景颜色（使用时要更改材质的混合模式为半透明）<br>dot product:点积；标量积（可以大概理解为计算两个向量，如果两个向量是相对方向的那么输出1，如果是相同方向的那么输出-1，侧面方向输出0.）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620641400109-bae1578f-1514-4e34-b1b2-7bf69d4cce05.png#clientId=u103a9a56-7bc9-4&amp;from=paste&amp;height=347&amp;id=mKAME&amp;originHeight=347&amp;originWidth=610&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55104&amp;status=done&amp;style=none&amp;taskId=u53e55380-e19d-469a-97cc-9719fac895e&amp;title=&amp;width=610" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620641598157-e4a0eee5-78be-446a-85bd-80f3cf180cf6.png#clientId=u103a9a56-7bc9-4&amp;from=paste&amp;height=825&amp;id=LOQkY&amp;originHeight=825&amp;originWidth=1431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=423362&amp;status=done&amp;style=none&amp;taskId=u584bdb38-fb8c-4e5c-bc18-31d201074f8&amp;title=&amp;width=1431" alt="image.png"><br>camera vector 相机向量（输出的是像素到相机的方向，不是距离）<br>reflection vector 反射向量 （输出的是表面法线反射到相机的方向，与相机向量的区别是x,y数值是相反的）<br>CustomReflectionVector：自定义反射向量 （连接至某贴图的UV节点，作用是使贴图包裹住物体，假反射作用）<br>VertexNormalWS 顶点法向  ，每一个顶点的法向量 <br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620783357812-a15f4ebc-2f84-45be-8bf0-cb1b5cc53368.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=414&amp;id=lNLwy&amp;originHeight=414&amp;originWidth=1221&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=453809&amp;status=done&amp;style=none&amp;taskId=ub9415ceb-f289-4082-b787-8fa2b4c747b&amp;title=&amp;width=1221" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620783311357-268c0498-1f40-49f3-af1c-bdac900b64dc.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=436&amp;id=M7pET&amp;originHeight=436&amp;originWidth=879&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=406034&amp;status=done&amp;style=none&amp;taskId=u1067e22d-f2ff-4c10-b70e-8ce395c3457&amp;title=&amp;width=879" alt="image.png"><br>PixelNormalWS:  像素法向 输出每个像素的法线方向（与顶点法向区别在于，如果模型是带法线贴图的，法线贴图会影响像素法向，而不会影响顶点法向）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620783734936-ca18d532-9432-4c2f-985b-602c9780b2ad.png#clientId=ub9cd3185-0d1c-4&amp;from=paste&amp;height=545&amp;id=rDHDg&amp;originHeight=545&amp;originWidth=1177&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=694968&amp;status=done&amp;style=none&amp;taskId=ub41df6b8-1435-491d-a9df-123b0dff1c6&amp;title=&amp;width=1177" alt="image.png">  <br>world position 绝对世界位置  表达式输出当前像素在全局空间中的位置，（不是物体的世界位置的值：<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620823157817-a98fae8c-a5ea-447e-a168-7ae3b51b4be7.png#clientId=u330abbed-6252-4&amp;from=paste&amp;height=54&amp;id=ikmnA&amp;originHeight=54&amp;originWidth=320&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17705&amp;status=done&amp;style=none&amp;taskId=uce8e345b-f4f1-4a8d-9004-725af678f4d&amp;title=&amp;width=320" alt="image.png">），例如当物体缩放时物体的世界位置的值是不会改变的，但是像素的位置是改变的。  单位是厘米。相对于绝对坐标，每增加一厘米就多一个单位的值<br>Actor position 物体位置 输出的是<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1620823157817-a98fae8c-a5ea-447e-a168-7ae3b51b4be7.png#clientId=u330abbed-6252-4&amp;from=paste&amp;height=54&amp;id=KW0NW&amp;originHeight=54&amp;originWidth=320&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=17705&amp;status=done&amp;style=none&amp;taskId=uce8e345b-f4f1-4a8d-9004-725af678f4d&amp;title=&amp;width=320" alt="image.png">xyz的三维数值<br>object position 输出的是物体中心的世界位置（不受物体坐标轴的影响）（他是通过物体的边界框确定的轴心<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640075892449-864dae0c-59dc-4437-b1d6-cb7aefd4f0fc.png#clientId=uad269cdf-57e3-4&amp;from=paste&amp;height=162&amp;id=u6416aba8&amp;originHeight=162&amp;originWidth=281&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31869&amp;status=done&amp;style=none&amp;taskId=ud8b8ac53-de3a-4d33-89b9-882e412ad6a&amp;title=&amp;width=281" alt="image.png">可以通过细节面板更改边界框的大小而改变object position的对应轴的位置<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1640075921576-864b0a53-aaca-4537-9021-d66e3b9b1f6c.png#clientId=uad269cdf-57e3-4&amp;from=paste&amp;height=179&amp;id=uc1490942&amp;originHeight=179&amp;originWidth=432&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42877&amp;status=done&amp;style=none&amp;taskId=ued161545-2188-464f-9c68-9ee9c4ab88f&amp;title=&amp;width=432" alt="image.png">）<br>camera position 相机位置  输出的是相机的世界位置，针对不同相机的输出数值是不一样的，例如以下视图相机与创建的摄像机的对应大小是不同的<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621243285082-8ee7fb4e-0cf9-46f5-8347-7a7dbae3f9b5.png#clientId=u4262391c-7988-4&amp;from=paste&amp;height=347&amp;id=Ryyc4&amp;originHeight=347&amp;originWidth=644&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=212533&amp;status=done&amp;style=none&amp;taskId=uff33bb33-52ae-4e4c-b0ae-5a47f76c716&amp;title=&amp;width=644" alt="image.png"><br>object bounds 物体边界   输出的是物体的xyz的长度大小（不存在负值）按厘米计算。<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621244055267-ad6bf7e5-dfa0-426f-a5c5-def632763f87.png#clientId=u4262391c-7988-4&amp;from=paste&amp;height=289&amp;id=Ydglr&amp;originHeight=289&amp;originWidth=573&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=186609&amp;status=done&amp;style=none&amp;taskId=u6778e030-b760-4ca9-88c3-0fbd80532c4&amp;title=&amp;width=573" alt="image.png">（一个地图网格的长度是100cm）<br>object radius 物体半径  这个输出的是个标量，输出的是xyz方向中最大的那个半径值<br>object orientation 物体朝向  输出的是物体朝向的方向，以下的箭头都是用了同一个只在base color中连接了此节点的材质<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621244945161-2c809716-c6ea-40c2-a629-c47b8450bea3.png#clientId=u4262391c-7988-4&amp;from=paste&amp;height=391&amp;id=dLtpr&amp;originHeight=391&amp;originWidth=558&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=188453&amp;status=done&amp;style=none&amp;taskId=uec876061-fd51-4933-a323-5194dc1d806&amp;title=&amp;width=558" alt="image.png"><br>screen position 屏幕位置（浏览窗口，显示器显示的屏幕的大小位置）  是一个二维数据<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621990842564-099645d6-7d0c-4292-8330-bc6010c1c42c.png#clientId=ud70421a5-9281-4&amp;from=paste&amp;height=138&amp;id=ua417c6a0&amp;originHeight=138&amp;originWidth=158&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32705&amp;status=done&amp;style=none&amp;taskId=ub127fc46-7e76-490c-b514-2bad1cc841a&amp;title=&amp;width=158" alt="image.png">第二个输出的是屏幕像素的位置大小（第二张图中的左上角）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621990453742-2bba2f78-4dc7-4c08-8029-c1bad6f806c9.png#clientId=ud70421a5-9281-4&amp;from=paste&amp;height=724&amp;id=u09be7496&amp;originHeight=724&amp;originWidth=818&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=474976&amp;status=done&amp;style=none&amp;taskId=ub42b6440-3b78-4096-86cd-9964d2ea1b8&amp;title=&amp;width=818" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621990953807-9100927e-6493-4dd8-8025-9146713fd9a1.png#clientId=ud70421a5-9281-4&amp;from=paste&amp;height=602&amp;id=u84fbd364&amp;originHeight=602&amp;originWidth=966&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=598916&amp;status=done&amp;style=none&amp;taskId=ubbdb935f-fbf4-4328-ac42-0c45346922e&amp;title=&amp;width=966" alt="image.png"><br>transform vector <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621337793173-2071d8dc-d97e-4aaf-968b-0b9ee05d692a.png#clientId=u4d68daa0-d858-4&amp;from=paste&amp;height=244&amp;id=ithaU&amp;originHeight=244&amp;originWidth=402&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49780&amp;status=done&amp;style=none&amp;taskId=u35d6ea7b-8d6f-40bd-b8e3-aacbd818746&amp;title=&amp;width=402" alt="image.png">（搜索transform可以搜索出来）把向量从一个参考坐标系转化为另一个参考坐标系<br>distance 距离  接受两个输入，然后输出它们之间的距离<br>pixel depth 输出的是像素的深度（相机和像素之间的距离）<br>scene depth 场景深度，输出的是它背后的像素到相机之间的距离<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621989013027-522d18f1-f152-4f49-9642-8c3d22deacac.png#clientId=ud70421a5-9281-4&amp;from=paste&amp;height=566&amp;id=u94f95d85&amp;originHeight=566&amp;originWidth=1313&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=299571&amp;status=done&amp;style=none&amp;taskId=u02a6c94d-48d7-4471-ab0e-58be814f544&amp;title=&amp;width=1313" alt="image.png">矩形框是相机，输出的是地板像素到相机之间的距离，此节点适用于半透明材质<br>depth fade：此节点只适用于半透明材质，此节点作用是使物体与其他物体接触的地方为黑色其余为白色。（将次节点连接到不透明度上面，作用是使该物体中与其他物体接触的地方变得比较透明使不那么生硬。）<br>CameraDepthFade：作用是通过相机距离得到黑白蒙版（离得远的输出白色离得近的输出黑色）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642670334188-3fc6330b-7550-4d75-9240-176068c93dab.png#clientId=u05a888fa-14ae-4&amp;from=paste&amp;height=110&amp;id=ucfdb74fa&amp;originHeight=110&amp;originWidth=218&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15217&amp;status=done&amp;style=none&amp;taskId=uad60a374-9ce2-40da-b349-7d863a535e3&amp;title=&amp;width=218" alt="image.png">第一个FadeLength控制的是开始产生白色向黑色渐变的距离，第二个Fade Offset控制的是完全变成黑色时的距离大小，当距离达到Fade Offset的大小后就完全变成黑色。例如Fade Length为2000，Fade Offset为4000c那么就是距离6000以上的都为白色，距离2000cm~6000cm的是白色到黑色的渐变，距离2000cm的为黑色。<br>hue shift  色调偏移 <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1621993016355-61f8ac5a-6ff1-421b-8318-0388db4aea8c.png#clientId=ud70421a5-9281-4&amp;from=paste&amp;height=305&amp;id=uf62d5bbb&amp;originHeight=305&amp;originWidth=655&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=218388&amp;status=done&amp;style=none&amp;taskId=u7ef73438-c022-4b6f-b353-b3d1a243282&amp;title=&amp;width=655" alt="image.png"><br>rotate about axis ：绕轴旋转<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622276098413-65ee021e-737c-4129-bbc7-08a9e7b545f0.png#clientId=u18e3b2fa-2689-4&amp;from=paste&amp;height=588&amp;id=u7e9161bf&amp;originHeight=588&amp;originWidth=595&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=203345&amp;status=done&amp;style=none&amp;taskId=u1d1235da-73ba-43f0-86c8-4fa77e91c68&amp;title=&amp;width=595" alt="image.png"><br>通过材质实现模型自转:<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1638429672433-edb10d94-c050-4921-96ee-952140860dc4.png#clientId=u86f14395-f274-4&amp;from=paste&amp;height=523&amp;id=u07e9360f&amp;originHeight=523&amp;originWidth=1000&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=268389&amp;status=done&amp;style=none&amp;taskId=uaf6fdb29-7672-48e1-a880-f4000742150&amp;title=&amp;width=1000" alt="image.png"><br> <br>LinerGradient 线性渐变（可以输出两个方向的）<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622292776405-7c696347-6fc3-494d-9672-4a8bdd6fc5d2.png#clientId=u568321d7-3732-4&amp;from=paste&amp;height=324&amp;id=ub1d0a772&amp;originHeight=324&amp;originWidth=714&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=143214&amp;status=done&amp;style=none&amp;taskId=u8cece693-dfcf-43c7-92b9-9d466d5c235&amp;title=&amp;width=714" alt="image.png"><br>3color blend 三色混合。将三个颜色进行混合<br>scene texture<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622359592187-78e447e8-786d-4a1b-af08-c1987213ef99.png#clientId=u39820a50-c3e5-4&amp;from=paste&amp;height=139&amp;id=EU6zI&amp;originHeight=139&amp;originWidth=193&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21434&amp;status=done&amp;style=none&amp;taskId=u0dbe6d4c-435a-479b-a3bf-96a83ce5ac8&amp;title=&amp;width=193" alt="image.png"> 节点，只能在后期处理材质中使用<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1622359630803-eae25867-9946-48fe-82e2-89fe9b8f94bf.png#clientId=u39820a50-c3e5-4&amp;from=paste&amp;height=454&amp;id=P3ddi&amp;originHeight=454&amp;originWidth=415&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38397&amp;status=done&amp;style=none&amp;taskId=uaf10414d-3dde-4a48-9109-ecb66e214ab&amp;title=&amp;width=415" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624108142133-dce7135a-7058-45d2-9f5a-c1ae0b4ee3b3.png#clientId=ub47d394f-227d-4&amp;from=paste&amp;height=164&amp;id=u62d2af07&amp;originHeight=164&amp;originWidth=239&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42389&amp;status=done&amp;style=none&amp;taskId=u778c14ab-a819-4f2a-8426-a16ea635ba9&amp;title=&amp;width=239" alt="image.png">世界对齐纹理     <br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624108154823-11699d82-185b-41be-b592-31a4fb2c67af.png#clientId=ub47d394f-227d-4&amp;from=paste&amp;height=159&amp;id=u38bfff47&amp;originHeight=159&amp;originWidth=224&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42746&amp;status=done&amp;style=none&amp;taskId=u0331cb65-c3ca-4e27-879d-5f372543570&amp;title=&amp;width=224" alt="image.png">世界对齐法线、<br>作用：<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624108218523-53a4e4a5-7ca3-448b-b001-e7e04b3c499f.png#clientId=ub47d394f-227d-4&amp;from=paste&amp;height=268&amp;id=u81ba050f&amp;originHeight=268&amp;originWidth=410&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=201297&amp;status=done&amp;style=none&amp;taskId=ud997aa94-5011-411c-865c-daacb186105&amp;title=&amp;width=410" alt="image.png">这两个不同的物体，但是都使用了同一个材质，都具有WorldAlignedTexture（WAT）效果，节点介绍中的右边XY  XYZ Z控制的是贴图投影坐标轴。因为都具有WAT，因此无论上方的椭圆物体无论如何移动，都会显示正确的衔接纹理效果。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1624109324081-935d8ec6-b313-44a2-9b2d-b5bf885f7790.png#clientId=u788fbda7-74d7-4&amp;from=paste&amp;height=63&amp;id=uf12d8c37&amp;originHeight=63&amp;originWidth=211&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25291&amp;status=done&amp;style=none&amp;taskId=uf0be1c82-808f-4462-8d95-c29ead4850d&amp;title=&amp;width=211" alt="image.png"> 到最近表面的距离：指一个物体的像素到离自身距离最近的物体表面的距离的大小<br>simple grass wind 简单的实现风吹草动（其中additionalwpo可以将一个噪音图输入进去，作用是使风有一些随机性）（不一定是草，也可以是其他的摇摆的物体）的效果（配合顶点颜色使用shift+5的绘制功能可以实现控制哪些顶点随风移动）（着色模型调为双面植物，混合模式调为半透明，光照模型调为表面半透明体积）<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1633249103869-4204a354-06ef-4f8c-9976-81658b4c4a61.png#clientId=ue7886557-ee3d-4&amp;from=paste&amp;height=565&amp;id=uc10bb1c3&amp;originHeight=565&amp;originWidth=834&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161931&amp;status=done&amp;style=none&amp;taskId=u2504cbe4-50b9-4b85-b7d7-c78f2641de9&amp;title=&amp;width=834" alt="image.png"><br>fresnel ：菲涅尔节点，<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635319064756-67ed363c-0db3-4365-99b8-1ab048f72bd1.png#clientId=uffb2405a-fcde-4&amp;from=paste&amp;height=302&amp;id=u574fd948&amp;originHeight=302&amp;originWidth=328&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=96706&amp;status=done&amp;style=none&amp;taskId=u55a75fe7-7709-4dcb-8242-cf24935d033&amp;title=&amp;width=328" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635319078736-75b6c743-3752-472e-b742-a173be5b8a94.png#clientId=uffb2405a-fcde-4&amp;from=paste&amp;height=124&amp;id=u86c5da4b&amp;originHeight=124&amp;originWidth=171&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33604&amp;status=done&amp;style=none&amp;taskId=uf6ddcfa0-471d-4040-8c02-58d36f1384f&amp;title=&amp;width=171" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635319088199-aa0e354c-31e7-4914-97a2-81b3177d4ad4.png#clientId=uffb2405a-fcde-4&amp;from=paste&amp;height=72&amp;id=u3c44c046&amp;originHeight=72&amp;originWidth=269&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12295&amp;status=done&amp;style=none&amp;taskId=u47ded27f-b867-4c6e-ac19-2fc6c4d87ca&amp;title=&amp;width=269" alt="image.png">其中指数控制的是衰减程度，更改为8后<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635319141086-b46252ea-6047-42c6-83fa-b90506c0fea6.png#clientId=uffb2405a-fcde-4&amp;from=paste&amp;height=284&amp;id=u2fcb8790&amp;originHeight=284&amp;originWidth=356&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98388&amp;status=done&amp;style=none&amp;taskId=ubfb0adb5-9c09-4d4a-84bb-d4d42bfe18e&amp;title=&amp;width=356" alt="image.png">基础反射部分控制的是材质本身的基本反射能力<br>height lerp 高度混合，制作地形材质时可以使用。<br><img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635339593917-58414683-2a6b-4984-8448-918d4aeb08ff.png#clientId=u590f5c17-b8fd-4&amp;from=paste&amp;height=231&amp;id=uf7ba46c4&amp;originHeight=231&amp;originWidth=372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30947&amp;status=done&amp;style=none&amp;taskId=ud2835bf7-6b5c-4074-b2fa-67d65106e07&amp;title=&amp;width=372" alt="image.png">A为基础层B为混合层，transition phase 为权重值 范围是0~1 控制混合的程度，height Texture连接基础层的高度图 contrast为对比度<br>height lerp with two height maps <img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1635339823321-f772b705-a76a-4395-9db8-71ce79be05a8.png#clientId=u590f5c17-b8fd-4&amp;from=paste&amp;height=205&amp;id=u1109bbc4&amp;originHeight=205&amp;originWidth=339&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34316&amp;status=done&amp;style=none&amp;taskId=uc92c7030-f079-437a-8857-f0c1b7bcea6&amp;title=&amp;width=339" alt="image.png"><br>用于混合两张不同的高度贴图，混合后的高度贴图可以指定给 height lerp的height texture。基础的高度图连height texture 1 混合的连到height texture 2   其中diffuse可以不指定。</p><p>spheremask 球形遮罩<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1636464318385-8196775e-ae4f-46ff-8edc-d19c037faa1b.png#clientId=u11356fad-7c85-4&amp;from=paste&amp;height=279&amp;id=ub260394d&amp;originHeight=279&amp;originWidth=355&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=90164&amp;status=done&amp;style=none&amp;taskId=u2e234128-9bd0-469c-a53a-251d36d238f&amp;title=&amp;width=355" alt="image.png"><br>flipbook 读取粒子动画纹理的节点<img src="https://cdn.nlark.com/yuque/0/2021/png/2623605/1637912117136-137fa793-ef60-45cd-9a31-e9ff02158a0d.png#clientId=ucabc6807-740f-4&amp;from=paste&amp;height=244&amp;id=ufadc4ae9&amp;originHeight=731&amp;originWidth=2398&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=684301&amp;status=done&amp;style=none&amp;taskId=ua8a19c07-5079-430c-9a55-d8b50b0da78&amp;title=&amp;width=799.3333333333334" alt="image.png">其中乘以0.8的意义：如果不乘以0.8，那么此着色器得到的是每秒30帧的动画过程，如果需要的是输出24帧的动画那么只需要乘以0.8就可以得到符合视频的动画效果。因为30<em>0.8=24。<br>6的意义是指纹理是6</em>6帧的。<br>Landscape Visibility  mask 适用于地形材质，将材质改为mask模式，将此节点连接到蒙版处就可以通过绘制工具绘制空洞，绘制时要更改为绘制可见性。  <br>landscape layer sample 作用是获得地形层权重。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1643286368577-13d29607-22df-401e-a7ca-25f01f7fe2be.png#clientId=u49147c50-ef3c-4&amp;from=paste&amp;height=90&amp;id=u6999ad24&amp;originHeight=90&amp;originWidth=247&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8080&amp;status=done&amp;style=none&amp;taskId=u84fcb167-4fe5-4d8e-8fd8-23b0c2bef5b&amp;title=&amp;width=247" alt="image.png">通过参数名得到对应地形层的绘制的蒙版，通过绘制强度决定输出0~1的数值，可以通过这个节点配合来控制不同地形层的<br>LinearTosRGB和sRGBToLinear 作用是使线性值与sRGB的转换。  通过材质数学计算出来的是Linear如果要指定到材质Base Color  Socket需要使用这个节点，但也可以简单的使用数值为2.2的Power节点将Linear转换为sRGB<br>swizzle:<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642421215058-dde76950-6fc2-46e1-b615-431c2567c801.png#clientId=ud31a58ca-a620-4&amp;from=paste&amp;height=97&amp;id=ueb3dffd3&amp;originHeight=97&amp;originWidth=155&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10421&amp;status=done&amp;style=none&amp;taskId=uc3dd7fe2-5758-40cb-981a-e399c4462ba&amp;title=&amp;width=155" alt="image.png">作用是交换通道数值，例如将一张贴图的RG通道输入到XY中，会输出GR的数值。利用这个节点可以的将贴图旋转（不是简单的仅仅是旋转，而是旋转后再镜像。），例如<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1642421679983-14990600-1538-4bfd-b85a-fefc54ce0723.png#clientId=ud31a58ca-a620-4&amp;from=paste&amp;height=237&amp;id=u3931fdd4&amp;originHeight=237&amp;originWidth=558&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50059&amp;status=done&amp;style=none&amp;taskId=u1da58846-d424-44ff-bb35-17aea13c750&amp;title=&amp;width=558" alt="image.png"><br>smooth step<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646121614401-44e5e053-6893-4f0d-8df0-98a13261894c.png#clientId=ub2041b83-99cc-4&amp;from=paste&amp;height=151&amp;id=u5bb324ef&amp;originHeight=151&amp;originWidth=177&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12158&amp;status=done&amp;style=none&amp;taskId=udb8274dc-f718-42a0-9c62-4e64595c97c&amp;title=&amp;width=177" alt="image.png">   这个节点的作用是根据Alpha的数值与Min和Max进行对比，趋向于Min就趋向于0，趋向于Max就趋向于1.举例：Min设置为地形Z轴最低数值，Max设置为地形Z轴最高数值，Alpha连接世界位置后得到的：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1646124170691-30523c38-babf-4e1b-b010-558b5d0770d9.png#clientId=ub2041b83-99cc-4&amp;from=paste&amp;height=364&amp;id=u509db291&amp;originHeight=364&amp;originWidth=694&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21580&amp;status=done&amp;style=none&amp;taskId=u226316b3-35cc-4645-9604-d561c733697&amp;title=&amp;width=694" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE资产以及版本管理</title>
      <link href="/2023/08/29/UnrealEngine-UE%E8%B5%84%E4%BA%A7%E4%BB%A5%E5%8F%8A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>/2023/08/29/UnrealEngine-UE%E8%B5%84%E4%BA%A7%E4%BB%A5%E5%8F%8A%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a href="https://www.bilibili.com/video/BV1wG4y1K7Ev/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">[官方培训]20-资产及版本管理 | Epic 戴浩军(官方字幕)_哔哩哔哩_bilibili</a><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677490032792-75d06f2c-b408-428d-827c-0785bbbd7e5c.png#averageHue=%23080808&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=146&amp;id=bjkml&amp;originHeight=146&amp;originWidth=1341&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=74036&amp;status=done&amp;style=none&amp;taskId=uedfad366-4e6a-44f5-97ae-f9d92081df5&amp;title=&amp;width=1341" alt="image.png"><br><a name="hG8E4"></a></p><h1>UE影视动画项目资产和传统线性动画流程资产的异同</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677470086203-1e7bebd2-5457-4f01-842b-509ae995672d.png#averageHue=%23080808&amp;clientId=ufef3a1a4-4586-4&amp;from=paste&amp;height=853&amp;id=u23ff968f&amp;originHeight=1308&amp;originWidth=1393&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=589317&amp;status=done&amp;style=none&amp;taskId=u62b752c9-65f4-4c31-9d19-a4f6937fd97&amp;title=&amp;width=908.7708740234375" alt="image.png"><br><a name="DCjNq"></a></p><h2 id="相同点：核心工作流和资产类型相似">相同点：核心工作流和资产类型相似</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677474236265-ebbe734e-c8d2-4023-802e-ccf9fc0e2f4d.png#averageHue=%23696968&amp;clientId=ufef3a1a4-4586-4&amp;from=paste&amp;height=809&amp;id=u4800f56f&amp;originHeight=728&amp;originWidth=1545&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=223114&amp;status=done&amp;style=none&amp;taskId=u1ed18721-a4f2-4e0a-97ac-64cfe59ad24&amp;title=&amp;width=1716.6667121428043" alt="image.png"><br><a name="abB4B"></a></p><h2 id="差异">差异</h2><p><a name="WJK9q"></a></p><h3 id="uasset文件">uasset文件</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677474372337-d99c1ff4-a031-4b66-9e86-ca9208d825fa.png#averageHue=%230b0b0b&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=749&amp;id=ue7ff0941&amp;originHeight=927&amp;originWidth=1661&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=207758&amp;status=done&amp;style=none&amp;taskId=uc4026be3-6a88-4bfc-ab40-4aec30ef29d&amp;title=&amp;width=1341.5556640625" alt="image.png"><br><a name="RIJfm"></a></p><h3 id="工程资产相对零散，关系复杂，手动信息追踪难度较大">工程资产相对零散，关系复杂，手动信息追踪难度较大</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677474429037-0daf66ec-e47d-4b64-a4d8-7a271322d628.png#averageHue=%23e0dfde&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=809&amp;id=ufb5e8baf&amp;originHeight=1344&amp;originWidth=2768&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=909237&amp;status=done&amp;style=none&amp;taskId=ub04f2316-5393-4052-8818-404be21bc5a&amp;title=&amp;width=1665.5556640625" alt="image.png"><br><a name="VYjHg"></a></p><h3 id="UE对部分资产会进行自动关联修改">UE对部分资产会进行自动关联修改</h3><p>例如材质赋予不同实例所需要的材质设置不符合时UE会自动进行设置。<br>在骨骼网格体中添加插槽会自动的在对应的骨骼资产中进行修改。<br><a name="DM600"></a></p><h3 id="通用资产可能会被多个岗位的资产共同引用">通用资产可能会被多个岗位的资产共同引用</h3><p>对通用资产的修改有可能会影响多个岗位的工作<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677475009978-e54c19ef-8b1c-41f5-8994-0f9cc1bb31f3.png#averageHue=%23696968&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=675&amp;id=u98fed9f4&amp;originHeight=1313&amp;originWidth=2392&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=535653&amp;status=done&amp;style=none&amp;taskId=u3a21c7a9-f399-472c-9e3f-642a1b2e5cd&amp;title=&amp;width=1229.7744140625" alt="image.png"><br><a name="pXZmD"></a></p><h1>UE版本管理使用方法建议</h1><p><a name="fOaWd"></a></p><h2 id="三大主流版本控制软件介绍（Perforce、Git、SVN）">三大主流版本控制软件介绍（Perforce、Git、SVN）</h2><p><a name="x8n1c"></a></p><h3 id="SVN">SVN</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677475416311-1e6d1cbd-46d5-4824-a086-823788343bd7.png#averageHue=%230d0d0d&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=419&amp;id=u4477191f&amp;originHeight=652&amp;originWidth=620&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=116173&amp;status=done&amp;style=none&amp;taskId=udff70af4-1ff4-4d26-ae20-264873f8987&amp;title=&amp;width=398.888916015625" alt="image.png"><br><a name="HneSN"></a></p><h3 id="Git">Git</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476128450-1c074043-b736-484f-965e-7c896d566b4c.png#averageHue=%23100604&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=419&amp;id=u0a75a22c&amp;originHeight=688&amp;originWidth=642&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=83251&amp;status=done&amp;style=none&amp;taskId=ueaaa4a3e-e1ac-4717-80d5-a51a1d0598d&amp;title=&amp;width=391.32293701171875" alt="image.png"><br>下载好Git服务后可以去下载个GUI版本<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476211334-29e9c550-9028-4c10-a222-e61299b77fc4.png#averageHue=%23e9e7de&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=738&amp;id=u41017ef1&amp;originHeight=664&amp;originWidth=1053&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=495386&amp;status=done&amp;style=none&amp;taskId=uca455b5a-2498-42e1-b199-4cd783bdf6f&amp;title=&amp;width=1170.0000309944162" alt="image.png"><br>举例为tortoiseGit<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476234642-36f1743d-fffa-44ff-a93d-c00d6dbe5967.png#averageHue=%23f3f4ef&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=248&amp;id=ud5ecf404&amp;originHeight=223&amp;originWidth=281&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=52234&amp;status=done&amp;style=none&amp;taskId=u16478a51-4364-4a26-a446-43652797412&amp;title=&amp;width=312.2222304932867" alt="image.png"><br><a name="IXVIb"></a></p><h4 id="Git特点">Git特点</h4><p>允许在单机状态下在本地进行本地管理，联网后再把特定的版本推送到服务器中的远程版本库。<br>git本身是面向代码文件版本控制设计，因此默认只支持将50m以下的文件推送到远程仓库。<br>通过下载LFS可以帮助突破限制<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476715817-1a512577-f2fd-46dd-9d3d-f4314fd6c403.png#averageHue=%23e8e6dc&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=486&amp;id=u8649c21f&amp;originHeight=437&amp;originWidth=1274&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=179432&amp;status=done&amp;style=none&amp;taskId=u1251f6df-d2c9-4994-88b0-dd3d93aab78&amp;title=&amp;width=1415.5555930549726" alt="image.png"><br><a name="nMQUD"></a></p><h4 id="远程版本库的创建">远程版本库的创建</h4><p>1.在服务器上安装git软件<br>2.创建一个.git结尾的文件目录<br>3.在文件目录下创建bare版本库<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476418401-faf56457-dfc2-4810-9dc6-5f0d11b24a61.png#averageHue=%23f9f7f7&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=338&amp;id=ub29518c4&amp;originHeight=560&amp;originWidth=488&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=68563&amp;status=done&amp;style=none&amp;taskId=u0c6b8311-410b-4c17-a058-1c0196feee4&amp;title=&amp;width=294.22222900390625" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476442853-775494df-09bd-4d66-b309-f63e7e0b8328.png#averageHue=%23e8e8e6&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=241&amp;id=u07974914&amp;originHeight=217&amp;originWidth=608&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=63465&amp;status=done&amp;style=none&amp;taskId=u399d1c41-c5c3-499e-94f4-afdb3e387cd&amp;title=&amp;width=675.5555734516666" alt="image.png"><br>4.在局域网内共享git文件目录<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476513033-535ceaea-79f2-497a-9acb-7c6ec295ac3e.png#averageHue=%23f6f5f4&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=737&amp;id=u88eac518&amp;originHeight=663&amp;originWidth=753&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=142610&amp;status=done&amp;style=none&amp;taskId=u875b1fc5-4577-4d0d-93ca-48912e8a543&amp;title=&amp;width=836.6666888307648" alt="image.png"><br>5.客户端push到服务器上的目录地址<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476596439-1918b101-aae5-4f90-a701-f314d63ec360.png#averageHue=%23efeeee&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=644&amp;id=u07d16bab&amp;originHeight=580&amp;originWidth=640&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=99490&amp;status=done&amp;style=none&amp;taskId=u54faa1cd-aef9-46ce-87b5-ae534b9a61b&amp;title=&amp;width=711.1111299491228" alt="image.png"><br><a name="bsxeg"></a></p><h3 id="Perforce">Perforce</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476809509-52d3c63a-3201-48d9-8543-2fdb64c79bb4.png#averageHue=%23101010&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=435&amp;id=u516f3089&amp;originHeight=1019&amp;originWidth=880&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=149082&amp;status=done&amp;style=none&amp;taskId=u6942ac9a-3f1b-44cd-a09c-70968a11505&amp;title=&amp;width=375.77783203125" alt="image.png"><br><a name="kp2mV"></a></p><h4 id="客户端P4V">客户端P4V</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477097677-23cfdc16-b1ca-4bec-be7e-be4c2caca167.png#averageHue=%23ebebeb&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=780&amp;id=u82cf647f&amp;originHeight=702&amp;originWidth=912&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=165690&amp;status=done&amp;style=none&amp;taskId=u75b2aaae-0989-4103-a4e4-400c1823888&amp;title=&amp;width=1013.3333601775" alt="image.png"><br><a name="v00oW"></a></p><h4 id="服务端P4D">服务端P4D</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477229571-9cb36ade-915b-4de2-bca3-3dbf8e92da92.png#averageHue=%237f7e7c&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=568&amp;id=u4f54c99d&amp;originHeight=846&amp;originWidth=1029&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=216099&amp;status=done&amp;style=none&amp;taskId=uf68940d3-d3bf-46b8-9693-74d37977983&amp;title=&amp;width=691.3333740234375" alt="image.png"><br><a name="gfS4x"></a></p><h4 id="客户端使用">客户端使用</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477245616-a838fb72-2160-49fc-91bd-fc3e7a19075f.png#averageHue=%23e9e7e3&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=251&amp;id=u7ba386d2&amp;originHeight=226&amp;originWidth=656&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=65464&amp;status=done&amp;style=none&amp;taskId=u321f6a98-03b7-4ae9-859e-3a615e71afc&amp;title=&amp;width=728.8889081978509" alt="image.png"><br>可以通过P4Admin管理软件在客户端电脑上远程管理服务器上的版本库<br>创建账号：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477321985-b6b856b2-0568-4c97-a1a0-887bce83e20b.png#averageHue=%23f9f9f9&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=623&amp;id=u5ddb56e6&amp;originHeight=561&amp;originWidth=1043&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=75542&amp;status=done&amp;style=none&amp;taskId=ubb4ecb6d-23fa-4c0b-8c8f-a4ec420dc76&amp;title=&amp;width=1158.888919588961" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477359831-c5003a7d-f213-432b-a977-4c5f85c5286c.png#averageHue=%23eaeaea&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=373&amp;id=ub3a241ca&amp;originHeight=336&amp;originWidth=624&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=69446&amp;status=done&amp;style=none&amp;taskId=ua177d675-28a7-4d7f-8f43-13fe0025ba0&amp;title=&amp;width=693.3333517003947" alt="image.png"><br><a name="ffuEO"></a></p><h3 id="控制软件的比较">控制软件的比较</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477541331-2dfccdd9-83aa-4b32-9f1e-f347d79d49f2.png#averageHue=%236e6e6d&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=1237&amp;id=u324a2f4f&amp;originHeight=1113&amp;originWidth=2062&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=493588&amp;status=done&amp;style=none&amp;taskId=uef0b0ed1-7aad-4b47-be46-43341293b87&amp;title=&amp;width=2291.11117180483" alt="image.png"></p><p><a name="rzm4k"></a></p><h2 id="UE编辑器版本管理设置和使用（以SVN为例）">UE编辑器版本管理设置和使用（以SVN为例）</h2><p>1.可以在UE内部开启源码管理与SVN服务进行关联<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476053367-93618af0-3764-4700-9357-fe4991adf807.png#averageHue=%234e3329&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=621&amp;id=m3z9X&amp;originHeight=559&amp;originWidth=1023&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=580712&amp;status=done&amp;style=none&amp;taskId=u71c8a91e-877f-48a5-b6a7-42478c15d1d&amp;title=&amp;width=1136.666696778051" alt="image.png"><br>2.针对要修改的文件使用检出功能来获得服务器上最新的文件并且可以锁定这个文件来通知其他用户防止冲突修改。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677476112246-fae3f5aa-6007-49a3-9714-c6942fc9e8fd.png#averageHue=%232c2c2c&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=254&amp;id=nnZQ2&amp;originHeight=229&amp;originWidth=679&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=41729&amp;status=done&amp;style=none&amp;taskId=u428b4483-8428-4ebc-adb8-21fefd8ec3f&amp;title=&amp;width=754.4444644303975" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677477910181-728bc24d-6c3f-497d-a8ce-8b79235e74eb.png#averageHue=%23312f2e&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=308&amp;id=u65e37599&amp;originHeight=277&amp;originWidth=410&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=59969&amp;status=done&amp;style=none&amp;taskId=uf84e0cc5-adb0-4fd7-b226-36da2fba4bf&amp;title=&amp;width=455.55556762365677" alt="image.png"><br>3.修改完成以后使用检入命令来提交并结束锁定状态。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677478003107-3d854a58-6411-4531-867c-6be4144ba743.png#averageHue=%23353434&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=266&amp;id=u6a4e0405&amp;originHeight=239&amp;originWidth=733&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=58401&amp;status=done&amp;style=none&amp;taskId=ucd406be0-e9ea-4d1e-a147-b735623266f&amp;title=&amp;width=814.4444660198548" alt="image.png"><br>4.批量提交<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677478173456-ce1af59c-e36d-4fcc-91c1-e347d1a45df5.png#averageHue=%23434343&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=191&amp;id=uadae6dff&amp;originHeight=172&amp;originWidth=347&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=26540&amp;status=done&amp;style=none&amp;taskId=uc527fd1f-61ef-402a-bb86-178b7280322&amp;title=&amp;width=385.55556576929" alt="image.png"></p><p><a name="SFTzh"></a></p><h1>UE影视动画项目对资产管理的现实需求以及方案参考</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677478409793-13903498-8771-4dc2-b717-f51682557a78.png#averageHue=%23828281&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=734&amp;id=u0bff5e4c&amp;originHeight=661&amp;originWidth=1017&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=349103&amp;status=done&amp;style=none&amp;taskId=u80b6e5e9-0cca-46de-a67b-9b10993482e&amp;title=&amp;width=1130.000029934778" alt="image.png"><br><a name="X6iCJ"></a></p><h2 id="影视动画项目资产体量庞大">影视动画项目资产体量庞大</h2><p>问题一：影视动画项目资产体量的庞大带来了大量的存储和传输成本。问题产生的原因是影视动画项目对美术的极致要求。但在实际项目中，很多效果有不同的实现路径，我们应该尽可能地采用性价比较高地方式来表现画面效果。根据画面对象地重要性，画面占比来分级别使用资产。而不是全部按最高级别堆砌资产。<br>解决办法：<br>1.比如远处地物体使用较低级别地LOD<br>2.某些大面积不需要实时交互的中远景烟雾特效不需要使用高精度流体解算来表现，而是使用面皮模型配合材质效果来代替。同样可以提供较好的整体美术效果。<br>3.对于一些确定不会近距离观察的模型可以考虑直接使用低分辨率的贴图，这样可以大大减小资产的体量。<br>4.尽可能提高资产的复用率。<br>5.对于需求类似的高精度贴图模型等，尽量只使用一份资产。<br>6.对于需要经常切换服装或道具的角色尽量使用蓝图拼装的方式制作。<br>7.在UE5中使用nanite技术以及静态虚拟纹理技术，允许我们在项目中直接使用超高精度的影视模型资产和贴图资产。<br>问题二：在大部分情况下，我们在UE编辑器中只会针对资产的编辑器属性进行调整，而不会对文件本身进行修改。每次修改属性都需要将整个uasset数据资产上传到服务器，会带来很大的存储和上传成本。<br>解决办法：<br>针对这个问题，UE5引入了Virtual Asset技术，可以让团队只上传或下载属性的元数据，而只在必要的时候才处理美术资产数据。在UE5.1版本中，虚拟资产技术率先提供了对贴图和音频资产的支持。<br><a name="AMME3"></a></p><h2 id="需要兼顾UE资产和DCC资产的管理">需要兼顾UE资产和DCC资产的管理</h2><p>问题：由于UE采用了UAsset格式资产来提高数据的完整性和读写效率，造成了团队通常需要维护UE项目美术资产和外包DCC美术源文件。 <br>解决办法：<br>比较直接的思路：<br>1.把通用DCC资产和项目资产分开管理。通过盘符挂载的方式从本地加载远程项目盘中的资产，手动挑选并下载到本地导入UE使用。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480074230-9bc0b686-af98-4dff-8e75-62ed0e5dda00.png#averageHue=%23050404&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=483&amp;id=u49621e4a&amp;originHeight=838&amp;originWidth=1415&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=203449&amp;status=done&amp;style=none&amp;taskId=u8feaea67-80da-495e-a132-045c21fa8a7&amp;title=&amp;width=816.2222900390625" alt="image.png"><br>2.通过开发UE编辑器插件并建立UE通用资产库。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480302367-e86ae11d-2cbd-40c0-8ce3-67ebe1accb7c.png#averageHue=%23070404&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=500&amp;id=u233eb846&amp;originHeight=877&amp;originWidth=1434&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=240182&amp;status=done&amp;style=none&amp;taskId=u9b957ea6-b06c-4989-aefe-da300dde0be&amp;title=&amp;width=818.3333740234375" alt="image.png"><br>3.在服务器中通过UE工程的形式将各类资产分类整理成库，通过远程引用的方式加载到本地作为制作参考或资产效果预览。</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480364120-de9301f8-8b89-4ef1-b059-aee3340aa8d2.png#averageHue=%23070605&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=497&amp;id=u8e633657&amp;originHeight=827&amp;originWidth=1352&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=233072&amp;status=done&amp;style=none&amp;taskId=u4b9d6748-9995-4575-8f7d-3c8a9e8d376&amp;title=&amp;width=813.2222900390625" alt="image.png"><br>4.通过类似bridge或者sketchfab提供的高性价比的资产预览功能，确定符合项目需要后下载到本地使用，同时可以针对模型精度，贴图提供自动化的不同精度的资产文件。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677480497459-1be36a2b-33ad-464d-9f4a-f52a67b9d74a.png#averageHue=%236b756e&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=970&amp;id=u16cab46a&amp;originHeight=873&amp;originWidth=1669&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=614963&amp;status=done&amp;style=none&amp;taskId=u9520676f-8f6d-40d6-a891-032e730c9ab&amp;title=&amp;width=1854.4444935704469" alt="image.png"><br><a name="FRpn5"></a></p><h2 id="资产复用度高，多个岗位需要频繁访问同一套项目资产">资产复用度高，多个岗位需要频繁访问同一套项目资产</h2><p>问题一：某一个资产的变化可能会影响到多个岗位的工作。这带来了资产精简，修改高效等好处，但同时对资产目录划分，权限管理提出了更高的要求。<br>解决办法：<br>1.我们在项目初始就根据团队岗位配置，和根据项目特点划分项目目录<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677481633866-ea219561-e8fb-4c19-9830-1249f77f0397.png#averageHue=%235b5448&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=237&amp;id=u16b8131c&amp;originHeight=213&amp;originWidth=376&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=40857&amp;status=done&amp;style=none&amp;taskId=u9d4cfa9a-d1ba-46fd-873e-e428f7e6395&amp;title=&amp;width=417.7777888451096" alt="image.png"><br>2.在版本控制软件的服务端进行合理的用户组别和对应的项目目录权限进行设置，使每个岗位只有权限获取到岗位工作必要的资产，只对职责内的资产具备修改权限。这样即避免了多岗位同时修改资产带来的冲突风险，也能够大大降低客户端电脑对项目文件传输和存储的成本。<br>问题二：在UE编辑器中对于资产进行移动，重命名等操作时有时会产生重定向器。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677482004175-b92f0fe3-e6af-4ac5-8914-006c758fb2e6.png#averageHue=%232c2b29&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=563&amp;id=ud2438185&amp;originHeight=507&amp;originWidth=1961&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=286989&amp;status=done&amp;style=none&amp;taskId=uec5f1c01-99ea-4679-8d66-c6cfdd24690&amp;title=&amp;width=2178.888946609734" alt="image.png"><br>原因：这是由于当前文件正在被其他资产引用，无法直接更新引用，引擎会创建默认隐藏的重定向资产来保持这个引用，这些重定向器在系统资源管理器中可以看到，同样是UAsset格式的文件。 <br>解决办法:通过自带的修复重定向器功能来修复。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677482250609-90ece5a7-aab9-47fb-9035-0924467f78e5.png#averageHue=%2339312a&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=531&amp;id=u765dec1d&amp;originHeight=478&amp;originWidth=1355&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=427689&amp;status=done&amp;style=none&amp;taskId=u8f070323-1c40-42eb-a1a9-95c6b54f36c&amp;title=&amp;width=1505.5555954391584" alt="image.png"><br><a name="YIZUG"></a></p><h2 id="岗位协作量大，尤其是大规模场景和大量镜头">岗位协作量大，尤其是大规模场景和大量镜头</h2><p>解决办法：<br>1.项目关卡，镜头拆分合理，使其能够确保并行工作。<br>2.对于关卡而言可以使用子关卡嵌套的方式，预先按岗位对大规模复杂关卡进行拆分，无论是按区域拆分还是按照光照关卡景物关卡甚至是室内室外关卡进行拆分，总体目标是为了方便将不同的关卡编辑工作保存在不同的关卡文件中，以此方便协作。<br>这样做的缺点是：关卡的编辑工作必须预先划分清楚，后期改变起来比较繁琐。<br>3.在UE5中可以发挥世界分区或者One File Per Actor(OFPA)的优势，允许在不提前划分子关卡的情况下多人可以同时编辑一个关卡，这是由于在传统的关卡管理方式中，所有actor对象的属性都是保存在UMap二进制关卡文件中，无法由多岗位分别进行同时修改后进行合并工作，而开启OFPA后关卡中Actor对象的属性信息将保存在关卡外部的针对每个actor对象创建的文件中，从而允许多人同时编辑同一个关卡，只要不同时修改相同的actor对象即可。</p><p>如果以开放世界为模板创建关卡将会自动勾选OFPA<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486635361-d48e85ad-f8e7-4d96-9c7e-6f4493832c3b.png#averageHue=%23312e2b&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=520&amp;id=u6f2882f5&amp;originHeight=468&amp;originWidth=552&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=106600&amp;status=done&amp;style=none&amp;taskId=ud957a589-9fe1-4577-b002-51b0a5eca6a&amp;title=&amp;width=613.3333495811185" alt="image.png"></p><p>4.对于镜头文件，通过合理区分场景和镜头对象的方式来科学划分资产，比如在特定镜头中才会出现的对象，包括灯光相机后处理这些特定的场景对象，我们可以在sequence中通过可生成的方式来动态生成这些对象，而在关卡中只保留所有镜头都需要看到的通用对象，通过这种方式，将镜头特定数据和通用关卡数据进行解耦，不仅大大降低了多岗位协作过程中导致资产冲突的可能，也降低了镜头修改时产生的资产体量<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677487829111-c1b9be8b-9221-43fc-908f-53b11bb62463.png#averageHue=%23463936&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=703&amp;id=u4464a044&amp;originHeight=633&amp;originWidth=647&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=344416&amp;status=done&amp;style=none&amp;taskId=ubc7cda65-b2be-4571-a90d-5a7761d260d&amp;title=&amp;width=718.8889079329414" alt="image.png"><br><a name="NT37J"></a></p><h3 id="OFPA的使用">OFPA的使用</h3><p>确保勾选OFPA<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486040451-7a93804f-339c-4307-afe9-e544599b38fc.png#averageHue=%232a2a2a&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=293&amp;id=BCMv0&amp;originHeight=264&amp;originWidth=862&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=72593&amp;status=done&amp;style=none&amp;taskId=u8fdb26b4-635b-4224-8ddc-16bab0c665b&amp;title=&amp;width=957.7778031502247" alt="image.png"><br>选中actor修改打包模式为外部<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486760778-73fd514f-951a-4668-a774-637ff2247ea2.png#averageHue=%2322201f&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=912&amp;id=u5ac449c7&amp;originHeight=821&amp;originWidth=592&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=251270&amp;status=done&amp;style=none&amp;taskId=ubee334af-2dbd-4fcf-8218-f2eec1a77f0&amp;title=&amp;width=657.7777952029386" alt="image.png"><br>属性文件会放到__ExternalActors__文件目录下<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677486888813-eabb0a81-9c92-4307-b17d-ee900ab6a94a.png#averageHue=%23fcfbfb&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=229&amp;id=u18137fdd&amp;originHeight=206&amp;originWidth=930&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=41853&amp;status=done&amp;style=none&amp;taskId=ud5f814fe-50d2-4e65-b6d2-36ee8b36623&amp;title=&amp;width=1033.3333607073191" alt="image.png"><br><a name="MmcW0"></a></p><h2 id="项目周期紧，审查频繁">项目周期紧，审查频繁</h2><p>这种问题需要通过快速迭代的方法来针对。<br>一方面可以通过IT手段确保传输效率，<br>另一方面也需要通过合理的任务拆分，和良好的项目管理和日常操作习惯来提升迭代效率。<br>比如每个岗位在修改资产前都应该使用检出命令通知其他岗位该文件正在编辑。在修改完成后第一时间检入，解除文件锁定。<br>还可以将多个相互关联的文件的修改划分到多个合理划分的变更列表中，修改完成后优先提交这个变更列表，让审查岗位优先看到这个镜头效果。<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488129518-82dcabf6-2764-458a-a505-1d14791744b9.png#averageHue=%232a2523&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=506&amp;id=u84ec6b03&amp;originHeight=455&amp;originWidth=758&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=275234&amp;status=done&amp;style=none&amp;taskId=u260f0ffa-f08b-466d-b829-c52496be610&amp;title=&amp;width=842.2222445334924" alt="image.png"><br>UE5提供的插件：<br><a name="HNSQr"></a></p><h3 id="1-关卡快照：">1.关卡快照：</h3><p>可以让我们对关卡编辑的某个时间创建快照数据，相比手动另存关卡，关卡快照数据更简洁，长期保存也不会带来大量的存储成本，并且会根据时间自动命名文件，同时提供了专门的编辑器来预览管理快照数据。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488187114-03a5d9a8-cd94-4315-90a6-261e7cb38023.png#averageHue=%232e2d29&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=260&amp;id=okrYA&amp;originHeight=234&amp;originWidth=879&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=63342&amp;status=done&amp;style=none&amp;taskId=u927c8fe2-69c5-4a7f-8db4-badb171aa08&amp;title=&amp;width=976.6666925394984" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488752811-4b30b9fd-2858-42bf-8058-b4453f52f7e1.png#averageHue=%235f472f&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=231&amp;id=udb325287&amp;originHeight=231&amp;originWidth=1193&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=329290&amp;status=done&amp;style=none&amp;taskId=u18e5e347-011d-42d9-93b8-c889664a5dd&amp;title=&amp;width=1193" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488782921-944caa55-7c36-410f-b446-b8f8493a85aa.png#averageHue=%23232323&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=609&amp;id=ue88b06f1&amp;originHeight=609&amp;originWidth=1170&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=191235&amp;status=done&amp;style=none&amp;taskId=u74c3419b-1d6d-48e2-a001-7987011d328&amp;title=&amp;width=1170" alt="image.png"><br><a name="Ofp3Y"></a></p><h3 id="2-HDRIBackdrop">2.HDRIBackdrop</h3><p>对于角色资产的审查，我们首先可以通过蓝图拼装的方式将多个角色部件拼接成不同版本的角色蓝图资产，降低资产的重复度，同时可以创建专门的角色lookdev关卡，并且启动自带的HDRIBackdrop插件配合hdri环境立方体贴图来提供标准的审查环境，而不是每次审查都要打开正在编辑中的关卡。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677488857652-d96b5c66-95b0-4749-8c52-2e64dcb2cf03.png#averageHue=%2333352e&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=166&amp;id=u7970ed38&amp;originHeight=166&amp;originWidth=697&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=25922&amp;status=done&amp;style=none&amp;taskId=ub9d99d43-5076-43ee-b4b1-b75bbcfc1f8&amp;title=&amp;width=697" alt="image.png"><br><a name="kc8dg"></a></p><h3 id="3-镜头">3.镜头</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677489518247-fb63788c-7184-4d78-91a8-663c6e15cff4.png#averageHue=%23413e3d&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=315&amp;id=u3b792e45&amp;originHeight=315&amp;originWidth=1284&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=287211&amp;status=done&amp;style=none&amp;taskId=u3c0f7500-44b1-466a-8ea0-f8de1f11471&amp;title=&amp;width=1284" alt="image.png"><br><a name="nkReX"></a></p><h3 id="4-制作工具">4.制作工具</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677489549558-f219f5a4-384b-46ae-af36-06e22c0269bd.png#averageHue=%23222222&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=449&amp;id=uaed0c028&amp;originHeight=449&amp;originWidth=641&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=68040&amp;status=done&amp;style=none&amp;taskId=u7ac7a206-459c-434b-89a0-8173bf01a4a&amp;title=&amp;width=641" alt="image.png"><br><a name="PvvUb"></a></p><h2 id="需要同时应对内部协作和外部协作，既要确保协作效率，又要保证信息安全">需要同时应对内部协作和外部协作，既要确保协作效率，又要保证信息安全</h2><p>1.分级管理方式：IT团队将内部和外部团队使用的分别保存到单独的服务器，用独立的版本库进行管理，对外只提供外部服务器的IP地址，账号等信息，而内部版本库服务器会定期从外部版本库服务器获取资产，或者向外部版本库服务器新增参考资产，而外部团队完全感知不到内部版本库服务器的存在，在保证信息安全的同时还能够缓解内部资产服务器的压力。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1677489729182-4c705cb5-06df-4189-9484-76229e4785ee.png#averageHue=%23010101&amp;clientId=u71e946fa-9ffb-4&amp;from=paste&amp;height=506&amp;id=u889d7b05&amp;originHeight=506&amp;originWidth=1252&amp;originalType=binary&amp;ratio=0.8999999761581421&amp;rotation=0&amp;showTitle=false&amp;size=105635&amp;status=done&amp;style=none&amp;taskId=uae879084-9cd9-4f24-bd89-babe570072d&amp;title=&amp;width=1252" alt="image.png"><br>2.在内部局域网中，通过限制只有特定MAC地址列表中的客户端电脑才能访问内部版本库服务器，以此来增强安全性。</p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE角色表现</title>
      <link href="/2023/08/29/UnrealEngine-UE%E8%A7%92%E8%89%B2%E8%A1%A8%E7%8E%B0/"/>
      <url>/2023/08/29/UnrealEngine-UE%E8%A7%92%E8%89%B2%E8%A1%A8%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a href="https://www.bilibili.com/video/BV1i841177TS/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">[官方培训]16-UE角色表现 | Epic 孙丹璐_哔哩哔哩_bilibili</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670555785700-f5f0a813-0e2d-4dd6-a193-2d17d8dd9523.png#averageHue=%23f8f7f7&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=694&amp;id=u36146edd&amp;originHeight=625&amp;originWidth=794&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=145584&amp;status=done&amp;style=none&amp;taskId=ub4bcd0a7-f3b0-4156-a909-9de3d99d347&amp;title=&amp;width=882.2222455931304" alt="image.png"><br><a name="kkv3a"></a></p><h1>毛发</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670555803997-2ecf9384-0a99-4f26-bbfc-c16711794c49.png#averageHue=%23f9f9f9&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=860&amp;id=uca47bb8a&amp;originHeight=774&amp;originWidth=1056&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174843&amp;status=done&amp;style=none&amp;taskId=u1659f612-53f3-407d-b59d-13afb13cb01&amp;title=&amp;width=1173.3333644160525" alt="image.png"><br><a name="qwmpF"></a></p><h2 id="各向异性">各向异性</h2><p><a name="aymg3"></a></p><h2 id="image-png毛发材质"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670555859839-b931c494-0cef-40a1-a4ad-23312dd29ed0.png#averageHue=%23a9abb6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=583&amp;id=udf12cba8&amp;originHeight=525&amp;originWidth=1058&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=377410&amp;status=done&amp;style=none&amp;taskId=uc50a5bea-5443-44a2-affb-1ee94a10994&amp;title=&amp;width=1175.5555866971436" alt="image.png">毛发材质</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556080304-d91e9b43-5cd1-40fa-85b4-782be32f50ef.png#averageHue=%23dfdede&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=978&amp;id=u5b994dd2&amp;originHeight=880&amp;originWidth=1101&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=349161&amp;status=done&amp;style=none&amp;taskId=uc23909c0-b3f0-48fc-a35f-ae624a9dece&amp;title=&amp;width=1223.3333657406004" alt="image.png"><br><a name="Jzv09"></a></p><h2 id="毛发-建模-风格化">毛发-建模(风格化)</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556215562-deee0fdc-4dbf-45ab-9467-b9b8ea6946a9.png#averageHue=%23f4f3f3&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=650&amp;id=uec34d6e5&amp;originHeight=585&amp;originWidth=911&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=244658&amp;status=done&amp;style=none&amp;taskId=u6af419b5-2df7-4360-9f65-06f32aef7e6&amp;title=&amp;width=1012.2222490369545" alt="image.png"><br><a name="XUcat"></a></p><h2 id="毛发-建模（精细化）">毛发-建模（精细化）</h2><p>参考项目<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556233905-2efb32fb-e9d8-4eb4-8686-cfea978e18f5.png#averageHue=%237a5c18&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=749&amp;id=HqPGs&amp;originHeight=674&amp;originWidth=1708&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=397319&amp;status=done&amp;style=none&amp;taskId=u86d3dadb-18a8-4ae8-b056-4b030cf6b54&amp;title=&amp;width=1897.7778280517214" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556317530-4101bac6-4937-4df5-9824-2f9ee9b03cbd.png#averageHue=%23f9f9f8&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=581&amp;id=uc7734c9a&amp;originHeight=523&amp;originWidth=711&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=98717&amp;status=done&amp;style=none&amp;taskId=u317d40fa-591b-4186-98e7-94882662c61&amp;title=&amp;width=790.0000209278536" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556356023-850c4743-5b0c-4060-bf5c-04591328f0dd.png#averageHue=%23f5f5f4&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=344&amp;id=u93c8eea8&amp;originHeight=310&amp;originWidth=653&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99725&amp;status=done&amp;style=none&amp;taskId=u1f041c77-b0f9-40da-a100-c95a112e89e&amp;title=&amp;width=725.5555747762144" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556464796-aa8679d9-a163-489e-b6b6-07d695a27848.png#averageHue=%23b4a296&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=1187&amp;id=ub80d16af&amp;originHeight=1068&amp;originWidth=2115&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=991759&amp;status=done&amp;style=none&amp;taskId=ue80a66f7-c0fe-444c-8b5e-916cf3a5d80&amp;title=&amp;width=2350.000062253742" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556569479-fa4e8cc1-7742-4b51-96a8-38dbf6e0d1c1.png#averageHue=%23ededed&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=108&amp;id=uf939bb9e&amp;originHeight=97&amp;originWidth=192&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18750&amp;status=done&amp;style=none&amp;taskId=u6310c1d0-c778-431c-97d0-547b214f957&amp;title=&amp;width=213.33333898473683" alt="image.png"><br><a name="RAY6L"></a></p><h2 id="插片毛发">插片毛发</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556610742-eecb369a-0a2a-427b-8722-a642b30e043f.png#averageHue=%23f9f9f8&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=578&amp;id=u3ed6bed9&amp;originHeight=520&amp;originWidth=776&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99904&amp;status=done&amp;style=none&amp;taskId=u9a5b361a-c3a8-4c4c-98ec-804d256b185&amp;title=&amp;width=862.2222450633114" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556846079-d342e36c-5697-4163-aa96-c136eb0cc691.png#averageHue=%233b3939&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=477&amp;id=u585fe394&amp;originHeight=429&amp;originWidth=864&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=206234&amp;status=done&amp;style=none&amp;taskId=ue06fcfa7-33f2-45a4-90ca-b2d759d384e&amp;title=&amp;width=960.0000254313157" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670556893975-f5839ebe-60a9-480c-a40a-31f53c81d901.png#averageHue=%23f6f6f6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=649&amp;id=u47cf3a7c&amp;originHeight=584&amp;originWidth=1061&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=216479&amp;status=done&amp;style=none&amp;taskId=u5b184096-1fa9-4ec5-beaa-1622aa73b53&amp;title=&amp;width=1178.88892011878" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557143068-2026fff6-c809-49a2-8b15-25aacafd175c.png#averageHue=%238f887d&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=699&amp;id=u1068601e&amp;originHeight=629&amp;originWidth=1386&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=333774&amp;status=done&amp;style=none&amp;taskId=u139fecb5-4b0d-4a44-8083-48516966ffe&amp;title=&amp;width=1540.000040796069" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557157751-78c2257a-9893-49a6-9d5d-0db5b0eb74bd.png#averageHue=%23d0cfcf&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=720&amp;id=u38aa4420&amp;originHeight=648&amp;originWidth=1423&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=376868&amp;status=done&amp;style=none&amp;taskId=u35c5427f-8457-4abd-b186-b752faf3657&amp;title=&amp;width=1581.1111529962527" alt="image.png"><br><a name="NEYd1"></a></p><h2 id="Groom毛发">Groom毛发</h2><p>参考项目<br>metahuman与meerkat demo<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557434902-21533028-dae0-475e-8fe2-a2ff03f2ec5f.png#averageHue=%237d6352&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=361&amp;id=uc64038df&amp;originHeight=325&amp;originWidth=814&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=251846&amp;status=done&amp;style=none&amp;taskId=u2e8d2b10-de80-4d20-ae55-7161a74b7ad&amp;title=&amp;width=904.4444684040405" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557190031-3fc2eb15-d112-403a-92bd-b497ff70d806.png#averageHue=%23f8f8f8&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=599&amp;id=u9af49a0c&amp;originHeight=539&amp;originWidth=1008&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=143289&amp;status=done&amp;style=none&amp;taskId=u659bc834-f90a-470b-be21-7dff96e1cca&amp;title=&amp;width=1120.0000296698684" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557246212-c9383c22-f5e0-43a2-858e-81fa56e62985.png#averageHue=%23f2f2f2&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=532&amp;id=ud44c957f&amp;originHeight=479&amp;originWidth=1023&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=254402&amp;status=done&amp;style=none&amp;taskId=ub5faa41e-2c6f-4bf4-9bd4-b423af33761&amp;title=&amp;width=1136.666696778051" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557544714-9cd583b3-8cc1-4ac7-a970-7a7c275b29bb.png#averageHue=%23e3e2e2&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=750&amp;id=u10169682&amp;originHeight=675&amp;originWidth=1342&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=215461&amp;status=done&amp;style=none&amp;taskId=uab12a6cf-18cb-4bc9-8045-e962d146749&amp;title=&amp;width=1491.111150612067" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557549863-54f4c274-9941-4986-9ed4-4b3f02922b78.png#averageHue=%23f7f7f6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=366&amp;id=u75bfd51a&amp;originHeight=329&amp;originWidth=1055&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=114386&amp;status=done&amp;style=none&amp;taskId=u077b2718-bf6c-4e49-8ce5-1f36075dc90&amp;title=&amp;width=1172.222253275507" alt="image.png"><br>做表情时可能毛发会变的分散，解决办法：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557612920-c809e1bb-de91-4420-b259-db49fe7cdbe9.png#averageHue=%23888a89&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=746&amp;id=udba45ee2&amp;originHeight=671&amp;originWidth=1477&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=651219&amp;status=done&amp;style=none&amp;taskId=u19ee75ae-00b8-4f47-9dee-0c6d2820013&amp;title=&amp;width=1641.11115458571" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557663115-bf8287c4-b7c2-45e1-a68a-30d6ecec9eee.png#averageHue=%23f5f5f4&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=319&amp;id=u3609be69&amp;originHeight=287&amp;originWidth=938&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99484&amp;status=done&amp;style=none&amp;taskId=u8da6768c-99c1-4957-b1df-4a6adf3f228&amp;title=&amp;width=1042.222249831683" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557711636-632c7de3-4b3f-4637-ace7-34aae141554c.png#averageHue=%23d3bfa9&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=677&amp;id=ue3a6bcec&amp;originHeight=609&amp;originWidth=877&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=411764&amp;status=done&amp;style=none&amp;taskId=u73bc1685-4601-4702-94b9-e645679cda4&amp;title=&amp;width=974.4444702584074" alt="image.png"><br>毛发阴影的问题处理<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670558001299-4b4fc98c-e634-404f-b879-2a5daa60a965.png#averageHue=%23f6f5f5&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=854&amp;id=uf5d20dbe&amp;originHeight=769&amp;originWidth=1461&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=348376&amp;status=done&amp;style=none&amp;taskId=ud0e38468-8342-4bf6-a37b-818a2a0ef95&amp;title=&amp;width=1623.333376336982" alt="image.png"><br>2.<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557898050-4307dea1-52c6-4409-ae83-f7ae2531c6ec.png#averageHue=%233a2920&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=836&amp;id=uadc3fbda&amp;originHeight=752&amp;originWidth=1584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=745909&amp;status=done&amp;style=none&amp;taskId=uc67e77bc-00a4-4eee-8e91-987910e6670&amp;title=&amp;width=1760.000046624079" alt="image.png"><br>3.cmd命令：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557924888-4102ac8f-f630-4765-94ab-19656f4cabe5.png#averageHue=%23171c1e&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=48&amp;id=ua85a8c63&amp;originHeight=43&amp;originWidth=335&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13700&amp;status=done&amp;style=none&amp;taskId=u5ff5294b-f37c-47c9-847e-b63a74efdcc&amp;title=&amp;width=372.222232082744" alt="image.png">默认是2048<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670557949812-ff6ad8e4-2b81-4da8-af8c-9ef3930d8339.png#averageHue=%23141515&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=47&amp;id=u84c9fd92&amp;originHeight=42&amp;originWidth=307&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10332&amp;status=done&amp;style=none&amp;taskId=u8e87bcea-5a94-4746-a538-df6927800b7&amp;title=&amp;width=341.1111201474698" alt="image.png">默认是2<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670558072400-15892d06-7cbc-4c3f-ae6d-672df8ff5786.png#averageHue=%23f7f7f6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=771&amp;id=u35d272bd&amp;originHeight=694&amp;originWidth=1594&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=268369&amp;status=done&amp;style=none&amp;taskId=u61c5417f-70c4-45f7-9dc7-aa7acf167d9&amp;title=&amp;width=1771.111158029534" alt="image.png"><br><a name="SqPXA"></a></p><h1>皮肤</h1><p><a name="pJYt6"></a></p><h2 id="建模">建模</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562186218-65b1bf7c-c46d-4eed-bda1-3032bc6edbed.png#averageHue=%239ea09e&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=971&amp;id=udf95d4f3&amp;originHeight=874&amp;originWidth=1594&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1276335&amp;status=done&amp;style=none&amp;taskId=uc1270559-074b-4018-89b6-9640b8604ae&amp;title=&amp;width=1771.111158029534" alt="image.png"><br><a name="MpAON"></a></p><h2 id="材质">材质</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562277589-b3f8ebc4-d350-47c7-99d5-07f71af7a398.png#averageHue=%23eeeeee&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=801&amp;id=uc4734c8b&amp;originHeight=721&amp;originWidth=1346&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=216004&amp;status=done&amp;style=none&amp;taskId=ucd282ff5-86a6-45ea-9d83-511b66ecebb&amp;title=&amp;width=1495.555595174249" alt="image.png"><br><a name="yhxX4"></a></p><h3 id="高光遮蔽">高光遮蔽</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562491464-958fbbb6-c618-4786-83e7-a32238944f70.png#averageHue=%23d7d7d7&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=701&amp;id=u15d0a307&amp;originHeight=631&amp;originWidth=1433&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=132350&amp;status=done&amp;style=none&amp;taskId=u320dc5b1-35c2-4eb9-b4e1-5cc1472d295&amp;title=&amp;width=1592.2222644017077" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562520437-0681c365-37c9-4e4b-8cfd-ebcf6c2c141e.png#averageHue=%23f0f0f0&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=737&amp;id=u38fb5c46&amp;originHeight=663&amp;originWidth=1430&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=652360&amp;status=done&amp;style=none&amp;taskId=u10461ce0-ebae-4fdf-832f-840bb0f2b53&amp;title=&amp;width=1588.8889309800713" alt="image.png"></p><p><a name="dotoE"></a></p><h3 id="环境光遮蔽">环境光遮蔽</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562566960-185ca0ac-cb1c-4d5e-9940-76d4274234d3.png#averageHue=%23e9f0e9&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=724&amp;id=u29b24fc4&amp;originHeight=652&amp;originWidth=1458&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=274126&amp;status=done&amp;style=none&amp;taskId=ub0dea3aa-f0a7-4541-a023-d5da29a8d01&amp;title=&amp;width=1620.0000429153454" alt="image.png"><br><a name="G7JEj"></a></p><h3 id="Subsurface-Profile参数">Subsurface Profile参数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670562840850-898cc796-be08-4dfa-9646-c7d1bdb51a9b.png#averageHue=%23f7f7f7&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=878&amp;id=ZzmjJ&amp;originHeight=790&amp;originWidth=1580&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=300890&amp;status=done&amp;style=none&amp;taskId=ueda94234-bc97-4277-b874-6bf0bdd6347&amp;title=&amp;width=1755.555602061897" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563034416-83024fdd-d141-4680-b08f-119834d113c3.png#averageHue=%23f5f5f5&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=781&amp;id=ufbcc849b&amp;originHeight=703&amp;originWidth=1452&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=315941&amp;status=done&amp;style=none&amp;taskId=u415b8671-b132-42cf-87ed-2802c6e7746&amp;title=&amp;width=1613.3333760720723" alt="image.png"><br><a name="N72jC"></a></p><h2 id="表情">表情</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563283494-cc6fadd3-e32d-4d9c-8336-9f5fb1c9d227.png#averageHue=%23f6f5f5&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=288&amp;id=ue8953a73&amp;originHeight=259&amp;originWidth=873&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86630&amp;status=done&amp;style=none&amp;taskId=ucab0ee38-800e-4e1a-ac51-8fb470102bc&amp;title=&amp;width=970.0000256962253" alt="image.png"><br>表情动画纹理的贡献大于blendshape的贡献<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563396286-3db1d0a6-5f80-48fd-86da-37c69815d2e5.png#averageHue=%23765544&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=1390&amp;id=ufa9fe2f3&amp;originHeight=1251&amp;originWidth=1778&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1012597&amp;status=done&amp;style=none&amp;taskId=ub7e352a2-40a5-4f22-80d1-ec602f66d55&amp;title=&amp;width=1975.5556078899067" alt="image.png"><br><a name="NfRRI"></a></p><h2 id="美型">美型</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563577363-657111aa-e9e7-4bd1-9621-5a7162fd4224.png#averageHue=%23f5f5f4&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=516&amp;id=u2348ec08&amp;originHeight=464&amp;originWidth=1336&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=203897&amp;status=done&amp;style=none&amp;taskId=u1d161479-829b-4c0e-936e-66fc8c26e6a&amp;title=&amp;width=1484.4444837687938" alt="image.png"><br><a name="pN0n3"></a></p><h1>眼部</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563636919-9ddea78d-d963-4cce-818f-101a61eae3b3.png#averageHue=%23f6f6f6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=648&amp;id=u63ffd2c2&amp;originHeight=583&amp;originWidth=1602&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=249465&amp;status=done&amp;style=none&amp;taskId=u47f030c1-9a9f-4c92-ae21-7df3bc4e0cf&amp;title=&amp;width=1780.000047153898" alt="image.png"><br>泪腺和眼睛遮蔽的材质要关掉Ray Traced Shadows<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563769001-d34ce089-6788-4fdd-81d6-b6b71ef1a5af.png#averageHue=%23252424&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=509&amp;id=u79b03761&amp;originHeight=458&amp;originWidth=696&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65700&amp;status=done&amp;style=none&amp;taskId=u444a1d94-30fc-4e7c-85f3-e77a484252e&amp;title=&amp;width=773.3333538196711" alt="image.png"></p><p><a name="TsxrK"></a></p><h1>服饰</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563856912-d00ac5da-6215-41c4-ba23-71ef83e2b832.png#averageHue=%23f7f7f6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=177&amp;id=u966a7b87&amp;originHeight=159&amp;originWidth=1009&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57551&amp;status=done&amp;style=none&amp;taskId=u344b18b7-f81d-4c0b-866e-b75cec1615c&amp;title=&amp;width=1121.1111408104139" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670563873739-05cd3047-e7db-4f68-935c-27d341afdd23.png#averageHue=%23dadad9&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=630&amp;id=ubeb5fae7&amp;originHeight=567&amp;originWidth=1371&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=159407&amp;status=done&amp;style=none&amp;taskId=uff9faf8a-4ea9-48d1-ba3e-c1253922698&amp;title=&amp;width=1523.3333736878865" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564000119-8c01f2ac-8665-4bdd-b915-66590e8ad5c1.png#averageHue=%234b3c2e&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=920&amp;id=u74fb4ea3&amp;originHeight=828&amp;originWidth=1502&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=452797&amp;status=done&amp;style=none&amp;taskId=u3cf32900-7ced-488e-b55b-bd006f4b3e3&amp;title=&amp;width=1668.8889330993475" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564025256-a838f15d-a536-4ed0-8771-eadfbaed21e8.png#averageHue=%23f9f9f8&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=612&amp;id=u7ea70d15&amp;originHeight=551&amp;originWidth=1337&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=142724&amp;status=done&amp;style=none&amp;taskId=ua250348c-c492-4782-bd1c-ee8ec72f141&amp;title=&amp;width=1485.5555949093393" alt="image.png"><br>不开各向异性和金属度时像棉衣<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564079930-9bf2a326-8030-4b01-8af3-67926a852394.png#averageHue=%2324292a&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=669&amp;id=u4e8667ac&amp;originHeight=602&amp;originWidth=1235&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=256458&amp;status=done&amp;style=none&amp;taskId=u171715c7-6999-4966-a0d9-a1e93b15b39&amp;title=&amp;width=1372.222258573698" alt="image.png"><br>开各向异性和金属度后<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564127505-03f705c2-b655-4048-bdc1-2475301bba41.png#averageHue=%23222728&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=672&amp;id=u7ba6a1a6&amp;originHeight=605&amp;originWidth=1189&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=293419&amp;status=done&amp;style=none&amp;taskId=uf770af22-bd4c-4159-99b1-1392844d59f&amp;title=&amp;width=1321.1111461086048" alt="image.png"><br>法线与细节法线<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564166311-cc98195b-8d30-49c4-bcf8-628705663ee6.png#clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=924&amp;id=u99979862&amp;originHeight=832&amp;originWidth=1639&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2287473&amp;status=done&amp;style=none&amp;taskId=u9b15a22a-a5d3-45c1-a5b0-36e458f8ee7&amp;title=&amp;width=1821.1111593540816" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670564932475-e7662ebe-bf60-4008-b529-a91a3b95089e.png#averageHue=%23f4f4f3&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=549&amp;id=u1af48ec3&amp;originHeight=494&amp;originWidth=934&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=181251&amp;status=done&amp;style=none&amp;taskId=uf2405523-7bf4-4e1f-b91f-d3e25afd61b&amp;title=&amp;width=1037.7778052695012" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670565014005-235357ea-9232-435a-8da1-59025921306a.png#averageHue=%23f6f6f6&amp;clientId=u5ea4830a-6efe-4&amp;from=paste&amp;height=977&amp;id=u2c840fb7&amp;originHeight=879&amp;originWidth=1651&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=351105&amp;status=done&amp;style=none&amp;taskId=u936bfc26-b689-4c0a-9481-e8ed28cf637&amp;title=&amp;width=1834.4444930406278" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE非线性动画制作流程</title>
      <link href="/2023/08/29/UnrealEngine-UE%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/"/>
      <url>/2023/08/29/UnrealEngine-UE%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%8A%A8%E7%94%BB%E5%88%B6%E4%BD%9C%E6%B5%81%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="HBLu7"></a></p><h1>推荐链接</h1><p><a href="https://dev.epicgames.com/community/learning/paths/YJ/technical-guide-to-linear-content-creation">Technical Guide to Linear Content Creation | Learning path</a><br><a href="https://cdn2.unrealengine.com/animation-field-guide-v1-2-8-zhcn-d338b3986f3f.pdf">https://cdn2.unrealengine.com/animation-field-guide-v1-2-8-zhcn-d338b3986f3f.pdf</a><br><a href="https://cdn2.unrealengine.com/Unreal+Engine%2FEGC%2F%28CHS%29Fortnite-Trailer-Developing-a-real-time-pipeline-for-a-faster-workflow-dc2016593b1a879342feb037c7a0f6162dea4867.pdf">https://cdn2.unrealengine.com/Unreal+Engine%2FEGC%2F%28CHS%29Fortnite-Trailer-Developing-a-real-time-pipeline-for-a-faster-workflow-dc2016593b1a879342feb037c7a0f6162dea4867.pdf</a><br><a href="https://www.unrealengine.com/zh-CN/animation-field-guide">https://www.unrealengine.com/zh-CN/animation-field-guide </a><br><a name="j1eFb"></a></p><h1>UE非线性动画制作流程的概念和价值</h1><p><a name="tuNFU"></a></p><h2 id="流程创建">流程创建</h2><p>目标：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686023326482-3fdb94e5-a193-484f-a2a3-79dd59c24454.png#averageHue=%23f7f6f5&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=334&amp;id=u11bbecfc&amp;originHeight=334&amp;originWidth=702&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=179870&amp;status=done&amp;style=none&amp;taskId=u7fc42403-541a-4847-be93-f08224b49e6&amp;title=&amp;width=702" alt="image.png"><br>任务：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686023363068-5d75e24a-6b6e-4a08-8ba9-bd9d11574330.png#averageHue=%23f9f8f5&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=770&amp;id=u518a49c8&amp;originHeight=770&amp;originWidth=685&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=273331&amp;status=done&amp;style=none&amp;taskId=uc543a736-1a12-4110-9007-708bbdff3fe&amp;title=&amp;width=685" alt="image.png"></p><p><a name="ROYHi"></a></p><h2 id="实时流程和线性渲染流程的差异与讲解">实时流程和线性渲染流程的差异与讲解</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686027945944-7ba4f098-ee75-4e32-8a80-7de6b7086b80.png#averageHue=%23a8a5a2&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=1027&amp;id=BRDBw&amp;originHeight=1027&amp;originWidth=1497&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=627080&amp;status=done&amp;style=none&amp;taskId=uf969346f-39ec-4235-80fe-481c383f057&amp;title=&amp;width=1497" alt="image.png"><br><a name="vJlEk"></a></p><h3 id="制作工具的差异">制作工具的差异</h3><p>在线性流程中很多项目的岗位间习惯通过类似贴图alembic fbx等中间数据进行衔接，因此可以不存在整个项目的中心工具，甚至可以允许每个岗位根据自己的喜好选择dcc工具来制作中间数据，最终以镜头为单位将序列帧素材在后期软件中进行组装。<br>而在实时渲染流程中并不是指资产制作也必须都在ue中完成，而是强调以ue为中心，平台将通过其他dcc软件制作的资产在ue中进行整合。同时各岗位围绕ue进行工作，最终通过ue直接输出成片。<br><a name="agQF3"></a></p><h3 id="工作流的差异">工作流的差异</h3><p>工作流的差异主要在于不同环节的工作并行度，由于在实时流程中各岗位都能通过ue协作，镜头设计，拆分，资产整合，场景制作，渲染输出都在ue中完成，同时借助版本管理软件来保障资产管理和协作，因此才能实现不同岗位，不同环节在同一个中心制作平台上的平行工作。要强调一下的是，这里的平行工作并不是指多个岗位可以同时制作同一个环节的不同工作，比如分别制作多个模型资产，这在线性流程中也能够轻松实现。而是指原本需要相互等待的镜头设计，场景搭建，资产制作等环节在统一的项目工程，统一的技术标准，统一的ue数据格式进行衔接的基础上同时开展分别迭代实时预览，最大程度地降低环节之间的等待时间。<br><a name="qrzaJ"></a></p><h3 id="数据组织管理">数据组织管理</h3><p>表格中所指的数据组织管理的实时流程的中心化相对于线性流程的分散，指的就是将各类dcc制作的资产通过ue这个中心技术平台以一个完整工程的形式进行整合和协作。同时这里的中心化从技术上并不是指所有岗位都同时操作一个项目的股本，而是在各自本地的项目副本中进行工作然后通过版本管理软件根据服务器上的权威版本进行同步等管理。允许客户端只在必要时访问服务器，既保证了工程的统一，又保留了各自工作的灵活度。<br><a name="kEJ69"></a></p><h3 id="命名规则">命名规则</h3><p>这里的严格和自由是相对的，比如常用的文件名前后缀关键词在实时流程中应该也是有明确要求的，只是在例如文件保存时间，版本号等信息保存方面在不少线性流程项目中，依然习惯于通过文件名体现。而在实时流程项目中更多的是通过版本管理软件来自动记录，文件名可以只保留核心信息，相对自由。<br><a name="CdEF7"></a></p><h3 id="版本资源控制">版本资源控制</h3><p>线性流程项目趋向于手动管理，当然目前也有不少业务管理软件可以实现例如自动修改文件名等自动化功能。<br>在实时流程中整个工程通常要通过版本控制软件自动管理更新迭代。<br><a name="LySR8"></a></p><h3 id="输出形式">输出形式</h3><p>线性流程习惯于输出分层通道序列图然后到后期软件中进行合成<br>实时流程最推荐的方式是在游戏中直接输出最终画面，对于一些具有特殊要求的项目，ue也支持通过movie rq插件输出分层图片mrq插件输出分层图片，具体细节查看<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686029460215-911bcbb1-e651-41f2-9bb3-d2b16f6835c5.png#averageHue=%23d8caaa&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=344&amp;id=u8085ab69&amp;originHeight=344&amp;originWidth=340&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86728&amp;status=done&amp;style=none&amp;taskId=u17016de5-3736-494f-8a09-6bc227a4347&amp;title=&amp;width=340" alt="image.png"><br><a name="SqGKx"></a></p><h3 id="资源要求">资源要求</h3><p>线性流程通常允许直接使用最高精度的模型贴图资产。<br>实时流程中需要对资产进行适度优化，在UE5中，由于新增了nanite，虚拟纹理等技术，对影视及美术资产的兼容性正在不断提高。具体技术细节回顾<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686029603666-d4f2420d-197d-4cb9-a5aa-32db788c5ac0.png#averageHue=%23bbb49f&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=313&amp;id=u8d388357&amp;originHeight=313&amp;originWidth=326&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88341&amp;status=done&amp;style=none&amp;taskId=u8e697751-200b-4561-9f20-aaa6e242d34&amp;title=&amp;width=326" alt="image.png"><br><a name="t0oRJ"></a></p><h3 id="流程介绍">流程介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686029721842-d9053b3b-6c01-4700-beff-28efdcb11dd3.png#averageHue=%23f0f0f0&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=1352&amp;id=u34c04e8f&amp;originHeight=1352&amp;originWidth=1482&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=298293&amp;status=done&amp;style=none&amp;taskId=ue85b18e3-8d0b-4a2f-94c2-b64d7b4c7e9&amp;title=&amp;width=1482" alt="image.png">虽然线性流程和实时流程在最终都需要渲染输出影片，但两者在整个项目周期中的渲染时机有很大不同。<br>在线性流程中建模绑定动画模拟场景编辑后期等多个工作阶段，审核人员通常不会直接获取并打开dcc工作文件。而是要求各岗位将当前的工作进度以图像或视频的形式进行输出，并根据视觉进行审核和反馈。因此在整个项目生命周期中需要非常频繁地进行渲染输出，某些阶段输出速度较快，而某些阶段消耗的时间较多，累积后的整体时间成本相当可观，并且频繁的渲染等待时间会打断创作和制作的持续性，带来后续的很多回忆相关的工作。在实时渲染非线性流程中由于除最终画面以外的各阶段的最终结果都是以实时渲染方式呈现，因此可以理解为每时每刻都在渲染输出，因此审查人员可以针对开发岗位当前编辑器中的实际画面通过截屏录屏甚至是像素流的方式实时审核反馈，整个过程快速连续，只在生成最终版本视频阶段，为了最大化画面细节，才需要渲染输出。<br><a name="zMHcB"></a></p><h3 id="工作流的并行程度差异">工作流的并行程度差异</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686030176165-d89c960c-7b9e-4be9-a5e0-7785d7c991c6.png#averageHue=%23030303&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=1333&amp;id=ube87d9f9&amp;originHeight=1333&amp;originWidth=2569&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=546609&amp;status=done&amp;style=none&amp;taskId=u6389ac2e-58b4-45bf-9330-d35ca754966&amp;title=&amp;width=2569" alt="image.png">线性流程中各阶段工作通常依赖上一阶段的成果需要在上一阶段成果审查通过后才能够执行。<br>在实时流程中多岗位工作是可以并行推进的，各阶段有各自的审查标准，在特定阶段才会审查各类工作成果整合后的最终效果。<br>这项差异本质上来自于两个方面，一个是数据的统一性，二是成果审查方式。<br>线性流程中各岗位之间是通过中间格式文件来交换数据的，各自使用的dcc源文件并不衔接，整个项目也通常是以镜头为单位进行拆分，而不是以统一的工程形式进行中心化管理，这样导致整个项目在多个阶段的数据都是通过中间文件塌陷过的，并不统一连续。这就导致下一个工序对上一个工序的结果中间文件产生了很强的依赖，无法基于工作文件同步推进。一旦某个阶段的工作成果需要修改，那么之后的所有岗位必然也会增加相应的修改工作量。<br>实时流程中各岗位围绕统一的中心化的工程进行协作，每个岗位之间的工作都是通过引用关系，和其他岗位进行自动整合。并且由于实时渲染的特性，整合后的当前最终结果都是可以在ue中实时预览到的，并不需要再进行输出，因此客观上省略了中间文件的衔接工作。各岗位的工作数据都是在统一连续的状态下持续推进的。<br>至于审查方式：<br>在线性流程中由于通常以各阶段的像素结果为审查对象忽略中间过程同样不影响审查，导致的结果就是每个阶段通过将成果塌陷成中间文件的方式来确保数据的确定性，也就导致了对上一个岗位工作结果的依赖。<br>而在实时流程中各岗位围绕同一个工程进行协作，很多过程中产生的问题会直观反映在实时渲染的结果中无法忽略，因此审查的对象就不再只是最终呈现出的像素，而是中间数据也要正确。例如pbr材质框架中的关键参数，角色的绑定方式，镜头动画数据等大量数据都会实时互相产生影响。客观上增加了可能出现的问题种类提高了审查要求。但这种通过中间过程及时定位问题的审查方式确保了各岗位间可以并行工作，快速暴露问题快速定位和解决问题。<br>此外基于ue的实时流程可以活用很多编辑器自带工具或编写脚本工具来辅助进行数据审查，可以大大提升审查效率。<br><a name="zstwH"></a></p><h3 id="岗位管理模式差异">岗位管理模式差异</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686030683745-50473c86-1efb-4812-bcae-b2797de9af35.png#averageHue=%23040404&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=1336&amp;id=u1098419e&amp;originHeight=1336&amp;originWidth=2377&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=599850&amp;status=done&amp;style=none&amp;taskId=u126bfd8c-047a-4b5b-ae2c-562f0a31eb8&amp;title=&amp;width=2377" alt="image.png"><br><a name="ZIEH0"></a></p><h3 id="分层输出的差异">分层输出的差异</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686030857772-cb61bf20-8279-447e-ada4-9188254aaad0.png#averageHue=%23ebebeb&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=634&amp;id=u29d82236&amp;originHeight=634&amp;originWidth=625&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=100624&amp;status=done&amp;style=none&amp;taskId=ubb2c0a7d-03b2-4382-a0dc-eab126b46a3&amp;title=&amp;width=625" alt="image.png"><br><a name="IbEVc"></a></p><h2 id="流程举例与展开讲解">流程举例与展开讲解</h2><p>比较旧了，现在ue5加入了模型编辑模式和control rig，当前我们可以在ue编辑器中完成的工作其实比这张图中描述的还要多<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686031115260-8428d81c-5e3d-446e-afeb-075ee9ade2d5.png#averageHue=%23f9f9f8&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=1164&amp;id=ue58ff07e&amp;originHeight=1164&amp;originWidth=1263&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=173330&amp;status=done&amp;style=none&amp;taskId=u8cbea1c8-0025-4b72-99e7-75609653b96&amp;title=&amp;width=1263" alt="image.png"><br><a name="rRxV6"></a></p><h3 id="故事和布局设计">故事和布局设计</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686031513044-fee26b96-9902-42d1-a681-0dedfaf43a5b.png#averageHue=%231d1c1b&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=917&amp;id=u4324ce09&amp;originHeight=917&amp;originWidth=1588&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=427986&amp;status=done&amp;style=none&amp;taskId=u100900a8-51c5-485b-a627-30dd39d2d9e&amp;title=&amp;width=1588" alt="image.png"><br>首先是2d故事版创作阶段,这个过程和线性流程一致,通过手绘的方式创作故事版图片,具象化描述故事情节和场景气氛并导入视频编辑软件生成故事样片。然后根据2d故事版，在UE的sequence工具中拆分镜头，幕，节拍，并且在拆分好的sequence中直接创作粗略的3d分镜，而不是先在玛雅等dcc软件中创作分镜以后再把镜头动画导入到ue。这一步看似只是分镜创作时使用的工具不同，但其实决定了整个项目的整合方式，通过ue制作粗略分镜的方式可以让所有镜头在第一时间呈现出大致的面貌。中间的资产引用，镜头组织结构等信息都已经明确。而不是先分镜头在dcc中分别制作，然后再进行整合。这个阶段得到的分镜后续肯定会不断修改，但由于相关信息已经统一整合到一个工程中，并且通过实时渲染的方式直观呈现出来，未来的修改可以用很高的效率围绕sequence进行。关于sequence作为ui动画制作核心的内容<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686031708093-838dfc81-b7ab-41b1-bd2d-91bfc7e2ac7a.png#averageHue=%23bab18a&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=222&amp;id=u922c7588&amp;originHeight=222&amp;originWidth=229&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47138&amp;status=done&amp;style=none&amp;taskId=u67ff6b0e-55c6-45bd-9620-18a43d57948&amp;title=&amp;width=229" alt="image.png">。<br><a name="hTz6l"></a></p><h3 id="image-png-第一单位可视化预览"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686032010016-04663999-bd24-4459-bc31-5c799283c782.png#averageHue=%23e1dcd7&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=894&amp;id=uce388cb8&amp;originHeight=894&amp;originWidth=1130&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=993806&amp;status=done&amp;style=none&amp;taskId=ub04da3b4-1aa9-4ce5-bccb-c763935a1f3&amp;title=&amp;width=1130" alt="image.png"> 第一单位可视化预览</h3><p>第一单位可视化预览阶段可以理解为角色动画实时3d分镜。首先根据剧情通过临时占位资产搭建大致的场景布局，比如地面建筑等。然后请动作捕捉演员根据粗略场景进行首次动作表演，演员可以根据剧本进行多次演出并通过sequence的镜头实拍功能进行组织，导演可以随时决定并切换使用哪个take（试拍），并在未来以此为基础进行评审，重新动捕或截取动作。<br>传统线性动画流程更倾向于将场景制作，3d镜头调整和角色动画分为明确的三个阶段<br>实时流程更倾向于在同一个场地，同一个时间根据最终效果实时调整场景，角色和镜头之间的关系，统一调度，并同时记录角色动画表演和相机镜头动画，这个过程和拍摄真人实景电影的逻辑很相似。不同之处在于实时流程不仅可以灵活调度角色镜头，甚至连场景也可以瞬间切换。<br><a name="uf0QT"></a></p><h3 id="sequence的组织形式">sequence的组织形式</h3><p>白皮书在这里也提到了sequence的具体组织形式，就是有一个完整的level sequence动画序列。包含了镜头动画序列，角色动画序列，这些序列又各自包含了不同版本的take（镜头试拍），随着动画创作的推进会持续增长，同时可以根据镜头进行剪辑。由于项目围绕ue实时渲染展开创作，每个阶段的成果和过程都会持续累积保留，随时可以查询或回溯，客观上确保了各岗位并行工作的可能，同时也对项目的统一管理提出了严格的要求。<br>为了方便管理和协作，项目将所有关卡通过UE子关卡工具分为场景子关卡，角色子关卡，镜头子关卡，灯光子关卡，蓝图子关卡，后期子关卡。其中分别包含各自的专用对象，然后一起包含在一个母关卡中，母关卡对应的是影视拍摄中的幕，通常可以是一个空关卡，然后根据需要添加相关的子关卡。这样做的明显的好处是例如场景设计师，动画设计师，灯光设计师等岗位可以同时打开同一个游戏工程针对同一个镜头分别编辑各自的子关卡而不会导致工作冲突，进一步保证了各岗位并行工作。在ue5 中由于引入了word partition，世界分区和level instance关卡实例等技术和工具使我们在组织关卡时拥有更多的方案实现子关卡方式难以实现的高效率和灵活度。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686033068346-e5430cbb-babc-4c72-8980-db5506f2f562.png#averageHue=%23847468&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=1017&amp;id=ud444892c&amp;originHeight=1017&amp;originWidth=1274&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=126124&amp;status=done&amp;style=none&amp;taskId=u40a24f6e-6b06-4664-b16f-dd2f917c611&amp;title=&amp;width=1274" alt="image.png"><br>上图中的sequence指的都是关卡序列，资产轨迹指的是序列中的轨道，文件夹指的是sequence工具中用来管理轨道的文件夹。<br><a name="sEogN"></a></p><h2 id="中期制作阶段">中期制作阶段</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686034164487-a8b29a9b-42f9-4e50-b0df-298822d50eff.png#averageHue=%23f5f4f3&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=706&amp;id=u3dd0be29&amp;originHeight=706&amp;originWidth=1155&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=686222&amp;status=done&amp;style=none&amp;taskId=u72908a4d-98c7-40a8-9ddb-0344d3ba486&amp;title=&amp;width=1155" alt="image.png"><br>角色面部是通过alembic格式导出的<br>在dcc软件中需要在面次层级指定材质<br>并且在导出时需要勾选face set<br><a name="awSEz"></a></p><h2 id="特效和后期">特效和后期</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686034632865-bf3683ce-a606-4972-ae1c-61d7ba2e95df.png#averageHue=%23dddcd8&amp;clientId=u0e4b6326-6d4a-4&amp;from=paste&amp;height=861&amp;id=u8c3b532a&amp;originHeight=861&amp;originWidth=985&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=674385&amp;status=done&amp;style=none&amp;taskId=u29b2e2f1-6a26-4c2c-a4db-a8bf13f3908&amp;title=&amp;width=985" alt="image.png"></p><p><a name="OBvLc"></a></p><h2 id></h2>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UE资产优化</title>
      <link href="/2023/08/29/UnrealEngine-UE%E8%B5%84%E4%BA%A7%E4%BC%98%E5%8C%96/"/>
      <url>/2023/08/29/UnrealEngine-UE%E8%B5%84%E4%BA%A7%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a href="https://www.bilibili.com/video/BV1FT411x7hU/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">[官方培训]22-UE资产优化 | Epic 肖月_哔哩哔哩_bilibili</a><br><a name="wsIVK"></a></p><h1>stat命令行</h1><p>stat fps 显示fps<br>stat unit 显示更详细的各项指标<br>stat unitgraph 在unit的基础上添加曲线图<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606320677-efb2a5c3-144b-48cf-ab7b-4079f8dcfde1.png#averageHue=%232d261d&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=991&amp;id=uf86704cb&amp;originHeight=991&amp;originWidth=2323&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=770722&amp;status=done&amp;style=none&amp;taskId=ua83f0b3e-ac1f-4473-878e-82a4989a3c0&amp;title=&amp;width=2323" alt="image.png"><br>如果瓶颈在渲染线程那么可以使用<br>stat scenerendering 命令展开详细的渲染线程中各部的实际消耗以及场景渲染信息<br>initViews是做可见性剔除时的消耗<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606570028-a7af7816-67d2-4f4f-90e1-ebaf785320a5.png#averageHue=%23181614&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=982&amp;id=u6d820b89&amp;originHeight=982&amp;originWidth=2443&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1408310&amp;status=done&amp;style=none&amp;taskId=u93222905-0641-4046-8e76-b24e8ad68e4&amp;title=&amp;width=2443" alt="image.png"><br>通过stat initviews可先详细展开剔除过程中的消耗<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606819451-e3cdcb42-96fe-4db1-acf7-af198ee121d6.png#averageHue=%233d382f&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=987&amp;id=u7e85227b&amp;originHeight=987&amp;originWidth=1483&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=995092&amp;status=done&amp;style=none&amp;taskId=udaf7c56f-b309-4342-83e2-0dc8da87aed&amp;title=&amp;width=1483" alt="image.png"><br>stat RHI 显示各个buffer在显存中的占用<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606876999-b07a85d3-fe9d-40a3-8714-fe22449fcc0c.png#averageHue=%23453f34&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=955&amp;id=u91fb0019&amp;originHeight=955&amp;originWidth=2226&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1475319&amp;status=done&amp;style=none&amp;taskId=ua3da331f-bb67-487d-8e13-ea73d5e649f&amp;title=&amp;width=2226" alt="image.png"><br>stat GPU 查看GPU各个Pass的消耗<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685606971531-0e4897b8-edcc-4e43-b54b-e485c140af7b.png#averageHue=%23302d28&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=878&amp;id=u3e3ce981&amp;originHeight=878&amp;originWidth=2327&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1086674&amp;status=done&amp;style=none&amp;taskId=ueeda9ca4-c57a-458e-8080-577f53987f0&amp;title=&amp;width=2327" alt="image.png"><br><a name="L4oOX"></a></p><h1>快捷键</h1><p>通过ctrl+shift+逗号可以打开GPU查看器<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607036697-e86c3e34-4381-4cad-bb1a-301e577b7b2d.png#averageHue=%233d3d3c&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=956&amp;id=u49f17ce1&amp;originHeight=956&amp;originWidth=871&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=278083&amp;status=done&amp;style=none&amp;taskId=u7b25dcd2-d062-4fff-8d12-107e19cb371&amp;title=&amp;width=871" alt="image.png"></p><p><a name="IiuFe"></a></p><h1>模型</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607257820-ab719eb4-c18a-4e92-bde6-a988caab724e.png#averageHue=%230d0d0d&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=709&amp;id=u4e5f5151&amp;originHeight=709&amp;originWidth=1994&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=256779&amp;status=done&amp;style=none&amp;taskId=u8887e6a2-ed6e-4fce-af91-36143feec02&amp;title=&amp;width=1994" alt="image.png"><br><a name="f09x5"></a></p><h2 id="Culling剔除">Culling剔除</h2><p>当不适用Nanite时剔除是逐物体/Instance剔除的，只能通过距离剔除的设置来进行优化，或者针对模型进行优化。<br>而使用Nanite时，Nanite的剔除更加高效，它的单位不是单个个体，而是会针对细化到模型内部相邻的三角面组成的Cluster，剔除的工作大部分是在GPU上高效进行的。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607490997-0d698a86-0860-413c-82fd-e57aa95b40cd.png#averageHue=%23070707&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=500&amp;id=ua1241790&amp;originHeight=500&amp;originWidth=759&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=123973&amp;status=done&amp;style=none&amp;taskId=ub85d9d8b-1e0e-4b85-a4cc-d0819f8d839&amp;title=&amp;width=759" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607624468-1b01403c-9040-4fd4-baad-b5b796993b33.png#averageHue=%230c0c0c&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=301&amp;id=u4e8195a0&amp;originHeight=301&amp;originWidth=444&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57209&amp;status=done&amp;style=none&amp;taskId=ud962ab9d-b3d0-4c65-8c1d-f7077be0e85&amp;title=&amp;width=444" alt="image.png"><br><a name="MXYfF"></a></p><h2 id="DrawCall">DrawCall</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685607795816-1ac93eb5-890e-46a6-b671-eb22df9b5548.png#averageHue=%23131313&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=395&amp;id=u4d656409&amp;originHeight=395&amp;originWidth=929&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=160544&amp;status=done&amp;style=none&amp;taskId=u4e447b4f-924c-48d7-9ad4-c1c1b2c889c&amp;title=&amp;width=929" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608086157-0d9312e2-ff7d-4be2-9602-da536cd422da.png#averageHue=%230c0c0c&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=405&amp;id=ua8efe4b3&amp;originHeight=405&amp;originWidth=925&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=120971&amp;status=done&amp;style=none&amp;taskId=u14698bb0-bd07-4006-9336-7984198ea08&amp;title=&amp;width=925" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608107103-cb65d586-cf29-42ef-b0fe-6f81d90e010a.png#averageHue=%23191919&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=860&amp;id=u8671d121&amp;originHeight=860&amp;originWidth=801&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=201343&amp;status=done&amp;style=none&amp;taskId=ued9e4aa5-c616-4840-b34e-ce209952514&amp;title=&amp;width=801" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608163597-f76725e7-59fe-4902-b52e-8d1b16a0285e.png#averageHue=%23121211&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=311&amp;id=ud974e658&amp;originHeight=311&amp;originWidth=870&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=102226&amp;status=done&amp;style=none&amp;taskId=u795eda15-0623-47f3-bf2b-a5044e2686b&amp;title=&amp;width=870" alt="image.png"><br><a name="sEIdu"></a></p><h2 id="GPU">GPU</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608190470-501b6786-e699-480d-ac96-229cd9e6274c.png#averageHue=%23080808&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=516&amp;id=uc2b96cfa&amp;originHeight=516&amp;originWidth=1346&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=199306&amp;status=done&amp;style=none&amp;taskId=uc814b638-af30-428b-a1fe-d01e629afd1&amp;title=&amp;width=1346" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608425906-71952c9e-2011-4b0d-bee1-7c13027cbe33.png#averageHue=%23050505&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=581&amp;id=u86bb9238&amp;originHeight=581&amp;originWidth=1269&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=238794&amp;status=done&amp;style=none&amp;taskId=ufd7ae8e1-67f0-432e-a579-6c0e8fac2b0&amp;title=&amp;width=1269" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608469069-8d93cb5a-132a-4038-8123-02c3a47aa9cd.png#averageHue=%230c0c0c&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=291&amp;id=u63f7f497&amp;originHeight=291&amp;originWidth=636&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54026&amp;status=done&amp;style=none&amp;taskId=u16111898-b546-4931-a3f0-17ff194af40&amp;title=&amp;width=636" alt="image.png"><br><a name="DMY60"></a></p><h2 id="Nanite">Nanite</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608557517-91366832-70cb-464f-8bc1-75097e3703bd.png#averageHue=%236b6931&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=994&amp;id=ud15991a5&amp;originHeight=994&amp;originWidth=1865&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1764201&amp;status=done&amp;style=none&amp;taskId=u17fbf1fa-23f1-4403-a8e0-23534216343&amp;title=&amp;width=1865" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608832279-f78cbf08-3fdf-491a-9f01-066a778d614e.png#averageHue=%230f0f0f&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=577&amp;id=u44a009a9&amp;originHeight=577&amp;originWidth=1248&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=207410&amp;status=done&amp;style=none&amp;taskId=u349410f2-beb4-4aa0-8e9b-9df990a3f8c&amp;title=&amp;width=1248" alt="image.png"><br>UE有自带bool合并工具可以修穿插<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608859381-a9154a8b-8333-4a03-973c-450a2e7ad794.png#averageHue=%23282524&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=274&amp;id=u6a48d177&amp;originHeight=274&amp;originWidth=758&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57719&amp;status=done&amp;style=none&amp;taskId=ue699b607-90e4-4a4f-adb4-31397ae3144&amp;title=&amp;width=758" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685608874634-656a88dc-db4b-4c75-bf0d-bd5ea17901b2.png#averageHue=%23070707&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=979&amp;id=u3299dcba&amp;originHeight=979&amp;originWidth=1314&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=310334&amp;status=done&amp;style=none&amp;taskId=u411ebcb0-db6a-4336-bedd-f4e0bd3af41&amp;title=&amp;width=1314" alt="image.png"><br><a name="MLEpS"></a></p><h1>材质</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609020669-46238efe-627b-46d3-b928-c735889dd3b0.png#averageHue=%230e0d0d&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1168&amp;id=ue238c828&amp;originHeight=1168&amp;originWidth=2427&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=632181&amp;status=done&amp;style=none&amp;taskId=u31c7fef7-9fe8-4a24-beb7-f099374df88&amp;title=&amp;width=2427" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609060761-543fd9db-b068-4c34-a26e-2ecaaf075bba.png#averageHue=%231e1e1e&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=969&amp;id=u26b9ca59&amp;originHeight=969&amp;originWidth=2288&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=559795&amp;status=done&amp;style=none&amp;taskId=u8f6544db-1e73-4b28-ae4a-470c5d2f00e&amp;title=&amp;width=2288" alt="image.png"><br>fully rough：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609157070-cd1a8ca8-0127-4247-ab2f-ed4b8e73d248.png#averageHue=%23787769&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=729&amp;id=uc8c7e59f&amp;originHeight=729&amp;originWidth=751&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=318472&amp;status=done&amp;style=none&amp;taskId=udbcea58f-c6d2-4fb7-8c2d-d50b01262a5&amp;title=&amp;width=751" alt="image.png"><br><a name="UpVmJ"></a></p><h1>纹理</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609214543-07f28433-ea25-45fe-bd7d-738c37b434c0.png#averageHue=%230c0c0c&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=651&amp;id=u23809031&amp;originHeight=651&amp;originWidth=1275&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=179073&amp;status=done&amp;style=none&amp;taskId=u4ca0bb6a-26ad-4bfb-952b-20026750580&amp;title=&amp;width=1275" alt="image.png"><br><a name="KsJxG"></a></p><h1>灯光</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609271688-ff387963-50f9-4623-a8c3-614c8c8305f4.png#averageHue=%231f1e1e&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1205&amp;id=u981660e4&amp;originHeight=1205&amp;originWidth=2446&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=560781&amp;status=done&amp;style=none&amp;taskId=u4b5feb48-6898-4063-9fac-96701bd29aa&amp;title=&amp;width=2446" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609358977-878283c0-a2b1-4616-88ab-9ec95521ea6a.png#averageHue=%23262524&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=985&amp;id=u7a0568be&amp;originHeight=985&amp;originWidth=2390&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=539733&amp;status=done&amp;style=none&amp;taskId=u6da55a67-1f9f-40c8-b0cf-d807351cb0d&amp;title=&amp;width=2390" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609628119-05a27dd7-d9d0-43eb-8139-b3a99836e86f.png#averageHue=%23080808&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=444&amp;id=u726bc5f7&amp;originHeight=444&amp;originWidth=773&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99803&amp;status=done&amp;style=none&amp;taskId=uc7277288-d34a-4f7d-81ac-b280837dc81&amp;title=&amp;width=773" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609784314-359ae1ab-73fa-4f4e-9800-3b4009de72cb.png#averageHue=%23040404&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=599&amp;id=u9553111f&amp;originHeight=599&amp;originWidth=1040&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=233101&amp;status=done&amp;style=none&amp;taskId=u77dc0983-e288-40ac-a34f-418514e6277&amp;title=&amp;width=1040" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609939021-0e7af55e-6817-4a11-86ff-a346a57ac753.png#averageHue=%2323201f&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=577&amp;id=u7baa2617&amp;originHeight=577&amp;originWidth=1538&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=348837&amp;status=done&amp;style=none&amp;taskId=u9c1a9aa0-bf05-42ab-ae4c-95c3325d0dc&amp;title=&amp;width=1538" alt="image.png"><br><a name="aqKLD"></a></p><h1>Lumen与资产制作</h1><p>影视一般使用硬件的Ray Tracing精度</p><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685609957079-10510399-f191-4174-9c49-b179eb9fae0f.png#averageHue=%23211d1b&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1182&amp;id=ue3081588&amp;originHeight=1182&amp;originWidth=2472&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1484625&amp;status=done&amp;style=none&amp;taskId=uee2212d6-5f77-4971-98a1-82284f3874b&amp;title=&amp;width=2472" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611519095-56d908bc-21a7-4f7b-a622-e57efbcfd1b2.png#averageHue=%230a0909&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1237&amp;id=u85433e5d&amp;originHeight=1237&amp;originWidth=1908&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=447268&amp;status=done&amp;style=none&amp;taskId=uff9ce93d-ef32-4a53-a9e7-624cebcb250&amp;title=&amp;width=1908" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611617189-b39f1dda-aa0c-48b7-b900-3350dd2dac91.png#averageHue=%23626051&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1264&amp;id=ub5bac2de&amp;originHeight=1264&amp;originWidth=2461&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1358301&amp;status=done&amp;style=none&amp;taskId=u8d613c93-02f0-4f8a-bc87-16067a92b48&amp;title=&amp;width=2461" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611655799-306f037d-66e1-4820-bda1-8b6fadca37d1.png#averageHue=%23222120&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1425&amp;id=u995c5efe&amp;originHeight=1425&amp;originWidth=2664&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1072247&amp;status=done&amp;style=none&amp;taskId=u324ba142-6a1e-4be2-88ec-dd7b9a6b903&amp;title=&amp;width=2664" alt="image.png"><br><a name="hpl5G"></a></p><h1>特效</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1685611702549-91def887-9bd4-4d30-96b5-a7798e9f10b1.png#averageHue=%230f0f0f&amp;clientId=u8195db48-42bc-4&amp;from=paste&amp;height=1194&amp;id=uaf1ab5f3&amp;originHeight=1194&amp;originWidth=2103&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=595796&amp;status=done&amp;style=none&amp;taskId=ua2945f62-f240-441a-bd72-dd7fd2c5b15&amp;title=&amp;width=2103" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> UnrealEngine </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UnrealEngine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_for_nuke_101</title>
      <link href="/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-NukePy-Python-for-nuke-101/"/>
      <url>/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-NukePy-Python-for-nuke-101/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a href="https://www.bilibili.com/video/BV1bm4y1R7X1/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">https://www.bilibili.com/video/BV1bm4y1R7X1/?spm_id_from=333.788&amp;vd_source=b1de3fe38e887eb40fc55a5485724480</a></p><h1>为Nuke添加内置python编辑器</h1><p><a href="https://github.com/plasmax/PythonEditor">github地址</a></p><hr><h1>令脚本编辑器中显示在nuke中进行的操作对应的代码</h1><p>首先按shift+s进入首选项设置界面,然后再Panels-Script Editor中勾选 echo python commands to output window</p><hr><h1>显示节点的详细信息(方便找节点属性名字)</h1><p>首先选中节点,然后按键盘的i键即可弹出一个窗口,在里面可以找到节点的详细信息.</p><hr><h1>后台执行脚本</h1><p>首先通过nuke.env[‘ExecutablePath’]得到nuke程序的路径<br>然后如果是当前python脚本想要调用令一个python脚本的话,就通过’{}/另一个python脚本的名字.py’.format(os.path.dirname(<strong>file</strong>))找到要调用的另一个python脚本的路径,或者就直接用绝对路径.<br>然后创建command命令:command = ‘“{nuke}” -t -x {script} {要传入的额外参数}’<br>传入的额外参数可以在要调用的python脚本中通过sys.argv[1],sys.argv[2]…  来得到<br>最后通过subprocess.Popen(command, shell=True)来使用命令行<br><strong>后台执行脚本的要点就是命令里记得添加-t和-x即可,不添加就是前台调用了</strong></p><hr><h1>官方入门文档</h1><p><a href="https://learn.foundry.com/nuke/developers/latest/pythondevguide/basics.html">官方入门文档地址</a><br>从这个文档可以快速的了解到如何通过代码创建节点,设置节点属性,窗口的制作等.可以直接看,代码的英文直译很容易就能明白对应的意思.</p><hr><h1>常用的命令</h1><p>通过节点类型得到对应节点: nuke.allNodes(‘Read’)<br>得到选择的节点并设置节点的属性:<br>select_node = nuke.selectedNode()<br>select_node[‘file’].setValue()<br>nuke消息窗口的显示: nuke.message(“消息窗口内容”)<br>得到当前工程名字:nuke.root().name()<br>打开项目:nuke.scriptOpen()<br>得到nuke程序的路径: nuke.env[‘ExecutablePath’]<br>导入其他nuke文件: nuke.nodePaste()<br>保存nuke的文件:nuke.scriptSaveAs(prjPath)<br>保存当前nuke工程:nuke.scriptSave(“”)<br>清理当前nuke工程:nuke.scriptClear()<br>得到nuke程序的路径:nuke.env[‘ExecutablePath’]</p><p><a name="fuGgI"></a></p><h1>第一节</h1><p><a name="Olr2j"></a></p><h2 id="初始设置">初始设置</h2><p>在这个路径下C:\Users\用户名.nuke，创建gizmos文件夹，python文件夹，init.py文件，menu.py文件。<br>init.py文件用来为nuke新增插件识别路径(这样就不需要每个文件夹都加一个__init__.py文件了)，都统一加到外面这个init.py文件。 <br>menu.py文件用来控制nuke启动时自动加载的功能<br>其中init.py文件中内容是</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nuke<span class="selector-class">.pluginAddPath</span>(<span class="string">&#x27;./gizmos&#x27;</span>)</span><br><span class="line">nuke<span class="selector-class">.pluginAddPath</span>(<span class="string">&#x27;./python&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="z76gR"></a></p><h2 id="克服因操作平台的不同而导致的-nuke文件夹路径不同的问题">克服因操作平台的不同而导致的.nuke文件夹路径不同的问题</h2><p>在menu.py文件中输入：<br>其中platform可以用来得到当前的操作平台<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665992875669-ef7c2dd3-19cc-41f4-bd0b-3a6dac781f42.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=540&amp;id=uc062ab67&amp;originHeight=540&amp;originWidth=848&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=235547&amp;status=error&amp;style=none&amp;taskId=u06683321-48b5-4ad8-8ce0-52fa2c148f5&amp;title=&amp;width=848" alt="image.png"><br><a name="YhCAa"></a></p><h1>第二节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665993055456-c5bb72fd-00cb-48e3-808e-16a610ad8ef3.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=241&amp;id=ud9fa2212&amp;originHeight=241&amp;originWidth=1093&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=87683&amp;status=error&amp;style=none&amp;taskId=uc3832d5e-8f2b-47df-8b83-0474eafe1dc&amp;title=&amp;width=1093" alt="image.png"><br><a name="eM6Bw"></a></p><h2 id="设置创建节点时的默认值">设置创建节点时的默认值</h2><p>nuke.knobDefault(‘Tracker4.shutteroffset’,“centered”)  # 设置Tracker节点的shutteroffset的默认值为centered<br>nuke.knobDefault(‘Tracker4.label’, “Motion: [value transform]\nRef Frame: [value reference_frame]”)  # 设置Tracker节点的label(节点的显示文本)为Motion: [value transform]\nRef Frame: [value reference_frame]也就是<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665997817594-6575a0a1-28ff-44e5-ab3d-bbe2462e793d.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=144&amp;id=u09506540&amp;originHeight=144&amp;originWidth=583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9283&amp;status=error&amp;style=none&amp;taskId=ua7dcc081-1cd5-49f1-885a-c536f7bc1b6&amp;title=&amp;width=583" alt="image.png">。加入后的前后对比：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665997849926-81ba693d-374d-4d25-9272-31d25bcbc95c.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=80&amp;id=ud8e2d0db&amp;originHeight=80&amp;originWidth=250&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2207&amp;status=error&amp;style=none&amp;taskId=u913a170e-07c1-4d20-9bc4-77326f2e537&amp;title=&amp;width=250" alt="image.png">变成了<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665998054815-c3d52778-568e-4743-b2a5-51e2107efd74.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=145&amp;id=u542a0746&amp;originHeight=145&amp;originWidth=266&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4780&amp;status=error&amp;style=none&amp;taskId=ud8c5c13b-78f5-417a-8364-9a874e74f3a&amp;title=&amp;width=266" alt="image.png">。其中label中框号中的内容是属性值。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665997430962-c3ff95db-c35e-4a7a-acdf-149c912a9a06.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=89&amp;id=u30676a33&amp;originHeight=89&amp;originWidth=856&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=41963&amp;status=error&amp;style=none&amp;taskId=u167c3eb6-b800-43de-93ce-5e14c94f7af&amp;title=&amp;width=856" alt="image.png"> 在创建节点时当节点类型为Tracker时设置这个节点的reference_frame的值为nuke的时间滑块的frame值。<br><a name="ZkfyO"></a></p><h2 id="自定义menu和gizmosmenu">自定义menu和gizmosmenu</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665999940631-e7824e12-b83e-4a7a-aec2-60d904a993ec.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=927&amp;id=ub67c51e3&amp;originHeight=927&amp;originWidth=941&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66705&amp;status=error&amp;style=none&amp;taskId=u55f8c57b-a435-42e9-bba5-b9b2f59d14b&amp;title=&amp;width=941" alt="image.png"><br>如何添加自定义菜单：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666000564330-2d3e9ec6-a9a3-470c-af08-8d56cc2ac0d7.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=1001&amp;id=u5c0676a6&amp;originHeight=1001&amp;originWidth=1180&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=450591&amp;status=error&amp;style=none&amp;taskId=udfa54024-2fd3-46a9-88aa-bd89be6e449&amp;title=&amp;width=1180" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> PythonEditor</span><br><span class="line">PythonEditor.nuke_menu_setup(nuke_menu=<span class="literal">True</span>, node_menu=<span class="literal">True</span>, pane_menu=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"><span class="keyword">import</span> nukescripts</span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 设置节点的默认设置</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">nuke.knobDefault(<span class="string">&#x27;Tracker4.shutteroffset&#x27;</span>, <span class="string">&quot;centered&quot;</span>)</span><br><span class="line">nuke.knobDefault(<span class="string">&#x27;Tracker4.label&#x27;</span>, <span class="string">&quot;Motion: [value transform]\nRef Frame: [value reference_frame]&quot;</span>)</span><br><span class="line">nuke.addOnUserCreate(<span class="keyword">lambda</span>: nuke.thisNode()[<span class="string">&#x27;reference_frame&#x27;</span>].setValue(nuke.frame()), nodeClass=<span class="string">&#x27;Tracker4&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 自定义菜单</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">utilitiesMenu = nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addMenu(<span class="string">&#x27;Utilities&#x27;</span>)</span><br><span class="line"></span><br><span class="line">utilitiesMenu.addCommand(<span class="string">&#x27;Autocrop&#x27;</span>, <span class="string">&#x27;nukescripts.autocrop()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myGizmosMenu = nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>.addMenu(<span class="string">&#x27;myGizmos&#x27;</span>)</span><br><span class="line"></span><br><span class="line">myGizmosMenu.addCommand(<span class="string">&#x27;Autocrop&#x27;</span>, <span class="string">&#x27;nukescripts.autocrop()&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># 自定义快捷键</span></span><br><span class="line"><span class="comment"># ----------------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Transform/Tracker&quot;</span>, <span class="string">&quot;nuke.createNode(&#x27;Tracker4)&quot;</span>,<span class="string">&quot;ctrl+alt+t&quot;</span>, icon=<span class="string">&quot;Tracker.png&quot;</span>, shortcutContext=<span class="number">2</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><p><a name="jmdU7"></a></p><h2 id="nuke自带的图标路径">nuke自带的图标路径</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666000435895-e482db9e-4971-42bb-8247-92599639966e.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=59&amp;id=u4d9c95e0&amp;originHeight=59&amp;originWidth=400&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=15847&amp;status=error&amp;style=none&amp;taskId=uc84414ce-e548-4e01-ab86-3ae802db11f&amp;title=&amp;width=400" alt="image.png">可以在图中的路径处找到nuke自带的图标的名字<br>然后添加menu时icon参数如果想要是nuke自带的图标那么就可以直接填图标的名字加后缀名，nuke会自动找到<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666000444647-824bbbfb-45a0-44dd-946d-99bd91972fa3.png#clientId=u162168ff-70af-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=38&amp;id=uc116cc0e&amp;originHeight=38&amp;originWidth=188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7790&amp;status=error&amp;style=none&amp;taskId=u506e4f39-be5e-41b8-9854-079f63979af&amp;title=&amp;width=188" alt="image.png"><br><a name="H9HGp"></a></p><h1>第三节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666059392341-80ef8e6d-d0e9-4c85-9fe5-3883217454b7.png#clientId=uc36b5c75-d21a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=551&amp;id=u94199da1&amp;originHeight=551&amp;originWidth=1017&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52911&amp;status=error&amp;style=none&amp;taskId=u2ae5d99c-8ff5-4350-ae0c-9fc4437a5c6&amp;title=&amp;width=1017" alt="image.png"><br><a name="b9Bkh"></a></p><h2 id="创建节点">创建节点</h2><p>nuke.createNode()<br><a name="MlYPD"></a></p><h2 id="创建节点的同时设置属性值（不属于课程，之前自己搜的）">创建节点的同时设置属性值（不属于课程，之前自己搜的）</h2><p>举例：nuke.nodes.Shuffle(inputs=[texO], red=“red”, green=“black”, blue=“black”, alpha=“white”)<br><a name="oknM0"></a></p><h2 id="为节点创建预设与快捷键">为节点创建预设与快捷键</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666060461713-71ee7ea6-7061-419b-802a-4b92b1bc054c.png#clientId=uc36b5c75-d21a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=105&amp;id=u4d228d06&amp;originHeight=105&amp;originWidth=1717&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=109651&amp;status=error&amp;style=none&amp;taskId=ubd43bc0e-ee59-428c-968e-a05272be8ef&amp;title=&amp;width=1717" alt="image.png"><br><a name="GNTz9"></a></p><h2 id="更改节点的属性值">更改节点的属性值</h2><p>举例，设置选择的节点的’bbox’属性值为’B’：nuke.selectedNode()[‘bbox’].setValue(“B”)<br>举例，自定义某一节点的属性值： nuke.toNode(‘Merge1’)[‘bbox’].setValue(“B”)<br><a name="gPUGu"></a></p><h2 id="通过for循环批量更改某一类型的节点属性值">通过for循环批量更改某一类型的节点属性值</h2><p>设置所有merge2类型节点的属性值：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666061251539-0dd170d7-424e-4e81-8db2-c94f68ea6946.png#clientId=uc36b5c75-d21a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=92&amp;id=u441acaf8&amp;originHeight=92&amp;originWidth=665&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56666&amp;status=error&amp;style=none&amp;taskId=u42f26017-1e8a-4831-b3d0-c1d5f7ee5e5&amp;title=&amp;width=665" alt="image.png"><br><a name="anVYM"></a></p><h2 id="通过代码得到节点的类型名">通过代码得到节点的类型名</h2><p>print nuke.selectedNode().Class()<br><a name="z1eyh"></a></p><h1>第四节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666061714259-42d82bac-470c-40de-9381-3ba0dbee3466.png#clientId=uc36b5c75-d21a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=663&amp;id=u5a817660&amp;originHeight=663&amp;originWidth=1371&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78977&amp;status=error&amp;style=none&amp;taskId=u1c616561-29f7-4cab-b7e8-48f2a51f7ad&amp;title=&amp;width=1371" alt="image.png"><br><a name="t12th"></a></p><h2 id="介绍">介绍</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599735495-d70ee447-a597-446b-8ce5-7747ba8b1b01.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=317&amp;id=u9158f1d5&amp;originHeight=317&amp;originWidth=311&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11781&amp;status=error&amp;style=none&amp;taskId=u7765dd8f-c545-42fe-b519-36801aef169&amp;title=&amp;width=311" alt="image.png"><br>针对shuffle节点制作一些功能<br><a name="dT6as"></a></p><h2 id="shuffleShortcuts-py文件">shuffleShortcuts.py文件</h2><p>在.nuke\python\shuffleShortcuts文件夹下创建个shuffleShortcuts.py文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createCustomShuffle</span>(<span class="params">in_channel, out_channel, set_channel, rColor, gColor, bColor</span>):</span><br><span class="line">    my_shuffle = nuke.createNode(<span class="string">&quot;Shuffle&quot;</span>)</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;in&#x27;</span>].setValue(in_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;out&#x27;</span>].setValue(out_channel)</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;red&#x27;</span>].setValue(set_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;green&#x27;</span>].setValue(set_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;blue&#x27;</span>].setValue(set_channel)</span><br><span class="line">    my_shuffle[<span class="string">&#x27;alpha&#x27;</span>].setValue(set_channel)</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;tile_color&#x27;</span>].setValue(<span class="built_in">int</span>(<span class="string">&#x27;%02x%02x%02x%02x&#x27;</span> % (rColor * <span class="number">255</span>, gColor * <span class="number">255</span>, bColor * <span class="number">255</span>, <span class="number">1</span>), <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">    my_shuffle[<span class="string">&#x27;label&#x27;</span>].setValue(<span class="string">&quot;[value red] &gt; [value out]&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shuffleRGBchannels</span>():</span><br><span class="line">    select_node = nuke.selectedNode()</span><br><span class="line"></span><br><span class="line">    select_node_x_pos = select_node[<span class="string">&#x27;xpos&#x27;</span>].value()</span><br><span class="line">    select_node_y_pos = select_node[<span class="string">&#x27;ypos&#x27;</span>].value()</span><br><span class="line"></span><br><span class="line">    createCustomShuffle(<span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;red&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    red_shuffle = nuke.selectedNode()</span><br><span class="line">    createCustomShuffle(<span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">    green_shuffle = nuke.selectedNode()</span><br><span class="line">    createCustomShuffle(<span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;rgba&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">    blue_shuffle = nuke.selectedNode()</span><br><span class="line"></span><br><span class="line">    red_shuffle.setInput(<span class="number">0</span>, select_node)</span><br><span class="line">    red_shuffle[<span class="string">&#x27;xpos&#x27;</span>].setValue(select_node_x_pos - <span class="number">150</span>)</span><br><span class="line">    red_shuffle[<span class="string">&#x27;ypos&#x27;</span>].setValue(select_node_y_pos + <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    green_shuffle.setInput(<span class="number">0</span>, select_node)</span><br><span class="line">    green_shuffle[<span class="string">&#x27;xpos&#x27;</span>].setValue(select_node_x_pos)</span><br><span class="line">    green_shuffle[<span class="string">&#x27;ypos&#x27;</span>].setValue(select_node_y_pos + <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line">    blue_shuffle.setInput(<span class="number">0</span>, select_node)</span><br><span class="line">    blue_shuffle[<span class="string">&#x27;xpos&#x27;</span>].setValue(select_node_x_pos + <span class="number">150</span>)</span><br><span class="line">    blue_shuffle[<span class="string">&#x27;ypos&#x27;</span>].setValue(select_node_y_pos + <span class="number">150</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Red to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 1, 0, 0)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+r&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Green to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;green&#x27;, 0, 1, 0)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+g&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Blue to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 0, 0, 1)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+b&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Alpha to All)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 1, 1, 1)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+a&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Alpha to 0)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 0, 0, 0)&quot;</span>,</span><br><span class="line">                              shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Alpha to 1)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.createCustomShuffle(&#x27;rgba&#x27;, &#x27;rgba&#x27;, &#x27;red&#x27;, 1, 1, 1)&quot;</span>,</span><br><span class="line">                              shortcutContext=<span class="number">2</span>)</span><br><span class="line">nuke.menu(<span class="string">&#x27;Nodes&#x27;</span>).addCommand(<span class="string">&quot;Channel/Shuffle (Split RGB channels)&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;shuffleShortcuts.shuffleRGBchannels()&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;ctrl+shift+s&quot;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="uK2Td"></a></p><h2 id="menu-py"><a href="http://menu.py">menu.py</a></h2><p>然后在menu.py文件中导入这个模块<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599540497-2458ff54-b000-4c26-a5df-be499b687d92.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=127&amp;id=u0626f8d0&amp;originHeight=127&amp;originWidth=1029&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6020&amp;status=error&amp;style=none&amp;taskId=u328ea895-aad4-44a8-ac5c-2850b3bb0a2&amp;title=&amp;width=1029" alt="image.png"><br><a name="bsCQI"></a></p><h2 id="init-py"><a href="http://init.py">init.py</a></h2><p>init.py文件中定义文件夹路径<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599580891-92363eb5-ba98-4d88-a3e5-063c15f76d70.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=143&amp;id=uc5aa313d&amp;originHeight=143&amp;originWidth=437&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16790&amp;status=error&amp;style=none&amp;taskId=u7c97de82-13a0-4914-97a0-59267f47ac7&amp;title=&amp;width=437" alt="image.png"><br><a name="E9y81"></a></p><h1>第五节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599898541-63507d90-c932-4181-ac8c-3771fef7d6f3.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=588&amp;id=v7R3p&amp;originHeight=588&amp;originWidth=1341&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=212963&amp;status=error&amp;style=none&amp;taskId=u6b7fd6cd-449e-4098-a27a-9e98b278865&amp;title=&amp;width=1341" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666599891125-0c1f0e58-37ff-41af-b611-ee9489ffe73c.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=842&amp;id=u6b1c5e27&amp;originHeight=842&amp;originWidth=1600&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107703&amp;status=error&amp;style=none&amp;taskId=u2015f305-efa4-4920-ba42-793bc8ee270&amp;title=&amp;width=1600" alt="image.png"><br><a name="R2T0w"></a></p><h2 id="得到项目路径">得到项目路径</h2><p>nuke.root()[‘name’].value()<br><a name="ecCRC"></a></p><h2 id="br-定位字符串的特定值"><br>定位字符串的特定值</h2><p>举例字符串： Checkerboard_Small_v0002.png  输出 Checkerboard_Smal</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name_ext = <span class="string">&quot;Checkerboard_Small_v0002.png&quot;</span></span><br><span class="line">name = name_ext[<span class="number">0</span>:name_ext.find(<span class="string">&#x27;_v&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span> name <span class="comment"># Checkerboard_Small</span></span><br></pre></td></tr></table></figure><p><a name="oefiY"></a></p><h1>第六节</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666603966753-835d86a9-6896-4f10-8829-4a09716a827f.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=530&amp;id=uceb3e21c&amp;originHeight=530&amp;originWidth=1298&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=197709&amp;status=error&amp;style=none&amp;taskId=ub0dab412-d403-4cd2-872f-93e75582629&amp;title=&amp;width=1298" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666603950466-9c6fcf6f-a2be-4471-91b3-a546c244f756.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=758&amp;id=ub665f68c&amp;originHeight=758&amp;originWidth=970&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=66312&amp;status=error&amp;style=none&amp;taskId=u0dc0ff81-857c-4146-b3d0-10e46a379f0&amp;title=&amp;width=970" alt="image.png"><br><a name="DGmOo"></a></p><h2 id="弹出输入框让用户输入">弹出输入框让用户输入</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666604252525-be1e0a09-b9e5-40d5-8087-c60e64d53474.png#clientId=u43f32edb-ecd5-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=135&amp;id=uae1f3949&amp;originHeight=135&amp;originWidth=216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6861&amp;status=error&amp;style=none&amp;taskId=u9e05fc47-999f-43c9-8076-62fa7bf74ef&amp;title=&amp;width=216" alt="image.png"><br>inputBox = nuke.getInput(“My First Window”, “default text”)<br>如果点击Cancel按钮，那么inputBox的值为None<br><a name="cAZcM"></a></p><h2 id="在nuke菜单下放置一个让用户输入所选节点label的工具">在nuke菜单下放置一个让用户输入所选节点label的工具</h2><p>首先按照课程的文件夹排列，我们的流程就是，在.nuke\python\shuffleShortcuts文件夹下创建一个新的.py工具文件（主要是因为init.py文件定义了这个文件夹为插件加载路径）<br>然后去menu.py文件中导入这个新的.py工具文件，这样nuke就能够调用.py文件了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666665329501-34479b29-a043-4910-bb18-8d1c908559ae.png#clientId=u2c4d4940-f26c-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=135&amp;id=u308f65fc&amp;originHeight=135&amp;originWidth=216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5198&amp;status=error&amp;style=none&amp;taskId=u2f080a9d-bdf5-440e-a90c-f05178e9973&amp;title=&amp;width=216" alt="image.png"><br><a name="EAlTE"></a></p><h3 id="shortcut-NodeComment-py">shortcut_NodeComment.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shortcut_NodeComment</span>():</span><br><span class="line">    selected_node = nuke.selectedNode()</span><br><span class="line"></span><br><span class="line">    old_comment = selected_node[<span class="string">&#x27;label&#x27;</span>].value()</span><br><span class="line"></span><br><span class="line">    input_box = nuke.getInput(<span class="string">&quot;Please enter a node label&quot;</span>, old_comment)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> input_box:</span><br><span class="line">        nuke.message(<span class="string">&quot;Node label will remain as &quot;</span> + old_comment)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_node[<span class="string">&#x27;label&#x27;</span>].setValue(input_box)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addCommand(<span class="string">&#x27;Edit/Shortcuts/Add Comment to Node&#x27;</span>, <span class="string">&#x27;shortcut_NodeComment.shortcut_NodeComment()&#x27;</span>,</span><br><span class="line">                             <span class="string">&#x27;ctrl+alt+c&#x27;</span>, shortcutContext=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="mVc04"></a></p><h3 id="menu-py-2"><a href="http://menu.py">menu.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shortcut_NodeComment</span><br></pre></td></tr></table></figure><p><a name="uGPp6"></a></p><h3 id="init-py-2"><a href="http://init.py">init.py</a></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuke.pluginAddPath(<span class="string">&#x27;./python/shuffleShortcuts&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="P4w6c"></a></p><h2 id="（扩展版）在nuke菜单下放置一个让用户输入所选节点label的工具">（扩展版）在nuke菜单下放置一个让用户输入所选节点label的工具</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666670860005-de8228fb-3a85-4681-9efe-c58e2b2405bd.png#clientId=u2c4d4940-f26c-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=184&amp;id=u9314180b&amp;originHeight=184&amp;originWidth=277&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8943&amp;status=error&amp;style=none&amp;taskId=u258865ad-8359-43c2-9fa0-51c271a28bd&amp;title=&amp;width=277" alt="image.png"><br>不仅可以设置内容，也可以设置显示knob属性，也可以设置节点颜色<br>内嵌的panel写法举例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nukescripts.panels</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">my_panel</span>(nukescripts.panels.PythonPanel):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(my_panel, <span class="variable language_">self</span>).__init__(<span class="string">&#x27;my_panel&#x27;</span>)</span><br><span class="line">        selected_Node = nuke.selectedNode()</span><br><span class="line">        old_comment = selected_Node[<span class="string">&#x27;label&#x27;</span>].value()</span><br><span class="line">        knob_list = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> selected_Node.knobs():</span><br><span class="line">            knob_list.append(i)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.old_comment_slt = nuke.String_Knob(<span class="string">&quot;Comment&quot;</span>, <span class="string">&quot;Comment&quot;</span>, old_comment)</span><br><span class="line">        <span class="variable language_">self</span>.addKnob(<span class="variable language_">self</span>.old_comment_slt)</span><br><span class="line">        <span class="variable language_">self</span>.knob_list = nuke.Enumeration_Knob(<span class="string">&quot;Knob&quot;</span>,<span class="string">&quot;Knob&quot;</span>, knob_list)</span><br><span class="line">        <span class="variable language_">self</span>.addKnob(<span class="variable language_">self</span>.knob_list)</span><br><span class="line">        <span class="variable language_">self</span>.colour_bool = nuke.Boolean_Knob(<span class="string">&quot;Change Node Colour?&quot;</span>, <span class="string">&quot;Change Node Colour?&quot;</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.addKnob(<span class="variable language_">self</span>.colour_bool)</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">p = my_panel()</span><br><span class="line">p.show()</span><br></pre></td></tr></table></figure><p>教程中的panel写法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">short_NodeCustomizer</span>():</span><br><span class="line">    selected_Node = nuke.selectedNode()</span><br><span class="line">    old_comment = selected_Node[<span class="string">&#x27;label&#x27;</span>].value()</span><br><span class="line">    knob_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> selected_Node.knobs():</span><br><span class="line">        knob_list.append(i)</span><br><span class="line"></span><br><span class="line">    knob_list.sort()</span><br><span class="line">    knob_list.insert(<span class="number">0</span>, <span class="string">&#x27;None&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    knob_list_string = <span class="string">&quot; &quot;</span>.join(knob_list)</span><br><span class="line"></span><br><span class="line">    panel = nuke.Panel(<span class="string">&quot;Node Customizer&quot;</span>)</span><br><span class="line"></span><br><span class="line">    panel.addSingleLineInput(<span class="string">&quot;Comment&quot;</span>, old_comment)</span><br><span class="line">    panel.addEnumerationPulldown(<span class="string">&quot;Knob&quot;</span>, knob_list_string)</span><br><span class="line">    panel.addBooleanCheckBox(<span class="string">&quot;Change Node Colour?&quot;</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> panel.show():</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    comment_input = panel.value(<span class="string">&quot;Comment&quot;</span>)</span><br><span class="line">    knob_choice = panel.value(<span class="string">&quot;Knob&quot;</span>)</span><br><span class="line">    node_label = comment_input + <span class="string">&quot;\n&quot;</span> + knob_choice + <span class="string">&quot;: [value &quot;</span> + knob_choice + <span class="string">&quot;]&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> comment_input == <span class="string">&quot;&quot;</span> <span class="keyword">and</span> panel.value(<span class="string">&quot;Knob&quot;</span>) == <span class="string">&quot;None&quot;</span> <span class="keyword">and</span> <span class="keyword">not</span> panel.value(<span class="string">&quot;Change Node Colour?&quot;</span>):</span><br><span class="line">        nuke.message(<span class="string">&quot;Please enter a node label&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">elif</span> knob_choice == <span class="string">&quot;None&quot;</span>:</span><br><span class="line">        selected_Node[<span class="string">&#x27;label&#x27;</span>].setValue(comment_input)</span><br><span class="line">    <span class="keyword">elif</span> comment_input == <span class="string">&quot;&quot;</span>:</span><br><span class="line">        selected_Node[<span class="string">&#x27;label&#x27;</span>].setValue(knob_choice + <span class="string">&quot;: [value &quot;</span> + knob_choice + <span class="string">&quot;]&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_Node[<span class="string">&#x27;label&#x27;</span>].setValue(node_label)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> panel.value(<span class="string">&quot;Change Node Colour?&quot;</span>):</span><br><span class="line">        selected_Node[<span class="string">&#x27;tile_color&#x27;</span>].setValue(nuke.getColor())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addCommand(<span class="string">&#x27;Utilities/Node Customizer&#x27;</span>, <span class="string">&#x27;shortcut_NodeCustomizer.shortcut_NodeCustomizer()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="viWn2"></a></p><h1>第八节</h1><p><a name="mX3Zb"></a></p><h2 id="TCL的使用，链接属性">TCL的使用，链接属性</h2><p><a name="utf1K"></a></p><h2 id="moblur-controller-py">moblur_controller.py</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666680535160-079a3a99-42ba-4263-88df-6b251e8831d7.png#clientId=u40b40fbc-04d8-4&amp;from=paste&amp;height=202&amp;id=u69314819&amp;originHeight=202&amp;originWidth=538&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10243&amp;status=done&amp;style=none&amp;taskId=u740e63dc-e998-486e-8c27-af678f0d914&amp;title=&amp;width=538" alt="image.png"><br>创建NoOp节点配合TCL表达式，使只通过控制NoOp节点的数值，即可控制所有nuke节点网络图中带有对应属性的属性值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> nuke</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">moblur_controller</span>():</span><br><span class="line">    node_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> nuke.allNodes():</span><br><span class="line">        <span class="keyword">if</span> n.knob(<span class="string">&#x27;motionblur&#x27;</span>) <span class="keyword">or</span> n.knob(<span class="string">&#x27;samples&#x27;</span>):</span><br><span class="line">            node_list.append(n)</span><br><span class="line"></span><br><span class="line">    NoOp = nuke.createNode(<span class="string">&#x27;NoOp&#x27;</span>)  <span class="comment"># 使用TCL表达式需要的节点</span></span><br><span class="line">    NoOp[<span class="string">&#x27;name&#x27;</span>].setValue(<span class="string">&quot;GLOBAL_MOTIONBLUR_CONTROLLER&quot;</span>)</span><br><span class="line"></span><br><span class="line">    NoOp[<span class="string">&#x27;tile_color&#x27;</span>].setValue(<span class="number">255</span>)</span><br><span class="line">    NoOp[<span class="string">&#x27;note_font&#x27;</span>].setValue(<span class="string">&quot;Bold&quot;</span>)</span><br><span class="line"></span><br><span class="line">    NoOp.addKnob(nuke.Int_Knob(<span class="string">&#x27;global_motionblur&#x27;</span>, <span class="string">&quot;motionblur&quot;</span>))</span><br><span class="line">    NoOp.addKnob(nuke.Double_Knob(<span class="string">&#x27;global_shutter&#x27;</span>, <span class="string">&quot;shutter&quot;</span>))</span><br><span class="line">    NoOp.addKnob(nuke.Boolean_Knob(<span class="string">&#x27;global_disable_moblur&#x27;</span>, <span class="string">&quot;disable motionblur&quot;</span>))</span><br><span class="line"></span><br><span class="line">    NoOp[<span class="string">&#x27;global_motionblur&#x27;</span>].setValue(<span class="number">1</span>)</span><br><span class="line">    NoOp[<span class="string">&#x27;global_shutter&#x27;</span>].setValue(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    NoOp[<span class="string">&#x27;global_disable_moblur&#x27;</span>].setFlag(nuke.STARTLINE)  <span class="comment"># 设置将这个控件另起一行放置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="keyword">if</span> node.knob(<span class="string">&#x27;motionblur&#x27;</span>):</span><br><span class="line">            node[<span class="string">&#x27;motionblur&#x27;</span>].setExpression(</span><br><span class="line">                <span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.global_disable_moblur == 0 ? GLOBAL_MOTIONBLUR_CONTROLLER.global_motionblur : 0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            node[<span class="string">&#x27;shutter&#x27;</span>].setExpression(<span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.globsl_shutter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> node.knob(<span class="string">&#x27;samples&#x27;</span>):</span><br><span class="line">            node[<span class="string">&#x27;samples&#x27;</span>].setExpression(</span><br><span class="line">                <span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.global_disable_moblur == 0 ? GLOBAL_MOTIONBLUR_CONTROLLER.global_motionblur : 1&#x27;</span>)</span><br><span class="line">            node[<span class="string">&#x27;shutter&#x27;</span>].setExpression(<span class="string">&#x27;GLOBAL_MOTIONBLUR_CONTROLLER.globsl_shutter&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当节点删除时执行这个函数功能，删除所有表达式链接，并将节点值设置回默认值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteExpressions</span>():</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> node <span class="keyword">in</span> node_list:</span><br><span class="line">            <span class="keyword">if</span> node.knob(<span class="string">&#x27;motionblur&#x27;</span>):</span><br><span class="line">                node[<span class="string">&#x27;motionblur&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;motionblur&#x27;</span>].setValue(<span class="number">0</span>)</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].setValue(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">elif</span> node.knob(<span class="string">&#x27;samples&#x27;</span>):</span><br><span class="line">                node[<span class="string">&#x27;samples&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;samples&#x27;</span>].setValue(<span class="number">1</span>)</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].clearAnimated()</span><br><span class="line">                node[<span class="string">&#x27;shutter&#x27;</span>].setValue(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    nuke.addOnDestroy(deleteExpressions)  <span class="comment"># 当节点删除时执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nuke.menu(<span class="string">&#x27;Nuke&#x27;</span>).addCommand(<span class="string">&#x27;Utilities/Global Motionblur Controller&#x27;</span>, <span class="string">&#x27;moblur_controller.moblur_controller()&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="L4YSK"></a></p><h1>第九节</h1><p><a name="iPCgW"></a></p><h2 id="使用nuke自带的自定义界面工具来扩展节点">使用nuke自带的自定义界面工具来扩展节点</h2><p>在节点的属性界面右键点击<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666685695316-5b6919db-2a1e-4d59-9e72-bc44a1ba02fc.png#clientId=u40b40fbc-04d8-4&amp;from=paste&amp;height=116&amp;id=u777bcd0b&amp;originHeight=116&amp;originWidth=181&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2754&amp;status=done&amp;style=none&amp;taskId=u45e20dd0-a54d-467f-9b26-fe52861e02a&amp;title=&amp;width=181" alt="image.png"><br>然后就可以在这里自定义界面<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666685795462-10ff5dc3-adcf-4e9d-bfc1-e94cd3e40b72.png#clientId=u40b40fbc-04d8-4&amp;from=paste&amp;height=536&amp;id=u4dab91b9&amp;originHeight=536&amp;originWidth=485&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29775&amp;status=done&amp;style=none&amp;taskId=u1415f279-29cc-4186-b039-e0ab19fbd35&amp;title=&amp;width=485" alt="image.png"><br>其中divider line是分割线<br>然后UI可以附带代码<br><a name="N9zQn"></a></p><h3 id="addNodes">addNodes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">node_list = []</span><br><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> nuke.selectedNodes():</span><br><span class="line">    node_list.append(node.name())</span><br><span class="line"></span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addMoreNodes&#x27;</span>).setVisible(<span class="literal">True</span>)</span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addNodes&#x27;</span>).setVisible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">node_list_cleaned = <span class="string">&#x27;\n·&#x27;</span>.join(node_list)</span><br><span class="line"></span><br><span class="line">nuke.thisNode()[<span class="string">&#x27;txtknob_node_list&#x27;</span>].setValue(<span class="string">&quot;·&quot;</span>+node_list_cleaned)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">disableNodesInList</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="keyword">if</span> nuke.toNode(i).knob(<span class="string">&#x27;disable&#x27;</span>):</span><br><span class="line">            nuke.toNode(i).knob(<span class="string">&#x27;disable&#x27;</span>).setValue(nuke.thisNode().knob(<span class="string">&#x27;disable&#x27;</span>).value())</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;-&quot;</span> + i + <span class="string">&quot;does not have a &#x27;disable&#x27; knob Ignoring...&quot;</span></span><br><span class="line">nuke.toNode(<span class="string">&quot;NODE_DISABLER&quot;</span>).knob(<span class="string">&quot;knobChanged&quot;</span>).setValue(<span class="string">&#x27;disableNodesInList()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="sk8La"></a></p><h3 id="addMoreNodes">addMoreNodes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> node <span class="keyword">in</span> nuke.selectedNodes():</span><br><span class="line">    <span class="keyword">if</span> node.name() <span class="keyword">in</span> node_list:</span><br><span class="line">        <span class="built_in">print</span> node.name()+<span class="string">&quot; is already in the list&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        node_list.append(node.name())</span><br><span class="line"></span><br><span class="line">node_list_cleaned = <span class="string">&#x27;\n·&#x27;</span>.join(node_list)</span><br><span class="line"></span><br><span class="line">nuke.thisNode()[<span class="string">&#x27;txtknob_node_list&#x27;</span>].setValue(<span class="string">&quot;·&quot;</span>+node_list_cleaned)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ba93d"></a></p><h3 id="clearList">clearList</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node_list = []</span><br><span class="line"></span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addNodes&#x27;</span>).setVisible(<span class="literal">True</span>)</span><br><span class="line">nuke.thisNode().knob(<span class="string">&#x27;addMoreNodes&#x27;</span>).setVisible(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">nuke.thisNode()[<span class="string">&#x27;txtknob_node_list&#x27;</span>].setValue(<span class="string">&quot;None&quot;</span>)</span><br></pre></td></tr></table></figure><p><a name="lVd3t"></a></p><h2 id="将通过这种方法自定义的节点保存成gizmo">将通过这种方法自定义的节点保存成gizmo</h2><p>在.nuke\gizmos文件夹中新建gizmo文件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1666687417594-6ea42975-c5bb-41d6-8dbb-e8bc93cb6f0e.png#clientId=u40b40fbc-04d8-4&amp;from=paste&amp;height=200&amp;id=ue6c419a9&amp;originHeight=200&amp;originWidth=709&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13065&amp;status=done&amp;style=none&amp;taskId=u1c1ee9d0-18de-4b2a-b5cc-6b814e755f5&amp;title=&amp;width=709" alt="image.png"><br>然后在nuke中选择节点按ctrl+c<br>然后进入gizmo文件按ctrl+v即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> cut_paste_input [stack <span class="number">0</span>]</span><br><span class="line">version <span class="number">10.5</span> v4</span><br><span class="line">push $cut_paste_input</span><br><span class="line">NoOp &#123;</span><br><span class="line"> name NODE_DISABLER</span><br><span class="line"> knobChanged disableNodesInList()</span><br><span class="line"> tile_color <span class="number">0xff</span></span><br><span class="line"> label <span class="string">&quot;\[expr \&#123; \[value disable] == true ? \&quot;Nodes Disabled\&quot; : \&quot;Nodes Enabled\&quot; \&#125;]&quot;</span></span><br><span class="line"> selected true</span><br><span class="line"> xpos -<span class="number">180</span></span><br><span class="line"> ypos -<span class="number">86</span></span><br><span class="line"> addUserKnob &#123;<span class="number">20</span> User&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">22</span> addNodes l <span class="string">&quot;Add Selected Nodes To List&quot;</span> T <span class="string">&quot;node_list = \[]\nfor node in nuke.selectedNodes():\n    node_list.append(node.name())\n\nnuke.thisNode().knob(&#x27;addMoreNodes&#x27;).setVisible(True)\nnuke.thisNode().knob(&#x27;addNodes&#x27;).setVisible(False)\n\nnode_list_cleaned = &#x27;\\n·&#x27;.join(node_list)\n\nnuke.thisNode()\[&#x27;txtknob_node_list&#x27;].setValue(\&quot;·\&quot;+node_list_cleaned)\n\ndef disableNodesInList():\n    for i in node_list:\n        if nuke.toNode(i).knob(&#x27;disable&#x27;):\n            nuke.toNode(i).knob(&#x27;disable&#x27;).setValue(nuke.thisNode().knob(&#x27;disable&#x27;).value())\n        else:\n            print \&quot;-\&quot; + i + \&quot;does not have a &#x27;disable&#x27; knob Ignoring...\&quot;\nnuke.toNode(\&quot;NODE_DISABLER\&quot;).knob(\&quot;knobChanged\&quot;).setValue(&#x27;disableNodesInList()&#x27;)&quot;</span> +STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">22</span> addMoreNodes l <span class="string">&quot;Add More Selected Nodes To List&quot;</span> +HIDDEN T <span class="string">&quot;for node in nuke.selectedNodes():\n    if node.name() in node_list:\n        print node.name()+\&quot; is already in the list\&quot;\n    else:\n        node_list.append(node.name())\n\nnode_list_cleaned = &#x27;\\n·&#x27;.join(node_list)\n\nnuke.thisNode()\[&#x27;txtknob_node_list&#x27;].setValue(\&quot;·\&quot;+node_list_cleaned)\n&quot;</span> +STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">22</span> clearList l <span class="string">&quot;Clear List&quot;</span> T <span class="string">&quot;node_list = \[]\n\nnuke.thisNode().knob(&#x27;addNodes&#x27;).setVisible(True)\nnuke.thisNode().knob(&#x27;addMoreNodes&#x27;).setVisible(False)\n\nnuke.thisNode()\[&#x27;txtknob_node_list&#x27;].setValue(\&quot;None\&quot;)&quot;</span> +STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> spacer l <span class="string">&quot; &quot;</span> -STARTLINE T <span class="string">&quot;    &quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">6</span> disable -STARTLINE&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> txtknob_node_list l <span class="string">&quot;NODE LIST:&quot;</span> T <span class="literal">None</span>&#125;</span><br><span class="line"> addUserKnob &#123;<span class="number">26</span> <span class="string">&quot;&quot;</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NukePy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg in production</title>
      <link href="/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-FFmpeg-in-production/"/>
      <url>/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-FFmpeg-in-production/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="k62qS"></a></p><h1>FFmpeg与ffmpeg的介绍</h1><p><a name="BR4Wx"></a></p><h2 id="FFmpeg-or-ffmpeg">FFmpeg or ffmpeg</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673936833672-f709f7e7-0067-41dd-b0f5-9b2e2094084b.png#averageHue=%23111111&amp;clientId=u2f19a3ad-c148-4&amp;from=paste&amp;height=229&amp;id=u41085d30&amp;originHeight=229&amp;originWidth=2140&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=172285&amp;status=done&amp;style=none&amp;taskId=u4a2bade5-fc04-429c-9ec8-233e211251c&amp;title=&amp;width=2140" alt="image.png"><br><a name="lF4l3"></a></p><h2 id="FFmpeg-tools">FFmpeg tools</h2><p>FFmpeg提供的所有工具： <br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673936885926-0187a839-8e1a-490f-b0a2-94d29a805769.png#averageHue=%23080808&amp;clientId=u2f19a3ad-c148-4&amp;from=paste&amp;height=734&amp;id=u1aa47442&amp;originHeight=734&amp;originWidth=2158&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=290899&amp;status=done&amp;style=none&amp;taskId=u3722c923-c8e1-426a-8842-5c938f2ec7e&amp;title=&amp;width=2158" alt="image.png"><br><a name="eKf78"></a></p><h2 id="FFmpeg-libraries">FFmpeg libraries</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673937020238-2f9dd90e-64de-427b-8025-9728ee4aea55.png#averageHue=%23060606&amp;clientId=u2f19a3ad-c148-4&amp;from=paste&amp;height=663&amp;id=u7181e3f9&amp;originHeight=663&amp;originWidth=2165&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=215397&amp;status=done&amp;style=none&amp;taskId=u095783ac-8635-4529-98cd-d5c7d8c1980&amp;title=&amp;width=2165" alt="image.png"><br><a name="x3R6c"></a></p><h2 id="ffmpeg">ffmpeg</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1673937128075-057b74f7-09f0-4c5f-bb6e-dd403aedd0d9.png#averageHue=%23060606&amp;clientId=u2f19a3ad-c148-4&amp;from=paste&amp;height=534&amp;id=u8f02f286&amp;originHeight=534&amp;originWidth=2209&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=231125&amp;status=done&amp;style=none&amp;taskId=u5fa73875-6ec5-454e-89bb-c3b68590965&amp;title=&amp;width=2209" alt="image.png"><br><a name="pPYhz"></a></p><h1>安装ffmpeg</h1><p><a href="https://github.com/BtbN/FFmpeg-Builds/releases">https://github.com/BtbN/FFmpeg-Builds/releases</a><br>可以去这个github网站里下载构建版本<br><a name="gSfxC"></a></p><h1>ffmpeg基础语法</h1><p>在powershell中使用<br>在<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686124834256-4b7dbe37-eeb5-4ba5-abf2-709f5cee50a5.png#averageHue=%23faf9f7&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=374&amp;id=u5b17cf2d&amp;originHeight=374&amp;originWidth=707&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45262&amp;status=done&amp;style=none&amp;taskId=ua8de8cbd-3ca2-44a7-a7ef-24fe9834daf&amp;title=&amp;width=707" alt="image.png">构建好的ffmpeg目录下的bin目录下按shift加鼠标右键然后按s快捷键即可在目录下打开powershell<br>前面是输入选项和路径，后面是输出选项和路径。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686130668081-50866e46-3ec5-460b-a5fc-e1886492c111.png#averageHue=%230c0c0c&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=108&amp;id=u959cf2bb&amp;originHeight=108&amp;originWidth=1699&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56375&amp;status=done&amp;style=none&amp;taskId=u719581c8-fed6-4f10-bc3f-6137f8542c2&amp;title=&amp;width=1699" alt="image.png"><br><a name="X8L2Y"></a></p><h1>将图片序列转成视频</h1><p>将 文件夹中符合img_seq.%04d的图片整合成24帧的视频序列，用h264编码：.\ffmpeg.exe -framerate 24 -i ._image_sequences\img_seq\img_seq.%04d.png -c:v h264 output.mp4  <br>-c:v: h264 意思是使用h264编码视频流<br><a name="ngldj"></a></p><h1>ffmpeg与输出以及h264相关的option介绍</h1><p><a name="btBYo"></a></p><h2 id="Constant-Rate-Factor-（crf）输出质量">Constant Rate Factor （crf）输出质量</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686127869111-004de1e0-3998-4bce-8b84-695aa5590c60.png#averageHue=%230a0a0a&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=784&amp;id=ua6c98757&amp;originHeight=784&amp;originWidth=1714&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=298300&amp;status=done&amp;style=none&amp;taskId=ue1e4471e-ca2e-4359-ad3e-9c1f5615e0e&amp;title=&amp;width=1714" alt="image.png"><br><a name="FThoC"></a></p><h2 id="Preset-编码速度预设">Preset 编码速度预设</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686127978943-e0d1bed6-d116-43dd-8f5f-7351363cab76.png#averageHue=%23060606&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=896&amp;id=uea4b45e7&amp;originHeight=896&amp;originWidth=1742&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=245348&amp;status=done&amp;style=none&amp;taskId=ube678619-e57d-4e15-a3bd-72e07e482fa&amp;title=&amp;width=1742" alt="image.png"><br><a name="icEGW"></a></p><h2 id="Tune（不经常使用）">Tune（不经常使用）</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686128368452-e0e78d2f-a4ff-417a-8303-b2be9484579f.png#averageHue=%230c0c0c&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=1019&amp;id=uccaf701b&amp;originHeight=1019&amp;originWidth=1973&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=502036&amp;status=done&amp;style=none&amp;taskId=udc054b92-eea8-488b-8174-6fa9665c1eb&amp;title=&amp;width=1973" alt="image.png"><br><a name="aI8qr"></a></p><h2 id="Profile-profile-v-and-Level-level-为了兼容旧设备才需要看这个">Profile(-profile:v) and Level(-level)  (为了兼容旧设备才需要看这个)</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686128887023-6b184a06-2784-47ae-bfb2-1a76cd304fc5.png#averageHue=%230a0a0a&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=938&amp;id=ub5ef7475&amp;originHeight=938&amp;originWidth=1770&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=374321&amp;status=done&amp;style=none&amp;taskId=u6789f85f-e2b7-414a-8e7b-c02f32a058a&amp;title=&amp;width=1770" alt="image.png"><br><a name="NKjmJ"></a></p><h2 id="更改输出的缩放比">更改输出的缩放比</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686129672761-7d028a0d-36f5-4129-9f22-8d18fe8b24ed.png#averageHue=%230a0a0a&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=864&amp;id=u9ac301f7&amp;originHeight=864&amp;originWidth=1705&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=369264&amp;status=done&amp;style=none&amp;taskId=u4375f99b-1cc7-47b0-aaee-c1b5d0b0cee&amp;title=&amp;width=1705" alt="image.png"><br><a name="w37pj"></a></p><h2 id="更改像素格式">更改像素格式</h2><p>可以通过ffmpeg -pix_fmts查看所有可用像素格式的列表<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686129977233-50ff5dc0-ff6f-4e2d-a91f-aa370a0fc671.png#averageHue=%23080808&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=1153&amp;id=u7865d07c&amp;originHeight=1153&amp;originWidth=2477&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=532685&amp;status=done&amp;style=none&amp;taskId=ubc7caf4c-0371-4669-a489-e88b78d0290&amp;title=&amp;width=2477" alt="image.png"><br><a name="j5wui"></a></p><h1>添加音频</h1><p><a name="uTuKy"></a></p><h2 id="图片序列转化成视频的同时添加音频文件到视频文件中">图片序列转化成视频的同时添加音频文件到视频文件中</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686130405876-af47416a-f6fb-40b2-b5db-e34f738af46a.png#averageHue=%230f0f0f&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=852&amp;id=u1410c803&amp;originHeight=852&amp;originWidth=2364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=533660&amp;status=done&amp;style=none&amp;taskId=u4d1db221-1f51-4f12-8a3c-d7c387dac4a&amp;title=&amp;width=2364" alt="image.png"><br><a name="ATFEi"></a></p><h2 id="设置输出的音频的选项">设置输出的音频的选项</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686130874110-84c2e473-ad7c-4b05-9c9c-1acb50e1830f.png#averageHue=%230b0b0b&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=992&amp;id=oNVIM&amp;originHeight=992&amp;originWidth=2369&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=516865&amp;status=done&amp;style=none&amp;taskId=u48322327-df09-4cc1-b951-ddbaec0a5a5&amp;title=&amp;width=2369" alt="image.png"><br><a name="vzbSp"></a></p><h2 id="当音频长度比视频长度要长时，如何舍弃掉多余的视频">当音频长度比视频长度要长时，如何舍弃掉多余的视频</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686132160801-b3febdd4-1f01-40e5-8ccb-f4679871af4d.png#averageHue=%230a0a0a&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=901&amp;id=u6594224c&amp;originHeight=901&amp;originWidth=2365&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=392659&amp;status=done&amp;style=none&amp;taskId=u73a43970-1547-47ba-a471-35734b06daa&amp;title=&amp;width=2365" alt="image.png"><br><a name="yZrJq"></a></p><h2 id="当音频长度比视频长度短时">当音频长度比视频长度短时</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686132288036-bf8fb09d-93f9-4713-b7c8-c8ee95926413.png#averageHue=%23080808&amp;clientId=u6c33c667-b75d-4&amp;from=paste&amp;height=1037&amp;id=u0ecf5fcc&amp;originHeight=1037&amp;originWidth=2433&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=446558&amp;status=done&amp;style=none&amp;taskId=u2d13a6dc-4b3f-4740-bdfe-770199092a8&amp;title=&amp;width=2433" alt="image.png"><br><a name="dj98o"></a></p><h1>Codecs and Containers 编码解码器与容器</h1><p><a name="kv4cp"></a></p><h2 id="codec-编码解码器">codec(编码解码器)</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190062804-425ffdb1-4c3c-4659-adbd-0d83c7ca4530.png#averageHue=%230c0c0c&amp;clientId=uf7add6b9-7201-4&amp;from=paste&amp;height=776&amp;id=ucc93652e&amp;originHeight=776&amp;originWidth=2250&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=422925&amp;status=done&amp;style=none&amp;taskId=u50a6ad35-7470-414c-a503-daabf0aac43&amp;title=&amp;width=2250" alt="image.png"><br><a name="oHy6l"></a></p><h2 id="Container（容器，指文件格式）">Container（容器，指文件格式）</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190174798-0fd4fa3d-0650-4c8a-8abe-53aa1cd3a247.png#averageHue=%23080808&amp;clientId=uf7add6b9-7201-4&amp;from=paste&amp;height=1067&amp;id=uc8b50c2c&amp;originHeight=1067&amp;originWidth=1974&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=315549&amp;status=done&amp;style=none&amp;taskId=u48544d8c-1c81-49c0-b0cb-62d7a2ffeff&amp;title=&amp;width=1974" alt="image.png"><br><a name="gd6ma"></a></p><h2 id="file-encoding（文件编码）">file encoding（文件编码）</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190317542-311861f5-5390-41d8-ada3-cfdd2061eeb5.png#averageHue=%23090909&amp;clientId=uf7add6b9-7201-4&amp;from=paste&amp;height=694&amp;id=ua45cb5fa&amp;originHeight=694&amp;originWidth=1754&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=234212&amp;status=done&amp;style=none&amp;taskId=u0222d8b4-8476-433e-b545-1eff4edf0a5&amp;title=&amp;width=1754" alt="image.png"><br><a name="bvkkE"></a></p><h2 id="Converting-Containers-转换文件格式">Converting Containers 转换文件格式</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190621098-bb317d51-0319-47e4-ac07-3657edaf30a1.png#averageHue=%230e0e0e&amp;clientId=uf7add6b9-7201-4&amp;from=paste&amp;height=481&amp;id=u1e8581a9&amp;originHeight=481&amp;originWidth=1541&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=206584&amp;status=done&amp;style=none&amp;taskId=ue6256960-625a-4fd4-96b8-d465f2c949c&amp;title=&amp;width=1541" alt="image.png"><br><a name="Jo1VZ"></a></p><h2 id="Transcoding转码">Transcoding转码</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686190600115-0c09d4d5-06b6-484e-8398-d839ccc02664.png#averageHue=%230c0c0c&amp;clientId=uf7add6b9-7201-4&amp;from=paste&amp;height=788&amp;id=u231eea2b&amp;originHeight=788&amp;originWidth=2420&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=427805&amp;status=done&amp;style=none&amp;taskId=u86262856-2ed1-4152-a3a5-092b0b9d9da&amp;title=&amp;width=2420" alt="image.png"><br><a name="PTy14"></a></p><h1>Converting and transcoding 转码</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686191116971-5d909224-2fca-4f71-a0b0-34e45a1156ab.png#averageHue=%230a0a0a&amp;clientId=uf7add6b9-7201-4&amp;from=paste&amp;height=1087&amp;id=u48eecded&amp;originHeight=1087&amp;originWidth=2119&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=494248&amp;status=done&amp;style=none&amp;taskId=u29ffa33b-745a-42a2-8b9d-80122b2f02a&amp;title=&amp;width=2119" alt="image.png"><br><a name="xuN0e"></a></p><h1>Generating an Image Sequence生成图像序列</h1><p>图像序列转成视频：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686194214627-7968db08-35de-4e93-ae01-140887c3cbe7.png#averageHue=%230e2d5c&amp;clientId=uff736556-ac5a-4&amp;from=paste&amp;height=58&amp;id=u429bbf67&amp;originHeight=58&amp;originWidth=770&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37111&amp;status=done&amp;style=none&amp;taskId=u667f26b6-369d-41dc-b5aa-ee825dd3dca&amp;title=&amp;width=770" alt="image.png"><br>视频转成图像序列（PNG）：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686194433526-204c6bce-0b27-4c2f-a119-fb65fc8d592b.png#averageHue=%23102e5d&amp;clientId=uff736556-ac5a-4&amp;from=paste&amp;height=49&amp;id=u3fbf9dc8&amp;originHeight=49&amp;originWidth=684&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32421&amp;status=done&amp;style=none&amp;taskId=ubaf72023-63af-4794-8034-efbe6d68366&amp;title=&amp;width=684" alt="image.png">  png格式文件大小更大，生成质量更高<br>视频转成图像序列（JPG）：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686194832660-8cdb14c5-6c12-487b-87d8-1284a35d7d01.png#averageHue=%2312305e&amp;clientId=uff736556-ac5a-4&amp;from=paste&amp;height=39&amp;id=u39b57b48&amp;originHeight=39&amp;originWidth=821&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36686&amp;status=done&amp;style=none&amp;taskId=uba9284bc-6da1-4485-a605-b81e40e3793&amp;title=&amp;width=821" alt="image.png"> jpg格式文件大小很小，默认生成质量低，但是可以通过 -qscale:v 4  来提高质量， 数值为（1-31）数值越小质量越高。<br><a name="Gp8kS"></a></p><h1>控制是否覆盖</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686206387464-34aab456-d2c6-42eb-b0ec-054e3c10f61d.png#averageHue=%23c2c7cc&amp;clientId=uff736556-ac5a-4&amp;from=paste&amp;height=96&amp;id=u1e3663bb&amp;originHeight=96&amp;originWidth=482&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47058&amp;status=done&amp;style=none&amp;taskId=u71aace21-91de-497f-991d-32ca517ce2d&amp;title=&amp;width=482" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686206317187-2d0b3598-3a77-4f3f-83a5-7906aa9eda7a.png#averageHue=%2314305c&amp;clientId=uff736556-ac5a-4&amp;from=paste&amp;height=34&amp;id=ub34239bf&amp;originHeight=34&amp;originWidth=697&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26946&amp;status=done&amp;style=none&amp;taskId=u2c59d3a2-6931-4f20-af8a-0e1eea36da3&amp;title=&amp;width=697" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686206376676-d456302e-ad81-404f-9788-5d55e48f2d99.png#averageHue=%23183562&amp;clientId=uff736556-ac5a-4&amp;from=paste&amp;height=23&amp;id=u8fd13bb1&amp;originHeight=23&amp;originWidth=668&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25471&amp;status=done&amp;style=none&amp;taskId=ud3831a4a-f21b-4fa5-8452-5877189da09&amp;title=&amp;width=668" alt="image.png"><br><a name="AWNE1"></a></p><h1>通过python调用ffmpeg</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FFMPEG_PATH = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/ffmpeg.exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_image_sequence</span>(<span class="params">image_seq_path, output_path, framerate=<span class="number">24</span>, crf=<span class="number">21</span>, preset=<span class="string">&quot;ultrafast&quot;</span>, audio_path=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd = FFMPEG_PATH</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -y&#x27;</span></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -framerate &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(framerate)</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(image_seq_path)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(audio_path)</span><br><span class="line">    </span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -c:v libx264 -crf &#123;0&#125; -preset &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(crf,preset)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -c:a aac -filter_complex &quot;[1:0] apad&quot; -shortest&#x27;</span></span><br><span class="line">    </span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(output_path)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(ffmpeg_cmd)</span><br><span class="line">    subprocess.call(ffmpeg_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    img_seq_path = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/_image_sequences/tears_of_steel_100_frames/overrun.%04d.png&quot;</span>    </span><br><span class="line">    audio_path = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/_audio/overrun.wav&quot;</span></span><br><span class="line">    output_path = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/overrun.mp4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    encode_image_sequence(img_seq_path,output_path,audio_path=audio_path)</span><br></pre></td></tr></table></figure><p><a name="h02ZQ"></a></p><h1>使用Pyside2制作带界面的视频转换工具</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtGui</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TranscodeWindow</span>(QtWidgets.QWidget):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    FFMPEG_PATH = <span class="string">&quot;D:/ffmpeg-master-latest-win64-gpl-shared/bin/ffmpeg.exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    QUALITY_OPTIONS = [</span><br><span class="line">        [<span class="string">&quot;very high&quot;</span>, <span class="string">&quot;18&quot;</span>], <span class="comment"># combobox item label, crf value</span></span><br><span class="line">        [<span class="string">&quot;high&quot;</span>, <span class="string">&quot;20&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;medium&quot;</span>, <span class="string">&quot;23&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;low&quot;</span>, <span class="string">&quot;26&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">    QUALITY_DEFAULT = <span class="string">&quot;medium&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    PRESETS = [</span><br><span class="line">        [<span class="string">&quot;very slow&quot;</span>, <span class="string">&quot;veryslow&quot;</span>], <span class="comment"># combobox item label, preset value</span></span><br><span class="line">        [<span class="string">&quot;slower&quot;</span>, <span class="string">&quot;slower&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;slow&quot;</span>, <span class="string">&quot;slow&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;medium&quot;</span>, <span class="string">&quot;medium&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;fast&quot;</span>, <span class="string">&quot;fast&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;faster&quot;</span>, <span class="string">&quot;faster&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;very fast&quot;</span>, <span class="string">&quot;veryfast&quot;</span>],</span><br><span class="line">        [<span class="string">&quot;ultra fast&quot;</span>, <span class="string">&quot;ultrafast&quot;</span>]</span><br><span class="line">    ]</span><br><span class="line">    PRESET_DEFAULT = <span class="string">&quot;medium&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(TranscodeWindow, <span class="variable language_">self</span>).__init__(parent=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&quot;FFmpeg Transcoder&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setMinimumSize(<span class="number">400</span>, <span class="number">300</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.create_widgets()</span><br><span class="line">        <span class="variable language_">self</span>.create_layout()</span><br><span class="line">        <span class="variable language_">self</span>.create_connections()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_widgets</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.input_path_le = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.input_path_btn = QtWidgets.QPushButton(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.input_path_btn.setFixedWidth(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.output_path_le = QtWidgets.QLineEdit()</span><br><span class="line">        <span class="variable language_">self</span>.output_path_btn = QtWidgets.QPushButton(<span class="string">&quot;...&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.output_path_btn.setFixedWidth(<span class="number">30</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.video_codec_combo = QtWidgets.QComboBox()</span><br><span class="line">        <span class="variable language_">self</span>.video_codec_combo.addItem(<span class="string">&quot;h264&quot;</span>, <span class="string">&quot;libx264&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.quality_combo = QtWidgets.QComboBox()</span><br><span class="line">        <span class="keyword">for</span> quality_option <span class="keyword">in</span> <span class="variable language_">self</span>.QUALITY_OPTIONS:</span><br><span class="line">            <span class="variable language_">self</span>.quality_combo.addItem(quality_option[<span class="number">0</span>], quality_option[<span class="number">1</span>])</span><br><span class="line">        <span class="variable language_">self</span>.quality_combo.setCurrentText(<span class="variable language_">self</span>.QUALITY_DEFAULT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.preset_combo = QtWidgets.QComboBox()</span><br><span class="line">        <span class="keyword">for</span> preset <span class="keyword">in</span> <span class="variable language_">self</span>.PRESETS:</span><br><span class="line">            <span class="variable language_">self</span>.preset_combo.addItem(preset[<span class="number">0</span>], preset[<span class="number">1</span>])</span><br><span class="line">        <span class="variable language_">self</span>.preset_combo.setCurrentText(<span class="variable language_">self</span>.PRESET_DEFAULT)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.audio_codec_combo = QtWidgets.QComboBox()</span><br><span class="line">        <span class="variable language_">self</span>.audio_codec_combo.addItem(<span class="string">&quot;aac&quot;</span>, <span class="string">&quot;aac&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.transcode_btn = QtWidgets.QPushButton(<span class="string">&quot;Transcode&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn = QtWidgets.QPushButton(<span class="string">&quot;Cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_layout</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        input_grp = QtWidgets.QGroupBox(<span class="string">&quot;Input Path&quot;</span>)</span><br><span class="line">        input_grp_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        input_grp_layout.addWidget(<span class="variable language_">self</span>.input_path_le)</span><br><span class="line">        input_grp_layout.addWidget(<span class="variable language_">self</span>.input_path_btn)</span><br><span class="line">        input_grp.setLayout(input_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_grp = QtWidgets.QGroupBox(<span class="string">&quot;Output Path&quot;</span>)</span><br><span class="line">        output_grp_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        output_grp_layout.addWidget(<span class="variable language_">self</span>.output_path_le)</span><br><span class="line">        output_grp_layout.addWidget(<span class="variable language_">self</span>.output_path_btn)</span><br><span class="line">        output_grp.setLayout(output_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        video_options_grp = QtWidgets.QGroupBox(<span class="string">&quot;Video Options&quot;</span>)</span><br><span class="line">        video_options_grp_layout = QtWidgets.QFormLayout()</span><br><span class="line">        video_options_grp.setLayout(video_options_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        video_codec_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        video_codec_layout.addWidget(<span class="variable language_">self</span>.video_codec_combo)</span><br><span class="line">        video_codec_layout.addStretch()</span><br><span class="line">        video_options_grp_layout.addRow(<span class="string">&quot;Video Codec:&quot;</span>, video_codec_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        quality_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        quality_layout.addWidget(<span class="variable language_">self</span>.quality_combo)</span><br><span class="line">        quality_layout.ad</span><br><span class="line">        quality_layout.addStretch()</span><br><span class="line">        video_options_grp_layout.addRow(<span class="string">&quot;Quality:&quot;</span>, quality_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        preset_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        preset_layout.addWidget(<span class="variable language_">self</span>.preset_combo)</span><br><span class="line">        preset_layout.addStretch()</span><br><span class="line">        video_options_grp_layout.addRow(<span class="string">&quot;Preset:&quot;</span>, preset_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        audio_options_grp = QtWidgets.QGroupBox(<span class="string">&quot;Audio Options&quot;</span>)</span><br><span class="line">        audio_options_grp_layout = QtWidgets.QFormLayout()</span><br><span class="line">        audio_options_grp.setLayout(audio_options_grp_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        audio_codec_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        audio_codec_layout.addWidget(<span class="variable language_">self</span>.audio_codec_combo)</span><br><span class="line">        audio_codec_layout.addStretch()</span><br><span class="line">        audio_options_grp_layout.addRow(<span class="string">&quot;Audio Codec:&quot;</span>, audio_codec_layout)</span><br><span class="line">        </span><br><span class="line">        options_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        options_layout.addWidget(video_options_grp)</span><br><span class="line">        options_layout.addWidget(audio_options_grp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        button_layout = QtWidgets.QHBoxLayout()</span><br><span class="line">        button_layout.addStretch()</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.transcode_btn)</span><br><span class="line">        button_layout.addWidget(<span class="variable language_">self</span>.cancel_btn)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        main_layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>)</span><br><span class="line">        main_layout.addWidget(input_grp)</span><br><span class="line">        main_layout.addWidget(output_grp)</span><br><span class="line">        main_layout.addLayout(options_layout)</span><br><span class="line">        main_layout.addStretch()</span><br><span class="line">        main_layout.addLayout(button_layout)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_connections</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.input_path_btn.clicked.connect(<span class="variable language_">self</span>.set_input_path)</span><br><span class="line">        <span class="variable language_">self</span>.output_path_btn.clicked.connect(<span class="variable language_">self</span>.set_output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.transcode_btn.clicked.connect(<span class="variable language_">self</span>.transcode)</span><br><span class="line">        <span class="variable language_">self</span>.cancel_btn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_input_path</span>(<span class="params">self</span>):</span><br><span class="line">        filters = <span class="string">&quot;&quot;</span></span><br><span class="line">        selected_filter = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        input_path, selected_filter = QtWidgets.QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&quot;Select an Input File&quot;</span>, <span class="string">&quot;&quot;</span>, filters, selected_filter)</span><br><span class="line">        <span class="keyword">if</span> input_path:</span><br><span class="line">            <span class="variable language_">self</span>.input_path_le.setText(input_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_output_path</span>(<span class="params">self</span>):</span><br><span class="line">        filters = <span class="string">&quot;*.mp4&quot;</span></span><br><span class="line">        selected_filter = <span class="string">&quot;*.mp4&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_path, selected_filter = QtWidgets.QFileDialog.getSaveFileName(<span class="variable language_">self</span>, <span class="string">&quot;Save File As&quot;</span>, <span class="string">&quot;&quot;</span>, filters, selected_filter)</span><br><span class="line">        <span class="keyword">if</span> output_path:</span><br><span class="line">            <span class="variable language_">self</span>.output_path_le.setText(output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">transcode</span>(<span class="params">self</span>):</span><br><span class="line">        </span><br><span class="line">        input_path = <span class="variable language_">self</span>.input_path_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> input_path:</span><br><span class="line">            QtWidgets.QMessageBox.critical(<span class="variable language_">self</span>, <span class="string">&quot;Transcode Error&quot;</span>, <span class="string">&quot;Input path not set&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(input_path):</span><br><span class="line">            QtWidgets.QMessageBox.critical(<span class="variable language_">self</span>, <span class="string">&quot;Transcode Error&quot;</span>, <span class="string">&quot;Input path does not exist&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        output_path = <span class="variable language_">self</span>.output_path_le.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> output_path:</span><br><span class="line">            QtWidgets.QMessageBox.critical(<span class="variable language_">self</span>, <span class="string">&quot;Transcode Error&quot;</span>, <span class="string">&quot;Output path not set&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        video_codec = <span class="variable language_">self</span>.video_codec_combo.currentData()</span><br><span class="line">        crf = <span class="variable language_">self</span>.quality_combo.currentData()</span><br><span class="line">        preset = <span class="variable language_">self</span>.preset_combo.currentData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        audio_codec = <span class="variable language_">self</span>.audio_codec_combo.currentData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        args = [<span class="variable language_">self</span>.FFMPEG_PATH]                                             <span class="comment"># executable path</span></span><br><span class="line">        args.extend([<span class="string">&quot;-hide_banner&quot;</span>, <span class="string">&quot;-y&quot;</span>])                                   <span class="comment"># global options</span></span><br><span class="line">        args.extend([<span class="string">&quot;-i&quot;</span>, input_path])                                       <span class="comment"># input path</span></span><br><span class="line">        args.extend([<span class="string">&quot;-c:v&quot;</span>, video_codec, <span class="string">&quot;-crf&quot;</span>, crf, <span class="string">&quot;-preset&quot;</span>, preset])    <span class="comment"># video output options</span></span><br><span class="line">        args.extend([<span class="string">&quot;-c:a&quot;</span>, audio_codec])                                    <span class="comment"># audio output options</span></span><br><span class="line">        args.append(output_path)                                              <span class="comment"># output path</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        subprocess.call(args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        QtWidgets.QMessageBox.information(<span class="variable language_">self</span>, <span class="string">&quot;Transcode Complete&quot;</span>, <span class="string">&quot;File transcode operation complete.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    window = TranscodeWindow()</span><br><span class="line">    window.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    app.exec_()</span><br></pre></td></tr></table></figure><p><a name="wxhmb"></a></p><h1>修剪视频</h1><p><a name="n6eyl"></a></p><h2 id="舍弃前面的视频内容">舍弃前面的视频内容</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300194202-542b1d59-9fe0-4a2e-9f41-46fdd21e46a5.png#averageHue=%23090909&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=896&amp;id=u9d04f701&amp;originHeight=896&amp;originWidth=2383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=396214&amp;status=done&amp;style=none&amp;taskId=ue363f098-0bf3-4660-b6fb-c1a2ebdcfb6&amp;title=&amp;width=2383" alt="image.png"><br><a name="rpVUA"></a></p><h2 id="舍弃最后或中间的视频内容">舍弃最后或中间的视频内容</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300292895-ab2f1585-7da6-4d84-a29c-cb5183d9ca08.png#averageHue=%23080808&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=1086&amp;id=u1e938456&amp;originHeight=1086&amp;originWidth=2122&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=380639&amp;status=done&amp;style=none&amp;taskId=ue9b618ec-c23c-460e-8cbe-6e54ea8f712&amp;title=&amp;width=2122" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686301468647-c81def59-c870-4984-9281-4cbeae89f43d.png#averageHue=%23173159&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=38&amp;id=u7d8e8d6e&amp;originHeight=38&amp;originWidth=1179&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54594&amp;status=done&amp;style=none&amp;taskId=u0851f117-2246-4b95-9a00-ed5c94fdfd8&amp;title=&amp;width=1179" alt="image.png"><br><a name="FyRSV"></a></p><h2 id="输出指定时间的视频">输出指定时间的视频</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300686892-f137b300-3d65-4dc2-af60-e7c56175fd02.png#averageHue=%23070707&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=729&amp;id=u64b10927&amp;originHeight=729&amp;originWidth=2366&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=228416&amp;status=done&amp;style=none&amp;taskId=uf643b9b5-4e3a-4ab5-a5cf-2f6bd6ca01c&amp;title=&amp;width=2366" alt="image.png"><br><a name="VBigi"></a></p><h2 id="警告">警告</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686300777026-a3422b34-c23a-4155-bbd0-60065c2237a9.png#averageHue=%23090909&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=909&amp;id=u5f2e2afa&amp;originHeight=909&amp;originWidth=1900&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=334576&amp;status=done&amp;style=none&amp;taskId=u1b88ae88-1ca2-421f-bf9d-fc0cf6c2a40&amp;title=&amp;width=1900" alt="image.png"><br><a name="qa6ga"></a></p><h1>提取视频的第一帧的图片</h1><p>获得视频的第一帧的图片：<img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686302638281-804ddb84-1921-4383-a272-8ccec992fa64.png#averageHue=%23102c57&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=53&amp;id=ue9d0966c&amp;originHeight=53&amp;originWidth=924&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37484&amp;status=done&amp;style=none&amp;taskId=u22801a7e-ea0a-47ec-9339-37e4618236f&amp;title=&amp;width=924" alt="image.png"><br><a name="Obkj2"></a></p><h1>提取视频的中间处的一帧图片</h1><p>其中ffprobe.exe是FFmpeg提供的用来查看视频信息的exe文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FFMPEG_PATH = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/ffmpeg.exe&quot;</span></span><br><span class="line">FFPROBE_PATH = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/ffprobe.exe&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_middle_image</span>(<span class="params">source_path, output_path</span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffprobe_cmd = FFPROBE_PATH</span><br><span class="line">    ffprobe_cmd += <span class="string">&#x27; -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 &#x27;</span></span><br><span class="line">    ffprobe_cmd += source_path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    duration = <span class="built_in">float</span>(subprocess.check_output(ffprobe_cmd))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd = FFMPEG_PATH</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -y -i &#123;0&#125; -ss &#123;1&#125; -frames:v 1 &#123;2&#125;&#x27;</span>.<span class="built_in">format</span>(source_path, duration/<span class="number">2.0</span>, output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ffmpeg_cmd)</span><br><span class="line">    subprocess.call(ffmpeg_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode_image_sequence</span>(<span class="params">image_seq_path, output_path, framerate=<span class="number">24</span>, crf=<span class="number">21</span>, preset=<span class="string">&quot;ultrafast&quot;</span>, audio_path=<span class="literal">None</span></span>):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd = FFMPEG_PATH</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -y &#x27;</span></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -framerate &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(framerate)</span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(image_seq_path)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -i &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(audio_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; -c:v libx264 -crf &#123;0&#125; -preset &#123;1&#125;&#x27;</span>.<span class="built_in">format</span>(crf, preset)</span><br><span class="line">    <span class="keyword">if</span> audio_path:</span><br><span class="line">        ffmpeg_cmd += <span class="string">&#x27; -c:a aac -filter_complex &quot;[1:0] apad&quot; -shortest&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ffmpeg_cmd += <span class="string">&#x27; &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(output_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(ffmpeg_cmd)</span><br><span class="line">    subprocess.call(ffmpeg_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    source_path = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/bbb_shot_060.mp4&quot;</span></span><br><span class="line">    output_path = <span class="string">&quot;D:/ffmpeg/ffmpeg-4.2.1/bin/middle_frame.png&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    extract_middle_image(source_path, output_path)</span><br></pre></td></tr></table></figure><p><a name="MWVt3"></a></p><h1>通过过滤器添加水印</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304228275-5e64f1b7-abdd-417d-af1d-ea5fe7c97b85.png#averageHue=%23080808&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=992&amp;id=ua5f5a6a7&amp;originHeight=992&amp;originWidth=2417&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=350093&amp;status=done&amp;style=none&amp;taskId=u848aa727-8b57-486f-934b-f1f4e7b6b4f&amp;title=&amp;width=2417" alt="image.png"><br>举例：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304577780-2882741d-e0d7-4853-ade7-d17a496a50d6.png#averageHue=%23213d67&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=32&amp;id=uc62a5349&amp;originHeight=32&amp;originWidth=1120&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44893&amp;status=done&amp;style=none&amp;taskId=u5ad1e4b0-c799-4958-adab-0c8e8681621&amp;title=&amp;width=1120" alt="image.png"><br>将图片放到视频的右下角<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304584475-f26b6af6-78e9-4a13-a504-31e1a2c5b011.png#averageHue=%23244471&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=38&amp;id=uae6f2beb&amp;originHeight=38&amp;originWidth=185&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8030&amp;status=done&amp;style=none&amp;taskId=u636266ba-2555-4cd5-9365-fe2769603c1&amp;title=&amp;width=185" alt="image.png">这里的[0][1]可以不要，然后(W-w-20):(H-h-20)的意思是水印的位置，水印的位置左边如图所示：W为视频的宽度，w为图片的宽度<br><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686304684459-6ec4506d-337a-43d2-ab30-b8a3234f5dd6.png#averageHue=%238da355&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=756&amp;id=u499b5bd7&amp;originHeight=756&amp;originWidth=1140&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=853210&amp;status=done&amp;style=none&amp;taskId=u8459d329-1180-4f83-a877-a3680fff499&amp;title=&amp;width=1140" alt="image.png"><br><a name="HIx7i"></a></p><h1>通过过滤器调整添加的水印的大小的透明度</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686536873938-20b89753-bac8-4824-9507-fceecc57a21b.png#averageHue=%23163562&amp;clientId=u3813901e-6645-4&amp;from=paste&amp;height=46&amp;id=ud34da61d&amp;originHeight=46&amp;originWidth=1964&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84264&amp;status=done&amp;style=none&amp;taskId=u0c432a9c-76ae-4e91-a53d-910228f8d05&amp;title=&amp;width=1964" alt="image.png"><br>过滤器为蓝色的字体， [1]scale 是指将前面的输入中的第二个进行缩放。  iw为原图片的像素大小。 iw也可以换成数字代指像素，h=-1的意思是让ffmpeg根据前面的宽度w的大小自动调整高度h的大小。然后后面的[image_scaled]的意思是通过过滤器修改后的图片的名字（因为后面要用到这个更改过缩放的图片，因此先定义一个暂时的名字），[image_scaled]lut=a=val*0.4[image_final];的意思是在原来的基础上将alpha通道的大小调整为原来的0.4倍，然后再给个修改后的名字[image_final]，这个名字是自定义的。然后[0][image_final]overlay=(W-w-20):(H-h-20)为添加水印。<br><a name="s4cNX"></a></p><h1>刻录时间码</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/2623605/1686633394546-2439f3e8-dcf0-457c-bf4e-6ab6ee27e461.png#averageHue=%23244470&amp;clientId=u2a7e5a9c-aa6d-4&amp;from=paste&amp;height=44&amp;id=uebf751ac&amp;originHeight=44&amp;originWidth=2087&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=91397&amp;status=done&amp;style=none&amp;taskId=ua56ab983-5706-4f7c-b436-06f70a2a668&amp;title=&amp;width=2087" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MAYA PYTHON API</title>
      <link href="/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-MAYA-PYTHON-API/"/>
      <url>/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-MAYA-PYTHON-API/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="hWfDw"></a></p><h1>第二集面向对象编程</h1><p><a name="Yl4GV"></a></p><h2 id="类，对象和模块。">类，对象和模块。</h2><p>类是一个蓝图，是一个数据的集合，根据类创建对象，也可以称为类的实例化，对象是基于类的结构的数据的集合，模块是类的集合。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652688002940-a1974267-22d9-495d-aae0-641008d06936.png#averageHue=%23040404&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=1053&amp;id=ua1bf780d&amp;originHeight=1053&amp;originWidth=1896&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=328742&amp;status=done&amp;style=none&amp;taskId=ubd677c03-9488-44b0-b709-4d689dfc8d4&amp;title=&amp;width=1896" alt="image.png"><br><a name="nk7Xj"></a></p><h1>第三集maya api 术语</h1><p><a name="cr2uH"></a></p><h2 id="dag-path">dag path</h2><p><a name="ziLh0"></a></p><h3 id="dag-directed-acyclic-graph有向非循环图">dag=directed acyclic graph有向非循环图</h3><p>树是一种很典型的有向非循环图<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652699596042-6aaeb4ab-9afb-4154-9f27-c3d15287b097.png#averageHue=%23060606&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=329&amp;id=udd3d31e2&amp;originHeight=329&amp;originWidth=698&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39256&amp;status=done&amp;style=none&amp;taskId=u2f0e2232-493a-4e6d-9f27-b3da2a3a2de&amp;title=&amp;width=698" alt="image.png"><br>在maya中创建的物体对象，具有两个节点，一个transform节点，一个shape节点，transform节点定义了变换（xyz位置）旋转，缩放，shape节点定义了物体的形状。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652700326243-a5174551-88c6-4b61-a5be-9c91ae4b756b.png#averageHue=%23090909&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=400&amp;id=ua142ac27&amp;originHeight=400&amp;originWidth=627&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52300&amp;status=done&amp;style=none&amp;taskId=ub30c642c-09d7-4316-b567-c565d99ccf5&amp;title=&amp;width=627" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652699848427-f10df377-7b87-40d1-b448-740740d1bed3.png#averageHue=%23101010&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=397&amp;id=u35dfc191&amp;originHeight=397&amp;originWidth=748&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112043&amp;status=done&amp;style=none&amp;taskId=u55df21c1-19d8-4749-b465-aeceb855cd0&amp;title=&amp;width=748" alt="image.png"><br><a name="JVrip"></a></p><h3 id="dg-dependency-graph依赖图">dg=dependency graph依赖图</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652700312066-20bf1573-864e-49b4-906e-e7fc57d46b41.png#averageHue=%23080808&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=346&amp;id=ud8cb707e&amp;originHeight=346&amp;originWidth=653&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51000&amp;status=done&amp;style=none&amp;taskId=u4f18b9f5-0a11-4d9f-b917-739e87b87d3&amp;title=&amp;width=653" alt="image.png"></p><p><a name="awTOD"></a></p><h3 id="dag-path-2">dag path</h3><p>dag path是从根到特定对象的路径，没有dag path，maya就不知道那个特定对象在世界空间的哪里。<br>因为当一个物体是另一个物体的子物体时，它的原点坐标就会变成它的父物体的当前坐标位置。<br>maya是通过dag path获得这些位置的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652700814965-59307fc8-d171-42b0-8471-16a9f2da22b6.png#averageHue=%23050505&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=685&amp;id=uf368ccf8&amp;originHeight=685&amp;originWidth=1111&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=110716&amp;status=done&amp;style=none&amp;taskId=ue6ff3450-0403-4c8f-979b-2f5622f4e73&amp;title=&amp;width=1111" alt="image.png"></p><p><a name="kLYbE"></a></p><h2 id="MObject">MObject</h2><p>MObject是model object的缩写 <br>MObject是可以访问maya的专门的处理程序，可以用来处理模型，渲染，灯光 <br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652701657933-aff5a074-7a3d-4857-955d-34da4aa497b4.png#averageHue=%23080808&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=573&amp;id=u1f4a393f&amp;originHeight=573&amp;originWidth=533&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65804&amp;status=done&amp;style=none&amp;taskId=ua4265d9a-8176-4364-8418-075524338bd&amp;title=&amp;width=533" alt="image.png"><br><a name="NyMMB"></a></p><h2 id="Selection-List">Selection List</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652701682100-5b20f116-3eca-4d78-9a4c-94259c9a79c9.png#averageHue=%23070707&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=1044&amp;id=u590c24db&amp;originHeight=1044&amp;originWidth=812&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=157832&amp;status=done&amp;style=none&amp;taskId=u57ad142d-da2c-4b90-b4cc-a1122ade833&amp;title=&amp;width=812" alt="image.png"><br>方法有creating、add/remove、walking(遍历)等<br><a name="bxYhz"></a></p><h2 id="案例image-png">案例<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1652704537426-f82d807a-e19f-4c62-aba3-3f9849253f2c.png#averageHue=%23060606&amp;clientId=ubc9b0c79-7263-4&amp;from=paste&amp;height=947&amp;id=u401852d7&amp;originHeight=947&amp;originWidth=1761&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=301614&amp;status=done&amp;style=none&amp;taskId=ubbea4c4f-b64f-402a-afc9-f7614c69240&amp;title=&amp;width=1761" alt="image.png"></h2><p>说明：首先创建一个mSelectionList对象（mselectionList）（第一行），将obj放入到0的位置（第二行），然后创建一个mdagPath对象（mdagPath）（目前是空的）（第三行），然后将mSelectionList对象中的索引为0的obj的dagpath放入到MDagPath对象（mdagPath）中（现在mdagPath对象中拥有了obj的dagpath）（第四行），创建一个MObject对象（第五行），获得mSelectionList中索引为0的obj中的依赖节点给MObject对象（mobj）。<br>看那个手的图案下面有个obj我想大概意思是将obj对象与MObject对象建立关系，理解为指针就可以了。</p><p><strong>这里的pPlane1为maya中的模型名字</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Selection List</span></span><br><span class="line">mSel = OpenMaya.MSelectionList()</span><br><span class="line">mSel.add(<span class="string">&quot;pPlane1&quot;</span>)</span><br><span class="line"><span class="comment"># 创建MObject和MDagPath</span></span><br><span class="line">mObj = OpenMaya.MObject()</span><br><span class="line">mDagPath = OpenMaya.MDagPath()</span><br><span class="line"><span class="comment"># 得到对象的依赖节点和dagpath</span></span><br><span class="line">mSel.getDependNode(<span class="number">0</span>,mObj)</span><br><span class="line">mSel.getDagPath(<span class="number">0</span>,mDagPath)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mDagPath.fullPathName()</span><br></pre></td></tr></table></figure><p><a name="pumb7"></a></p><h1>第四集获取和更改场景物体的属性</h1><p><a name="EvmY2"></a></p><h2 id="先了解节点属性">先了解节点属性</h2><p>例如创建一个平面，节点连接关系图如图所示：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139370624-f7b45cda-1cca-4a78-a530-77f88d8264c0.png#averageHue=%231b1b1a&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=139&amp;id=ued529cf0&amp;originHeight=139&amp;originWidth=645&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5563&amp;status=done&amp;style=none&amp;taskId=ub5ab0927-cd65-4bfe-8636-7584c31e34e&amp;title=&amp;width=645" alt="image.png"><br>然后双击黄色的线就弹出窗口这样就可以进行左边的属性与右边的属性进行连接<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139420841-46b474e3-b2a1-4720-8b4d-6c66e15ac04f.png#averageHue=%23474746&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=659&amp;id=u88fda29a&amp;originHeight=659&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40552&amp;status=done&amp;style=none&amp;taskId=ubb4ba258-9610-434f-8f44-5611fe018de&amp;title=&amp;width=536" alt="image.png">。<br><a name="SVPTp"></a></p><h2 id="MFnMesh">MFnMesh</h2><p>首先需要理解一下什么是MFn，MFn是model function  set 的缩写意思是模型函数集（函数集是函数的集合的意思）。<br>然后MFnMesh接受一个网格类型，然后可以执行创建，修改， 更改边，面，细分等方法<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653118356724-e388e6ea-ccd6-4d22-a66c-4d01885434a9.png#averageHue=%23080808&amp;clientId=ub0d197af-217a-4&amp;from=paste&amp;height=550&amp;id=u6ac57003&amp;originHeight=550&amp;originWidth=451&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63501&amp;status=done&amp;style=none&amp;taskId=uf26cc2ed-a649-45fd-a97b-44a8b5d4376&amp;title=&amp;width=451" alt="image.png"><br><a name="pDlxZ"></a></p><h2 id="MFnDependencyNode">MFnDependencyNode</h2><p>MFnDependencyNode有创建修改检索等功能 针对的是dependency graph,接受的是dependency node 类型<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653119744005-205832c4-b0cf-4cdd-a82e-b82b2088d0a9.png#averageHue=%23070707&amp;clientId=ub0d197af-217a-4&amp;from=paste&amp;height=485&amp;id=uf8b1b4b8&amp;originHeight=485&amp;originWidth=544&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63258&amp;status=done&amp;style=none&amp;taskId=u0d6260aa-5617-45f5-9fbd-995ed5ea16c&amp;title=&amp;width=544" alt="image.png"><br><a name="MPqKm"></a></p><h2 id="MFnMesh和MFnDependencyNode接受的输入">MFnMesh和MFnDependencyNode接受的输入</h2><p>它们接受的输入通常是MObject或者MDagPath（可以通过看官方文档查询）<br>这个上面的英语是 inputs to function set<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653137067965-99a6adbe-533c-49a1-9aab-45316b42eb99.png#averageHue=%23050505&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=312&amp;id=udc0ddb8b&amp;originHeight=312&amp;originWidth=584&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33457&amp;status=done&amp;style=none&amp;taskId=ubb669d48-c9d7-442c-9284-6246761f329&amp;title=&amp;width=584" alt="image.png"><br>MFnMesh接受的输入是MObject或者MDagPath<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653137271876-e14e18bb-d4a4-4f32-adee-455bc9712134.png#averageHue=%23c0c4c3&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=445&amp;id=u8052b4e0&amp;originHeight=445&amp;originWidth=1811&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=443192&amp;status=done&amp;style=none&amp;taskId=ud5c4c03c-743b-4b21-b9d3-07ee7e09333&amp;title=&amp;width=1811" alt="image.png"><br>而MFnDependencyNode能接受的输入只有MObject<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653137320474-2d3143dd-78b9-4eb8-8976-148f0ed3c518.png#averageHue=%23ebeeee&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=466&amp;id=u270af4c1&amp;originHeight=466&amp;originWidth=1757&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=484057&amp;status=done&amp;style=none&amp;taskId=ucfd650f7-fa6e-444d-83c6-801daa12f3e&amp;title=&amp;width=1757" alt="image.png"><br>CSDN上的一些知识点：<br>API文档的坑：MStatus(其实是很多人没仔细看文档的锅……)<br>如果在学习python api前没有认真看过maya官方文档的相关文档，就会对api文档中的mstatus感觉困惑，这个东西是嘛，我们怎么用，为什么到处都是。我就说一句：api方法中的mstatus，你用python时候就当它不存在！是的，就是无视，这设计到maya软件的整体设计问题。Maya中的程序异常处理是使用的status code而非exception(早年C++异常处理的锅，大家都不敢用，吃性能还不讨好，但是现在maya想换也做不到了，历史包袱严重)，也就是说本身需要语言处理的事情，maya的系统自行设计了一套处理机制，而异常的消息传递，就是靠的status code，也就是mstatus，这也是maya api中mstatus无处不在的原因。但是python不需要啊！Python有完备的异常处理机制，干嘛用status code。所以python api就没有mstatus，我们也就不需要管它。</p><p><a name="X0Jlh"></a></p><h2 id="MPlug与MPlugArray">MPlug与MPlugArray</h2><p>通过观看视频我理解的plug的意思应该就是模型对象的属性，分两种类型<br>network plug ： dependency node plug   意思是在DG中建立连接的属性<br>non-network plug ： user-defined plug 意思应该是用户自定义的属性，还没有建立连接。<br>看这里，一个节点有多种属性，然后如果我们要操控这些属性，需要通过这个手图案来管理属性，进行创建修改访问的操作。handle 代表了属性名字例如weight，height，subdivisionsWidth<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139225937-9f5b0179-954e-42cf-bd38-157e612cb4d3.png#averageHue=%230b0b0b&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=195&amp;id=u458fb14d&amp;originHeight=195&amp;originWidth=304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23208&amp;status=done&amp;style=none&amp;taskId=ub704ddab-6500-407a-bf78-1b5936dbd41&amp;title=&amp;width=304" alt="image.png"><br>理解了plug的意思后，接下来理解plug array的意思：<br>plug array通过看了视频我理解的是：<br>一个节点的<strong>plug array 是一个列表</strong>，列表中存在着这个节点的所有连接，包括输入和输出。<br>例如pPlaneShape1的输入 pPlaneShpae1.inMesh是plug array中的一个值。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653139633802-5ace5d83-d835-45c6-b22f-32bb9fbf58b3.png#averageHue=%2358492a&amp;clientId=u2d7ef19d-2bd1-4&amp;from=paste&amp;height=80&amp;id=ucb03fadf&amp;originHeight=80&amp;originWidth=444&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4719&amp;status=done&amp;style=none&amp;taskId=ubff743ef-c8d3-4e18-8d37-dcd2238c6f3&amp;title=&amp;width=444" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653122997614-17c2ac9e-49e9-4153-aed1-2592f3e2f451.png#averageHue=%23040404&amp;clientId=ub0d197af-217a-4&amp;from=paste&amp;height=837&amp;id=u2f180fa3&amp;originHeight=837&amp;originWidth=1434&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=187902&amp;status=done&amp;style=none&amp;taskId=udaedd2c0-2bde-4cb1-a2d5-946cb2d89f4&amp;title=&amp;width=1434" alt="image.png"></p><p><a name="F1xhz"></a></p><h2 id="案例">案例</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653124553672-713aa0a8-831d-460a-b959-c45bf4d001d6.png#averageHue=%231b1a19&amp;clientId=ub0d197af-217a-4&amp;from=paste&amp;height=700&amp;id=DitNZ&amp;originHeight=700&amp;originWidth=1425&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=168236&amp;status=done&amp;style=none&amp;taskId=u660f4a87-8fc5-4f47-a1bb-0a7d5ad6dce&amp;title=&amp;width=1425" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669968246970-4e2f1fe8-5b2c-49d6-982f-0b388c7e14eb.png#averageHue=%23474746&amp;clientId=u2cf0e87e-69bf-4&amp;from=paste&amp;height=481&amp;id=ud3560693&amp;originHeight=433&amp;originWidth=1035&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=49763&amp;status=done&amp;style=none&amp;taskId=u5d6b96d6-87f4-4716-876d-c28742f5fd5&amp;title=&amp;width=1150.000030464597" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.创建一个 Selection List并将场景物体添加至SelectionList</span></span><br><span class="line">mSel = OpenMaya.MSelectionList()</span><br><span class="line">mSel.add(<span class="string">&quot;pPlane1&quot;</span>)</span><br><span class="line"><span class="comment"># 2.创建MObject和MDagPath</span></span><br><span class="line">mObj = OpenMaya.MObject() <span class="comment"># 创建一个空的mObj</span></span><br><span class="line">mDagPath = OpenMaya.MDagPath()</span><br><span class="line"><span class="comment"># 3.得到对象的依赖节点和dag路径</span></span><br><span class="line">mSel.getDependNode(<span class="number">0</span>,mObj)</span><br><span class="line">mSel.getDagPath(<span class="number">0</span>,mDagPath)</span><br><span class="line"><span class="built_in">print</span> mDagPath.fullPathName() <span class="comment"># 输出|pPlane1</span></span><br><span class="line"><span class="comment"># 4.Mesh function set 获得网格函数集</span></span><br><span class="line">mFnMesh = OpenMaya.MFnMesh(mDagPath)</span><br><span class="line"><span class="built_in">print</span> mFnMesh.fullPathName() <span class="comment"># 输出|pPlane1|pPlaneShape1</span></span><br><span class="line"><span class="comment"># 5.Dependency Node function set 获得依赖节点函数集</span></span><br><span class="line">mFnDependNode = OpenMaya.MFnDependencyNode(mObj)</span><br><span class="line"><span class="built_in">print</span> mFnDependNode.name() <span class="comment"># 输出pPlane1,pPlane1是模型的transform节点,它不需要dagpath因此只需要使用name方法就可以了</span></span><br><span class="line"><span class="comment"># 6.获取shape节点的所有连接</span></span><br><span class="line">mPlugArray = OpenMaya.MPlugArray() <span class="comment"># 创建一个MPlugArray对象来管理shape节点的输入输出</span></span><br><span class="line">mFnMesh.getConnections(mPlugArray) </span><br><span class="line">mPlugArray.length() <span class="comment"># 输出pPlaneShape1节点的连接个数 2</span></span><br><span class="line"><span class="built_in">print</span> mPlugArray[<span class="number">0</span>].name() <span class="comment"># 输出pPlaneShape1.instObjGroups[0] 它是shape节点的输出</span></span><br><span class="line"><span class="built_in">print</span> mPlugArray[<span class="number">1</span>].name() <span class="comment"># 输出pPlaneShape1.inMesh 它是shape节点的输入</span></span><br><span class="line"></span><br><span class="line">mPlugArray2 = OpenMaya.MPlugArray() <span class="comment"># 再创建一个MPlugArray对象来管理用来polyPlane节点的输入输出</span></span><br><span class="line">mPlugArray[<span class="number">1</span>].connectedTo(mPlugArray2,<span class="literal">True</span>,<span class="literal">False</span>) <span class="comment"># 寻找mPlugArray[1]为目标的所有plug并存入mPlugArray2中，True，False意思是目标为True，源为False，意思是mPlugArray[1]是下游，不是上游</span></span><br><span class="line"><span class="built_in">print</span> mPlugArray2.length() <span class="comment"># 输出1</span></span><br><span class="line"><span class="comment"># 不能使用：len(mPlugArray2)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mPlugArray2[<span class="number">0</span>].name() <span class="comment"># 输出polyPlane1.output</span></span><br><span class="line"></span><br><span class="line">mObj2 = mPlugArray2[<span class="number">0</span>].node() <span class="comment"># 得到MObject类型指向polyPlane1</span></span><br><span class="line"></span><br><span class="line">mFnDependNode2 = OpenMaya.MFnDependencyNode(mObj2) <span class="comment"># 为polyPlane1创建节点对象函数集</span></span><br><span class="line"><span class="built_in">print</span> mFnDependNode2.name() <span class="comment"># 输出polyPlane1</span></span><br><span class="line"></span><br><span class="line">mPlug_width = mFnDependNode2.findPlug(<span class="string">&quot;width&quot;</span>) <span class="comment"># 找到polyPlane1的width属性</span></span><br><span class="line">mPlug_height = mFnDependNode2.findPlug(<span class="string">&quot;height&quot;</span>) <span class="comment"># 找到polyPlane1的height属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mPlug_width.asInt() <span class="comment"># 输出polyPlane1的width的值</span></span><br><span class="line"><span class="built_in">print</span> mPlug_height.asInt() <span class="comment"># 输出polyPlane1的height的值</span></span><br><span class="line"></span><br><span class="line">mPlug_subWidth = mFnDependNode2.findPlug(<span class="string">&quot;subdivisionsWidth&quot;</span>) <span class="comment"># 找到polyPlane1的subdivisionsWidth属性</span></span><br><span class="line">mPlug_subHeight = mFnDependNode2.findPlug(<span class="string">&quot;subdivisionsHeight&quot;</span>) <span class="comment"># # 找到polyPlane1的subdivisionsHeight属性</span></span><br><span class="line">mPlug_subWidth.setInt(<span class="number">10</span>) <span class="comment"># 设置subdivisionsWidth值为10</span></span><br><span class="line">mPlug_subHeight.setInt(<span class="number">10</span>) <span class="comment"># 设置subdivisionHeight值为10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> mPlug_subWidth.asInt() <span class="comment"># 得到mPlug_subWidth的整数值并输出</span></span><br><span class="line"><span class="built_in">print</span> mPlug_subHeight.asInt() <span class="comment"># 得到mPlug_subHeight的整数值并输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="WBcTy"></a></p><h1>第五集 命令通信流</h1><p><strong>编写命令插件有三个重要的事情</strong><br>1、function 函数<br>2、initialization 初始化  /  registration 注册<br>3、 Un-initialization 取消初始化/ De-registration取消注册<br><strong>什么是initialization/registration，什么是Un-initialization/De-registration？</strong><br>给maya core发送内容叫initialization或者叫registration<br>从maya core 移除内容叫Un-initialization或者叫De-registration<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654567983120-7ae8bca6-3bc4-41ff-9d0b-3e9f64abd33f.png#averageHue=%23070707&amp;clientId=ua5a358c9-400c-4&amp;from=paste&amp;height=542&amp;id=u04d779ec&amp;originHeight=542&amp;originWidth=557&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63659&amp;status=done&amp;style=none&amp;taskId=u3d808fc5-a0af-4fc2-8269-ce4aa2c109f&amp;title=&amp;width=557" alt="image.png"><br><strong>命令通信流</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654568135472-a043ff60-8da1-4f98-8029-3db282de0623.png#averageHue=%236d6b5e&amp;clientId=ua5a358c9-400c-4&amp;from=paste&amp;height=645&amp;id=u81f06b24&amp;originHeight=645&amp;originWidth=654&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=154797&amp;status=done&amp;style=none&amp;taskId=u92434028-1c71-4d50-a707-535c573e18b&amp;title=&amp;width=654" alt="image.png"><br>流程：写了一个Class，然后根据Class创建对象，然后我们会赋予指向这个实例的指针（这对于注册这个命令插件是有很大帮助的），然后我们会要求maya生成一个Handle （MObject）抓住指针，然后这个handle会从maya core 中带来实例<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654568454024-b97c2b67-2df4-4955-a08c-ffd307bfd6a0.png#averageHue=%23030302&amp;clientId=ua5a358c9-400c-4&amp;from=paste&amp;height=1322&amp;id=u7f352b5f&amp;originHeight=1322&amp;originWidth=2569&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=266213&amp;status=done&amp;style=none&amp;taskId=u660bc2f1-0754-4848-8c28-9696240a0ac&amp;title=&amp;width=2569" alt="image.png"><br><a name="tHYsJ"></a></p><h1>第六集 编写命令插件（跟第五集相关联）</h1><p>目的：通过配合MPxCommand写一个命令，然后保存好并加载进maya的插件中以后，就可以通过maya.cmds直接使用这个命令。比如通过MpxCommand写了一个输出hello world的功能，写好保存加载好以后，就可以直接通过cmds使用那个功能来输出hello world。总之，这节课的目的就是教我们如何扩展maya的命令也就是编写命令插件。<br>经过上一集的介绍，我们也大概了解了maya的内部流程，因此我们通过这个流程来编写命令插件。<br>所需要的编写规范可以参考一下官方给的范例：<a href="https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_py_ref_scripted_2hello_world_cmd_8py_example_html">https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_py_ref_scripted_2hello_world_cmd_8py_example_html</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654585168421-378f7b25-d83e-4a87-80af-5965c8c63712.png#averageHue=%23070707&amp;clientId=ua5a358c9-400c-4&amp;from=paste&amp;height=611&amp;id=uee806a44&amp;originHeight=611&amp;originWidth=1229&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=249000&amp;status=done&amp;style=none&amp;taskId=u6daf5f25-c46a-443a-9d07-d90101fcb7a&amp;title=&amp;width=1229" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 当制作自定义的命令时需要导入此类来制作</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">commandName = <span class="string">&quot;pluginCommand&quot;</span>  <span class="comment"># 定义命令的名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pluginCommand</span>(OpenMayaMPx.MPxCommand):  <span class="comment"># 创建自定义的命令需要继承MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxCommand.__init__(<span class="variable language_">self</span>) <span class="comment"># 初始化此自定义类的同时也需要初始化MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>): <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;doIt...&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdCreator</span>():  <span class="comment"># 为实例化的类创建指针</span></span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(pluginCommand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(commandName, cmdCreator)  <span class="comment"># 使用函数库中的注册命令，来注册我们自定义的命令，需要命令的名字和指向命令的指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + commandName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(commandName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + commandName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码完成后需要通过脚本编辑器将它们保存为脚本文件。<br><strong>通过UI加载这个脚本文件</strong><br>进入插件管理器，选择浏览，选择我们刚才保存的脚本文件。记载后就可以在脚本编辑器中使用这个自定义的命令了。<br>范例：<br>import maya.cmds as cmds<br>cmds.pluginCommand()<br>结果输出：doIt…<br><strong>通过python命令加载脚本文件</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654591451689-7b0bff27-6b57-4778-a67a-301fae10a797.png#averageHue=%2344412a&amp;clientId=ua5a358c9-400c-4&amp;from=paste&amp;height=104&amp;id=uc6d364f2&amp;originHeight=104&amp;originWidth=990&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=83902&amp;status=done&amp;style=none&amp;taskId=ufd5b8614-b788-4ca3-8fc6-e14187f8430&amp;title=&amp;width=990" alt="image.png"><br>其中参数为脚本文件的路径<br><a name="IqhGb"></a></p><h1>第七集 迭代器</h1><p>一些概念在TD技能学院上面介绍了，这里就不介绍了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 实现打印出完整的场景层次结构</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Dag迭代器，第一个参数指定迭代器的迭代类型是深度优先还是广度优先，第二个参数是指定迭代器迭代过滤类型，kInvalid意思是不过滤</span></span><br><span class="line">dagIterator = OpenMaya.MItDag(OpenMaya.MItDag.kBreadthFirst, OpenMaya.MFn.kInvalid)</span><br><span class="line"><span class="comment"># 创建一个dagNode的函数库提供给dagNode类型的对象使用(目前为空)</span></span><br><span class="line">dagNodeFn = OpenMaya.MFnDagNode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">not</span> dagIterator.isDone()):</span><br><span class="line">    currentObj = dagIterator.currentItem()  <span class="comment"># currentObj代表着当前迭代对象类型为MObject</span></span><br><span class="line">    depth = dagIterator.depth()  <span class="comment"># depth代表着当前节点在DAG中相对于根节点的高度或深度</span></span><br><span class="line">    dagNodeFn.setObject(currentObj)  <span class="comment"># 为当前迭代对象提供函数库,函数库能够针对当前迭代对象使用方法</span></span><br><span class="line"></span><br><span class="line">    name = dagNodeFn.name()  <span class="comment"># 得到当前迭代对象的名字</span></span><br><span class="line">    <span class="built_in">type</span> = currentObj.apiTypeStr()  <span class="comment"># 得到当前迭代对象的类型</span></span><br><span class="line">    path = dagNodeFn.fullPathName()  <span class="comment"># 返回一个字符串，表示从dag的根到此对象的完整路径。</span></span><br><span class="line"></span><br><span class="line">    printOut = <span class="string">&quot;&quot;</span>  <span class="comment"># 定义一个printOut对象来当要输出信息的对象</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, depth):  <span class="comment"># 根据当且迭代对象的深度为其增加相应个数的箭头来表示</span></span><br><span class="line">        printOut += <span class="string">&quot;------&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    printOut += name + <span class="string">&quot; : &quot;</span> + <span class="built_in">type</span>  <span class="comment"># 输出格式为名字加类型</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> printOut</span><br><span class="line">    dagIterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>再复习一下上一集的编写命令插件<br>将制作输出一个字符串命令改为输出当前场景的完整层次结构。<br>就是将print &quot;doIt…&quot;更改为这节的功能代码然后更改一下当时定义命令的名字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 当制作自定义的命令时需要导入此类来制作</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">commandName = <span class="string">&quot;printHierarchy&quot;</span>  <span class="comment"># 定义命令的名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pluginCommand</span>(OpenMayaMPx.MPxCommand):  <span class="comment"># 创建自定义的命令需要继承MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxCommand.__init__(<span class="variable language_">self</span>) <span class="comment"># 初始化此自定义类的同时也需要初始化MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>): <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        <span class="comment"># 创建一个Dag迭代器，第一个参数指定迭代器的迭代类型是深度优先还是广度优先，第二个参数是指定迭代器迭代过滤类型，kInvalid意思是不过滤</span></span><br><span class="line">        dagIterator = OpenMaya.MItDag(OpenMaya.MItDag.kBreadthFirst, OpenMaya.MFn.kInvalid)</span><br><span class="line">        <span class="comment"># 创建一个dagNode的函数库提供给dagNode类型的对象使用(目前为空)</span></span><br><span class="line">        dagNodeFn = OpenMaya.MFnDagNode()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">not</span> dagIterator.isDone()):</span><br><span class="line">            currentObj = dagIterator.currentItem()  <span class="comment"># currentObj代表着当前迭代对象类型为MObject</span></span><br><span class="line">            depth = dagIterator.depth()  <span class="comment"># depth代表着当前节点在DAG中相对于根节点的高度或深度</span></span><br><span class="line">            dagNodeFn.setObject(currentObj)  <span class="comment"># 为当前迭代对象提供函数库,函数库能够针对当前迭代对象使用方法</span></span><br><span class="line"></span><br><span class="line">            name = dagNodeFn.name()  <span class="comment"># 得到当前迭代对象的名字</span></span><br><span class="line">            <span class="built_in">type</span> = currentObj.apiTypeStr()  <span class="comment"># 得到当前迭代对象的类型</span></span><br><span class="line">            path = dagNodeFn.fullPathName()  <span class="comment"># 返回一个字符串，表示从dag的根到此对象的完整路径。</span></span><br><span class="line"></span><br><span class="line">            printOut = <span class="string">&quot;&quot;</span>  <span class="comment"># 定义一个printOut对象来当要输出信息的对象</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, depth):  <span class="comment"># 根据当且迭代对象的深度为其增加相应个数的箭头来表示</span></span><br><span class="line">                printOut += <span class="string">&quot;------&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">            printOut += name + <span class="string">&quot; : &quot;</span> + <span class="built_in">type</span>  <span class="comment"># 输出格式为名字加类型</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span> printOut</span><br><span class="line">            dagIterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdCreator</span>():  <span class="comment"># 为实例化的类创建指针</span></span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(pluginCommand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(commandName, cmdCreator)  <span class="comment"># 使用函数库中的注册命令，来注册我们自定义的命令，需要命令的名字和指向命令的指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + commandName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(commandName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + commandName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="KwVk8"></a></p><h1>第八集 带参数的自定义命令</h1><p>命令与参数：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654654142735-9db6408b-637b-4325-b4e9-4582e9359024.png#averageHue=%23060606&amp;clientId=ucf657a1b-3cc9-4&amp;from=paste&amp;height=412&amp;id=ub91f598e&amp;originHeight=412&amp;originWidth=891&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=99488&amp;status=done&amp;style=none&amp;taskId=ud0438dce-50e5-42e2-8c50-c3e4ee762b1&amp;title=&amp;width=891" alt="image.png"><br><a name="pOGMJ"></a></p><h2 id="MSyntax和MArgDatabase">MSyntax和MArgDatabase</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654654751391-053205e6-58e7-4e4c-ab2a-6df862605f10.png#averageHue=%23070707&amp;clientId=ucf657a1b-3cc9-4&amp;from=paste&amp;height=619&amp;id=ub6dfa1c1&amp;originHeight=619&amp;originWidth=1046&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=275699&amp;status=done&amp;style=none&amp;taskId=ue5932f12-e5c2-45db-af62-beff1bdc73e&amp;title=&amp;width=1046" alt="image.png"><br>parsing：语法分析<br>storing：储存<br>retrieving：检索<br>通过MSyntax定义我们的脚本命令接受什么类型的flag还有arguments还有object，然后maya会判断这个传入的参数是否可以接受。<br>MArgDatabase是一个类，它可以分析储存与检索flag和flag arguments 和object<br>如果我们更加深入地了解MArgDatabase，我们会发现它派生了MArgParser类<br>通过MSyntax和MArgDatabase我们可以接受标志参数和对象并解析他们并存储他们，基于这些值我们可以执行某些操作。<br><a name="PZWNj"></a></p><h2 id="maya-的undo-和redo">maya 的undo 和redo</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654657249311-83584b52-bb25-4c79-8b56-137deaba4407.png#averageHue=%23323131&amp;clientId=ucf657a1b-3cc9-4&amp;from=paste&amp;height=415&amp;id=ucf17a14b&amp;originHeight=415&amp;originWidth=1004&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=76752&amp;status=done&amp;style=none&amp;taskId=u2b2f7b2f-3994-431d-bd2c-95ba9e19808&amp;title=&amp;width=1004" alt="image.png"><br>maya在执行一个命令时，undo（撤销）框架下会存储相同的命令，当执行undo命令时，undo框架下的命令将会移动到redo框架上面。<br>当我们自己自定义一个命令时也要同时定义一个undo和redo函数。<br><a name="vGebW"></a></p><h2 id="新增代码过程">新增代码过程</h2><p>1.首先在新建的命令类之外定义一个syntaxCreator函数，写一个MSyntax类的对象，为这个对象定义新增的标志（flag），然后返回这个对象。<br>2.在初始化注册函数中的注册方法中新增刚才定义的带标志的语法对象（通过synaxCreator函数来得到(不需要在函数后面加括号)）。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654761391104-8b281824-2418-4e86-b894-7fd9095e2036.png#averageHue=%23040303&amp;clientId=uf9589504-71a5-4&amp;from=paste&amp;height=958&amp;id=u0f0c1ab2&amp;originHeight=958&amp;originWidth=1096&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=127693&amp;status=done&amp;style=none&amp;taskId=uefb6751e-3248-484e-b28e-cbc46f0141f&amp;title=&amp;width=1096" alt="image.png"><br>3.在命令类之内新建一个argmentParser（参数解析器）函数用来解析argList，通过MArgDatabase类中的方法，来判断传入的标志与参数。<br>4.在doIt函数中首先使用这个argmentParser函数来解析参数，然后根据参数的内容有无（默认参数为None）来决定执行redoIt（真正的实现执行功能的函数）,之所以使用将实现功能的命令都放到redoIt函数中是因为当我们执行了undo（撤销）操作后会调用undoIt函数，然后如果再使用redo（重做；取消撤销）操作后会执行redoIt函数，redo后就需要再次实现功能了，因此把功能命令都放到redoIt函数中，doIt函数调用redoIt就好了。<br>5.redoIt函数中的逻辑如下：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654783736392-7b1ddd64-5d06-4be1-bf55-6fb041a44c93.png#averageHue=%23080808&amp;clientId=u5ef47344-949c-4&amp;from=paste&amp;height=462&amp;id=uae6bc522&amp;originHeight=462&amp;originWidth=1183&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=180631&amp;status=done&amp;style=none&amp;taskId=u6ccbf6f1-c885-4383-bde0-aa40fb9a37a&amp;title=&amp;width=1183" alt="image.png"><br>首先读取所选择的物体，然后读取物体的点的位置信息，然后创建一个粒子发射系统，然后将粒子系统发射的粒子移动到物体点的位置上去。<br>6.定义isUndoable函数，返回True，意思是定义我们要新加的功能是可以撤销的。<br>7.定义undoIt函数，当我们执行撤销操作时会调用这个函数。<br>8.Maya api中MStatus的更新<a href="https://zhuanlan.zhihu.com/p/508453168">https://zhuanlan.zhihu.com/p/508453168</a><br>在2013后的版本中，Maya_api将MStatus从库中删除了，在编写脚本时要用python自带的异常捕获机制来代替。<br>若继续使用MStatus会报错‘module’ object has no attribute ‘MStatus’<br>简单的代替方法：<br>原：OpenMaya.MStatus.kUnKonwnParameter更改为return ‘unknown’<br>原OpenMaya.MStatus.kSuccess的，直接删掉就好了。<br><a name="FoNsq"></a></p><h2 id="全部代码">全部代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 这个命令是制作特效，将顶点转换成粒子</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 当制作自定义的命令时需要导入此类来制作</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaFX <span class="keyword">as</span> OpenMayaFX</span><br><span class="line"></span><br><span class="line">commandName = <span class="string">&quot;vertexPartial&quot;</span>  <span class="comment"># 定义命令的名字</span></span><br><span class="line"></span><br><span class="line">kHelpFlag = <span class="string">&quot;-h&quot;</span></span><br><span class="line">kHelpLongFlag = <span class="string">&quot;-help&quot;</span></span><br><span class="line">kSparseFlag = <span class="string">&quot;-s&quot;</span></span><br><span class="line">kSparseLongFlag = <span class="string">&quot;-sparse&quot;</span>  <span class="comment"># 这个标志用来控制每多少顶点生成一个粒子</span></span><br><span class="line">helpMessage = <span class="string">&quot;This command is used to attach a particle on each vertex of a poly mesh&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">pluginCommand</span>(OpenMayaMPx.MPxCommand):  <span class="comment"># 创建自定义的命令需要继承MPxCommand</span></span><br><span class="line">    sparse = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxCommand.__init__(<span class="variable language_">self</span>)  <span class="comment"># 初始化此自定义类的同时也需要初始化MPxCommand</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">argumentParser</span>(<span class="params">self, argList</span>):  <span class="comment"># 分析参数的作用</span></span><br><span class="line">        syntax = <span class="variable language_">self</span>.syntax()  <span class="comment"># 使用继承的MPxCommand中的函数</span></span><br><span class="line">        parsedArguments = OpenMaya.MArgDatabase(syntax, argList)  <span class="comment"># 创建MArgDatabase对象接收传入的参数</span></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kSparseFlag):  <span class="comment"># 判断传入的对应的标志</span></span><br><span class="line">            <span class="variable language_">self</span>.sparse = parsedArguments.flagArgumentDouble(kSparseFlag, <span class="number">0</span>)  <span class="comment"># flagArgumentDouble接收两个参数，第二个是序列</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kSparseLongFlag):</span><br><span class="line">            <span class="variable language_">self</span>.sparse = parsedArguments.flagArgumentDouble(kSparseFlag, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kHelpFlag):  <span class="comment"># 如果标志是help就输出帮助信息</span></span><br><span class="line">            <span class="variable language_">self</span>.setResult(helpMessage)  <span class="comment"># 返回输出帮助信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> parsedArguments.isFlagSet(kHelpLongFlag):</span><br><span class="line">            <span class="variable language_">self</span>.setResult(helpMessage)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isUndoable</span>(<span class="params">self</span>):  <span class="comment"># 设置为可以撤销的命令</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undoIt</span>(<span class="params">self</span>):  <span class="comment"># 执行撤销操作时的步骤</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;undo&quot;</span></span><br><span class="line">        mFnDagNode = OpenMaya.MFnDagNode(<span class="variable language_">self</span>.mobj_particle)  <span class="comment"># 为创建的粒子系统绑定函数库</span></span><br><span class="line">        mDagMod = OpenMaya.MDagModifier()  <span class="comment"># 创建一个用来更改Dag的对象</span></span><br><span class="line">        mDagMod.deleteNode(mFnDagNode.parent(<span class="number">0</span>))  <span class="comment"># 删除通过redoIt函数创建的粒子系统的transform</span></span><br><span class="line">        mDagMod.doIt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">redoIt</span>(<span class="params">self</span>):  <span class="comment"># 这是主要实现功能的函数，放到redoIt是因为执行undo操作后如果再执行redo就会跳到这里，doit时也会使用这个redoIt函数</span></span><br><span class="line">        mSel = OpenMaya.MSelectionList()</span><br><span class="line">        mDagPath = OpenMaya.MDagPath()</span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh()</span><br><span class="line">        OpenMaya.MGlobal.getActiveSelectionList(mSel)  <span class="comment"># 使用全局方法中的获取选择的物体并添加到列表对象中的方法</span></span><br><span class="line">        <span class="keyword">if</span> mSel.length() &gt;= <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                mSel.getDagPath(<span class="number">0</span>, mDagPath)  <span class="comment"># 获取列表中的物体的dagPath并赋值</span></span><br><span class="line">                mFnMesh.setObject(mDagPath)  <span class="comment"># 将物体与函数库绑定</span></span><br><span class="line">            <span class="keyword">except</span>:  <span class="comment"># 如果选择的物体不是mesh那么会执行这个</span></span><br><span class="line">                <span class="built_in">print</span> <span class="string">&quot;Select a poly mesh&quot;</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果没有选择物体会执行这个</span></span><br><span class="line">            <span class="built_in">print</span> <span class="string">&quot;Select a poly mesh&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">        mPointArray = OpenMaya.MPointArray()  <span class="comment"># 创建一个点的数组对象</span></span><br><span class="line">        mFnMesh.getPoints(mPointArray, OpenMaya.MSpace.kWorld)  <span class="comment"># 将物体的点的位置信息赋予数组，在世界空间下</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># create a particle system</span></span><br><span class="line">        mFnParticle = OpenMayaFX.MFnParticleSystem()</span><br><span class="line">        <span class="variable language_">self</span>.mobj_particle = mFnParticle.create()  <span class="comment"># 通过粒子系统函数库中的create方法得到一个粒子发射器并且是Mobject类型并且是shape节点</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># To fix Maya bug</span></span><br><span class="line">        mFnParticle = OpenMayaFX.MFnParticleSystem(<span class="variable language_">self</span>.mobj_particle)</span><br><span class="line"></span><br><span class="line">        counter = <span class="number">0</span>  <span class="comment"># 创建一个变量用来记录粒子个数</span></span><br><span class="line">        <span class="comment"># 在for循环中使用xrange和range功能是一样的，xrange是python2独有的方法，xrange更节省性能，xrange与range的区别是xrange生成的是生成器而range是列表</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPointArray.length()):</span><br><span class="line">            <span class="keyword">if</span> i % <span class="variable language_">self</span>.sparse == <span class="number">0</span>:  <span class="comment"># 根据sparse的数值决定以多少顶点为单位发射粒子</span></span><br><span class="line">                mFnParticle.emit(mPointArray[i])</span><br><span class="line">                counter += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Total Points :&quot;</span> + <span class="built_in">str</span>(counter)</span><br><span class="line">        mFnParticle.saveInitialState()  <span class="comment"># 重置粒子的当前状态为初始状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>):  <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        <span class="variable language_">self</span>.argumentParser(argList)  <span class="comment"># 执行命令前先通过参数诊断功能诊断一下参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.sparse != <span class="literal">None</span>:  <span class="comment"># 如果给了sparse（标志）参数 那么就执行后面的命令</span></span><br><span class="line">            <span class="variable language_">self</span>.redoIt()  <span class="comment"># 之所以在doIt中使用redoIt是因为当我们执行undo操作后再redo操作时依然会执行我们的功能实现命令，因此将功能实现命令放到redoIt中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># creator</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmdCreator</span>():  <span class="comment"># 为实例化的类创建指针</span></span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(pluginCommand())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">syntaxCreator</span>():</span><br><span class="line">    <span class="comment"># create MSyntax object</span></span><br><span class="line">    syntax = OpenMaya.MSyntax()</span><br><span class="line">    <span class="comment"># collect/add the flags</span></span><br><span class="line">    syntax.addFlag(kHelpFlag, kHelpLongFlag)  <span class="comment"># 定义每个命令都需要的help标志（短名和长名，不需要定义接受的数据的类型）</span></span><br><span class="line">    syntax.addFlag(kSparseFlag, kSparseLongFlag, OpenMaya.MSyntax.kDouble)  <span class="comment"># 定义接受的flag以及接受的数据的类型</span></span><br><span class="line">    <span class="comment"># return MSyntax</span></span><br><span class="line">    <span class="keyword">return</span> syntax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.registerCommand(commandName, cmdCreator, syntaxCreator)  <span class="comment"># 使用函数库中的注册命令，来注册我们自定义的命令，需要命令的名字和指向命令的指针以及语法</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + commandName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(commandName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + commandName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="jU2gx"></a></p><h1>第九集  Dependency graph</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654827627060-a933b100-c7f9-4ea3-ae7b-b7fb1e48e9b2.png#averageHue=%23090909&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=155&amp;id=u5d27acdc&amp;originHeight=155&amp;originWidth=285&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18008&amp;status=done&amp;style=none&amp;taskId=ucd91a86b-1ead-4ecb-a54d-34aac3ed40f&amp;title=&amp;width=285" alt="image.png"><br><a name="Fo3yF"></a></p><h2 id="Dirty-Propagation-、Push-Pull-Mechanism、-Lazy-Evaluation">Dirty Propagation 、Push &amp; Pull Mechanism、 Lazy Evaluation</h2><p>这三个术语通过举例来理解：假如你必须洗衣服，然后走进洗衣房，你会看到那里有几个洗衣机几个干衣机和几个与干衣机相关的桶，它们上面还有计时器记录剩余的时间，你根据它们的剩余时间将它们标记为红色，当你真正去洗衣烘干放入桶中后你会将它们标记为绿色。这是Dirty propagation（红色）  以及 Push&amp;Pull Mechanism（绿色），这个过程叫LazyEvaluation<br>这样的好处是，当我们做出更新节点的操作时，maya只会更新操作所需要的节点，而不会对其他节点做操作，不会更新场景中的所有节点，这样减轻了性能消耗。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654828197676-5bd1d138-a72c-404d-9e93-2e7977496007.png#averageHue=%23060606&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=704&amp;id=u62b41d51&amp;originHeight=704&amp;originWidth=643&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=150878&amp;status=done&amp;style=none&amp;taskId=u2704fddb-5503-45e7-a3a5-15124ea6154&amp;title=&amp;width=643" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654828293828-b4e1dd36-5ac9-4893-9634-5e521c4ce087.png#averageHue=%230c0c0c&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=743&amp;id=uaaa775f5&amp;originHeight=743&amp;originWidth=687&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=153868&amp;status=done&amp;style=none&amp;taskId=u653c2866-8142-4323-b419-00e4b94cb8f&amp;title=&amp;width=687" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654829047593-e83a4b91-8c03-447b-b015-1aaf5ace3807.png#averageHue=%230e0b0b&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=729&amp;id=u51ce4810&amp;originHeight=729&amp;originWidth=599&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=136664&amp;status=done&amp;style=none&amp;taskId=udf5fedaa-0711-4aa3-8a1b-f11c8382113&amp;title=&amp;width=599" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654829067445-7c407b6b-329f-45a6-bfeb-d1a22082f8a7.png#averageHue=%23050404&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=710&amp;id=uc6032233&amp;originHeight=710&amp;originWidth=1277&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=216658&amp;status=done&amp;style=none&amp;taskId=ud10c9a92-52c1-4968-8b86-796a12fa615&amp;title=&amp;width=1277" alt="image.png"><br><a name="wt2Ut"></a></p><h1>第十集 Writing Custom/DG Nodes</h1><p><a name="e08Na"></a></p><h2 id="什么是Dependency-graph-node：">什么是Dependency graph node：</h2><p>就是一个节点，有数据，有连接接口，有处理数据的能力。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654831547814-0d6a39ed-e95e-49bb-9947-daa7ec027d30.png#averageHue=%23060606&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=412&amp;id=u43e0607a&amp;originHeight=412&amp;originWidth=1173&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=112777&amp;status=done&amp;style=none&amp;taskId=u6097b8ec-e312-4659-b6c1-e56bc862c05&amp;title=&amp;width=1173" alt="image.png"><br><a name="RTno9"></a></p><h2 id="设计一个Dependency-graph-node">设计一个Dependency graph node</h2><p>设计一个Dependency graph node 的过程和创建一个自定义命令差不多：<br>自定义的类需要继承MPxNode，__init__以及compute函数（类似与doIt函数），compute函数为节点最核心的方法，我们所有的算法都要存到这里通过计算返回不同的结果。<br>然后类外需要定义的函数：<br>1.creator function 2.initialize函数（初始化属性）3.initialize plugin（注册） 4.uninitialize plugin（取消注册）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838003301-9b0a7b2e-04bb-4cdc-aaa7-0a3a467473d4.png#averageHue=%23080808&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=332&amp;id=u85c8ba3e&amp;originHeight=332&amp;originWidth=1219&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=121376&amp;status=done&amp;style=none&amp;taskId=u1797dd8c-2129-4843-9951-5d2ae8e6cb4&amp;title=&amp;width=1219" alt="image.png"><br><a name="m533a"></a></p><h2 id="针对不同的属性类型（数字，灯光，信息）使用不同的属性函数库">针对不同的属性类型（数字，灯光，信息）使用不同的属性函数库</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838073661-4256666b-70ce-477f-9f85-1e5eac5862ec.png#averageHue=%23ebebeb&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=1128&amp;id=ue31e219c&amp;originHeight=1128&amp;originWidth=1277&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=253204&amp;status=done&amp;style=none&amp;taskId=u1eab58d0-2417-437d-9052-74e81fe422a&amp;title=&amp;width=1277" alt="image.png"><br><a name="t1fWd"></a></p><h2 id="initialize-函数的构建过程">initialize  函数的构建过程</h2><p>首先创建一个MFnNumericAttribute函数库，通过这个函数库来创建属性并设置属性的名字初始值（传递给自定义类中创建的对应属性名字的MObject）然后定义特征（是否可读可写可存储可k关键帧），然后将属性绑定到节点上（因为通过MFn得到的属性是MObject类型）（因为我们的类继承了对应的MPx，因此使用继承的类中的addAttribute方法来讲MObject类型的属性附加到节点（类）上），最后设置电路（属性之间的联系，即定义输入（Input）输出（Output），通过使用继承的类中的attributeAffects方法，意思是方法内的属性参数，左边的属性影响右边的属性。Affects是影响的意思）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838266425-12951ed4-a954-41dd-b066-57260a918d47.png#averageHue=%230b0b0b&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=840&amp;id=uc0bad8e7&amp;originHeight=840&amp;originWidth=1191&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=274344&amp;status=done&amp;style=none&amp;taskId=ua08e7990-c545-48e2-94d0-a18f8a98b31&amp;title=&amp;width=1191" alt="image.png"><br><a name="hwfgy"></a></p><h2 id="nodeInitializer函数中的create-Attribute-创建属性的流程：">nodeInitializer函数中的create Attribute 创建属性的流程：</h2><p>通过MFn创建MObject类型的属性，然后设置属性，有readable（设置此属性是否可读。如果一个属性是可读的，那么它可以用作依赖图连接中的源。），writable（如果是可写的，那么这个属性就可以作为其他属性的目标（下游）），storable（设置此属性是否可存储。如果属性是可存储的，那么当节点存储到文件中时，它将被写入。这应该只在节点创建者的初始化调用中调用。），keyable（设置此属性是否应接受关键帧数据。这应该只在节点创建者的初始化调用中调用。可键属性将由AutoKey和Set Keyframe UI进行键控。非键属性可以防止用户通过为键控提供的明显UI设置键。不可键性并不会阻碍向属性添加键。）我们也可以设置属性的最小值与最大值。通过使用函数集中的setMin和setMax来达到。<br>这是创建属性后的默认的设置的属性<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655193938297-221ece78-d71e-4b8f-88b5-6c78d38175b0.png#averageHue=%23b7b4b1&amp;clientId=u0e472ba4-a7b1-4&amp;from=paste&amp;height=284&amp;id=u58f18f07&amp;originHeight=284&amp;originWidth=394&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=84002&amp;status=done&amp;style=none&amp;taskId=u6292d689-ac98-4ffb-bd3f-6090e5290d2&amp;title=&amp;width=394" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654840493422-83974a11-93df-44da-b48a-c0528aeaa594.png#averageHue=%230c0c0c&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=600&amp;id=ud30a105d&amp;originHeight=600&amp;originWidth=524&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=123043&amp;status=done&amp;style=none&amp;taskId=u94299b19-503b-4c67-b24b-dceb2de27e7&amp;title=&amp;width=524" alt="image.png"><br><a name="Dsvjn"></a></p><h2 id="实例：制作一个轮子节点">实例：制作一个轮子节点</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838653486-dca0b8bd-61ca-4e3a-b3f9-b88b3cdf6eef.png#averageHue=%234f5a64&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=244&amp;id=u96dabb16&amp;originHeight=244&amp;originWidth=732&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=127339&amp;status=done&amp;style=none&amp;taskId=u177c778c-52b2-4d81-8ca6-424199a44c8&amp;title=&amp;width=732" alt="image.png"><br>通过平移使轮子自动旋转<br>公式与节点大致形状：根据平移的距离来控制旋转的角度的多少（一个圆的周长的距离为360度）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654838799385-9aebdb70-5728-4a13-b88b-d20f5b4614dd.png#averageHue=%230c0c0c&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=548&amp;id=ub5bfe141&amp;originHeight=548&amp;originWidth=813&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=114294&amp;status=done&amp;style=none&amp;taskId=u5f34f97b-578b-471d-829d-4670f09fab6&amp;title=&amp;width=813" alt="image.png"><br>nodeId： 每个节点都应该有对应的ID来对应它，无论是maya的还是用户自定义的（UUID）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个节点，制作轮子效果</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;WheelNode&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x100fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WheelNode</span>(OpenMayaMPx.MPxNode):</span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    inRadius = OpenMaya.MObject()</span><br><span class="line">    inTranslate = OpenMaya.MObject()</span><br><span class="line">    outRotate = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, dataBlock</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        rotate = translate/(2*3.14*radius)*(-360)</span></span><br><span class="line"><span class="string">        :param plug: 节点属性</span></span><br><span class="line"><span class="string">        :param dataBlock:节点属性中的数据</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> plug == WheelNode.outRotate:</span><br><span class="line">            <span class="comment"># 通过指向节点属性的指针得到指向数据块（dataBlock）上的值的指针</span></span><br><span class="line">            dataHandleRadius = dataBlock.inputValue(WheelNode.inRadius)</span><br><span class="line">            dataHandleTranslate = dataBlock.inputValue(WheelNode.inTranslate)</span><br><span class="line"></span><br><span class="line">            inRadiusVal = dataHandleRadius.asFloat()</span><br><span class="line">            inTranslateVal = dataHandleTranslate.asFloat()</span><br><span class="line"></span><br><span class="line">            outRotate = <span class="built_in">float</span>(inTranslateVal) / <span class="built_in">float</span>(<span class="number">2</span> * <span class="number">3.14</span> * inRadiusVal) * (-<span class="number">360</span>)</span><br><span class="line"></span><br><span class="line">            dataHandleRotate = dataBlock.outputValue(WheelNode.outRotate)</span><br><span class="line"></span><br><span class="line">            dataHandleRotate.setFloat(outRotate)</span><br><span class="line">            dataBlock.setClean(plug)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;unknown&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, argList</span>):  <span class="comment"># 为自定义的命令创建功能，argList意思是参数列表</span></span><br><span class="line">        <span class="variable language_">self</span>.argumentParser(argList)  <span class="comment"># 执行命令前先通过参数诊断功能诊断一下参数</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.sparse != <span class="literal">None</span>:  <span class="comment"># 如果给了sparse（标志）参数 那么就执行后面的命令</span></span><br><span class="line">            <span class="variable language_">self</span>.redoIt()  <span class="comment"># 之所以在doIt中使用redoIt是因为当我们执行undo操作后再redo操作时依然会执行我们的功能实现命令，因此将功能实现命令放到redoIt中</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeCreator</span>():</span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(WheelNode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建translate属性，短名为t，数据类型为float，默认值为0.0，由自定义类中的inTranslate（MObject类型）来接收</span></span><br><span class="line">    WheelNode.inTranslate = mFnAttr.create(<span class="string">&quot;translate&quot;</span>, <span class="string">&quot;t&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    <span class="comment"># 设置节点属性是否可读可写可储存可k帧</span></span><br><span class="line">    <span class="comment"># 其中readable，writable，storable是默认为1的也可以不写。</span></span><br><span class="line">    mFnAttr.setReadable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setWritable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setStorable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    WheelNode.inRadius = mFnAttr.create(<span class="string">&quot;radius&quot;</span>, <span class="string">&quot;r&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setReadable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setWritable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setStorable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    WheelNode.outRotate = mFnAttr.create(<span class="string">&quot;rotate&quot;</span>, <span class="string">&quot;rot&quot;</span>, OpenMaya.MFnNumericData.kFloat)  <span class="comment"># 因为是输出属性所以不能定义默认值</span></span><br><span class="line">    mFnAttr.setReadable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setWritable(<span class="number">0</span>)</span><br><span class="line">    mFnAttr.setStorable(<span class="number">0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    WheelNode.addAttribute(WheelNode.inRadius)</span><br><span class="line">    WheelNode.addAttribute(WheelNode.inTranslate)</span><br><span class="line">    WheelNode.addAttribute(WheelNode.outRotate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    <span class="comment"># 设计电路板，这里设计的是，inRadius和inTranslate均与outRotate进行连接</span></span><br><span class="line">    WheelNode.attributeAffects(WheelNode.inRadius, WheelNode.outRotate)</span><br><span class="line">    WheelNode.attributeAffects(WheelNode.inTranslate, WheelNode.outRotate)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register command :&quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeName)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register command:&quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ZOBPy"></a></p><h2 id="创建自定义节点后的使用流程">创建自定义节点后的使用流程</h2><p>通过这个命令加载自定义节点<br>import maya.cmds as cmds<br>cmds.loadPlugin(r’D:\ZhangRuiChen\pythonProject\<a href="http://wheelNode.py">wheelNode.py</a>’)<br>然后就可以在节点编辑器中通过自定义节点名字搜索到这个节点了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654850231689-4d983292-0871-4ddc-8a89-a891ff062b9d.png#averageHue=%23353535&amp;clientId=uef2f4691-1f38-4&amp;from=paste&amp;height=379&amp;id=u71ae120e&amp;originHeight=379&amp;originWidth=930&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54039&amp;status=done&amp;style=none&amp;taskId=u8c0a18b0-116b-4de5-9260-4bfd35da862&amp;title=&amp;width=930" alt="image.png"><br>这里的unitConversion1是当我们的WheelNode节点的Rotate属性连接到pCylinder1中的RotateZ上后maya自动生成的。<br>连接好后就可以实现功能了。<br><a name="IA4tx"></a></p><h1>第十一集 Deformer 变形器</h1><p>什么是变形器<br>变形器是一个节点，下图是一个变形器所必须带有的属性<br>Input是几何体的输入，envelope控制变形的程度，范围是0~1，为0时不变形，为1时完全按照变形器的计算来变形。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654954141595-9f886125-2bf0-4c0a-916e-f4fabc55a75a.png#averageHue=%23050505&amp;clientId=u7e71c804-4cbe-4&amp;from=paste&amp;height=569&amp;id=ub6e2995f&amp;originHeight=569&amp;originWidth=989&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=68092&amp;status=done&amp;style=none&amp;taskId=u8d463e5d-a017-4bac-818a-1d58d371217&amp;title=&amp;width=989" alt="image.png"><br>我们的物体内部存在两个东西，一个groupId，一个inputGeom（这个是我们需要的）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654954411580-4d2ca110-7b7d-4a60-be86-d56acc21327b.png#averageHue=%230a0a0a&amp;clientId=u7e71c804-4cbe-4&amp;from=paste&amp;height=406&amp;id=u0afe2b74&amp;originHeight=406&amp;originWidth=422&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73595&amp;status=done&amp;style=none&amp;taskId=u4e8e7207-3ffd-4c98-b8c4-fba2e4fabc6&amp;title=&amp;width=422" alt="image.png"><br>编写代码的框架：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654954490051-909892d3-7b1b-483a-a180-f16b6b087def.png#averageHue=%230c0c0c&amp;clientId=u7e71c804-4cbe-4&amp;from=paste&amp;height=551&amp;id=u3b9e0f86&amp;originHeight=551&amp;originWidth=383&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=95145&amp;status=done&amp;style=none&amp;taskId=ube931fc2-1f40-4e38-8b18-9f55eaffd94&amp;title=&amp;width=383" alt="image.png"><br><a name="Iednj"></a></p><h1>第十二~十五集 编写自定义变形器</h1><p>可以参考的网站<a href="https://www.xingyulei.com/post/maya-api-deformer/">https://www.xingyulei.com/post/maya-api-deformer/</a><br>自定义变形器的设计：<br>除默认自带的属性外，额外添加的自定义属性：amplitude（振幅，浮点型，范围是0~1），Displace（位移，浮点型，范围是0~10）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655193336188-7a98e85a-c013-4cb5-8432-d991431d7311.png#averageHue=%23151515&amp;clientId=u0e472ba4-a7b1-4&amp;from=paste&amp;height=744&amp;id=ufdb4ea8c&amp;originHeight=744&amp;originWidth=1032&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=133442&amp;status=done&amp;style=none&amp;taskId=uedd49e5f-48eb-490e-92d3-21020b36bc9&amp;title=&amp;width=1032" alt="image.png"><br>其中实现初始化功能的函数的内容步骤和自定义节点的步骤是相同的，有一点区别就是变形器节点具有默认的outputGeom属性，因此我们没必要再创建一个输出的属性，我们可以直接利用这个默认的outputGemo属性，那么怎么使用这个outputGemo属性呢？<br>教程中首先介绍了SWIG，然后使用了语句<br>SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   <br>是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的<br>Autodesk 为我们提供了一种使用swig使用这些属性的方法<br>通过这个语句:outputGemo = OpenMayaMPx.cvar.MPxDeformerNode_outputGeom<br><a name="DrdaR"></a></p><h2 id="类中的deform函数的实现过程">类中的deform函数的实现过程</h2><p>从左到右依次是self,   dataBlock,    geoIterator,    matrix,    geometryIndex<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655260910217-0fec322f-abc4-4d75-8b6a-28681c8e0621.png#averageHue=%23171616&amp;clientId=uf5ec6e2c-c0bc-4&amp;from=paste&amp;height=240&amp;id=u2b4fb92a&amp;originHeight=240&amp;originWidth=1944&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=118938&amp;status=done&amp;style=none&amp;taskId=uf164ec2e-e1d7-48c4-909a-55534ee6ff1&amp;title=&amp;width=1944" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655260672878-f903d98a-946d-45d1-b129-db85341c9766.png#averageHue=%23131212&amp;clientId=uf5ec6e2c-c0bc-4&amp;from=paste&amp;height=1121&amp;id=Eo736&amp;originHeight=1121&amp;originWidth=1264&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=264792&amp;status=done&amp;style=none&amp;taskId=u9e14e773-0081-448e-8ed8-b33828939e3&amp;title=&amp;width=1264" alt="image.png"><br>第一步将特殊的指针（dataHandileInputArray）指向变形器的Input数组，第二步通过geometryIndex跳到相应的元素，第三步（dataHandleInputElement）指向其中的特殊的dataBlock，第四步通过OpenMayaMPx.cvar.MPxDeformerNode_inputValue()找到它的inputGeom(变形器的默认节点)，然后通过.child方法将inputGeom的属性令dataHandleInputGeom指向。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655263186190-461fec6c-6512-48b2-b371-a111eb09630c.png#averageHue=%23171717&amp;clientId=uf5ec6e2c-c0bc-4&amp;from=paste&amp;height=1314&amp;id=u471a85c9&amp;originHeight=1314&amp;originWidth=2587&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=798745&amp;status=done&amp;style=none&amp;taskId=u7f3623cf-7ea3-47c4-baf3-7f8293186db&amp;title=&amp;width=2587" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655265745683-7bb9b012-8a4e-478e-8ebf-835a8be69097.png#averageHue=%23191918&amp;clientId=uf5ec6e2c-c0bc-4&amp;from=paste&amp;height=666&amp;id=u0c4ee2e2&amp;originHeight=666&amp;originWidth=1288&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=314979&amp;status=done&amp;style=none&amp;taskId=ua42216ec-9928-482c-852c-809b93056ed&amp;title=&amp;width=1288" alt="image.png"><br><a name="eP2I0"></a></p><h2 id="整体代码第一版">整体代码第一版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        dataHandleInputArray = dataBlock.inputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.inputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].x * envelopeValue</span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].y * envelopeValue</span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].z * envelopeValue</span><br><span class="line">            geoIterator.setPosition(pointPosition) </span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="sdAfs"></a></p><h2 id="优化后的代码">优化后的代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        <span class="comment"># 后来优化将inputArrayValue和inputValue都改为了output，可能是因为用output会自动检索最优路线吧</span></span><br><span class="line">        dataHandleInputArray = dataBlock.outputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.outputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mPointArray_meshVert = OpenMaya.MPointArray()  <span class="comment"># 创建一个空的存放点的数组</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].x * envelopeValue</span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].y * envelopeValue</span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].z * envelopeValue</span><br><span class="line">            <span class="comment"># geoIterator.setPosition(pointPosition)</span></span><br><span class="line">            mPointArray_meshVert.append(pointPosition)</span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line">        geoIterator.setAllPosiions(mPointArray_meshVert)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, deformerCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="YRcWy"></a></p><h2 id="增加了绘制功能的代码">增加了绘制功能的代码</h2><p>增加绘制功能需要两个步骤，第一步是读取几何体的所有顶点，第二步是使用权重值去计算。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655348913268-6601752e-a19d-44a1-a4e9-d8f0662e57ac.png#averageHue=%23050505&amp;clientId=u17945a8c-e2a9-4&amp;from=paste&amp;height=645&amp;id=u95c1b2a1&amp;originHeight=645&amp;originWidth=1808&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=188273&amp;status=done&amp;style=none&amp;taskId=ud329f60f-40e9-496c-a07f-10985e09b94&amp;title=&amp;width=1808" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655348400558-44f32f40-f000-4c88-b49f-cb8132434aef.png#averageHue=%23050505&amp;clientId=u17945a8c-e2a9-4&amp;from=paste&amp;height=518&amp;id=u4a540699&amp;originHeight=518&amp;originWidth=2038&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=187574&amp;status=done&amp;style=none&amp;taskId=uc82cfbe0-632d-4c01-8170-8803373f817&amp;title=&amp;width=2038" alt="image.png"><br>跟教程中的代码一样<br>教程中也就加了个weight = self.weightValue(dataBlock, geometryIndex, geoIterator.index())，然后通过weight来改变计算步骤，但是我的2018.5的版本maya无法实现绘制功能。<br>教程中有这个但是我的没有<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655357981634-2f3303d0-0bf3-4d5a-95d7-2656a96385d0.png#averageHue=%23444f4d&amp;clientId=u17945a8c-e2a9-4&amp;from=paste&amp;height=383&amp;id=ub8800dc4&amp;originHeight=383&amp;originWidth=966&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=336840&amp;status=done&amp;style=none&amp;taskId=uf5adc9f2-b610-4866-9b65-cf6505cbbcf&amp;title=&amp;width=966" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        <span class="comment"># 后来优化将inputArrayValue和inputValue都改为了output，可能是因为用output会自动检索最优路线吧</span></span><br><span class="line">        dataHandleInputArray = dataBlock.outputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.outputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mPointArray_meshVert = OpenMaya.MPointArray()  <span class="comment"># 创建一个空的存放点的数组</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line"></span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line">            weight = <span class="variable language_">self</span>.weightValue(dataBlock, geometryIndex, geoIterator.index())</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].x * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].y * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(geoIterator.index() + displaceValue) * amplitudeValue * \</span><br><span class="line">                              mFloatVectorArray_normal[geoIterator.index()].z * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            <span class="comment"># geoIterator.setPosition(pointPosition)</span></span><br><span class="line">            mPointArray_meshVert.append(pointPosition)</span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line">        geoIterator.setAllPositions(mPointArray_meshVert)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, deformerCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="wFxjF"></a></p><h2 id="为自定义变形器添加辅助对象">为自定义变形器添加辅助对象</h2><p>什么是辅助对象/节点  Accessary object/nodes<br>创建它是为了方便用户使用变形功能用的。<br>辅助对象节点需要有两个特征：<br>1.它是帮助变形器变形的。2.当辅助对象被删除时，变形器节点也应当一起被删除<br>因为它是帮助变形器获得变形的，因此我们需要将它用在deformer函数中的transform中<br>为了实现当辅助对象被删除时，变形器也一起被删除，应当将辅助对象的世界度量属性与变形器节点的矩阵属性关联起来。<br>在本例中辅助节点就是一个定位器，可以通过定位器x轴的移动从而改变变形器中的变形效果。<br>添加过程：首先需要为变形器创建矩阵属性， 刚开始和之前的节点属性添加过程一样，在节点初始化中新建矩阵属性函数库，通过函数库创建属性（创建的同时由类中定义的空的MObject对象来接收）并设置权限（mFnMatrixAttr.setStorable(0)mFnMatrixAttr.setConnectable(1)），然后设计连接线路。初始化完成后在类中通过dataBlock得到指向数据的handle（MObject），然后通过这个handle得到Matrix的值。<br>然后为了完成创建辅助对象节点，我们需要定义Deformer类中的两个函数(AccessoryNodeSetup，AccessoryAttribute)。然后通过在变形器类中读取辅助对象的矩阵属性中的变换属性的值来改变变形器的算法，从而实现辅助对象影响变形效果。</p><ol><li>AccessoryNodeSetup，这个函数是用来创建辅助对象物体，以及连接辅助对象的世界度量属性与变形器的矩阵属性</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655432605455-522c19a4-857c-4f4d-8244-f17e2c19ab56.png#averageHue=%23040404&amp;clientId=ub892ec0a-a81e-4&amp;from=paste&amp;height=506&amp;id=u3071a54d&amp;originHeight=506&amp;originWidth=1394&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=114336&amp;status=done&amp;style=none&amp;taskId=u6ae705cc-8421-471f-8a5e-7be26300feb&amp;title=&amp;width=1394" alt="image.png"><br>属性之间的连接：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655433502603-4bf82d23-95cf-4a15-b8a6-b51607a945dd.png#averageHue=%23040404&amp;clientId=ub892ec0a-a81e-4&amp;from=paste&amp;height=1001&amp;id=u972fcbec&amp;originHeight=1001&amp;originWidth=2359&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=423349&amp;status=done&amp;style=none&amp;taskId=u57a561ed-8833-49e1-903c-cf8bc7a8373&amp;title=&amp;width=2359" alt="image.png"><br>2.AccessoryAttribute，这个函数用来返回类中的MObject对象（Ripple.mObj_Matrix）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655432904503-ad1197bf-2ad1-4c5b-8f3f-660e93cddec9.png#averageHue=%23060606&amp;clientId=ub892ec0a-a81e-4&amp;from=paste&amp;height=626&amp;id=ua199e21a&amp;originHeight=626&amp;originWidth=910&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=111956&amp;status=done&amp;style=none&amp;taskId=uc6d956e5-98f0-4a53-a093-e9070fa5e5a&amp;title=&amp;width=910" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个变形器节点,通过调整ripple改变多边形的形状</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;RippleDeformer&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x102fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ripple</span>(OpenMayaMPx.MPxDeformerNode):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Commands ----&gt; MPxCommand</span></span><br><span class="line"><span class="string">    Custom   ----&gt; MPxNode</span></span><br><span class="line"><span class="string">    Deformer ----&gt; MPxDeformerNode</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 创建MObject类型的输入输出</span></span><br><span class="line">    mObj_Displace = OpenMaya.MObject()</span><br><span class="line">    mObj_Amplitude = OpenMaya.MObject()</span><br><span class="line">    mObj_Matrix = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxDeformerNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, dataBlock, geoIterator, matrix, geometryIndex</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        变形器的核心参数</span></span><br><span class="line"><span class="string">        :param dataBlock:数据块</span></span><br><span class="line"><span class="string">        :param geoIterator: 迭代器，例如遍历一个几何体的所有顶点时用的到</span></span><br><span class="line"><span class="string">        :param matrix: 矩阵   几何体的世界矩阵或受影响的网格</span></span><br><span class="line"><span class="string">        :param geometryIndex: 几何索引，当使用多个几何体时，所有几何体都进入这个属性</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">input</span> = OpenMayaMPx.cvar.MPxGeometryFilter_input</span><br><span class="line">        <span class="comment"># 1. Attach a handle to input Array Attribute</span></span><br><span class="line">        <span class="comment"># 1. 为输入数组属性附加handle</span></span><br><span class="line">        <span class="comment"># 后来优化将inputArrayValue和inputValue都改为了output，可能是因为用output会自动检索最优路线吧</span></span><br><span class="line">        dataHandleInputArray = dataBlock.outputArrayValue(<span class="built_in">input</span>)</span><br><span class="line">        <span class="comment"># 2. Jump to particular element</span></span><br><span class="line">        <span class="comment"># 2. 跳转到特定元素</span></span><br><span class="line">        dataHandleInputArray.jumpToElement(geometryIndex)</span><br><span class="line">        <span class="comment"># 3. Attach a handle to specific data block</span></span><br><span class="line">        <span class="comment"># 3. 将handle附加到特定的数据块</span></span><br><span class="line">        dataHandleInputElement = dataHandleInputArray.outputValue()</span><br><span class="line">        <span class="comment"># 4. Reach to the child - inputGeom</span></span><br><span class="line">        inputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_inputGeom</span><br><span class="line">        dataHandleInputGeom = dataHandleInputElement.child(inputGeom)</span><br><span class="line">        inMesh = dataHandleInputGeom.asMesh()</span><br><span class="line">        <span class="comment"># Envelope</span></span><br><span class="line">        envelope = OpenMayaMPx.cvar.MPxGeometryFilter_envelope</span><br><span class="line">        dataHandleEnvelope = dataBlock.inputValue(envelope)</span><br><span class="line">        envelopeValue = dataHandleEnvelope.asFloat()</span><br><span class="line">        <span class="comment"># Amplitude</span></span><br><span class="line">        dataHandleAmplitude = dataBlock.inputValue(Ripple.mObj_Amplitude)</span><br><span class="line">        amplitudeValue = dataHandleAmplitude.asFloat()</span><br><span class="line">        <span class="comment"># Displace</span></span><br><span class="line">        dataHandleDisplace = dataBlock.inputValue(Ripple.mObj_Displace)</span><br><span class="line">        displaceValue = dataHandleDisplace.asFloat()</span><br><span class="line">        <span class="comment"># Matrix</span></span><br><span class="line">        dataHandleMatrix = dataBlock.inputValue(Ripple.mObj_Matrix)</span><br><span class="line">        matrixValue = dataHandleMatrix.asMatrix()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 从矩阵中读取变换信息</span></span><br><span class="line">        mTransMatrix = OpenMaya.MTransformationMatrix(matrixValue)</span><br><span class="line">        translationValue = mTransMatrix.getTranslation(OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mFloatVectorArray_normal = OpenMaya.MFloatVectorArray()  <span class="comment"># 创建一个MFloatVectorArray的对象，getVertexNormals方法需要用到</span></span><br><span class="line">        mFnMesh = OpenMaya.MFnMesh(inMesh)</span><br><span class="line">        <span class="comment"># 第一个参数是angleWeighted，如果angleWeighted设置为false，则返回环绕面法线的简单平均值。第三个参数是设置空间为对象空间</span></span><br><span class="line">        mFnMesh.getVertexNormals(<span class="literal">False</span>, mFloatVectorArray_normal, OpenMaya.MSpace.kObject)</span><br><span class="line"></span><br><span class="line">        mPointArray_meshVert = OpenMaya.MPointArray()  <span class="comment"># 创建一个空的存放点的数组</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geoIterator.isDone():</span><br><span class="line">            pointPosition = geoIterator.position()</span><br><span class="line">            weight = <span class="variable language_">self</span>.weightValue(dataBlock, geometryIndex, geoIterator.index())</span><br><span class="line"></span><br><span class="line">            pointPosition.x = pointPosition.x + math.sin(</span><br><span class="line">                geoIterator.index() + displaceValue + translationValue[<span class="number">0</span>]) * amplitudeValue * mFloatVectorArray_normal[</span><br><span class="line">                                  geoIterator.index()].x * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.y = pointPosition.y + math.sin(</span><br><span class="line">                geoIterator.index() + displaceValue + translationValue[<span class="number">0</span>]) * amplitudeValue * mFloatVectorArray_normal[</span><br><span class="line">                                  geoIterator.index()].y * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            pointPosition.z = pointPosition.z + math.sin(</span><br><span class="line">                geoIterator.index() + displaceValue + translationValue[<span class="number">0</span>]) * amplitudeValue * mFloatVectorArray_normal[</span><br><span class="line">                                  geoIterator.index()].z * weight * envelopeValue * <span class="number">0.1</span></span><br><span class="line">            <span class="comment"># geoIterator.setPosition(pointPosition)</span></span><br><span class="line">            mPointArray_meshVert.append(pointPosition)</span><br><span class="line">            geoIterator.<span class="built_in">next</span>()</span><br><span class="line">        geoIterator.setAllPositions(mPointArray_meshVert)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryNodeSetup</span>(<span class="params">self, dagModifier</span>):</span><br><span class="line">        <span class="comment"># 1.创建辅助对象</span></span><br><span class="line">        mObjLocator = dagModifier.createNode(<span class="string">&#x27;locator&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2.将辅助对象与变形器之间建立联系</span></span><br><span class="line">        mFnDependLocator = OpenMaya.MFnDependencyNode(mObjLocator)</span><br><span class="line">        mPlugWorld = mFnDependLocator.findPlug(<span class="string">&#x27;worldMatrix&#x27;</span>)</span><br><span class="line">        mObj_WorldAttr = mPlugWorld.attribute()</span><br><span class="line"></span><br><span class="line">        mStatusConnect = dagModifier.connect(mObjLocator, mObj_WorldAttr, <span class="variable language_">self</span>.thisMObject(), Ripple.mObj_Matrix)</span><br><span class="line">        <span class="keyword">return</span> mStatusConnect  <span class="comment"># 返回连接状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryAttribute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> Ripple.mObj_Matrix</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deformerCreator</span>():</span><br><span class="line">    nodePtr = OpenMayaMPx.asMPxPtr(Ripple())</span><br><span class="line">    <span class="keyword">return</span> nodePtr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    写功能前先将流程写下来，然后每完成一个流程就标记一下那个流程</span></span><br><span class="line"><span class="string">    Create Attributes  创建属性 - check</span></span><br><span class="line"><span class="string">    Attach Attributes 附加属性 - check</span></span><br><span class="line"><span class="string">    Design Circuitry 设计电路图 - check</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1. creating a function set for numeric attributes</span></span><br><span class="line">    <span class="comment"># 创建数字属性的函数集，因为我们的自定义属性是数字的，因此创建对应的函数集</span></span><br><span class="line">    mFnAttr = OpenMaya.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. create the attributes</span></span><br><span class="line">    <span class="comment"># # 创建AttributeValue属性，短名为AttrVal，数据类型为float，默认值为0.0，由自定义类中的mObj_Amplitude（MObject类型）来接收</span></span><br><span class="line">    Ripple.mObj_Amplitude = mFnAttr.create(<span class="string">&quot;AmplitudeValue&quot;</span>, <span class="string">&quot;AmplitudeVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    Ripple.mObj_Displace = mFnAttr.create(<span class="string">&quot;DisplaceValue&quot;</span>, <span class="string">&quot;DispVal&quot;</span>, OpenMaya.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setKeyable(<span class="number">1</span>)</span><br><span class="line">    mFnAttr.setMin(<span class="number">0.0</span>)</span><br><span class="line">    mFnAttr.setMax(<span class="number">10.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建矩阵属性</span></span><br><span class="line">    mFnMatrixAttr = OpenMaya.MFnMatrixAttribute()</span><br><span class="line">    Ripple.mObj_Matrix = mFnMatrixAttr.create(<span class="string">&#x27;MatrixAttribute&#x27;</span>, <span class="string">&#x27;matAttr&#x27;</span>)</span><br><span class="line">    mFnMatrixAttr.setStorable(<span class="number">0</span>)</span><br><span class="line">    mFnMatrixAttr.setConnectable(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. Attaching the attributes to the Node  # 添加属性到节点上</span></span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Amplitude)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Displace)</span><br><span class="line">    Ripple.addAttribute(Ripple.mObj_Matrix)</span><br><span class="line"></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    SWIG - Simplified Wrapper Interface Generator 简化 包装器 接口 生成器   </span></span><br><span class="line"><span class="string">    是允许开发人员使用脚本语言包装C++代码的工具,因为maya核心是由C++编写的</span></span><br><span class="line"><span class="string">    Autodesk 为我们提供了一种使用swig使用这些属性的方法</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    outputGeom = OpenMayaMPx.cvar.MPxGeometryFilter_outputGeom</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. Design circuitry  # 设计节点属性的连接</span></span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Amplitude, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Displace, outputGeom)</span><br><span class="line">    Ripple.attributeAffects(Ripple.mObj_Matrix, outputGeom)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, deformerCreator, nodeInitializer, OpenMayaMPx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterNode(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="K5V9V"></a></p><h1>第十六集 创建自定义定位器</h1><p>参考网站：<a href="https://blog.csdn.net/u013148608/article/details/105694909">https://blog.csdn.net/u013148608/article/details/105694909</a><br>因为新版本已经不支持这个了glRenderer = OpenMayaRender.MHardwareRenderer.theRenderer()，因此就这吧，看看就好。<br>步骤：1.定义定位器的形状2.定义边界框3.定义边界框边界的大小<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655434694335-baa8031d-3036-4e93-ae91-207533fc49ef.png#averageHue=%23060606&amp;clientId=ub892ec0a-a81e-4&amp;from=paste&amp;height=511&amp;id=CWn3U&amp;originHeight=511&amp;originWidth=1206&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=121606&amp;status=done&amp;style=none&amp;taskId=u26739e54-5b7f-4842-a6b6-5e0dfe2922f&amp;title=&amp;width=1206" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个节点，制作轮子效果</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaRender <span class="keyword">as</span> OpenMayaRender</span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;LeftFoot&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x100fff</span>)</span><br><span class="line"></span><br><span class="line">glRenderer = OpenMayaRender.MHardwareRenderer.theRenderer()</span><br><span class="line">glFT = glRenderer.glFunctionTable()  <span class="comment"># 得到函数库指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocatorNode</span>(OpenMayaMPx.MPxLocatorNode):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxLocatorNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, dataBlock</span>):</span><br><span class="line">        <span class="keyword">return</span> OpenMaya.kUnknownParameter</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">self, view, path, style, status</span>):</span><br><span class="line">        view.beginGL()</span><br><span class="line">        <span class="comment"># Pushed current State</span></span><br><span class="line">        glFT.glPushAttrib(OpenMayaRender.MGL_CURRENT_BIT)</span><br><span class="line">        <span class="comment"># Enabled Blend mode （to enable transparency）</span></span><br><span class="line">        glFT.glEnable(OpenMayaRender.MGL_BLEND)</span><br><span class="line">        <span class="comment"># Defined Blend function</span></span><br><span class="line">        glFT.glBlendFunc(OpenMayaRender.MGL_SRC_ALPHA, OpenMayaRender.MGL_ONE_MINUS_SRC_ALPHA)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义shape在不同选择模式下对应的颜色</span></span><br><span class="line">        <span class="keyword">if</span> status == view.kActive:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kLead:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">0.3</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kDormant:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Draw a shape</span></span><br><span class="line">        glFT.glBegin()</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.031</span>, <span class="number">0</span>, -<span class="number">2.875</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.939</span>, <span class="number">0.1</span>, -<span class="number">2.370</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">1.175</span>, <span class="number">0.2</span>, -<span class="number">1.731</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.603</span>, <span class="number">0.3</span>, <span class="number">1.060</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.473</span>, <span class="number">0.3</span>, <span class="number">1.026</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.977</span>, <span class="number">0.2</span>, -<span class="number">1.731</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.809</span>, <span class="number">0.1</span>, -<span class="number">2.337</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.035</span>, <span class="number">0</span>, -<span class="number">2.807</span>)</span><br><span class="line">        glFT.glEnd()</span><br><span class="line">        <span class="comment"># Draw a shape</span></span><br><span class="line">        glFT.glBegin()</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.587</span>, <span class="number">0.3</span>, <span class="number">1.33</span>)</span><br><span class="line">        glFT.glVertex3f(<span class="number">0.442</span>, <span class="number">0.3</span>, <span class="number">1.33</span>)</span><br><span class="line">        glFT.glVertex3f(<span class="number">0.442</span>, <span class="number">0.3</span>, <span class="number">1.92</span>)</span><br><span class="line">        glFT.glVertex3f(<span class="number">0.230</span>, <span class="number">0.3</span>, <span class="number">2.24</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.442</span>, <span class="number">0.3</span>, <span class="number">2.25</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.635</span>, <span class="number">0.3</span>, <span class="number">1.92</span>)</span><br><span class="line">        glFT.glVertex3f(-<span class="number">0.567</span>, <span class="number">0.3</span>, <span class="number">1.35</span>)</span><br><span class="line">        glFT.glEnd()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定义文字在不同选择模式下对应的颜色</span></span><br><span class="line">        <span class="keyword">if</span> status == view.kActive:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.2</span>, <span class="number">0.5</span>, <span class="number">0.1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kLead:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.5</span>, <span class="number">0.2</span>, <span class="number">0.1</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">elif</span> status == view.kDormant:</span><br><span class="line">            glFT.glColor4f(<span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">0.1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在0，0，0处绘制文字，对齐方式为向左对齐</span></span><br><span class="line">        view.drawText(<span class="string">&quot;Left Foot&quot;</span>, OpenMaya.MPoint(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), view.kLeft)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Disable Blend mode</span></span><br><span class="line">        glFT.glDisable(OpenMayaRender.MGL_BLEND)</span><br><span class="line">        <span class="comment"># Restore the state</span></span><br><span class="line">        glFT.glPopAttrib()</span><br><span class="line">        view.endGL()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeCreator</span>():</span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(LocatorNode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer, OpenMayaMPx.MPxNode.kLocatorNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="CiqwY"></a></p><h1>第十七~十九集 无缝IKFK混合与回调函数</h1><p>先解释一下回调函数，回调函数可以理解为把函数当成变量传递给另一个函数，当变量的函数改变时也会同样的影响把函数当变量的那个函数。作为参数传递的那个函数叫做回调函数<br>我们通常通过MMessage来实现事件触发，当事件触发时会调用回调函数。<br>MMessage的种类与事件：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655474585450-23dc0aae-bfe2-49f7-91f2-3472d0399f45.png#averageHue=%23080808&amp;clientId=u12cb03d8-4911-4&amp;from=paste&amp;height=1080&amp;id=u0168e800&amp;originHeight=1080&amp;originWidth=1920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=675921&amp;status=done&amp;style=none&amp;taskId=u915aca16-8e9c-4596-b6bc-1e221be0a76&amp;title=&amp;width=1920" alt="image.png"></p><p>什么是IK FK ，IK是反向运动学，它是子关节影响父关节，FK是正向运动学，它是父关节影响子关节。<br>当我们制作IK时当添加了极向量约束时，我们将不能够通过父关节的旋转而影响子关节，因此制作一个在极向量约束的功能存在的情况下依然能够正确进行子关节影响父关节并且父关节也可以旋转影响子关节。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655451525648-15631070-d361-4cb5-bd07-2e58bd3f35da.png#averageHue=%2355606d&amp;clientId=ub892ec0a-a81e-4&amp;from=paste&amp;height=467&amp;id=u899fa463&amp;originHeight=467&amp;originWidth=1296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=301680&amp;status=done&amp;style=none&amp;taskId=uff6cc5ff-8a73-40c6-aa4b-532b25c2c9a&amp;title=&amp;width=1296" alt="image.png"><br>这个功能制作的关键是当添加IK后，关节会出现一个属性IKBlend 这个属性为1时则子关节移动会影响父关节，父关节不能主动移动，当IKBlend属性为0时，子关节的移动就不会影响父关节，父关节的旋转会带动子关节。以及如果父关节旋转后中间的那个受极向量约束的定位器位置也应该随着改变。<br><a name="QKLlY"></a></p><h2 id="代码实现细节">代码实现细节</h2><p>我们要制作一个节点来实现这些功能，因此使用最开始的自定义轮子节点来写代码。<br>将轮子结点复制过来后更改一下初始设置：更改节点名字，将类名通过shift+F6统一改成CVG，然后因为节点不需要属性以及算法，将compute函数和nodeInitializer函数内容统统改为pass<br>定义两个模式，一个是FK，一个是IK，默认模式是FK，当我们选择IK控制柄或者选择joint3，或者选择极向量控制器，都会使模式切换成IK。<br>模式为FK时IKBlend的值设为0，并且将极向量控制器设置为不显示，因为FK模式下用不到极向量控制器，模式为IK时IKBlend的值设为1.并将极向量控制器约束在joint2的位置上。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1655457511797-ad9fe3f2-fe5f-489d-95d3-b2252c40c416.png#averageHue=%23020202&amp;clientId=ub892ec0a-a81e-4&amp;from=paste&amp;height=1373&amp;id=u700e4900&amp;originHeight=1373&amp;originWidth=2547&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=427712&amp;status=done&amp;style=none&amp;taskId=ucc4d2933-c7e0-4569-9e5a-35ac3b8644d&amp;title=&amp;width=2547" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="comment"># 自定义一个节点，制作轮子效果</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> OpenMayaMPx  <span class="comment"># 制作自定义的东西时需要的模块</span></span><br><span class="line"><span class="keyword">import</span> sys  <span class="comment"># 输出错误所需要的模块</span></span><br><span class="line"></span><br><span class="line">nodeName = <span class="string">&quot;CVGKNode&quot;</span>  <span class="comment"># 定义节点的名字</span></span><br><span class="line">nodeId = OpenMaya.MTypeId(<span class="number">0x100fff</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CVG</span>(OpenMayaMPx.MPxNode):</span><br><span class="line">    idCallback = []  <span class="comment"># 用来存放所有的回调函数</span></span><br><span class="line"></span><br><span class="line">    joint1 = OpenMaya.MObject()</span><br><span class="line">    joint2 = OpenMaya.MObject()</span><br><span class="line">    joint3 = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    activeEffector = OpenMaya.MObject()</span><br><span class="line">    activeHandle = OpenMaya.MObject()</span><br><span class="line">    activePoleVector = OpenMaya.MObject()</span><br><span class="line">    activePoleVectorControl = OpenMaya.MObject()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        OpenMayaMPx.MPxNode.__init__(<span class="variable language_">self</span>)</span><br><span class="line">        <span class="comment"># Event Callback  根据事件调用函数  这里添加的事件是当前选择改变时调用函数</span></span><br><span class="line">        <span class="variable language_">self</span>.idCallback.append(OpenMaya.MEventMessage.addEventCallback(<span class="string">&quot;SelectionChanged&quot;</span>, <span class="variable language_">self</span>.callbackFunc))</span><br><span class="line">        <span class="comment"># DG Callback  根据节点的改变调用函数  这里是节点移除时</span></span><br><span class="line">        <span class="variable language_">self</span>.idCallback.append(OpenMaya.MDGMessage.addNodeRemovedCallback(<span class="variable language_">self</span>.remove, <span class="string">&quot;dependNode&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">callbackFunc</span>(<span class="params">self, *args</span>):  <span class="comment"># 当选择的物体发生改变时调用这个函数</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;Callback Function&quot;</span></span><br><span class="line">        <span class="comment"># 1. Find active selection in the scene 在场景中找到主动选择</span></span><br><span class="line">        mSel = OpenMaya.MSelectionList()</span><br><span class="line">        OpenMaya.MGlobal.getActiveSelectionList(mSel)  <span class="comment"># 将选择的物体添加到列表中</span></span><br><span class="line">        mItSelectionList = OpenMaya.MItSelectionList(mSel, OpenMaya.MFn.kDagNode)</span><br><span class="line">        mode = <span class="string">&quot;fk&quot;</span></span><br><span class="line"></span><br><span class="line">        mFnDependencyNode = OpenMaya.MFnDependencyNode()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 2. Find IK-Effector</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> mItSelectionList.isDone():</span><br><span class="line">            mObj = OpenMaya.MObject()</span><br><span class="line">            mItSelectionList.getDependNode(mObj)</span><br><span class="line">            <span class="comment"># If effector itself is selected 如果效应器本身被选择</span></span><br><span class="line">            <span class="keyword">if</span> mObj.apiTypeStr() == <span class="string">&quot;kIkEffector&quot;</span>:</span><br><span class="line">                <span class="variable language_">self</span>.activeEffector = mObj</span><br><span class="line">                mode = <span class="string">&quot;ik&quot;</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="comment"># If control curve is selected 如果选择控制曲线(极向量约束的那个)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.activePoleVectorControl.apiTypeStr() != <span class="string">&quot;kInvalid&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> OpenMaya.MFnDependencyNode(mObj).name() == OpenMaya.MFnDependencyNode(</span><br><span class="line">                        <span class="variable language_">self</span>.activePoleVectorControl).name():</span><br><span class="line">                    mode = <span class="string">&quot;ik&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            mFnDependencyNode.setObject(mObj)</span><br><span class="line">            mPlugArray_joint = OpenMaya.MPlugArray()</span><br><span class="line">            mFnDependencyNode.getConnections((mPlugArray_joint))</span><br><span class="line">            <span class="comment"># Check If effector is connected to selected object</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_joint.length()):</span><br><span class="line">                mPlug_joint = mPlugArray_joint[i]</span><br><span class="line">                mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                mPlug_joint.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kIkEffector&quot;</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.activeEffector = mPlug2.node()</span><br><span class="line">                    mode = <span class="string">&quot;ik&quot;</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                mItSelectionList.<span class="built_in">next</span>()</span><br><span class="line">            <span class="comment"># 3. Fink IK-Handle</span></span><br><span class="line">            <span class="comment"># print self.activeEffector.apiTypeStr()</span></span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            If IK-Effector is found then :</span></span><br><span class="line"><span class="string">            - find IK-Handle</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.activeEffector.apiTypeStr() == <span class="string">&quot;kIkEffector&quot;</span>:</span><br><span class="line">                mFnDependencyNode.setObject(<span class="variable language_">self</span>.activeEffector)</span><br><span class="line">                mPlugArray_effector = OpenMaya.MPlugArray()</span><br><span class="line">                mFnDependencyNode.getConnections(mPlugArray_effector)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_effector.length()):</span><br><span class="line">                    mPlug_effector = mPlugArray_effector[i]</span><br><span class="line">                    mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                    mPlug_effector.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                    mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kIkHandle&quot;</span>:</span><br><span class="line">                        <span class="variable language_">self</span>.activeHandle = mPlug2.node()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                If IK-Handle is found then:</span></span><br><span class="line"><span class="string">                -find IK-Blend Plug</span></span><br><span class="line"><span class="string">                -find IK-PoleVector</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.activeHandle.apiTypeStr() == <span class="string">&quot;kIkHandle&quot;</span>:</span><br><span class="line">                <span class="comment"># 4. Find IK-Blend Plug</span></span><br><span class="line">                mFnDependencyNodeHandle = OpenMaya.MFnDependencyNode(<span class="variable language_">self</span>.activeHandle)</span><br><span class="line">                mPlug_blendAttr = mFnDependencyNodeHandle.findPlug(<span class="string">&quot;ikBlend&quot;</span>)</span><br><span class="line">                mAttr_blendAttr = mPlug_blendAttr.attribute()</span><br><span class="line">                <span class="comment"># mak IK-blend attribute &quot;unKeyable&quot; and hidden from Channel box</span></span><br><span class="line">                mMFnAttribute = OpenMaya.MFnAttribute(mAttr_blendAttr)</span><br><span class="line">                mMFnAttribute.setKeyable(<span class="number">0</span>)</span><br><span class="line">                mMFnAttribute.setChannelBox(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 5. Find Pole Vector Constraint</span></span><br><span class="line">                mFnDependencyNode.setObject(<span class="variable language_">self</span>.activeHandle)</span><br><span class="line">                mPlugArray_handle = OpenMaya.MPlugArray()</span><br><span class="line">                mFnDependencyNode.getConnections(mPlugArray_handle)</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_handle.length()):</span><br><span class="line">                    mPlug_handle = mPlugArray_handle[i]</span><br><span class="line">                    mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                    mPlug_handle.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                    mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                    <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kPoleVectorConstraint&quot;</span>:</span><br><span class="line">                        <span class="variable language_">self</span>.activePoleVector = mPlug2.node()</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                If IK-PoleVector is found then:</span></span><br><span class="line"><span class="string">                - find IK-PoleVector Control Curve</span></span><br><span class="line"><span class="string">                &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.activePoleVector.apiTypeStr() == <span class="string">&quot;kPoleVectorConstraint&quot;</span>:</span><br><span class="line">                    <span class="comment"># 6. Find Curve controlling Pole Vector</span></span><br><span class="line">                    mFnDependencyNode.setObject(<span class="variable language_">self</span>.activePoleVector)</span><br><span class="line">                    mPlugArray_handle = OpenMaya.MPlugArray()</span><br><span class="line">                    mFnDependencyNode.getConnections(mPlugArray_handle)</span><br><span class="line">                    <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_handle.length()):</span><br><span class="line">                        mPlug_handle = mPlugArray_handle[i]</span><br><span class="line">                        mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_handle.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                        mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                        <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kTransform&quot;</span>:</span><br><span class="line">                            <span class="variable language_">self</span>.activePoleVectorControl = mPlug2.node()</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">                    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    If IK-PoleVector Control Curve is found then:</span></span><br><span class="line"><span class="string">                    - find middle joint of joint change, to whick this control should be attached.</span></span><br><span class="line"><span class="string">                    &quot;&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="variable language_">self</span>.activePoleVectorControl.apiTypeStr() == <span class="string">&quot;kTransform&quot;</span>:</span><br><span class="line">                        <span class="comment"># 7. Find Joint2 of the chain.</span></span><br><span class="line">                        <span class="comment"># 7. a : find joint connected to IK-Effector - call it : Joint3</span></span><br><span class="line">                        <span class="comment"># 7. b : find joint connected to IK-Handle   - call it : Joint1</span></span><br><span class="line">                        <span class="comment"># 7. c : find joint connected to Joint1 and Joint3 - call it Joint2</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 7. a : find joint connected to IK-Effector - call it : Joint3</span></span><br><span class="line">                        mFnDependencyNode.setObject(<span class="variable language_">self</span>.activeEffector)</span><br><span class="line">                        mPlugArray_effector = OpenMaya.MPlugArray()</span><br><span class="line">                        mFnDependencyNode.getConnections(mPlugArray_effector)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_effector.length()):</span><br><span class="line">                            mPlug_effector = mPlugArray_effector[i]</span><br><span class="line">                            mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                            mPlug_effector.connectedTo(mPlugArray2,<span class="literal">True</span>,<span class="literal">True</span>)</span><br><span class="line">                            mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                            <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                <span class="variable language_">self</span>.joint3 = mPlug2.node()</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                        <span class="comment"># b : find joint connected to IK-Handle   - call it : Joint1</span></span><br><span class="line">                        mFnDependencyNode.setObject(<span class="variable language_">self</span>.activeHandle)</span><br><span class="line">                        mPlugArray_handle = OpenMaya.MPlugArray()</span><br><span class="line">                        mFnDependencyNode.getConnections(mPlugArray_handle)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_handle.length()):</span><br><span class="line">                            mPlug_handle = mPlugArray_handle[i]</span><br><span class="line">                            mPlugArray2 = OpenMaya.MPlugArray()</span><br><span class="line">                            mPlug_handle.connectedTo(mPlugArray2, <span class="literal">True</span>, <span class="literal">True</span>)</span><br><span class="line">                            mPlug2 = mPlugArray2[<span class="number">0</span>]</span><br><span class="line">                            <span class="keyword">if</span> mPlug2.node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                <span class="variable language_">self</span>.joint1 = mPlug2.node()</span><br><span class="line">                                <span class="keyword">break</span></span><br><span class="line">                        <span class="comment"># 7. c : find joint connected to Joint1 and Joint3 - call it Joint2</span></span><br><span class="line">                        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                        Find joints connected to Joint1 , and if any joint which is connected to Joint1 is also connected to Joint3</span></span><br><span class="line"><span class="string">                        then it is Joint2</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span></span><br><span class="line">                        mObj_joint1Connections = OpenMaya.MObjectArray()</span><br><span class="line">                        mObj_joint3Connections = OpenMaya.MObjectArray()</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># Collect child Joints connected to Joint1</span></span><br><span class="line">                        mFnDependencyNode.setObject(<span class="variable language_">self</span>.joint1)</span><br><span class="line">                        mPlugArray_joint1 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint1Scale = mFnDependencyNode.findPlug(<span class="string">&quot;scale&quot;</span>)</span><br><span class="line">                        mPlugArray_joint1 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint1Scale.connectedTo(mPlugArray_joint1,<span class="literal">True</span>,<span class="literal">True</span>)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_joint1.length()):</span><br><span class="line">                            <span class="keyword">if</span> mPlugArray_joint1[i].node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                mObj_joint1Connections.append(mPlugArray_joint1[i].node())</span><br><span class="line"></span><br><span class="line">                        <span class="comment"># Collect parent Joints connected to Joint3</span></span><br><span class="line">                        mFnDependencyNode.setObject(<span class="variable language_">self</span>.joint3)</span><br><span class="line">                        mPlugArray_joint3 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint3Scale = mFnDependencyNode.findPlug(<span class="string">&quot;inverseScale&quot;</span>)</span><br><span class="line">                        mPlugArray_joint3 = OpenMaya.MPlugArray()</span><br><span class="line">                        mPlug_joint3Scale.connectedTo(mPlugArray_joint3,<span class="literal">True</span>,<span class="literal">True</span>)</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mPlugArray_joint3.length()):</span><br><span class="line">                            <span class="keyword">if</span> mPlugArray_joint3[i].node().apiTypeStr() == <span class="string">&quot;kJoint&quot;</span>:</span><br><span class="line">                                mObj_joint3Connections.append(mPlugArray_joint3[i].node())</span><br><span class="line"></span><br><span class="line">                        mFnDependencyNode_temp1 = OpenMaya.MFnDependencyNode()</span><br><span class="line">                        mFnDependencyNode_temp3 = OpenMaya.MFnDependencyNode()</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> xrange(mObj_joint3Connections.length()):</span><br><span class="line">                            <span class="keyword">for</span> j <span class="keyword">in</span> xrange(mObj_joint3Connections.length()):</span><br><span class="line"></span><br><span class="line">                                mFnDependencyNode_temp1.setObject(mObj_joint1Connections[i])</span><br><span class="line">                                mFnDependencyNode_temp3.setObject(mObj_joint3Connections[j])</span><br><span class="line">                                <span class="keyword">if</span> mFnDependencyNode_temp1.name() == mFnDependencyNode_temp3.name():</span><br><span class="line">                                    <span class="variable language_">self</span>.joint2 = mObj_joint3Connections[j]</span><br><span class="line">                                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># check if this node exists in the scene  先检查这个节点在场景中是否存在</span></span><br><span class="line">            <span class="comment"># 尝试将通过我们自定义的CVG类的MObject传递给一个空的列表，如果出现错误就代表没有使用过，那么就删除回调函数。如果列表不为空那么就不进行其他操作。</span></span><br><span class="line">            OpenMaya.MSelectionList.add(<span class="variable language_">self</span>.thisMObject())</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># Remove callback  移除回调函数</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="built_in">len</span>(<span class="variable language_">self</span>.idCallback)):</span><br><span class="line">                <span class="keyword">try</span>:  <span class="comment"># 尝试移除属于MEventMessage的回调函数</span></span><br><span class="line">                    OpenMaya.MEventMessage.removeCallback(<span class="variable language_">self</span>.idCallback[i])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                <span class="keyword">try</span>:  <span class="comment"># 常识移除属于MDGMessage的回调函数</span></span><br><span class="line">                    OpenMaya.MDGMessage.removeCallback(<span class="variable language_">self</span>.idCallback[i])</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, dataBlock</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeCreator</span>():</span><br><span class="line">    <span class="keyword">return</span> OpenMayaMPx.asMPxPtr(CVG())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">nodeInitializer</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Initialize the script plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">mobject</span>):</span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject, <span class="string">&quot;Violet&quot;</span>, <span class="string">&quot;1.0&quot;</span>)  <span class="comment"># maya准备mobject来创建一个针对Plugin的函数库,第二，三个参数为可选参数，分别代指编写人，版本号</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 注册一个节点，第一个为节点名字，第二个为节点ID，第三个为创建节点指针的函数，第四个为节点初始化(定义节点的属性函数)，第五个为节点的分类（没有也不会报错，但是最好写上）</span></span><br><span class="line">        mplugin.registerNode(nodeName, nodeId, nodeCreator, nodeInitializer)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to register node: &quot;</span> + nodeName)  <span class="comment"># 如果注册失败就输出错误</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Uninitialize the scrip plug-in</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">mobject</span>):  <span class="comment"># 取消初始化</span></span><br><span class="line">    mplugin = OpenMayaMPx.MFnPlugin(mobject)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        mplugin.deregisterCommand(nodeId)  <span class="comment"># 使用函数库中的取消注册命令，只需要命令的名字不需要指针</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        sys.stderr.write(<span class="string">&quot;Failed to de-register node: &quot;</span> + nodeName)  <span class="comment"># 失败就输出错误</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MayaPythonAPI_Zurbrigg</title>
      <link href="/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-MayaPythonAPI-Zurbrigg/"/>
      <url>/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-MayaPythonAPI-Zurbrigg/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a href="https://www.bilibili.com/video/BV1MG4y1W7oH/">Maya Python OpenMaya 教学第一卷 Zurbrigg - Maya Python API (Volume1)_哔哩哔哩_bilibili</a><br><a href="https://www.bilibili.com/video/BV1ge4y1H7wy?p=1&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">00_introduction_哔哩哔哩_bilibili</a><br><a href="https://www.bilibili.com/video/BV1ye4y1r7Yv/">Maya Python OpenMaya 教学第三卷 Zurbrigg - Maya Python API (Volume3)_哔哩哔哩_bilibili</a><br><a name="lj7rs"></a></p><h1>第一卷</h1><p><a name="hJDLu"></a></p><h2 id="Maya-API的应用场景">Maya API的应用场景:</h2><p>maya api 主要应用于扩展maya，例如它可以用来为maya添加新的：节点，命令，工具，发射器等<br>当需要遍历很多数据时，使用maya api 要比maya command要快很多<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667383421121-2ac3d043-5149-48d8-891e-ce6e905f4252.png#averageHue=%230a0a0a&amp;clientId=u9187013c-10f8-4&amp;from=paste&amp;height=644&amp;id=u3947ac1b&amp;originHeight=580&amp;originWidth=557&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=93832&amp;status=done&amp;style=none&amp;taskId=u9e3feeec-c18c-4ec6-b6fd-08c68cfaa93&amp;title=&amp;width=618.8889052838459" alt="image.png"><br><a name="ojBpd"></a></p><h2 id="C-的利与弊与python的利与弊">C++的利与弊与python的利与弊</h2><p><a name="NizdK"></a></p><h3 id="C">C++</h3><p>左边是好处，右边是坏处<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667460561714-02cc79bc-5a09-4d66-ae5b-4b14952c5fa9.png#averageHue=%23070707&amp;clientId=u7c600ae3-8851-4&amp;from=paste&amp;height=450&amp;id=uef85ad53&amp;originHeight=405&amp;originWidth=1576&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=137560&amp;status=done&amp;style=none&amp;taskId=ua2aeee3a-e970-4573-81f2-14523c3abaa&amp;title=&amp;width=1751.1111574997149" alt="image.png"><br><a name="UJU6c"></a></p><h3 id="python">python</h3><p>左边是好处，右边是坏处<br> <img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667460536414-c4f0fd77-9fb9-41cd-a74c-e00835523e53.png#averageHue=%23070707&amp;clientId=u7c600ae3-8851-4&amp;from=paste&amp;height=411&amp;id=uc30849e2&amp;originHeight=370&amp;originWidth=1463&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=119984&amp;status=done&amp;style=none&amp;taskId=u34a04e09-3889-467a-9564-6e9e0908df3&amp;title=&amp;width=1625.555598618073" alt="image.png"><br><a name="JEY1o"></a></p><h2 id="api2-0与api1-0的一些区别">api2.0与api1.0的一些区别</h2><p>api2.0：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667463343036-0b4a6649-ed06-4c3e-8202-5373d1f8462d.png#averageHue=%232a2b27&amp;clientId=u7c600ae3-8851-4&amp;from=paste&amp;height=48&amp;id=wST9g&amp;originHeight=43&amp;originWidth=333&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14164&amp;status=done&amp;style=none&amp;taskId=u18be0ca0-c1b6-4516-9fec-fb2da4c89af&amp;title=&amp;width=370.00000980165294" alt="image.png"><br>api1.0：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667463365727-46e6f487-7ebd-4849-a895-5b83867057b0.png#averageHue=%232b2c2a&amp;clientId=u7c600ae3-8851-4&amp;from=paste&amp;height=49&amp;id=uf79a2471&amp;originHeight=44&amp;originWidth=286&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12305&amp;status=done&amp;style=none&amp;taskId=ube2ab404-30cb-49ac-9062-8f80bc9e075&amp;title=&amp;width=317.77778619601423" alt="image.png"></p><p>api2.0自带MFnPlugin方法，而api1.0没有MFnPlugin方法，api1.0需要额外导入OpenMayaMPx模块来使用这个模块的MFnPlugin，MPxNode，MPxCommand等方法</p><p><a name="ctKU8"></a></p><h2 id="脚本-scripts-与插件-plugin-的区别">脚本(scripts)与插件(plugin)的区别</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667464768035-cae1e0b8-6c17-4c09-8690-5441abfb36ab.png#averageHue=%23060606&amp;clientId=u7c600ae3-8851-4&amp;from=paste&amp;height=573&amp;id=u01c321c5&amp;originHeight=516&amp;originWidth=1601&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=193951&amp;status=done&amp;style=none&amp;taskId=u88d271e3-3583-4dac-843e-bc4ff1b0da5&amp;title=&amp;width=1778.8889360133526" alt="image.png"></p><p><a name="Y4Hry"></a></p><h2 id="一种简单的让maya识别到自定义插件的方式">一种简单的让maya识别到自定义插件的方式</h2><p>在maya的版本文档下新建一个plug-ins文件夹，将插件放到这个文件夹下。<br>这种方式虽然简单，但是有个缺点是如果有多个版本的maya，那么需要在每个版本的maya文件夹下都要新建plug-ins文件夹。<br><a name="sVFQs"></a></p><h1><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667464831496-229a0aaa-265e-4126-93bd-cb14db98d2a9.png#averageHue=%23eae4ce&amp;clientId=u7c600ae3-8851-4&amp;from=paste&amp;height=344&amp;id=u5f2fcb0a&amp;originHeight=310&amp;originWidth=496&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77486&amp;status=done&amp;style=none&amp;taskId=u2e7496e4-e5e6-44d4-8cc4-adfe38f0d22&amp;title=&amp;width=551.1111257105701" alt="image.png"></h1><p><a name="JXzvq"></a></p><h2 id="写maya插件的模板">写maya插件的模板</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya，使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后，在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;empty_plugin.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="dJth8"></a></p><h2 id="Hello-World">Hello World</h2><p><a name="k9ZiZ"></a></p><h3 id="HelloWorld命令">HelloWorld命令</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldCmd</span>(om.MPxCommand):</span><br><span class="line">    COMMAND_NAME = <span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(HelloWorldCmd, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, args</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 执行的命令 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 注册maya命令时使用的方法，用来得到类的实例 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> HelloWorldCmd()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向maya注册一个新命令,第一个参数是命令的名字，第二个参数是类的实例</span></span><br><span class="line">        plugin_fn.registerCommand(HelloWorldCmd.COMMAND_NAME, HelloWorldCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldCmd.COMMAND_NAME))  <span class="comment"># 注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterCommand(HelloWorldCmd.COMMAND_NAME)  <span class="comment"># 取消注册新命令</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldCmd.COMMAND_NAME))  <span class="comment"># 取消注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后，在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;command_01_HelloWorld.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="YBdwl"></a></p><h3 id="HelloWorld节点">HelloWorld节点</h3><p>这里是创建一个helloworld节点，创建节点后会在maya界面上绘制字体<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1667802585667-f2101105-470f-4ada-aa46-9822ecb9f68d.png#averageHue=%23494848&amp;clientId=u559e9f03-b86e-4&amp;from=paste&amp;height=1276&amp;id=uc1059362&amp;originHeight=1148&amp;originWidth=2431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=101624&amp;status=done&amp;style=none&amp;taskId=ua9341f0d-6724-40be-9c6f-c75be391c03&amp;title=&amp;width=2701.1111826661213" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaRender <span class="keyword">as</span> omr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya，使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldNode</span>(omui.MPxLocatorNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;helloworld&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007f7f7</span>)</span><br><span class="line">    DRAW_CLASSIFICATION = <span class="string">&quot;drawdb/geometry/helloworld&quot;</span></span><br><span class="line">    DRAW_REGISTRANT_ID = <span class="string">&quot;HelloWorldNode&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(HelloWorldNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> HelloWorldNode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HelloWorldDrawOverride</span>(omr.MPxDrawOverride):</span><br><span class="line">    NAME = <span class="string">&quot;HelloWorldDrawOverride&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>(HelloWorldDrawOverride, <span class="variable language_">self</span>).__init__(obj, <span class="literal">None</span>, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepareForDraw</span>(<span class="params">self, obj_path, camera_path, frame_context, old_data</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">supportedDrawAPIs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> omr.MRenderer.kAllDevices</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasUIDrawables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addUIDrawables</span>(<span class="params">self, obj_path, draw_manager, frame_context, data</span>):</span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.text2d(om.MPoint(<span class="number">100</span>, <span class="number">100</span>), <span class="string">&quot;Hello World&quot;</span>)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> HelloWorldDrawOverride(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(HelloWorldNode.TYPE_NAME,</span><br><span class="line">                               HelloWorldNode.TYPE_ID,</span><br><span class="line">                               HelloWorldNode.creator,</span><br><span class="line">                               HelloWorldNode.initialize,</span><br><span class="line">                               om.MPxNode.kLocatorNode,</span><br><span class="line">                               HelloWorldNode.DRAW_CLASSIFICATION)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.registerDrawOverrideCreator(HelloWorldNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                      HelloWorldNode.DRAW_REGISTRANT_ID,</span><br><span class="line">                                                      HelloWorldDrawOverride.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.deregisterDrawOverrideCreator(HelloWorldNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                        HelloWorldNode.DRAW_REGISTRANT_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(HelloWorldNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(HelloWorldNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后，在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;hello_world_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;helloworld&quot;)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="WjwE1"></a></p><h2 id="maya官方给的maya-python-api示例">maya官方给的maya python api示例</h2><p>首先下载maya开发者工具包，下载压缩后在devkitBase\devkit\plug-ins\scripted目录下可以看到各种示例<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668756899011-a00cc1a7-62fa-4227-a20e-6fe3d5068eda.png#averageHue=%23f8f5f2&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=361&amp;id=u9826c00d&amp;originHeight=325&amp;originWidth=414&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32253&amp;status=done&amp;style=none&amp;taskId=u4195e815-ad0b-4071-ad90-33cf4da6b01&amp;title=&amp;width=460.0000121858388" alt="image.png">py开头的是使用了maya api 2.0的，其他的是使用了maya api 1.0<br><a name="uhzNA"></a></p><h2 id="maya-api-基础">maya api 基础</h2><p>maya api 的四种对象类型：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757424116-5bcafdfe-528a-4e28-8fa2-2776830786e9.png#averageHue=%230d0d0d&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=413&amp;id=u45e06f43&amp;originHeight=372&amp;originWidth=580&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72263&amp;status=done&amp;style=none&amp;taskId=u053e978a-be3a-4a87-a7ae-c7da6792118&amp;title=&amp;width=644.4444615163925" alt="image.png"><br><a name="HbQrQ"></a></p><h3 id="MObject">MObject</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757463577-ad1d2012-8326-4cc5-964f-d200e864d8df.png#averageHue=%23090909&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=403&amp;id=u9adfb691&amp;originHeight=363&amp;originWidth=1570&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161345&amp;status=done&amp;style=none&amp;taskId=uf9c7c238-452a-4b07-99fc-c108395de57&amp;title=&amp;width=1744.4444906564418" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757486229-d8d55a9b-9ed9-427e-b4f9-dbc750251b5c.png#averageHue=%230c0c0b&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=410&amp;id=u0e624a36&amp;originHeight=369&amp;originWidth=1066&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36840&amp;status=done&amp;style=none&amp;taskId=ub45130b7-7469-4383-8eb9-4a6fd153b6a&amp;title=&amp;width=1184.4444758215077" alt="image.png"><br><a name="tMLbr"></a></p><h3 id="MFunction-Sets">MFunction Sets</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757603504-98b7ab6a-d4b5-4ce1-8b20-a299684d5ec0.png#averageHue=%230b0b0b&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=591&amp;id=uad6c347e&amp;originHeight=532&amp;originWidth=1925&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=306154&amp;status=done&amp;style=none&amp;taskId=uccd13f10-394d-439a-8bc6-fb894fb2726&amp;title=&amp;width=2138.8889455500957" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757617546-3e41599a-3c85-452f-aae5-766cc0d5f2d6.png#averageHue=%23030202&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=478&amp;id=u0f7b9081&amp;originHeight=430&amp;originWidth=1776&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46137&amp;status=done&amp;style=none&amp;taskId=ua8760436-76aa-44bc-b289-a533db449ec&amp;title=&amp;width=1973.3333856088157" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758099121-90c8c82c-9144-4d07-aecb-96a98029ce5b.png#averageHue=%231e1c1b&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=79&amp;id=u65220e11&amp;originHeight=71&amp;originWidth=532&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6738&amp;status=done&amp;style=none&amp;taskId=ubcb16715-4419-4be2-b065-d292f84cce0&amp;title=&amp;width=591.1111267702083" alt="image.png"><br><a name="NvbOz"></a></p><h3 id="Wrappers">Wrappers</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668757981249-0896516f-f88c-4e6a-b7a1-46a246eaf888.png#averageHue=%230c0c0c&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=376&amp;id=ud54245f5&amp;originHeight=338&amp;originWidth=1849&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174631&amp;status=done&amp;style=none&amp;taskId=u2c4ab016-58db-4b1f-8dd6-42237e46897&amp;title=&amp;width=2054.4444988686378" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758001529-b6d25d43-aa16-4772-97bc-678e0f7ecf63.png#averageHue=%230b0b0a&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=333&amp;id=u28555cfc&amp;originHeight=300&amp;originWidth=1268&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24703&amp;status=done&amp;style=none&amp;taskId=u88125d2c-7024-4d98-85e4-d1edf78d038&amp;title=&amp;width=1408.8889262116995" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758189352-8278e833-5834-4667-a300-ee18231c5229.png#averageHue=%23131313&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=140&amp;id=cbPpA&amp;originHeight=126&amp;originWidth=887&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57056&amp;status=done&amp;style=none&amp;taskId=u066e4b64-97b5-4f52-b7a4-b3ca8870621&amp;title=&amp;width=985.5555816638624" alt="image.png"><br>迭代器也被认为是wrappers<br>迭代器类的名字前缀为MIt<br><a name="XEXAt"></a></p><h3 id="Proxies">Proxies</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758333101-5714a52d-bbac-4735-b67a-23c698a726b1.png#averageHue=%230a0a0a&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=259&amp;id=ue6ceda73&amp;originHeight=233&amp;originWidth=1552&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=109960&amp;status=done&amp;style=none&amp;taskId=u2eebbf2f-1478-4212-bbf9-bfafbbeb365&amp;title=&amp;width=1724.444490126623" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668758345822-91311951-6d7e-4d36-834c-44a765d10526.png#averageHue=%230a0908&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=239&amp;id=ub00deaaf&amp;originHeight=215&amp;originWidth=1076&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21372&amp;status=done&amp;style=none&amp;taskId=u71a901fd-8fb6-438c-80d4-12ed3ebc05c&amp;title=&amp;width=1195.5555872269626" alt="image.png"><br><a name="tRBiS"></a></p><h3 id="举例">举例</h3><p>遍历当前maya选择的对象，根据对象是否拥有对应的函数集来输出调用函数集的功能所得到的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">selection = om.MGlobal.getActiveSelectionList()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(selection.length()):</span><br><span class="line">    <span class="keyword">if</span> i &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;--------&quot;</span>)</span><br><span class="line">    obj = selection.getDependNode(i) <span class="comment"># Return an MObject</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;API Type: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(obj.apiTypeStr))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> obj.hasFn(om.MFn.kDependencyNode):  <span class="comment"># 检查这个MObject是否能够使用这个函数集</span></span><br><span class="line">        </span><br><span class="line">        depend_fn = om.MFnDependencyNode(obj)  <span class="comment"># 将这个函数集附加到obj上</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Dependency Node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(depend_fn.name()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">        transform_fn = om.MFnTransform(obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Translation: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(transform_fn.translation(om.MSpace.kTransform)))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> obj.hasFn(om.MFn.kMesh):</span><br><span class="line">        mesh_fn = om.MFnMesh(obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mesh Vertices: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(mesh_fn.getVertices()))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> obj.hasFn(om.MFn.kCamera):</span><br><span class="line">        camera_fn = om.MFnCamera(obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Clipping Planes: &#123;0&#125;, &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(camera_fn.nearClippingPlane, camera_fn.farClippingPlane))</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果选择一个方盒子和一个摄像机，输出的内容：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668760680105-a0eeb9d2-e575-4f3b-9924-ddf512182d37.png#averageHue=%23363433&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=122&amp;id=u425096dc&amp;originHeight=110&amp;originWidth=240&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4711&amp;status=done&amp;style=none&amp;taskId=u8d5c9f77-07fa-4b88-8cca-88e143fe2dc&amp;title=&amp;width=266.66667373092105" alt="image.png"><br><a name="jnx97"></a></p><h2 id="Dependence-Graph（DG）">Dependence Graph（DG）</h2><p><a name="Ccttp"></a></p><h3 id="DG的介绍与特点">DG的介绍与特点</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761163618-33e7c611-7817-405a-9b2b-766b1d533440.png#averageHue=%230b0b0b&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=810&amp;id=XyC36&amp;originHeight=729&amp;originWidth=2096&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=414736&amp;status=done&amp;style=none&amp;taskId=u42990e71-5a65-49d2-9e9c-a64e8f0d39f&amp;title=&amp;width=2328.888950583377" alt="image.png"><br>Dependency Graph(DG)是一个基于节点的体系架构，它为创建maya场景提供了基本构建块<br>它有以下四种特点<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761342892-93171d7e-a642-433e-aa4c-9b510cd2c498.png#averageHue=%230c0b0a&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=476&amp;id=uf3b601db&amp;originHeight=428&amp;originWidth=922&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33498&amp;status=done&amp;style=none&amp;taskId=ufcbe683c-7f8b-4354-ad6c-9c4062777e0&amp;title=&amp;width=1024.444471582955" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761150642-0a80b927-5a60-49c4-b027-bca05a8d6836.png#averageHue=%23272726&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=1327&amp;id=u257632d5&amp;originHeight=1194&amp;originWidth=2432&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=879147&amp;status=done&amp;style=none&amp;taskId=u4d62cf75-96a3-4cf7-ab48-e7cdc920b51&amp;title=&amp;width=2702.2222938066666" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761551913-c037888d-c7cc-4033-b3e1-81f92089bc8f.png#averageHue=%230e0e0e&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=841&amp;id=u3a92f826&amp;originHeight=757&amp;originWidth=2401&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=610510&amp;status=done&amp;style=none&amp;taskId=u7848e4b9-2ffc-492c-b063-76f725fa1c8&amp;title=&amp;width=2667.777848449756" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761571232-3ad31dae-60a3-41d3-bb34-e32524d77b3f.png#averageHue=%230a0909&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=704&amp;id=uf1c750fd&amp;originHeight=634&amp;originWidth=2308&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=75814&amp;status=done&amp;style=none&amp;taskId=ub881fa28-d2f8-4bb6-a522-6288ca49625&amp;title=&amp;width=2564.444512379024" alt="image.png"><br><a name="fboq8"></a></p><h3 id="DG如何使用Push-Pull模型更新">DG如何使用Push-Pull模型更新</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761923835-c285aae6-d84e-439f-8f0d-612828fc6232.png#averageHue=%230e0e0e&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=536&amp;id=ue98daa24&amp;originHeight=482&amp;originWidth=2212&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=352674&amp;status=done&amp;style=none&amp;taskId=u69e78de1-ae03-47ae-b798-4d361c6c080&amp;title=&amp;width=2457.777842886656" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668761946640-9119250d-ba52-4918-a15e-f01ab34b43cf.png#averageHue=%23111010&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=470&amp;id=u98338a51&amp;originHeight=423&amp;originWidth=1166&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=45255&amp;status=done&amp;style=none&amp;taskId=u50686900-2519-45e8-a38e-e5d12bc4f14&amp;title=&amp;width=1295.555589876058" alt="image.png"><br><a href="https://www.bilibili.com/video/BV1MG4y1W7oH?t=388.5">https://www.bilibili.com/video/BV1MG4y1W7oH?t=388.5</a><br>1.例如这是一个DG结构，绿色代表这些节点都是干净的（clean），然后如果A发生改变，那么A节点就会变成脏的（dirty）状态，A节点变成了dirty状态，那么它会影响C和D都变成dirty状态<br>2.当maya要需要用到D时，发现D时dirty状态，那么它就从D出发然后追溯到A，然后更新A后，A变成了干净的状态就可以将C，D变成干净的状态了，都变成绿色后maya就可以刷新视口完成更新。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762261343-90336c63-2aa9-44d0-bc1f-99d398d94eed.png#averageHue=%23050505&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=423&amp;id=u52c2d5b0&amp;originHeight=381&amp;originWidth=1013&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=77999&amp;status=done&amp;style=none&amp;taskId=uaef480b3-53a1-42ff-a51b-827f01eb71c&amp;title=&amp;width=1125.555585372596" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762472151-9a16e2d6-12b9-42df-a940-ce73ec65bf69.png#averageHue=%23100404&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=452&amp;id=ub2f38869&amp;originHeight=407&amp;originWidth=1500&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=95134&amp;status=done&amp;style=none&amp;taskId=u298a6611-a2fe-4325-bc6a-39517ffabb6&amp;title=&amp;width=1666.6667108182567" alt="image.png"><br><a name="MfY5i"></a></p><h3 id="总结">总结</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762937405-0f83ed9e-427f-4338-a3ce-494525a8a6c7.png#averageHue=%230e0e0e&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=683&amp;id=u3f2f378f&amp;originHeight=615&amp;originWidth=1945&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=387777&amp;status=done&amp;style=none&amp;taskId=u161273b9-8008-4861-b0af-daa93ecbb3d&amp;title=&amp;width=2161.111168361006" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668762950877-b186a562-aba5-47d0-b25e-182a33fcee83.png#averageHue=%23100f0e&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=598&amp;id=u299e3928&amp;originHeight=538&amp;originWidth=915&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51259&amp;status=done&amp;style=none&amp;taskId=u2ed88ca5-47bb-49b9-a4d2-ade9399bc5b&amp;title=&amp;width=1016.6666935991365" alt="image.png"><br><a name="s9UG4"></a></p><h2 id="自定义节点">自定义节点</h2><p><a name="nay0M"></a></p><h3 id="节点介绍">节点介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763130944-71ddc6f1-a5e5-4b4e-a5e6-c13d2bd1b7cf.png#averageHue=%2333302d&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=1257&amp;id=u554ce68a&amp;originHeight=1131&amp;originWidth=1662&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=369196&amp;status=done&amp;style=none&amp;taskId=u496f3ed9-acd8-47e8-a191-c4822f0f9cc&amp;title=&amp;width=1846.6667155866282" alt="image.png"><br><a name="RSfdh"></a></p><h3 id="节点属性">节点属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763156514-602afe94-bd9f-4395-a23e-31c35d42d1f2.png#averageHue=%230a0a0a&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=469&amp;id=u008121fa&amp;originHeight=422&amp;originWidth=1405&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=162964&amp;status=done&amp;style=none&amp;taskId=u2de4073e-e3fb-45b3-8f54-939757f8681&amp;title=&amp;width=1561.1111524664336" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763177599-8d85e678-ca47-447e-8218-84b8e95bb9b9.png#averageHue=%230b0a09&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=397&amp;id=ucccb7b5c&amp;originHeight=357&amp;originWidth=888&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36218&amp;status=done&amp;style=none&amp;taskId=u9053fc41-a882-4584-85c7-e31979437ed&amp;title=&amp;width=986.6666928044078" alt="image.png"><br><a name="dCqhu"></a></p><h3 id="计算方法">计算方法</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763493087-be9e5958-073a-4d4f-8745-67beb60079f4.png#averageHue=%23090909&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=790&amp;id=u3f359d80&amp;originHeight=711&amp;originWidth=2147&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=347598&amp;status=done&amp;style=none&amp;taskId=u8a0afed6-383d-45ce-abce-b3a3bfc647e&amp;title=&amp;width=2385.555618751198" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763520618-8b0d60cc-ab2b-4d15-bd61-1acb88ceb292.png#averageHue=%230a0a09&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=733&amp;id=u6e998dca&amp;originHeight=660&amp;originWidth=1554&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57469&amp;status=done&amp;style=none&amp;taskId=ue7713662-7819-46ca-bd4c-c15af6ccb71&amp;title=&amp;width=1726.6667124077137" alt="image.png"><br><a name="GbyfY"></a></p><h3 id="依赖属性">依赖属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763577672-f2f0b925-b1e7-4329-be7d-7a46ba7d99d1.png#averageHue=%230e0e0e&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=524&amp;id=ub2f2148a&amp;originHeight=472&amp;originWidth=1586&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=277578&amp;status=done&amp;style=none&amp;taskId=u14099266-66c8-433c-8417-51bb93f46b7&amp;title=&amp;width=1762.22226890517" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668763600580-5b7607ca-bd27-4cd4-910a-91b54913d0e2.png#averageHue=%23100e0d&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=477&amp;id=uc529be08&amp;originHeight=429&amp;originWidth=1062&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50290&amp;status=done&amp;style=none&amp;taskId=u3f261be0-8e8e-4667-9953-dada8358768&amp;title=&amp;width=1180.0000312593256" alt="image.png"><br><a name="aw0a0"></a></p><h3 id="修改属性">修改属性</h3><p>修改属性有三种方法<br><a name="LB0eE"></a></p><h4 id="使用plug修改属性">使用plug修改属性</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668764346831-80c6083d-1b75-4ee4-8523-de7845605fa8.png#averageHue=%23c8cdd2&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=283&amp;id=ue57d47a7&amp;originHeight=255&amp;originWidth=1505&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=277460&amp;status=done&amp;style=none&amp;taskId=u0c705406-6e6d-400e-a75f-4fe35e0d483&amp;title=&amp;width=1672.222266520984" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1668764372359-5063c355-c623-4f55-bba6-bcd44af70080.png#averageHue=%23cbd4db&amp;clientId=ubf5ae5a3-31c1-4&amp;from=paste&amp;height=128&amp;id=BcXTq&amp;originHeight=115&amp;originWidth=1490&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=30751&amp;status=done&amp;style=none&amp;taskId=u167cfc41-ddfe-4f75-bfa3-ae848c87d6c&amp;title=&amp;width=1655.5555994128015" alt="image.png"><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">node_name = <span class="string">&quot;pCube1&quot;</span></span><br><span class="line">attribute_name = <span class="string">&quot;translateY&quot;</span></span><br><span class="line"></span><br><span class="line">selection_list = om.MSelectionList()</span><br><span class="line">selection_list.add(node_name)</span><br><span class="line"></span><br><span class="line">obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">    transform_fn = om.MFnTransform(obj)</span><br><span class="line">    </span><br><span class="line">    plug = transform_fn.findPlug(attribute_name,<span class="literal">False</span>)  <span class="comment"># 获取pCube的translateY的plug对象，False的含义在以后的章节讲</span></span><br><span class="line">    </span><br><span class="line">    attribute_value = plug.asDouble()  <span class="comment"># 得到plug对应的数据</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(plug, attribute_value))  <span class="comment">#  这里输出plug虽然是pCube1.translateY，但是plug并不是字符串，plug覆盖了string方法，使其输出内容改变了。</span></span><br><span class="line">   </span><br><span class="line">    plug.setDouble(<span class="number">2.0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">node_name = <span class="string">&quot;pCube1&quot;</span></span><br><span class="line">attribute_name = <span class="string">&quot;translate&quot;</span></span><br><span class="line"></span><br><span class="line">selection_list = om.MSelectionList()</span><br><span class="line">selection_list.add(node_name)</span><br><span class="line"></span><br><span class="line">obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">    transform_fn = om.MFnTransform(obj)</span><br><span class="line">    </span><br><span class="line">    plug = transform_fn.findPlug(attribute_name,<span class="literal">False</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> plug.isCompound: <span class="comment"># 判断插头是否是复合类型</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(plug.numChildren()): <span class="comment"># 遍历插头的子项</span></span><br><span class="line">            child_plug = plug.child(i)</span><br><span class="line">            </span><br><span class="line">            attribute_value = child_plug.asDouble()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&#123;0&#125;: &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(child_plug, attribute_value))</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><a name="BLunB"></a></p><h4 id="利用函数集自带的修改属性的方法">利用函数集自带的修改属性的方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">node_name = <span class="string">&quot;pCube1&quot;</span></span><br><span class="line">attribute_name = <span class="string">&quot;translate&quot;</span></span><br><span class="line"></span><br><span class="line">selection_list = om.MSelectionList()</span><br><span class="line">selection_list.add(node_name)</span><br><span class="line"></span><br><span class="line">obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> obj.hasFn(om.MFn.kTransform):</span><br><span class="line">    transform_fn = om.MFnTransform(obj)</span><br><span class="line">    </span><br><span class="line">    translation = transform_fn.translation(om.MSpace.kTransform)</span><br><span class="line">    translation[<span class="number">1</span>] = <span class="number">3.0</span></span><br><span class="line">    transform_fn.setTranslation(translation, om.MSpace.kTransform)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p><a name="mDfst"></a></p><h3 id="创建自定义节点所需要的基础">创建自定义节点所需要的基础</h3><p><a name="qK48a"></a></p><h4 id="MPxNode">MPxNode</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002338612-6cd488a2-a0b5-4a42-b533-029835e1112c.png#averageHue=%231f1d1b&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=67&amp;id=ua2b59691&amp;originHeight=60&amp;originWidth=778&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9484&amp;status=done&amp;style=none&amp;taskId=u274c2a12-21b4-46a3-881f-b36d77cc888&amp;title=&amp;width=864.4444673444024" alt="image.png"><br>HelloWorld节点用到的MPxLocatorNode class是MPxNode派生的。<br><a name="XbsyV"></a></p><h4 id="initializePlugin">initializePlugin()</h4><p>任何新的自定义节点都需要在maya中注册，然后才能使用。<br>注册是在initializePlugin() 函数内使用MPxPlugin.registerNode()<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002627571-0a9ab6a7-7bbd-4c42-8c41-fc59d6722fb8.png#averageHue=%23151515&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=58&amp;id=uf14fa594&amp;originHeight=52&amp;originWidth=1066&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35968&amp;status=done&amp;style=none&amp;taskId=u657637d1-41cc-41a0-9128-eeef564d1a5&amp;title=&amp;width=1184.4444758215077" alt="image.png"><br><a name="MyqhV"></a></p><h4 id="MPxPlugin-registerNode">MPxPlugin.registerNode()</h4><p>注册方法需要节点的名字，一个唯一的ID，创建的方法，初始化的方法。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002669128-8f96557a-60bb-4d22-be51-bf52257e5bca.png#averageHue=%230d0d0d&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=258&amp;id=vNpME&amp;originHeight=232&amp;originWidth=672&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=65799&amp;status=done&amp;style=none&amp;taskId=ud60b7ac1-1cea-4b59-b4c0-73a5de343ec&amp;title=&amp;width=746.666686446579" alt="image.png"><br><a name="GWIJg"></a></p><h4 id="creator">creator()</h4><p>creator()用来返回一个类的新实例<br><a name="FAjY7"></a></p><h4 id="initialize">initialize()</h4><p>initialize()有三个作用：1.初始化所有的节点属性2.添加或修改节点的属性都在这个方法内3.只有当加载plugin时调用<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669002823683-177350b5-96c4-456d-8562-86a2638a561e.png#averageHue=%230b0b0b&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=271&amp;id=u3cb4080a&amp;originHeight=244&amp;originWidth=857&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72938&amp;status=done&amp;style=none&amp;taskId=u92e4ec28-6dbe-4706-b9dc-9dd8dd76224&amp;title=&amp;width=952.2222474474972" alt="image.png"><br><a name="Qkry9"></a></p><h4 id="注：">注：</h4><p>creator()与initialize()方法可以用不同的函数名，creator与initialize是通用的容易表示的。只是一个命名约定<br><a name="fYVC7"></a></p><h4 id="Compute">Compute()</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669003318484-4b8a7b71-6973-4ff7-947a-830df396d988.png#averageHue=%23060606&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=139&amp;id=u04fdd6a7&amp;originHeight=125&amp;originWidth=581&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22040&amp;status=done&amp;style=none&amp;taskId=u43cd17f4-c28f-4042-917c-cff5389dad0&amp;title=&amp;width=645.555572656938" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669003311035-561243ea-01cd-4745-a747-bbbd6c869d1b.png#averageHue=%230a0a0a&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=326&amp;id=u4c983ea9&amp;originHeight=293&amp;originWidth=1555&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=153631&amp;status=done&amp;style=none&amp;taskId=u0966b6f8-eb7f-4450-96f8-afad2cdf399&amp;title=&amp;width=1727.7778235482592" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669003340185-5a47b13d-570c-4674-bc43-9e24cab712ac.png#averageHue=%23080706&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=317&amp;id=u1d2aebb6&amp;originHeight=285&amp;originWidth=956&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36827&amp;status=done&amp;style=none&amp;taskId=u1d83cf90-56ee-431f-b3d5-10d667e9e17&amp;title=&amp;width=1062.2222503615021" alt="image.png"><br><a name="oQ8aa"></a></p><h4 id="postConstructor">postConstructor()</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669007286665-679ae1fc-3e15-4f05-93d6-9790d1ef97da.png#averageHue=%230b0b0b&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=183&amp;id=u2e060501&amp;originHeight=165&amp;originWidth=1357&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=81307&amp;status=done&amp;style=none&amp;taskId=u23c02b7c-84aa-43d3-9395-a55adeea4a8&amp;title=&amp;width=1507.7778177202495" alt="image.png"><br>当创建节点后调用<br><a name="vw2qD"></a></p><h4 id="connectionMade-和-connectionBroken">connectionMade() 和 connectionBroken()</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669007312866-0ed526c4-0327-4ec1-bff2-2d33ac61b0ce.png#averageHue=%230e0e0e&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=194&amp;id=ufb500e38&amp;originHeight=175&amp;originWidth=1053&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=80662&amp;status=done&amp;style=none&amp;taskId=uca63225e-eaf7-44b3-a444-baf2f71ae79&amp;title=&amp;width=1170.0000309944162" alt="image.png"><br>当节点连接状态发生改变时调用<br><a name="tX12q"></a></p><h3 id="举例：自定义一个简单的数学节点">举例：自定义一个简单的数学节点</h3><p>节点功能：将两个数相乘并输出结果值<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019508238-3c8534af-9ab0-4dcf-8d15-a91eb495d03e.png#averageHue=%2347cd89&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=223&amp;id=u361e46aa&amp;originHeight=201&amp;originWidth=290&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11821&amp;status=done&amp;style=none&amp;taskId=ue94ba214-cf36-495e-b391-f5fb74ba7b1&amp;title=&amp;width=322.22223075819625" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 这个函数告诉了maya这个插件生成,并且生成的对象使用maya python api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MutiplyNode</span>(om.MPxNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;multiplynode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7F8</span>)</span><br><span class="line">    <span class="comment"># 提前声明节点的属性</span></span><br><span class="line">    multiplier_obj = <span class="literal">None</span></span><br><span class="line">    multiplicand_obj = <span class="literal">None</span></span><br><span class="line">    product_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(MutiplyNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;_summary_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            plug (_type_): 当plug是dirty状态时,会传过来,要求更新</span></span><br><span class="line"><span class="string">            data (_type_): data提供了读取和写入节点属性值的方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> plug == MutiplyNode.product_obj:</span><br><span class="line"></span><br><span class="line">            multiplier = data.inputValue(MutiplyNode.multiplier_obj).asInt()  <span class="comment"># 获取multiplier_obj对象的输入的属性值</span></span><br><span class="line">            multiplicand = data.inputValue(MutiplyNode.multiplicand_obj).asDouble()  <span class="comment"># 获取multiplicand_obj对象的输入的属性值</span></span><br><span class="line">            product = multiplier * multiplicand </span><br><span class="line"></span><br><span class="line">            product_data_handle = data.outputValue(MutiplyNode.product_obj)  <span class="comment"># 获取product_obj对象的输出数据对象</span></span><br><span class="line">            product_data_handle.setDouble(product)  <span class="comment"># 设置product_obj对象的输出数据</span></span><br><span class="line"></span><br><span class="line">            data.setClean(plug) <span class="comment"># 将plug设置为clean状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> MutiplyNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute() <span class="comment"># 创建一个用来设置数字系列属性的对象</span></span><br><span class="line"></span><br><span class="line">        cls.multiplier_obj = numeric_attr.create(<span class="string">&quot;multiplier&quot;</span>, <span class="string">&quot;mul&quot;</span>, om.MFnNumericData.kInt, <span class="number">2</span>)  <span class="comment"># 属性长名，属性短名，属性数字类型，属性初始值</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span> <span class="comment"># 设置属性可以key关键帧(这样属性就能出现在channel box中)</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span>  <span class="comment">#  设置属性没有输出引脚(其他属性不能读它)</span></span><br><span class="line"></span><br><span class="line">        cls.multiplicand_obj = numeric_attr.create(<span class="string">&quot;multiplicand&quot;</span>, <span class="string">&quot;mulc&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        cls.product_obj = numeric_attr.create(<span class="string">&quot;product&quot;</span>, <span class="string">&quot;prod&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.writable = <span class="literal">False</span> <span class="comment">#  设置属性没有输入引脚(其他属性不能直接写入它)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加属性</span></span><br><span class="line">        cls.addAttribute(cls.multiplier_obj)</span><br><span class="line">        cls.addAttribute(cls.multiplicand_obj)</span><br><span class="line">        cls.addAttribute(cls.product_obj)</span><br><span class="line">        <span class="comment"># 设置属性影响</span></span><br><span class="line">        cls.attributeAffects(cls.multiplier_obj, cls.product_obj)</span><br><span class="line">        cls.attributeAffects(cls.multiplicand_obj, cls.product_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(MutiplyNode.TYPE_NAME,</span><br><span class="line">                               MutiplyNode.TYPE_ID,</span><br><span class="line">                               MutiplyNode.creator,</span><br><span class="line">                               MutiplyNode.initialize,</span><br><span class="line">                               om.MPxNode.kDependNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(MutiplyNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取消加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集取消注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(MutiplyNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(MutiplyNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试时使用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;multiply_node.py&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    </span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;multiplynode&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="ql0oW"></a></p><h3 id="常用的调节属性的性质">常用的调节属性的性质</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019751794-e5111da0-4859-4dfe-a62b-719679fbd182.png#averageHue=%23090909&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=392&amp;id=u50257840&amp;originHeight=353&amp;originWidth=1175&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=120633&amp;status=done&amp;style=none&amp;taskId=u96983a3b-dfa4-4300-94c2-b3ff711bd18&amp;title=&amp;width=1305.5555901409675" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669021067015-08a0e8e9-ae26-4a71-a0ca-9619d6aadb83.png#averageHue=%2320201f&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=38&amp;id=u79fd4fa9&amp;originHeight=34&amp;originWidth=814&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11256&amp;status=done&amp;style=none&amp;taskId=uae7d5d33-e785-4763-b450-46250892805&amp;title=&amp;width=904.4444684040405" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019819465-9ccfd5b8-c99e-489c-8787-de360afaed0e.png#averageHue=%2320201e&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=30&amp;id=CaH2B&amp;originHeight=27&amp;originWidth=822&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12052&amp;status=done&amp;style=none&amp;taskId=uaa18bb8b-e8a9-4979-a92d-bac25b0aa99&amp;title=&amp;width=913.3333575284046" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669019987165-8c835b41-f49c-4b51-a3ce-0c5eac417ae6.png#averageHue=%23090909&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=236&amp;id=ub49b112e&amp;originHeight=212&amp;originWidth=1242&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=78468&amp;status=done&amp;style=none&amp;taskId=u51f4de9d-ef27-46b3-9636-fbf3e5cc3af&amp;title=&amp;width=1380.0000365575165" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020148684-13a906e4-90af-4aa5-be15-78c439099d50.png#averageHue=%23090909&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=381&amp;id=ua1e6055b&amp;originHeight=343&amp;originWidth=938&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106315&amp;status=done&amp;style=none&amp;taskId=ud409e366-f25b-499a-8cb3-2d6f9954e59&amp;title=&amp;width=1042.222249831683" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020240602-493c3bfb-adc5-4f6f-99bc-59f2eb102aa2.png#averageHue=%230a0a0a&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=322&amp;id=u54535e8d&amp;originHeight=290&amp;originWidth=1279&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=137679&amp;status=done&amp;style=none&amp;taskId=u52d3524f-76ee-41c8-b248-5b8402b55c9&amp;title=&amp;width=1421.1111487577" alt="image.png"><br>channelBox不需要设置为True，因为设置keyable为True就完全不需要设置channelBox为True了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020628591-1294d6b3-d1fe-4fc4-96f4-095d47712df7.png#averageHue=%230e0e0e&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=228&amp;id=uff0e5a0f&amp;originHeight=205&amp;originWidth=980&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73712&amp;status=done&amp;style=none&amp;taskId=ub7b18945-e62f-4627-82b3-29888a0c6ca&amp;title=&amp;width=1088.8889177345943" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669020736102-fee13889-7dbd-452a-be70-796b0c54f0f1.png#averageHue=%23090909&amp;clientId=u7be5ff65-fd52-4&amp;from=paste&amp;height=346&amp;id=u93dfa081&amp;originHeight=311&amp;originWidth=627&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=60795&amp;status=done&amp;style=none&amp;taskId=u9c9b59e9-d647-4c5d-8282-17dfe382f18&amp;title=&amp;width=696.6666851220313" alt="image.png"><br><a name="bj2ZA"></a></p><h3 id="举例：自定义一个车轮节点">举例：自定义一个车轮节点</h3><p><a name="TMm86"></a></p><h4 id="数学原理：">数学原理：</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669176071940-be455bbf-e9bb-4cfb-8c7d-e0ade10a5a1a.png#averageHue=%23030303&amp;clientId=ua5409086-db96-4&amp;from=paste&amp;height=879&amp;id=u646b328b&amp;originHeight=791&amp;originWidth=2353&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=184127&amp;status=done&amp;style=none&amp;taskId=uaf267bee-530f-4f2d-b5a5-482826ee31f&amp;title=&amp;width=2614.444513703572" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669275903674-f01c8af3-35a6-4b12-b856-5fd11fafd372.png#averageHue=%233f3e3d&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=450&amp;id=uf1f8a322&amp;originHeight=405&amp;originWidth=316&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31129&amp;status=done&amp;style=none&amp;taskId=uc7d49f3b-b9ed-4391-a948-f9f64c62a59&amp;title=&amp;width=351.11112041237936" alt="image.png"><br><a name="DuEqW"></a></p><h4 id="代码">代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 这个函数告诉了maya这个插件生成,并且生成的对象使用maya python api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RollingNode</span>(om.MPxNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;rollingnode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7F9</span>)</span><br><span class="line">    <span class="comment"># 提前声明节点的属性</span></span><br><span class="line">    distance_obj = <span class="literal">None</span></span><br><span class="line">    radius_obj = <span class="literal">None</span></span><br><span class="line">    rotation_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(RollingNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;_summary_</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            plug (_type_): 当plug是dirty状态时,会传过来,要求更新</span></span><br><span class="line"><span class="string">            data (_type_): data提供了读取和写入节点属性值的方法</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> plug == RollingNode.rotation_obj:</span><br><span class="line"></span><br><span class="line">            distance = data.inputValue(RollingNode.distance_obj).asDouble()</span><br><span class="line">            radius = data.inputValue(RollingNode.radius_obj).asDouble()</span><br><span class="line">            <span class="keyword">if</span> radius==<span class="number">0</span>:</span><br><span class="line">                rotation = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rotation = distance / radius</span><br><span class="line"></span><br><span class="line">            rotation_data_handle = data.outputValue(RollingNode.rotation_obj)</span><br><span class="line">            rotation_data_handle.setDouble(rotation)</span><br><span class="line"></span><br><span class="line">            data.setClean(plug)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> RollingNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute() <span class="comment"># 创建一个针对数字属性的函数集</span></span><br><span class="line"></span><br><span class="line">        cls.distance_obj = numeric_attr.create(<span class="string">&quot;distance&quot;</span>, <span class="string">&quot;dis&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)  <span class="comment"># 属性长名，属性短名，属性数字类型，属性初始值</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span> <span class="comment"># 设置属性可以key关键帧(这样属性就能出现在channel box中)</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span>  <span class="comment">#  设置属性没有输出引脚(其他属性不能读它)</span></span><br><span class="line"></span><br><span class="line">        cls.radius_obj = numeric_attr.create(<span class="string">&quot;radius&quot;</span>, <span class="string">&quot;rad&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        unit_attr = om.MFnUnitAttribute()  <span class="comment"># 创建一个针对单位属性的函数集</span></span><br><span class="line"></span><br><span class="line">        cls.rotation_obj = unit_attr.create(<span class="string">&quot;rotation&quot;</span>, <span class="string">&quot;rot&quot;</span>, om.MFnUnitAttribute.kAngle, <span class="number">0.0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># unit_attr.writable = False #  设置属性没有输入引脚(其他属性不能直接写入它)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加属性</span></span><br><span class="line">        cls.addAttribute(cls.distance_obj)</span><br><span class="line">        cls.addAttribute(cls.radius_obj)</span><br><span class="line">        cls.addAttribute(cls.rotation_obj)</span><br><span class="line">        <span class="comment"># 设置属性影响</span></span><br><span class="line">        cls.attributeAffects(cls.distance_obj, cls.rotation_obj)</span><br><span class="line">        cls.attributeAffects(cls.radius_obj, cls.rotation_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(RollingNode.TYPE_NAME,</span><br><span class="line">                               RollingNode.TYPE_ID,</span><br><span class="line">                               RollingNode.creator,</span><br><span class="line">                               RollingNode.initialize,</span><br><span class="line">                               om.MPxNode.kDependNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(RollingNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    取消加载插件时执行此函数</span></span><br><span class="line"><span class="string">    plugin: MObject用于使用MFnPlugin函数集取消注册插件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>    </span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(RollingNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(RollingNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    测试时使用</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;rolling_node.py&quot;</span></span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name)) <span class="comment"># 取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))  <span class="comment"># 加载插件</span></span><br><span class="line">    </span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;rollingnode&quot;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#cmds.evalDeferred(cmds.file(&quot;D:/ZhangRuiChen/zrctest/test.ma&quot;,o=True,f=True))</span></span><br></pre></td></tr></table></figure><p><a name="nd1Lv"></a></p><h2 id="自定义命令">自定义命令</h2><p><a name="f37a4"></a></p><h3 id="需要的函数">需要的函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276191832-65919398-6691-44ce-bbfc-b786f0d57db8.png#averageHue=%230e0e0e&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=522&amp;id=ua468bd22&amp;originHeight=470&amp;originWidth=1569&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=281820&amp;status=done&amp;style=none&amp;taskId=u6a8fe328-ef18-45f7-aeb7-d103140d049&amp;title=&amp;width=1743.3333795158965" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276232949-4b119564-f25d-4d0d-a359-cee351324e5f.png#averageHue=%230e0d0c&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=492&amp;id=oSROO&amp;originHeight=443&amp;originWidth=965&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56721&amp;status=done&amp;style=none&amp;taskId=u451750ca-16d5-4f92-8197-4855bb2330b&amp;title=&amp;width=1072.2222506264118" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276363671-fac83a4e-d68e-4f5b-9a03-88eaec3c83c5.png#averageHue=%23060606&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=581&amp;id=u9aa85282&amp;originHeight=523&amp;originWidth=1568&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=192253&amp;status=done&amp;style=none&amp;taskId=u64c636cd-f138-4976-9314-505ae075449&amp;title=&amp;width=1742.222268375351" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669278221295-f94858a1-b33c-4aea-943b-48dcaa816caf.png#averageHue=%23080706&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=458&amp;id=u42255ea5&amp;originHeight=412&amp;originWidth=895&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42139&amp;status=done&amp;style=none&amp;taskId=uab215eb9-62a5-458e-a642-87b020a1b1d&amp;title=&amp;width=994.4444707882265" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276507022-eaf4aa20-a034-4950-b8ec-8c17a566c63c.png#averageHue=%23080808&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=712&amp;id=u820ea853&amp;originHeight=641&amp;originWidth=1506&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=258176&amp;status=done&amp;style=none&amp;taskId=uc5112f50-bb7c-450e-b1d5-f222042dc58&amp;title=&amp;width=1673.3333776615295" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669276519908-13c30975-8158-4102-94ea-aae068fd6ca4.png#averageHue=%23070605&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=608&amp;id=uf6f553ea&amp;originHeight=547&amp;originWidth=891&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=51499&amp;status=done&amp;style=none&amp;taskId=u582aa433-4a9c-4ff8-89d1-9de5356c257&amp;title=&amp;width=990.0000262260444" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277248587-3065461c-a73a-4930-9f36-5527e8510456.png#averageHue=%23080808&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=367&amp;id=MZ5PS&amp;originHeight=330&amp;originWidth=1566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=142467&amp;status=done&amp;style=none&amp;taskId=u11da2dc7-0fe7-4350-8c2a-bf63bf32d74&amp;title=&amp;width=1740.00004609426" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277259591-72c884bb-e983-4357-a732-04d7c378bbe4.png#averageHue=%23080706&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=317&amp;id=ej8Ow&amp;originHeight=285&amp;originWidth=1040&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=32132&amp;status=done&amp;style=none&amp;taskId=u922a51ff-fc9f-4906-a0ae-f4379cef6e8&amp;title=&amp;width=1155.5555861673245" alt="image.png"><br><a name="GiOc2"></a></p><h3 id="堆栈">堆栈</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277069508-5854ed27-7f25-4813-9f30-20d89614b42f.png#averageHue=%230a0a0a&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=540&amp;id=u2b02ebda&amp;originHeight=486&amp;originWidth=1517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=196983&amp;status=done&amp;style=none&amp;taskId=u866b468d-4173-4666-ac88-9a7b163e4b5&amp;title=&amp;width=1685.5556002075302" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669277119960-0391684d-d8a7-4501-a7e9-f558d591621a.png#averageHue=%23090807&amp;clientId=uab71ef87-eb1c-4&amp;from=paste&amp;height=363&amp;id=u17b6ca56&amp;originHeight=327&amp;originWidth=1425&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40443&amp;status=done&amp;style=none&amp;taskId=u78f7c831-2ff9-4576-b00d-9ff9d96ffa2&amp;title=&amp;width=1583.3333752773437" alt="image.png"><br><a name="J5Af1"></a></p><h3 id="举例：">举例：</h3><p>创建一个命令，这个命令用来设置选择的一个物体的位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCmd</span>(om.MPxCommand):</span><br><span class="line">    COMMAND_NAME = <span class="string">&quot;SimpleCmd&quot;</span></span><br><span class="line">    <span class="comment"># 定义命令的标志</span></span><br><span class="line">    TRANSLATE_FLAG = [<span class="string">&quot;-t&quot;</span>, <span class="string">&quot;-translate&quot;</span>, (om.MSyntax.kDouble,om.MSyntax.kDouble,om.MSyntax.kDouble)]</span><br><span class="line">    VERSION_FLAG = [<span class="string">&quot;-v&quot;</span>, <span class="string">&quot;-version&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleCmd, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.undoable = <span class="literal">False</span>  <span class="comment"># 初始设置命令不能撤回</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doIt</span>(<span class="params">self, arg_list</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">        doIt 通常用来进行执行redoIt的初始设置以及检查</span></span><br><span class="line"><span class="string">        doIt 在使用命令时只调用一次</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            arg_db = om.MArgDatabase(<span class="variable language_">self</span>.syntax(), arg_list) <span class="comment"># 创建对象解析语法与参数</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="variable language_">self</span>.displayError(<span class="string">&quot;Error parsing arguments&quot;</span>)</span><br><span class="line">            <span class="keyword">raise</span></span><br><span class="line">        </span><br><span class="line">        selection_list = arg_db.getObjectList()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.selected_obj = selection_list.getDependNode(<span class="number">0</span>)</span><br><span class="line">        <span class="comment"># om.MFn为所有API类型提供常量的静态类</span></span><br><span class="line">        <span class="comment"># om.MSpace 提供坐标空间常量的静态类。</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.selected_obj.apiType() != om.MFn.kTransform:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;This command requires a transform node&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.edit = arg_db.isEdit</span><br><span class="line">        <span class="variable language_">self</span>.query = arg_db.isQuery</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.translate = arg_db.isFlagSet(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>]) <span class="comment"># 判断语法中是否有这个flag</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.translate:</span><br><span class="line">            transform_fn = om.MFnTransform(<span class="variable language_">self</span>.selected_obj)</span><br><span class="line">            <span class="variable language_">self</span>.orig_translation = transform_fn.translation(om.MSpace.kTransform)  </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.edit:</span><br><span class="line">                <span class="variable language_">self</span>.new_translation = [arg_db.flagArgumentDouble(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>],<span class="number">0</span>),</span><br><span class="line">                                        arg_db.flagArgumentDouble(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>],<span class="number">1</span>),</span><br><span class="line">                                        arg_db.flagArgumentDouble(SimpleCmd.TRANSLATE_FLAG[<span class="number">0</span>],<span class="number">2</span>)]</span><br><span class="line">                <span class="variable language_">self</span>.undoable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.version = arg_db.isFlagSet(SimpleCmd.VERSION_FLAG[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.redoIt()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">undoIt</span>(<span class="params">self</span>):</span><br><span class="line">        transform_fn = om.MFnTransform(<span class="variable language_">self</span>.selected_obj)</span><br><span class="line">        transform_fn.setTranslation(om.MVector(<span class="variable language_">self</span>.orig_translation),om.MSpace.kTransform)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">redoIt</span>(<span class="params">self</span>):</span><br><span class="line">        transform_fn = om.MFnTransform(<span class="variable language_">self</span>.selected_obj)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.query:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.translate:</span><br><span class="line">                <span class="variable language_">self</span>.setResult(<span class="variable language_">self</span>.orig_translation)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Flag does not support query&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.edit:</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.translate:</span><br><span class="line">                transform_fn.setTranslation(om.MVector(<span class="variable language_">self</span>.new_translation),om.MSpace.kTransform)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Flag does not support edit&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.version:</span><br><span class="line">            <span class="variable language_">self</span>.setResult(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.setResult(transform_fn.name())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">isUndoable</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.undoable</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 注册maya命令时使用的方法，用来得到类的实例 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> SimpleCmd()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_syntax</span>(<span class="params">cls</span>):</span><br><span class="line"></span><br><span class="line">        syntax = om.MSyntax()</span><br><span class="line"></span><br><span class="line">        syntax.enableEdit = <span class="literal">True</span></span><br><span class="line">        syntax.enableQuery = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        syntax.addFlag(*cls.TRANSLATE_FLAG) <span class="comment"># 这里*的意思是解包，相当于将列表的中括号去掉</span></span><br><span class="line">        syntax.addFlag(*cls.VERSION_FLAG)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置要传递给命令的对象的类型和数量</span></span><br><span class="line">        syntax.setObjectType(om.MSyntax.kSelectionList, <span class="number">1</span>, <span class="number">1</span>) </span><br><span class="line">        <span class="comment"># 如果设置为True，那么当命令行上没有提供对象时，Maya将传递当前选择。默认为False。</span></span><br><span class="line">        syntax.useSelectionAsDefault(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> syntax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 向maya注册一个新命令,第一个参数是命令的名字，第二个参数是类的实例, 第三个参数是命令的语法</span></span><br><span class="line">        plugin_fn.registerCommand(SimpleCmd.COMMAND_NAME, SimpleCmd.creator, SimpleCmd.create_syntax)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleCmd.COMMAND_NAME))  <span class="comment"># 注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterCommand(SimpleCmd.COMMAND_NAME)  <span class="comment"># 取消注册新命令</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleCmd.COMMAND_NAME))  <span class="comment"># 取消注册失败时输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;simple_cmd.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.polyCube()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="R6LW8"></a></p><h1>第二卷</h1><p><a name="alXzd"></a></p><h2 id="变形器">变形器</h2><p><a name="N6AYF"></a></p><h3 id="变形器的介绍">变形器的介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669355834333-997f0cfd-4fd2-4e73-bd1c-268e45820c36.png#averageHue=%230a0a0a&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=758&amp;id=uab4bc6b9&amp;originHeight=682&amp;originWidth=1588&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=274633&amp;status=done&amp;style=none&amp;taskId=ua74619f1-ec8a-4eaa-8110-9a3b7e20e55&amp;title=&amp;width=1764.4444911862608" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669355868141-c9c2dee3-b484-44bf-8984-361fdbba321a.png#averageHue=%23070606&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=428&amp;id=ue3d09ce8&amp;originHeight=385&amp;originWidth=1554&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39023&amp;status=done&amp;style=none&amp;taskId=ua7fbf361-57ec-4ce9-a4c2-5fbaa8bf153&amp;title=&amp;width=1726.6667124077137" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669355993057-27a8882a-9859-48e7-9188-f17fc91a795e.png#averageHue=%23131110&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=108&amp;id=u3c57da12&amp;originHeight=97&amp;originWidth=961&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9633&amp;status=done&amp;style=none&amp;taskId=udaa97a37-5c2a-44da-9674-14cf2cfa0a0&amp;title=&amp;width=1067.7778060642297" alt="image.png"><br><a name="iE55s"></a></p><h3 id="MPxDeformerNode">MPxDeformerNode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356025407-d53cd6b6-cbdb-4fcb-b805-7cde5540ac42.png#averageHue=%230d0d0d&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=642&amp;id=u12951ebb&amp;originHeight=578&amp;originWidth=1550&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=288740&amp;status=done&amp;style=none&amp;taskId=ud226216a-3c77-4f3b-a01a-eb27fb1868a&amp;title=&amp;width=1722.2222678455319" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356050081-1d8d4016-947b-4c8b-8ee7-3a43518a50e2.png#averageHue=%23080706&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=410&amp;id=oaJRJ&amp;originHeight=369&amp;originWidth=1419&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40168&amp;status=done&amp;style=none&amp;taskId=ubb6dc37b-0067-4213-b570-9fedf41763e&amp;title=&amp;width=1576.6667084340706" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356550372-1e916526-0fe3-4a99-b450-007141338fc0.png#averageHue=%230b0b0b&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=553&amp;id=u690eee88&amp;originHeight=498&amp;originWidth=1517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=241699&amp;status=done&amp;style=none&amp;taskId=u526e405c-7ee6-4763-8500-dbb1b88be8a&amp;title=&amp;width=1685.5556002075302" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669356634899-5dae2046-df65-429d-8805-ee447cfa25f5.png#averageHue=%230c0b0a&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=373&amp;id=ufaf9dabb&amp;originHeight=336&amp;originWidth=1092&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31029&amp;status=done&amp;style=none&amp;taskId=uda7bd747-a134-4d48-9472-b734da07645&amp;title=&amp;width=1213.3333654756907" alt="image.png"><br>deform方法是由compute方法自动调用的<br><a name="d052s"></a></p><h3 id="MPxDeformerNode-Attributes">MPxDeformerNode Attributes</h3><p>MPxDeformerNode 自带的属性:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669357128617-3053f189-10f7-4efc-90c7-36e5861d26fa.png#averageHue=%230b0b0b&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=596&amp;id=u242d61b4&amp;originHeight=536&amp;originWidth=1403&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=184275&amp;status=done&amp;style=none&amp;taskId=u07543215-b9eb-480e-b6f8-dac44166d44&amp;title=&amp;width=1558.8889301853426" alt="image.png"><br><a name="GBDH8"></a></p><h3 id="提醒">提醒</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669357196384-b048f1b1-8fa0-449b-ad53-429b20da40e0.png#averageHue=%230d0d0d&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=347&amp;id=u7f7dfbd9&amp;originHeight=312&amp;originWidth=1471&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=186140&amp;status=done&amp;style=none&amp;taskId=u50f233d0-1224-441d-83cd-f3d14e582f9&amp;title=&amp;width=1634.4444877424369" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669357212850-8737f12b-dac4-40f2-b8b1-90288f0f14f1.png#averageHue=%230f0d0c&amp;clientId=u5f664d41-9059-4&amp;from=paste&amp;height=312&amp;id=u1fbdea20&amp;originHeight=281&amp;originWidth=939&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37218&amp;status=done&amp;style=none&amp;taskId=u7b0303b6-7335-4ecb-8665-f04bd4fce06&amp;title=&amp;width=1043.3333609722285" alt="image.png"><br><a name="oqCbJ"></a></p><h3 id="创建变形器节点的三个举例">创建变形器节点的三个举例</h3><p><a name="Z2V6L"></a></p><h4 id="basicdeformernode">basicdeformernode</h4><p>创建一个名字叫basicdeformernode的变形器（遍历顶点，每隔一个顶点，改变顶点的位置）<br>然后可以通过cmds.deformer(typ=“basicdeformernode”)为选择的物体添加变形节点<br>变形使用的函数：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669601246904-9401a1e9-a3b4-49c8-8e47-581c3165cbfb.png#averageHue=%23ffffff&amp;clientId=u62d82c1e-27cd-4&amp;from=paste&amp;height=441&amp;id=u259ef204&amp;originHeight=397&amp;originWidth=572&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25233&amp;status=done&amp;style=none&amp;taskId=uf6e5ff20-e0c1-4fb5-9c36-f9c27b99539&amp;title=&amp;width=635.5555723920285" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> ommpx</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BasicDeformerNode</span>(ommpx.MPxDeformerNode):</span><br><span class="line"></span><br><span class="line">    TYPE_NAME = <span class="string">&quot;basicdeformernode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FC</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BasicDeformerNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, data_block, geo_iter, matrix, multi_index</span>):</span><br><span class="line">        </span><br><span class="line">        envelope = data_block.inputValue(<span class="variable language_">self</span>.envelope).asFloat() <span class="comment"># 总权重</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> envelope == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        geo_iter.reset() <span class="comment"># 重置迭代器</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geo_iter.isDone():</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> geo_iter.index() % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                pt = geo_iter.position()</span><br><span class="line">                <span class="comment"># 局部空间</span></span><br><span class="line">                <span class="comment"># pt.x += (0.2*envelope)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment"># 世界空间</span></span><br><span class="line">                pt = pt * matrix * <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">                geo_iter.setPosition(pt)</span><br><span class="line"></span><br><span class="line">            geo_iter.<span class="built_in">next</span>()    </span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> BasicDeformerNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(BasicDeformerNode.TYPE_NAME,</span><br><span class="line">                               BasicDeformerNode.TYPE_ID,</span><br><span class="line">                               BasicDeformerNode.creator,</span><br><span class="line">                               BasicDeformerNode.initialize,</span><br><span class="line">                               ommpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BasicDeformerNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(BasicDeformerNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BasicDeformerNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    plugin_name = <span class="string">&quot;basic_deformer_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(&quot;C:/Users/Adiministrator/Destop/test.ma&quot;,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.select(&quot;nurbsPlane1&quot;); cmds.deformer(typ=&quot;basicdeformernode&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="AfQbY"></a></p><h4 id="blenddeformernode">blenddeformernode</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> ommpx</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BlendDeformerNode</span>(ommpx.MPxDeformerNode):</span><br><span class="line"></span><br><span class="line">    TYPE_NAME = <span class="string">&quot;blenddeformernode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FD</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(BlendDeformerNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, data_block, geo_iter, matrix, multi_index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            变形的逻辑</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data_block (_type_): 数据块</span></span><br><span class="line"><span class="string">            geo_iter (_type_): 针对geometry的顶点迭代器</span></span><br><span class="line"><span class="string">            matrix (_type_): 世界空间的矩阵</span></span><br><span class="line"><span class="string">            multi_index (_type_): _description_</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># envelope是MPxDeformerNode类自带的属性</span></span><br><span class="line">        envelope = data_block.inputValue(<span class="variable language_">self</span>.envelope).asFloat() <span class="comment"># 获取控制整体权重值的值</span></span><br><span class="line">        <span class="keyword">if</span> envelope == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>    </span><br><span class="line"></span><br><span class="line">        blend_weight = data_block.inputValue(<span class="variable language_">self</span>.blend_weight).asFloat() <span class="comment"># 获取混合的权重值</span></span><br><span class="line">        <span class="keyword">if</span> blend_weight == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target_mesh = data_block.inputValue(<span class="variable language_">self</span>.blend_mesh).asMesh()  <span class="comment"># 获取目标mesh</span></span><br><span class="line">        <span class="keyword">if</span> target_mesh.isNull():</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target_points = om.MPointArray() <span class="comment"># 定义一个接受目标mesh所有点的数组</span></span><br><span class="line"></span><br><span class="line">        target_mesh_fn = om.MFnMesh(target_mesh) <span class="comment"># 定义一个目标mesh的函数集</span></span><br><span class="line">        target_mesh_fn.getPoints(target_points) <span class="comment"># 使用函数集的方法将点放入到点数组中</span></span><br><span class="line"></span><br><span class="line">        global_weight = blend_weight * envelope  <span class="comment"># 得到总的权重值</span></span><br><span class="line"></span><br><span class="line">        geo_iter.reset() <span class="comment"># 重置迭代器</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geo_iter.isDone():</span><br><span class="line">            </span><br><span class="line">            source_pt = geo_iter.position()</span><br><span class="line">            target_pt = target_points[geo_iter.index()]</span><br><span class="line"></span><br><span class="line">            source_weight = <span class="variable language_">self</span>.weightValue(data_block, multi_index, geo_iter.index()) <span class="comment"># 获取绘制的权重值</span></span><br><span class="line"></span><br><span class="line">            final_pt = source_pt + ((target_pt - source_pt) * global_weight * source_weight)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            geo_iter.setPosition(final_pt)</span><br><span class="line">            </span><br><span class="line">            geo_iter.<span class="built_in">next</span>()    </span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> BlendDeformerNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        </span><br><span class="line">        typed_attr = om.MFnTypedAttribute()</span><br><span class="line">        cls.blend_mesh = typed_attr.create(<span class="string">&quot;blendMesh&quot;</span>, <span class="string">&quot;bMesh&quot;</span>, om.MFnData.kMesh)</span><br><span class="line"></span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line">        cls.blend_weight = numeric_attr.create(<span class="string">&quot;blendWeight&quot;</span>, <span class="string">&quot;bWeight&quot;</span>, om.MFnNumericData.kFloat, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.setKeyable(<span class="literal">True</span>)</span><br><span class="line">        numeric_attr.setMin(<span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.setMax(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.blend_mesh)</span><br><span class="line">        cls.addAttribute(cls.blend_weight)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#变形器节点具有默认的outputGeom属性，因此我们没必要再创建一个输出的属性，我们可以直接利用这个默认的outputGemo属性</span></span><br><span class="line">        output_geom = ommpx.cvar.MPxGeometryFilter_outputGeom  </span><br><span class="line"></span><br><span class="line">        cls.attributeAffects(cls.blend_mesh, output_geom)</span><br><span class="line">        cls.attributeAffects(cls.blend_weight,output_geom)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(BlendDeformerNode.TYPE_NAME,</span><br><span class="line">                               BlendDeformerNode.TYPE_ID,</span><br><span class="line">                               BlendDeformerNode.creator,</span><br><span class="line">                               BlendDeformerNode.initialize,</span><br><span class="line">                               ommpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BlendDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line">    cmds.makePaintable(BlendDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>, attrType=<span class="string">&quot;multiFloat&quot;</span>, shapeMode = <span class="string">&quot;deformer&quot;</span>) <span class="comment"># 使其能绘制权重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    cmds.makePaintable(BlendDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>,remove=<span class="literal">True</span>) <span class="comment"># 移除使其能绘制权重</span></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(BlendDeformerNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(BlendDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    plugin_name = <span class="string">&quot;blend_deformer_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(&quot;D:/ZhangRuiChen/zrctest/blend_test.ma&quot;,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.select(&quot;sourceSphere&quot;); cmds.deformer(typ=&quot;blenddeformernode&quot;)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.connectAttr(&quot;deformerTargetShape.outMesh&quot;, &quot;blenddeformernode1.blendMesh&quot;, force=True)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="WKWiJ"></a></p><h4 id="attractordeformernode">attractordeformernode</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669885141889-8034d785-9229-4f17-b298-f544e314d66c.png#averageHue=%236c6c6c&amp;clientId=uc34e0430-0983-4&amp;from=paste&amp;height=526&amp;id=ubc0d0e8f&amp;originHeight=473&amp;originWidth=310&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29030&amp;status=done&amp;style=none&amp;taskId=uae417cc9-9c77-4b0c-a221-7143d9e847d&amp;title=&amp;width=344.4444535691064" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669949631088-6257e607-fd16-41e0-9671-0b43342621e1.png#averageHue=%233a3938&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=334&amp;id=u61cce788&amp;originHeight=301&amp;originWidth=983&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44627&amp;status=done&amp;style=none&amp;taskId=ub33502f4-1fd1-4a61-bed4-6f5f6b0764f&amp;title=&amp;width=1092.2222511562309" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.OpenMayaMPx <span class="keyword">as</span> ommpx</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AttractorDeformerNode</span>(ommpx.MPxDeformerNode):</span><br><span class="line"></span><br><span class="line">    TYPE_NAME = <span class="string">&quot;attractordeformernode&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FE</span>)</span><br><span class="line"></span><br><span class="line">    MAX_ANGLE = <span class="number">0.5</span> * <span class="number">3.14159265</span> <span class="comment"># 90度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(AttractorDeformerNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deform</span>(<span class="params">self, data_block, geo_iter, world_matrix, multi_index</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            变形的逻辑</span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            data_block (_type_): 数据块</span></span><br><span class="line"><span class="string">            geo_iter (_type_): 针对geometry的顶点迭代器</span></span><br><span class="line"><span class="string">            matrix (_type_): 世界空间的矩阵</span></span><br><span class="line"><span class="string">            multi_index (_type_): geom_index</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># envelope是MPxDeformerNode类自带的属性</span></span><br><span class="line">        envelope = data_block.inputValue(<span class="variable language_">self</span>.envelope).asFloat() <span class="comment"># 获取控制整体权重值的值</span></span><br><span class="line">        <span class="keyword">if</span> envelope == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span>    </span><br><span class="line">        </span><br><span class="line">        max_distance = data_block.inputValue(AttractorDeformerNode.max_distance).asFloat()</span><br><span class="line">        <span class="keyword">if</span> max_distance == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        target_position = data_block.inputValue(AttractorDeformerNode.target_position).asFloatVector()</span><br><span class="line">        target_position = om.MPoint(target_position) * world_matrix.inverse() <span class="comment"># 将目标位置转换为局部空间下的数值</span></span><br><span class="line">        target_position = om.MFloatVector(target_position) <span class="comment"># 获取目标位置在局部空间下的floatVector</span></span><br><span class="line"></span><br><span class="line">        input_handle = data_block.outputArrayValue(<span class="variable language_">self</span>.<span class="built_in">input</span>) <span class="comment"># 使用outputArray代替inputArray以避免重新计算（外网翻译）</span></span><br><span class="line">        input_handle.jumpToElement(multi_index)</span><br><span class="line">        input_element_handle = input_handle.outputValue()</span><br><span class="line"></span><br><span class="line">        input_geom = input_element_handle.child(<span class="variable language_">self</span>.inputGeom).asMesh()</span><br><span class="line">        mesh_fn = om.MFnMesh(input_geom)</span><br><span class="line"></span><br><span class="line">        normals = om.MFloatVectorArray()  <span class="comment"># 用来存取inputgeom的顶点的所有浮点法线</span></span><br><span class="line">        mesh_fn.getVertexNormals(<span class="literal">False</span>, normals) <span class="comment"># False的作用是不要average normal</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        geo_iter.reset()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> geo_iter.isDone():</span><br><span class="line">            <span class="comment"># 顶点迭代器所获取的位置都是在局部空间下的位置</span></span><br><span class="line">            pt_local = geo_iter.position()</span><br><span class="line"></span><br><span class="line">            target_vector = target_position - om.MFloatVector(pt_local)</span><br><span class="line"></span><br><span class="line">            distance = target_vector.length()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> distance &lt;= max_distance:</span><br><span class="line"></span><br><span class="line">                normal = normals[geo_iter.index()] <span class="comment"># 局部空间下的顶点的法线浮点向量</span></span><br><span class="line"></span><br><span class="line">                angle = normal.angle(target_vector)  <span class="comment"># 顶点的法线与顶点与目标点的向量之间的角度</span></span><br><span class="line">                <span class="keyword">if</span> angle &lt;= AttractorDeformerNode.MAX_ANGLE:</span><br><span class="line"></span><br><span class="line">                    offset = target_vector * ((max_distance-distance)/max_distance)</span><br><span class="line"></span><br><span class="line">                    new_pt_local = pt_local + om.MVector(offset)  <span class="comment"># 局部空间下的新顶点位置</span></span><br><span class="line"></span><br><span class="line">                    geo_iter.setPosition(new_pt_local)</span><br><span class="line"></span><br><span class="line">            geo_iter.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryAttribute</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 返回要辅助修改的属性 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> AttractorDeformerNode.target_position</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">accessoryNodeSetup</span>(<span class="params">self, dag_modifier</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; dag_modifier用于执行节点创建和连接操作 &quot;&quot;&quot;</span></span><br><span class="line">        locator = dag_modifier.createNode(<span class="string">&quot;locator&quot;</span>)</span><br><span class="line"></span><br><span class="line">        locator_fn = om.MFnDependencyNode(locator)</span><br><span class="line">        locator_translate_plug = locator_fn.findPlug(<span class="string">&quot;translate&quot;</span>, <span class="literal">False</span>) <span class="comment"># False意思是不需要networkplug，networkplug意思是在DG中建立连接的属性</span></span><br><span class="line"></span><br><span class="line">        target_position_plug = om.MPlug(<span class="variable language_">self</span>.thisMObject(), AttractorDeformerNode.target_position)  <span class="comment"># 获取变形器的target_position的plug</span></span><br><span class="line">        dag_modifier.connect(locator_translate_plug, target_position_plug)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将定位器得位置设置在output_geom的位置</span></span><br><span class="line">        <span class="comment"># 这里的output_geom指的是shape节点</span></span><br><span class="line">        <span class="comment"># parent指的是transform节点，因为只有transform节点才有xyz坐标</span></span><br><span class="line">        output_geom_plug = om.MPlug(<span class="variable language_">self</span>.thisMObject(), <span class="variable language_">self</span>.outputGeom)</span><br><span class="line">        mPlugArray2 = om.MPlugArray()</span><br><span class="line">        output_geom_plug[<span class="number">0</span>].connectedTo(mPlugArray2,<span class="literal">False</span>,<span class="literal">True</span>)</span><br><span class="line">        output_geom_obj = mPlugArray2[<span class="number">0</span>].node()</span><br><span class="line">        output_geom_fn = om.MFnDagNode(output_geom_obj)</span><br><span class="line">        parent_obj = output_geom_fn.parent(<span class="number">0</span>)</span><br><span class="line">        parent_fn = om.MFnDependencyNode(parent_obj)</span><br><span class="line">        parent_translate_plug = parent_fn.findPlug(<span class="string">&quot;translate&quot;</span>,<span class="literal">False</span>)</span><br><span class="line">        parent_translate_x_handle = parent_translate_plug.child(<span class="number">0</span>).asFloat()</span><br><span class="line">        parent_translate_y_handle = parent_translate_plug.child(<span class="number">1</span>).asFloat()</span><br><span class="line">        parent_translate_z_handle = parent_translate_plug.child(<span class="number">2</span>).asFloat()</span><br><span class="line">    </span><br><span class="line">        locator_translate_plug.child(<span class="number">0</span>).setFloat(parent_translate_x_handle)</span><br><span class="line">        locator_translate_plug.child(<span class="number">1</span>).setFloat(parent_translate_y_handle)</span><br><span class="line">        locator_translate_plug.child(<span class="number">2</span>).setFloat(parent_translate_z_handle)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> AttractorDeformerNode()</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        </span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line">        cls.max_distance = numeric_attr.create(<span class="string">&quot;maximumDistance&quot;</span>, <span class="string">&quot;maxDist&quot;</span>, om.MFnNumericData.kFloat, <span class="number">1.0</span>)</span><br><span class="line">        numeric_attr.setKeyable(<span class="literal">True</span>)</span><br><span class="line">        numeric_attr.setMin(<span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.setMax(<span class="number">2.0</span>)</span><br><span class="line"></span><br><span class="line">        cls.target_position = numeric_attr.createPoint(<span class="string">&quot;targetPosition&quot;</span>, <span class="string">&quot;targetPos&quot;</span>)</span><br><span class="line">        numeric_attr.setKeyable(<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.max_distance)</span><br><span class="line">        cls.addAttribute(cls.target_position)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#变形器节点具有默认的outputGeom属性，因此我们没必要再创建一个输出的属性，我们可以直接利用这个默认的outputGemo属性</span></span><br><span class="line">        output_geom = ommpx.cvar.MPxGeometryFilter_outputGeom  </span><br><span class="line"></span><br><span class="line">        cls.attributeAffects(cls.max_distance, output_geom)</span><br><span class="line">        cls.attributeAffects(cls.target_position,output_geom)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(AttractorDeformerNode.TYPE_NAME,</span><br><span class="line">                               AttractorDeformerNode.TYPE_ID,</span><br><span class="line">                               AttractorDeformerNode.creator,</span><br><span class="line">                               AttractorDeformerNode.initialize,</span><br><span class="line">                               ommpx.MPxNode.kDeformerNode)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(AttractorDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line">    cmds.makePaintable(AttractorDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>, attrType=<span class="string">&quot;multiFloat&quot;</span>, shapeMode = <span class="string">&quot;deformer&quot;</span>) <span class="comment"># 使其能绘制权重</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    cmds.makePaintable(AttractorDeformerNode.TYPE_NAME, <span class="string">&quot;weights&quot;</span>,remove=<span class="literal">True</span>) <span class="comment"># 移除使其能绘制权重</span></span><br><span class="line">    plugin_fn = ommpx.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(AttractorDeformerNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(AttractorDeformerNode.TYPE_NAME))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line">    plugin_name = <span class="string">&quot;attractor_deformer_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(</span><br><span class="line">        <span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(&quot;D:/ZhangRuiChen/zrctest/attractor_test.ma&quot;,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.select(&quot;pSphere1&quot;); cmds.deformer(typ=&quot;attractordeformernode&quot;)&#x27;</span>)</span><br><span class="line">    <span class="comment">#cmds.evalDeferred(&#x27;cmds.connectAttr(&quot;locator1.translate&quot;,&quot;attractordeformernode1.targetPosition&quot;,f=True)&#x27;)</span></span><br></pre></td></tr></table></figure><p><a name="ChJzT"></a></p><h2 id="CallBack">CallBack</h2><p><a name="wF8X2"></a></p><h3 id="CallBack介绍">CallBack介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972488001-309540ae-07bb-4005-9919-aa1bcbcd5249.png#averageHue=%23090909&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=607&amp;id=uf36b7ab6&amp;originHeight=546&amp;originWidth=1583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=232144&amp;status=done&amp;style=none&amp;taskId=u09bba1cb-0e33-41f0-acb0-9d7fd113a9e&amp;title=&amp;width=1758.8889354835335" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972508805-3935a541-c38a-41c7-bff5-a896383060c3.png#averageHue=%23070606&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=451&amp;id=u73d5f3e5&amp;originHeight=406&amp;originWidth=1488&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36769&amp;status=done&amp;style=none&amp;taskId=uc8872394-a571-4aba-9dc3-eed480c8e03&amp;title=&amp;width=1653.3333771317104" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972555239-dc7a204c-e356-4a26-98cd-78eecc67203a.png#averageHue=%230a0a0a&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=316&amp;id=u54239874&amp;originHeight=284&amp;originWidth=1421&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=121474&amp;status=done&amp;style=none&amp;taskId=u2df6defd-ff08-4b87-aa18-24fdac8740e&amp;title=&amp;width=1578.8889307151617" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669972581861-96ac13e4-dc9c-432e-a38c-9fc0e0cb561d.png#averageHue=%230c0b0a&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=289&amp;id=u05ef04b1&amp;originHeight=260&amp;originWidth=773&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24062&amp;status=done&amp;style=none&amp;taskId=u37fb79ad-66a9-4f9c-a91f-07d85da429f&amp;title=&amp;width=858.8889116416749" alt="image.png"><br><a name="pdr4V"></a></p><h3 id="CallBack-vs-ScriptJobs">CallBack vs ScriptJobs</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669973658033-4c79b1d1-9452-4ef8-a6e6-8c4718c15060.png#averageHue=%23090909&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=322&amp;id=udb20517a&amp;originHeight=290&amp;originWidth=1535&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=123374&amp;status=done&amp;style=none&amp;taskId=u72d56818-e005-4259-9bcc-2d2f92de29f&amp;title=&amp;width=1705.5556007373493" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669973698429-03371990-4d28-4a58-a840-c328a893017d.png#averageHue=%230b0a09&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=268&amp;id=u4d182dee&amp;originHeight=241&amp;originWidth=903&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=25522&amp;status=done&amp;style=none&amp;taskId=u9eca8eda-559f-496e-8fca-521a2573681&amp;title=&amp;width=1003.3333599125905" alt="image.png"><br><a name="zUZUZ"></a></p><h3 id="MMessage">MMessage</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669974320245-42120466-d32c-4ecf-9172-d2c20ed0e2a0.png#averageHue=%230a0a0a&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=487&amp;id=u0a033b4e&amp;originHeight=438&amp;originWidth=1473&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=183961&amp;status=done&amp;style=none&amp;taskId=u2e9e4661-09ea-4df6-8dc8-1b3973d71ac&amp;title=&amp;width=1636.666710023528" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1669974341909-a7a9ab9a-696e-4401-a3d7-be2bf57cb093.png#averageHue=%230c0b0a&amp;clientId=u706cb6cd-4e7a-4&amp;from=paste&amp;height=300&amp;id=u78fb9785&amp;originHeight=270&amp;originWidth=1078&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26516&amp;status=done&amp;style=none&amp;taskId=u43a6d480-5105-4ad5-9240-28951bb8ef4&amp;title=&amp;width=1197.7778095080537" alt="image.png"><br>详情：<a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__py_ref_class_open_maya_1_1_m_message_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__py_ref_class_open_maya_1_1_m_message_html</a><br>点击才能展开<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670232926009-a9fd1da3-d7b6-4e73-9bf9-68474c984507.png#averageHue=%23faf6f5&amp;clientId=u042c0c24-ff4e-4&amp;from=paste&amp;height=286&amp;id=ud08fa497&amp;originHeight=257&amp;originWidth=641&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16912&amp;status=done&amp;style=none&amp;taskId=u3e5a6d1b-d291-46be-8ba8-811380b34b6&amp;title=&amp;width=712.2222410896683" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670229085571-d2f1e418-55d9-4202-9e96-d148aafe3e9d.png#averageHue=%23f7f8fb&amp;clientId=u042c0c24-ff4e-4&amp;from=paste&amp;height=1050&amp;id=u24d41402&amp;originHeight=945&amp;originWidth=526&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57798&amp;status=done&amp;style=none&amp;taskId=ua93d13aa-78bc-45ba-95ae-93c0e8cd56a&amp;title=&amp;width=584.4444599269353" alt="image.png"><br>MEventMessage：在发生添加的全局事件时执行（例如场景被打开，选择发生变化，事件发生改变）时添加callback<br>MSceneMessage: 场景事件添加callback<br>MTimmerMessage: 在特定的事件间隔内调用一个函数<br><a name="cQifq"></a></p><h3 id="管理回调函数">管理回调函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670223085104-a250a1fb-6b2d-41ba-9713-e5c5985ab042.png#averageHue=%230d0d0d&amp;clientId=u042c0c24-ff4e-4&amp;from=paste&amp;height=313&amp;id=ud2c5aefb&amp;originHeight=282&amp;originWidth=1098&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=128211&amp;status=done&amp;style=none&amp;taskId=ue9e1910f-2311-4995-8b0f-700b4ea080c&amp;title=&amp;width=1220.0000323189638" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670223097855-5501613c-244e-40a0-b503-020f648889c5.png#averageHue=%230e0d0b&amp;clientId=u042c0c24-ff4e-4&amp;from=paste&amp;height=297&amp;id=u0aace71e&amp;originHeight=267&amp;originWidth=637&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26408&amp;status=done&amp;style=none&amp;taskId=u7b4bc1df-cfdb-4f6e-aa82-d153ca7ae91&amp;title=&amp;width=707.7777965274863" alt="image.png"><br><a name="IArRy"></a></p><h3 id="获取MEventMessage的事件名字">获取MEventMessage的事件名字</h3><p>import maya.api.OpenMaya as om<br>om.MEventMessage.getEventNames()<br>其中常用的事件：<br>deleteAll，undoSupressed（撤销后的返回），undo（撤销），timeChanged（时间轴变化）<br>其他事件的解释可以通过scriptjob命令的帮助文档找到:<br><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html</a><br><a name="Du513"></a></p><h3 id="举例：-2">举例：</h3><p>MEventMessage<br>MSceneMessage<br>MConditionMessage<br>MUiMessage<br>MTimerMessage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaAnim <span class="keyword">as</span> oma</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">callback_ids = [] <span class="comment"># 定义全局变量存放callback_id</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_new_scene</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当新场景加载时调用,client_data为调用这个函数时传递的参数(可以为None) &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;New Scene opened&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_time_changed</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当时间轴发生改变时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Time changed: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(oma.MAnimControl.currentTime().asUnits(om.MTime.uiUnit()))) <span class="comment"># 输出当前时间轴的帧数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_selection_changed</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当选择发生改变时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Selection changed&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">before_import</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 导入前执行 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Import pre-processing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">after_import</span>(<span class="params">client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 导入后执行 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Import post-processing&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_viewport_changed</span>(<span class="params">model_panel,*args</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 在指定的视口面板处切换相机时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Camera changed in model panel &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(model_panel))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_playing_back_state_changed</span>(<span class="params">is_playing, client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 当使用播放键预览拍屏时调用 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Playing state changed: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(is_playing))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_timer_fired</span>(<span class="params">elapsed_time, previous_execution_time, client_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">    定时器调用此函数,每经过设定的秒数就调用一次这个函数</span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        elapsed_time (float): 设定的秒数</span></span><br><span class="line"><span class="string">        previous_execution_time (_type_): 以前的运行的时间，为了防止此函数还没执行完就再次被调用</span></span><br><span class="line"><span class="string">        client_data (_type_): 用户自定义的参数,可以不传递</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Timer fired&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> callback_ids <span class="comment"># 调用全局变量</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line">    <span class="comment"># 注册回调，参数为事件类型名，回调函数，还有第三个参数可选（传递给回调函数的参数），返回值为回调函数id</span></span><br><span class="line">    callback_ids.append(om.MEventMessage.addEventCallback(<span class="string">&quot;NewSceneOpened&quot;</span>, on_new_scene)) </span><br><span class="line">    callback_ids.append(om.MEventMessage.addEventCallback(<span class="string">&quot;timeChanged&quot;</span>, on_time_changed))</span><br><span class="line">    callback_ids.append(om.MEventMessage.addEventCallback(<span class="string">&quot;SelectionChanged&quot;</span>, on_selection_changed))</span><br><span class="line"></span><br><span class="line">    callback_ids.append(om.MSceneMessage.addCallback(om.MSceneMessage.kBeforeImport, before_import))</span><br><span class="line">    callback_ids.append(om.MSceneMessage.addCallback(om.MSceneMessage.kAfterImport, after_import))</span><br><span class="line"></span><br><span class="line">    callback_ids.append(om.MConditionMessage.addConditionCallback(<span class="string">&quot;playingBack&quot;</span>, on_playing_back_state_changed))</span><br><span class="line">    </span><br><span class="line">    callback_ids.append(omui.MUiMessage.addCameraChangedCallback(<span class="string">&quot;modelPanel4&quot;</span>, on_viewport_changed))</span><br><span class="line"></span><br><span class="line">    callback_ids.append(om.MTimerMessage.addTimerCallback(<span class="number">2.5</span>, on_timer_fired))</span><br><span class="line"></span><br><span class="line">    om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">global</span> callback_ids</span><br><span class="line">    om.MEventMessage.removeCallbacks(callback_ids)</span><br><span class="line">    callback_ids = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;callback_example.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="laIwQ"></a></p><h2 id="遍历dag">遍历dag</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292234464-c3d01a0b-ccd6-4ee8-852f-e5389fdf7752.png#averageHue=%23080808&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=459&amp;id=ua4023119&amp;originHeight=413&amp;originWidth=1567&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=167105&amp;status=done&amp;style=none&amp;taskId=uce053f01-334d-4e15-8de8-78aa1e79a3e&amp;title=&amp;width=1741.1111572348054" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292256216-69999efc-8d41-4710-ab15-1a985a9c8152.png#averageHue=%23060605&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=424&amp;id=u89628321&amp;originHeight=382&amp;originWidth=1411&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=39794&amp;status=done&amp;style=none&amp;taskId=uc546536e-6fbf-4060-808a-c47acbfc2d3&amp;title=&amp;width=1567.7778193097067" alt="image.png"><br><a name="cFSBy"></a></p><h3 id="什么是dag">什么是dag</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292398236-03017c4c-8d5f-4f10-b6d0-91592fe0db6b.png#averageHue=%230a0a0a&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=610&amp;id=u0bc3b1bf&amp;originHeight=549&amp;originWidth=1436&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=221882&amp;status=done&amp;style=none&amp;taskId=uc50a015a-a103-4472-b546-08929a1fe2c&amp;title=&amp;width=1595.5555978233442" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292460174-2d433e3c-e8f9-4689-9ec2-571f1fcbd908.png#averageHue=%230e0e0e&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=58&amp;id=uec348313&amp;originHeight=52&amp;originWidth=1490&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=42870&amp;status=done&amp;style=none&amp;taskId=ubd55d0a7-b5fe-426b-b234-1d7cd44798d&amp;title=&amp;width=1655.5555994128015" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292422966-d1c5fd82-cc5b-41cb-b937-675af3cfc63e.png#averageHue=%230b0a0a&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=566&amp;id=u6bf9b251&amp;originHeight=509&amp;originWidth=910&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47642&amp;status=done&amp;style=none&amp;taskId=u319e8271-3a6f-4646-8a16-f5d6cd7fb55&amp;title=&amp;width=1011.111137896409" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670292473901-af9cd6c3-52b3-41bd-9e80-ae83a553ea5b.png#averageHue=%230f0c0a&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=51&amp;id=u7343d157&amp;originHeight=46&amp;originWidth=808&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6927&amp;status=done&amp;style=none&amp;taskId=u30d89d08-9196-49be-965b-c1985fb545f&amp;title=&amp;width=897.7778015607676" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293619209-ed47aed6-aeb7-43e5-8dbd-1333230b98dc.png#averageHue=%23454545&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=886&amp;id=u65792787&amp;originHeight=797&amp;originWidth=1623&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=321869&amp;status=done&amp;style=none&amp;taskId=uc9cf94af-62f9-4940-99b1-c4c33239cc7&amp;title=&amp;width=1803.3333811053535" alt="image.png"><br><a name="fAnTI"></a></p><h3 id="DG-vs-DAG">DG vs DAG</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293830064-e4d086ae-db35-4015-a039-1dcab37c54ac.png#averageHue=%23111111&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=869&amp;id=u1b0787ac&amp;originHeight=782&amp;originWidth=1578&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=266546&amp;status=done&amp;style=none&amp;taskId=u8128643d-cd26-48d6-9a51-cc55757311d&amp;title=&amp;width=1753.333379780806" alt="image.png"><br>DG:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293934734-671f858a-c3d3-4606-b322-07be4b8f1c9f.png#averageHue=%23181614&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=149&amp;id=ucf7299e1&amp;originHeight=134&amp;originWidth=430&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10145&amp;status=done&amp;style=none&amp;taskId=ud7190181-f6e4-41be-b488-d30ed0c2252&amp;title=&amp;width=477.7777904345669" alt="image.png"><br>DAG:<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293952304-026248cd-50f0-4949-951e-a39832dc47e3.png#averageHue=%23130f0c&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=100&amp;id=ue9c857d9&amp;originHeight=90&amp;originWidth=250&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=4254&amp;status=done&amp;style=none&amp;taskId=ubcad7d02-6ea2-47b5-b3f5-933558275f6&amp;title=&amp;width=277.7777851363761" alt="image.png"><br><a name="RT5I8"></a></p><h3 id="遍历dag的常用api-class">遍历dag的常用api class</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670293997068-3d94d62f-ce6b-4fad-8699-234e64ee6427.png#averageHue=%230b0b0b&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=492&amp;id=u072129c2&amp;originHeight=443&amp;originWidth=735&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=88990&amp;status=done&amp;style=none&amp;taskId=u9be385a2-bef2-46da-aeb5-f318ec6b27c&amp;title=&amp;width=816.6666883009457" alt="image.png"><br><a name="xZdiD"></a></p><h3 id="MItDag">MItDag</h3><p><a href="https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_class_m_it_dag_html">https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_class_m_it_dag_html</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294064469-4920d97b-6f92-41f7-8771-e73e0bd0a24b.png#averageHue=%23090909&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=563&amp;id=uc63fdefe&amp;originHeight=507&amp;originWidth=1585&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=190360&amp;status=done&amp;style=none&amp;taskId=u7aee5de1-3dca-4924-9a7c-3f19d2cadfc&amp;title=&amp;width=1761.1111577646245" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294104355-c1a8787c-e8ce-45ae-a79f-181ac15dbbb6.png#averageHue=%23080707&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=417&amp;id=ub9109e3b&amp;originHeight=375&amp;originWidth=1095&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=38847&amp;status=done&amp;style=none&amp;taskId=u378de64f-b571-4dad-b4d4-8f7454d5c9f&amp;title=&amp;width=1216.6666988973273" alt="image.png"><br><a name="OAENk"></a></p><h3 id="MFnDagNode">MFnDagNode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294341336-eeaea299-9516-44bb-90b8-7258f819f2f4.png#averageHue=%23080808&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=793&amp;id=u7c73b66b&amp;originHeight=714&amp;originWidth=1566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=238697&amp;status=done&amp;style=none&amp;taskId=u1e08df4c-cfb5-41fc-aa9b-a26535552c0&amp;title=&amp;width=1740.00004609426" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294373623-54804cd2-b2ee-41d9-a6ee-d750d503ea32.png#averageHue=%23070706&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=408&amp;id=u3504b445&amp;originHeight=367&amp;originWidth=1248&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33475&amp;status=done&amp;style=none&amp;taskId=u06d5765d-56e5-4db6-ae66-63805df8373&amp;title=&amp;width=1386.6667034007894" alt="image.png"><br><a name="Utj5z"></a></p><h3 id="MDagPath-和-MDagPathArray">MDagPath 和 MDagPathArray</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294577548-ccb4d943-8d92-4b42-a7cc-80dfcd04dc72.png#averageHue=%230a0a0a&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=674&amp;id=u90f42400&amp;originHeight=607&amp;originWidth=1605&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=222042&amp;status=done&amp;style=none&amp;taskId=u4908e162-454a-4240-a318-c2e4648060e&amp;title=&amp;width=1783.3333805755344" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670294597971-19963ec7-1a5e-4e38-a0fa-669fbd475fbe.png#averageHue=%23090808&amp;clientId=ud856797a-7bad-4&amp;from=paste&amp;height=468&amp;id=u4739d8f8&amp;originHeight=421&amp;originWidth=1069&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37094&amp;status=done&amp;style=none&amp;taskId=u17d10d7a-1de6-423b-b8c0-24bb9f4b714&amp;title=&amp;width=1187.7778092431442" alt="image.png"><br><a name="UO1pS"></a></p><h3 id="代码举例">代码举例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line">selection_list = om.MGlobal.getActiveSelectionList()  <span class="comment"># 获取当前选择的对象并为其创建列表</span></span><br><span class="line">traversal_type = om.MItDag.kBreadthFirst <span class="comment"># 遍历方式为广度优先（默认是深度优先）</span></span><br><span class="line">filter_type = om.MFn.kMesh <span class="comment"># 过滤器设置，只遍历kMesh类型</span></span><br><span class="line">dag_iter = om.MItDag(traversal_type,filter_type) <span class="comment"># 创建迭代器，并指定遍历方式和遍历类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> selection_list.isEmpty():</span><br><span class="line">    </span><br><span class="line">    dag_fn = om.MFnDagNode(selection_list.getDependNode(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;Child:&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dag_fn.childCount()):</span><br><span class="line">        child_obj = dag_fn.child(i)</span><br><span class="line">        child_fn = om.MFnDagNode(child_obj)</span><br><span class="line">        <span class="comment">#print(child_fn.fullPathName())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(&quot;Parent:&quot;)</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dag_fn.parentCount()):</span><br><span class="line">        parent_obj = dag_fn.parent(i)</span><br><span class="line">        parent_fn = om.MFnDagNode(parent_obj)</span><br><span class="line">        <span class="comment">#print(parent_fn.fullPathName())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果场景中有选择的物体，那么就以选择的物体为迭代起始点</span></span><br><span class="line">    dag_iter.reset(selection_list.getDependNode(<span class="number">0</span>),traversal_type,filter_type) </span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> dag_iter.isDone():</span><br><span class="line">        <span class="comment"># print(dag_iter.partialPathName()) # 输出短名</span></span><br><span class="line">        <span class="comment"># print(dag_iter.fullPathName()) # 输出长名</span></span><br><span class="line">        <span class="comment"># dag_path = dag_iter.getPath() # 获取dagpath对象</span></span><br><span class="line">        <span class="comment"># print(dag_path.fullPathName()) # 输出dagpath对象的长名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 迭代器遍历类型为kmesh，然后通过类型为kmesh的shape节点得到父节点transform的名字</span></span><br><span class="line">        shape_obj = dag_iter.currentItem()</span><br><span class="line">        dag_fn = om.MFnDagNode(shape_obj)</span><br><span class="line">        dag_fn = om.MFnDagNode(shape_obj)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(dag_fn.parentCount()):</span><br><span class="line">            parent_fn = om.MFnDagNode(dag_fn.parent(i))</span><br><span class="line">            <span class="built_in">print</span>(parent_fn.fullPathName())</span><br><span class="line"></span><br><span class="line">        dag_iter.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p><a name="PhLMD"></a></p><h2 id="contexts（工具，以下所有的上下文的翻译统统理解为工具）">contexts（工具，以下所有的上下文的翻译统统理解为工具）</h2><p><a name="dRb2V"></a></p><h3 id="什么是contexts">什么是contexts</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314380302-2759dcb4-96c9-4b21-9356-2d53238597ff.png#averageHue=%230b0b0b&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=644&amp;id=u323f8700&amp;originHeight=580&amp;originWidth=1516&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=293536&amp;status=done&amp;style=none&amp;taskId=u14d47ef0-7d15-46bb-8a52-644ef70c433&amp;title=&amp;width=1684.4444890669847" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314393717-42515b83-5815-4197-b73f-f52b2c2db5f5.png#averageHue=%230a0908&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=459&amp;id=uc33a7326&amp;originHeight=413&amp;originWidth=1193&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57581&amp;status=done&amp;style=none&amp;taskId=u3cf547d7-c0b4-4678-9c6f-8a34ee1998a&amp;title=&amp;width=1325.5555906707866" alt="image.png"><br><a name="qWk3F"></a></p><h3 id="contexts-class">contexts class</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670320855146-146a11fe-e7a9-411e-b1d9-d58b9c330cfa.png#averageHue=%2312110f&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=79&amp;id=u8728caa8&amp;originHeight=71&amp;originWidth=845&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9417&amp;status=done&amp;style=none&amp;taskId=ufbbfce46-4d32-4de2-b7f7-32074698e2e&amp;title=&amp;width=938.8889137609511" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314506168-9e976551-b9c4-40d3-9154-05c98c1261e7.png#averageHue=%23070707&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=553&amp;id=u536dda83&amp;originHeight=498&amp;originWidth=1560&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=130220&amp;status=done&amp;style=none&amp;taskId=u1b19bdfe-5338-4feb-aa95-eef5717db4e&amp;title=&amp;width=1733.3333792509868" alt="image.png"><br><a name="yasrt"></a></p><h4 id="MPxContext">MPxContext</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314566636-98b3ea1e-9d0c-4747-bb35-2218020358f4.png#averageHue=%230a0a0a&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=748&amp;id=ud98b9990&amp;originHeight=673&amp;originWidth=1505&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=271852&amp;status=done&amp;style=none&amp;taskId=uc86eae1f-512d-4354-8966-b6dab1fdb16&amp;title=&amp;width=1672.222266520984" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314628131-bfae171b-b57a-41c5-a45e-615dcc82baae.png#averageHue=%23090808&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=531&amp;id=uefea2edf&amp;originHeight=478&amp;originWidth=944&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=47400&amp;status=done&amp;style=none&amp;taskId=uf3a88e84-bc4a-4608-8a60-c833daa9f4b&amp;title=&amp;width=1048.8889166749561" alt="image.png"><br><a name="EjDvf"></a></p><h4 id="MPxContextCommand">MPxContextCommand</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314724095-6febfa93-6eea-4fc6-9105-afd449a494eb.png#averageHue=%230b0b0b&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=522&amp;id=uf02ad2a6&amp;originHeight=470&amp;originWidth=1468&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=199346&amp;status=done&amp;style=none&amp;taskId=ueac65ccb-dd00-44e2-8fd6-2d7f77603f7&amp;title=&amp;width=1631.1111543208003" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314741398-3373638b-1a47-4bf9-8867-5d284b8de65b.png#averageHue=%23090807&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=380&amp;id=u18854ee7&amp;originHeight=342&amp;originWidth=1117&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=34098&amp;status=done&amp;style=none&amp;taskId=uf0c2fafe-41ed-4817-b2bc-f16806ad7f9&amp;title=&amp;width=1241.1111439893284" alt="image.png"><br><a name="Bg5Ad"></a></p><h4 id="MPxToolCommand">MPxToolCommand</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314838409-43a977bf-405b-4c77-9730-aedb1ff303fd.png#averageHue=%230a0a0a&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=803&amp;id=ucc5b9b9d&amp;originHeight=723&amp;originWidth=1596&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=321569&amp;status=done&amp;style=none&amp;taskId=u0e8c7561-12c9-40fc-aca5-44a8e6b6c3b&amp;title=&amp;width=1773.333380310625" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670314882771-837d3d6a-b70e-4d2e-a8a9-17717a3f045a.png#averageHue=%23080707&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=631&amp;id=u3381456a&amp;originHeight=568&amp;originWidth=1060&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48382&amp;status=done&amp;style=none&amp;taskId=u4dd9e33c-e430-4e3f-b520-0b5d969ade2&amp;title=&amp;width=1177.7778089782346" alt="image.png"><br><a name="WebzE"></a></p><h3 id="限制">限制</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315161425-a8ef71e2-6d09-4adb-8efe-1f147b239d59.png#averageHue=%230a0a0a&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=774&amp;id=uea1d0fe0&amp;originHeight=697&amp;originWidth=1517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=288780&amp;status=done&amp;style=none&amp;taskId=u0358ebe1-b9eb-488c-9e69-a825fba52d6&amp;title=&amp;width=1685.5556002075302" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315219263-813cdfbd-9de5-4e6c-a69e-4447059f2732.png#averageHue=%23080807&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=583&amp;id=uba1e83d3&amp;originHeight=525&amp;originWidth=1466&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=57377&amp;status=done&amp;style=none&amp;taskId=ue52ba2c5-7e30-4a13-a220-8e1f35b8355&amp;title=&amp;width=1628.8889320397095" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315514778-102a372c-5ec9-4310-a356-34a085abdc54.png#averageHue=%230b0b0b&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=877&amp;id=uacd4817c&amp;originHeight=789&amp;originWidth=1576&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=373584&amp;status=done&amp;style=none&amp;taskId=u9d104a94-f5d6-4217-81a8-c5092cd5ead&amp;title=&amp;width=1751.1111574997149" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670315560657-f135614b-2a7f-4e37-aeb6-c08ecf020f6e.png#averageHue=%23070606&amp;clientId=u7f1d3d8f-5941-4&amp;from=paste&amp;height=827&amp;id=u9b5dc5f0&amp;originHeight=744&amp;originWidth=1552&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=90249&amp;status=done&amp;style=none&amp;taskId=u1155dc37-d283-4e88-ba8a-914ffc61b0c&amp;title=&amp;width=1724.444490126623" alt="image.png"><br><a name="aHpYe"></a></p><h3 id="举例-2">举例</h3><p><a name="jLo8j"></a></p><h4 id="context工具模板">context工具模板</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;Simple Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = <span class="string">&quot;&lt;insert help text here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleContext, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setTitleString(SimpleContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;template_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        <span class="variable language_">self</span>.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpSlateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setHelpString(SimpleContext.HELP_TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOnSetup&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOffCleanup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPress</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        mouse_button = event.mouseButton()  <span class="comment"># 获取鼠标的按键</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mouse_button == omui.MEvent.kLeftMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标左键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Left mouse button pressed&quot;</span>) </span><br><span class="line">        <span class="keyword">elif</span> mouse_button == omui.MEvent.kMiddleMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标中键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Middle mouse button pressed&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse button released&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doDrag</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按住鼠标左键并进行移动时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse drag&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">completeAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下enter键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Complete action (enter/return key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下delete键或者backspace键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Delete action (backspace/delete key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abortAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下esc键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Abort action (escape key pressed)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcSimpleCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(SimpleContextCmd, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(SimpleContextCmd.COMMAND_NAME, SimpleContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(SimpleContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;template_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcSimpleCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="filnU"></a></p><h4 id="custom-select-工具">custom select 工具</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="comment"># 插件介绍: 使用context时按ctrl键框选只选择mesh,按ctrl+shift键时只选择light，不按只框选就全选择</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomSelectContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;Custom Select Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = <span class="string">&quot;Ctrl to select only meshes. Ctrl+Shift to select only lights.&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(CustomSelectContext, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setTitleString(CustomSelectContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;custom_select_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        <span class="variable language_">self</span>.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标</span></span><br><span class="line">        test_file_path = plugin_dir_path + <span class="string">&quot;/test_scene/custom_select_context_test.ma&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpStateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在左下角显示帮助 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.setHelpString(CustomSelectContext.HELP_TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOnSetup&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOffCleanup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPress</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.viewport_start_pos = event.position</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.light_only = <span class="literal">False</span> <span class="comment"># 用来判断是否只选择灯光类型</span></span><br><span class="line">        <span class="variable language_">self</span>.meshes_only = <span class="literal">False</span> <span class="comment"># 用来判断是否只选择mesh类型</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> event.isModifierControl():</span><br><span class="line">            <span class="keyword">if</span> event.isModifierShift():</span><br><span class="line">                <span class="variable language_">self</span>.light_only = <span class="literal">True</span>  <span class="comment"># 当ctrl和shift键同时按下时为True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="variable language_">self</span>.meshes_only = <span class="literal">True</span>  <span class="comment"># 当ctrl键按下时为True</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.viewport_end_pos = event.position</span><br><span class="line"></span><br><span class="line">        initial_selection = om.MGlobal.getActiveSelectionList() <span class="comment"># 获取场景中已经选择的对象的列表</span></span><br><span class="line"></span><br><span class="line">        om.MGlobal.selectFromScreen(<span class="variable language_">self</span>.viewport_start_pos[<span class="number">0</span>], <span class="variable language_">self</span>.viewport_start_pos[<span class="number">1</span>],</span><br><span class="line">                                    <span class="variable language_">self</span>.viewport_end_pos[<span class="number">0</span>], <span class="variable language_">self</span>.viewport_end_pos[<span class="number">1</span>],</span><br><span class="line">                                    om.MGlobal.kReplaceList) <span class="comment"># 根据矩形框选择矩形中的对象（这个命令所进行的选择不会进入undo堆栈，因此需要通过其他命令设置正常的堆栈）</span></span><br><span class="line">        </span><br><span class="line">        selection_list = om.MGlobal.getActiveSelectionList() <span class="comment"># 获取通过矩形框选中的对象的列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.light_only <span class="keyword">or</span> <span class="variable language_">self</span>.meshes_only:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(selection_list.length())):</span><br><span class="line">                obj = selection_list.getDependNode(i)</span><br><span class="line">                shape = om.MFnDagNode(obj).child(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.light_only <span class="keyword">and</span> <span class="keyword">not</span> shape.hasFn(om.MFn.kLight): <span class="comment"># 如果shape节点是light类型</span></span><br><span class="line">                    selection_list.remove(i)</span><br><span class="line">                <span class="keyword">elif</span> <span class="variable language_">self</span>.meshes_only <span class="keyword">and</span> <span class="keyword">not</span> shape.hasFn(om.MFn.kMesh): <span class="comment"># 如果shape节点是mesh类型</span></span><br><span class="line">                    selection_list.remove(i)</span><br><span class="line"></span><br><span class="line">        om.MGlobal.setActiveSelectionList(initial_selection, om.MGlobal.kReplaceList) <span class="comment"># 首先选择场景中之前已经选择的列表</span></span><br><span class="line">        om.MGlobal.selectCommand(selection_list, om.MGlobal.kReplaceList)  <span class="comment"># 通过调用内置的maya选择命令来选择，并且让maya负责维护堆栈</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doDrag</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按住鼠标左键并进行移动时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.viewport_end_pos = event.position</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.draw_selection_rectangle(draw_manager,</span><br><span class="line">                                      <span class="variable language_">self</span>.viewport_start_pos[<span class="number">0</span>],<span class="variable language_">self</span>.viewport_start_pos[<span class="number">1</span>],</span><br><span class="line">                                      <span class="variable language_">self</span>.viewport_end_pos[<span class="number">0</span>],<span class="variable language_">self</span>.viewport_start_pos[<span class="number">1</span>],</span><br><span class="line">                                      <span class="variable language_">self</span>.viewport_end_pos[<span class="number">0</span>],<span class="variable language_">self</span>.viewport_end_pos[<span class="number">1</span>],</span><br><span class="line">                                      <span class="variable language_">self</span>.viewport_start_pos[<span class="number">0</span>],<span class="variable language_">self</span>.viewport_end_pos[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_selection_rectangle</span>(<span class="params">self, draw_manager, x0, y0, x1, y1, x2, y2, x3, y3</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 根据鼠标拖拽的范围进行矩形绘制 &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable() <span class="comment"># 开始绘制</span></span><br><span class="line">        draw_manager.setLineWidth(<span class="number">1.0</span>) <span class="comment"># 设置绘制线的宽度</span></span><br><span class="line">        draw_manager.setColor(om.MColor((<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>))) <span class="comment"># 设置绘制的颜色（颜色数值是一个集合）</span></span><br><span class="line"></span><br><span class="line">        draw_manager.line2d(om.MPoint(x0,y0),om.MPoint(x1,y1))</span><br><span class="line">        draw_manager.line2d(om.MPoint(x1,y1),om.MPoint(x2,y2))</span><br><span class="line">        draw_manager.line2d(om.MPoint(x2,y2),om.MPoint(x3,y3))</span><br><span class="line">        draw_manager.line2d(om.MPoint(x3,y3),om.MPoint(x0,y0))</span><br><span class="line"></span><br><span class="line">        draw_manager.endDrawable() <span class="comment"># 结束绘制</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomSelectContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcCustomSelectCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(CustomSelectContextCmd, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> CustomSelectContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> CustomSelectContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(CustomSelectContextCmd.COMMAND_NAME, CustomSelectContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(CustomSelectContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(CustomSelectContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(CustomSelectContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;custom_select_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>)) </span><br><span class="line">    test_file_path = plugin_dir_path + <span class="string">&quot;/test_scene/custom_select_context_test.ma&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;custom_select_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(test_file_path,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcCustomSelectCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="zOgx0"></a></p><h4 id="创建骨骼工具">创建骨骼工具</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JointCreateContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;JointCreate Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = [<span class="string">&quot;Select first joint location&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Select second joint location&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Select final joint location&quot;</span>,</span><br><span class="line">                 <span class="string">&quot;Press Enter to complete&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(JointCreateContext, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setTitleString(JointCreateContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;joint_create_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        <span class="variable language_">self</span>.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.state = <span class="number">0</span> <span class="comment"># 判断通过工具选择的对象的个数</span></span><br><span class="line">        <span class="variable language_">self</span>.context_selection = om.MSelectionList() <span class="comment"># 通过工具选择的对象的列表</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpStateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.update_help_string()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_help_string</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setHelpString(JointCreateContext.HELP_TEXT[<span class="variable language_">self</span>.state])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        om.MGlobal.selectCommand(om.MSelectionList()) <span class="comment"># 确保工具刚开始使用时是一个健康的选择状态</span></span><br><span class="line">        <span class="variable language_">self</span>.reset_state()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.reset_state()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.state &gt;= <span class="number">0</span> <span class="keyword">and</span> <span class="variable language_">self</span>.state &lt; <span class="number">3</span>:</span><br><span class="line">            om.MGlobal.selectFromScreen(event.position[<span class="number">0</span>], event.position[<span class="number">1</span>],event.position[<span class="number">0</span>],event.position[<span class="number">1</span>],om.MGlobal.kReplaceList)</span><br><span class="line"></span><br><span class="line">            active_selection = om.MGlobal.getActiveSelectionList() <span class="comment"># 获取当前选择的物体</span></span><br><span class="line">            <span class="keyword">if</span> active_selection.length() == <span class="number">1</span>:</span><br><span class="line">                <span class="variable language_">self</span>.context_selection.merge(active_selection) <span class="comment"># 使用merge方法防止重复的对象出现在context_selection中</span></span><br><span class="line"></span><br><span class="line">            om.MGlobal.setActiveSelectionList(<span class="variable language_">self</span>.context_selection) <span class="comment"># 更改当前选择的物体</span></span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.update_state</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">completeAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下enter键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        selection_count = <span class="variable language_">self</span>.context_selection.length()</span><br><span class="line">        <span class="keyword">if</span> selection_count == <span class="number">3</span>:</span><br><span class="line">            om.MGlobal.setActiveSelectionList(om.MSelectionList())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(selection_count):</span><br><span class="line">                transform_fn = om.MFnTransform(<span class="variable language_">self</span>.context_selection.getDependNode(i))</span><br><span class="line"></span><br><span class="line">                cmds.joint(position = transform_fn.translation(om.MSpace.kTransform))</span><br><span class="line">                cmds.delete(transform_fn.name())</span><br><span class="line">            </span><br><span class="line">            cmds.select(clear=<span class="literal">True</span>)</span><br><span class="line">            <span class="variable language_">self</span>.reset_state()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            om.MGlobal.displayError(<span class="string">&quot;Three objects must be selected&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下delete键或者backspace键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        selection_count = <span class="variable language_">self</span>.context_selection.length()</span><br><span class="line">        <span class="keyword">if</span> selection_count &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="variable language_">self</span>.context_selection.remove(selection_count - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            om.MGlobal.setActiveSelectionList(<span class="variable language_">self</span>.context_selection)</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>.update_state()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abortAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下esc键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.reset_state()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 更新状态 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.state = <span class="variable language_">self</span>.context_selection.length()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.update_help_string()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset_state</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重置状态 &quot;&quot;&quot;</span></span><br><span class="line">        om.MGlobal.setActiveSelectionList(om.MSelectionList())</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.context_selection.clear()</span><br><span class="line">        <span class="variable language_">self</span>.update_state</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JointCreateContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcJointCreateCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(JointCreateContextCmd, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> JointCreateContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> JointCreateContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(JointCreateContextCmd.COMMAND_NAME, JointCreateContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(JointCreateContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(JointCreateContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(JointCreateContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line">    plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;joint_create_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>)) </span><br><span class="line">    test_file_path = plugin_dir_path + <span class="string">&quot;/test_scene/joint_create_context_test.ma&quot;</span></span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;joint_create_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.file(test_file_path,o=True,f=True)&#x27;</span>)</span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcJointCreateCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="nmCaZ"></a></p><h4 id="各种绘制举例">各种绘制举例</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 此插件只适用于maya2020及以上版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContext</span>(omui.MPxContext):</span><br><span class="line"></span><br><span class="line">    TITLE = <span class="string">&quot;Simple Context&quot;</span></span><br><span class="line"></span><br><span class="line">    HELP_TEXT = <span class="string">&quot;&lt;insert help text here&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleContext, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setTitleString(SimpleContext.TITLE)</span><br><span class="line">        plugin_dir_path = os.path.dirname(cmds.pluginInfo(<span class="string">&quot;draw_persistence_example_context.py&quot;</span>,p=<span class="literal">True</span>,q=<span class="literal">True</span>))  </span><br><span class="line">        <span class="variable language_">self</span>.setImage(plugin_dir_path + <span class="string">&quot;/icons/icon_windows.png&quot;</span>, omui.MPxContext.kImage1) <span class="comment"># 设置工具的图标 </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">helpStateHasChanged</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setHelpString(SimpleContext.HELP_TEXT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOnSetup</span>(<span class="params">self, event</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 工具加载时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOnSetup&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">toolOffCleanup</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 取消工具加载时执行(在使用工具的同时创建模型maya会自动先取消加载工具再自动加载工具) &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;toolOffCleanup&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPress</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        mouse_button = event.mouseButton()  <span class="comment"># 获取鼠标的按键</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> mouse_button == omui.MEvent.kLeftMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标左键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Left mouse button pressed&quot;</span>) </span><br><span class="line">        <span class="keyword">elif</span> mouse_button == omui.MEvent.kMiddleMouse:</span><br><span class="line">            <span class="comment"># 如果按下鼠标中键执行</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Middle mouse button pressed&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doRelease</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 松开键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse button released&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doDrag</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按住鼠标左键并进行移动时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Mouse drag&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">completeAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下enter键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Complete action (enter/return key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下delete键或者backspace键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Delete action (backspace/delete key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">abortAction</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 按下esc键时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Abort action (escape key pressed)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">doPtrMoved</span>(<span class="params">self, event, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 当鼠标移动并且没有按下鼠标按钮时执行 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.position = om.MPoint(event.position)</span><br><span class="line">        <span class="comment"># self.draw_circle(event, draw_manager)</span></span><br><span class="line">        <span class="variable language_">self</span>.draw_info(draw_manager, frame_context)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">drawFeedback</span>(<span class="params">self, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 无论执行什么操作都会始终执行绘制 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># self.draw_sphere(draw_manager)</span></span><br><span class="line">        <span class="comment"># self.draw_info(draw_manager, frame_context) # 在这个函数中执行绘制text有显示的bug，不推荐使用</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">self, event, draw_manager</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在鼠标指针的位置处绘制圆形 &quot;&quot;&quot;</span></span><br><span class="line">        center = om.MPoint(event.position)</span><br><span class="line">        radius = <span class="number">20</span></span><br><span class="line">        </span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.circle2d(center, radius, <span class="literal">True</span>)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_sphere</span>(<span class="params">self, draw_manager</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在坐标原点绘制一个半径为5cm的圆球 &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.sphere(om.MPoint(<span class="number">0</span>,<span class="number">0</span>), <span class="number">5</span>)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_info</span>(<span class="params">self, draw_manager, frame_context</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在视口左上角绘制文字信息 &quot;&quot;&quot;</span></span><br><span class="line">        viewport_height = frame_context.getViewportDimensions()[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">        info_position = om.MPoint(<span class="number">20</span>, viewport_height - <span class="number">20</span>)</span><br><span class="line">        text = <span class="string">&quot;Mouse pos: &#123;0&#125;, &#123;1&#125;&quot;</span>.<span class="built_in">format</span>(<span class="variable language_">self</span>.position.x, <span class="variable language_">self</span>.position.y)</span><br><span class="line"></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        draw_manager.text2d(info_position, text)</span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleContextCmd</span>(omui.MPxContextCommand):</span><br><span class="line"></span><br><span class="line">        COMMAND_NAME = <span class="string">&quot;rcSimpleCtx&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="built_in">super</span>(SimpleContextCmd, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">makeObj</span>(<span class="params">self</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContext()</span><br><span class="line">        </span><br><span class="line"><span class="meta">        @classmethod</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">            <span class="keyword">return</span> SimpleContextCmd()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>): </span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerContextCommand(SimpleContextCmd.COMMAND_NAME, SimpleContextCmd.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterContextCommand(SimpleContextCmd.COMMAND_NAME)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister context command: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleContextCmd.COMMAND_NAME))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;draw_persistence_example_context.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;context = cmds.rcSimpleCtx(); cmds.setToolTo(context)&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="y0TKk"></a></p><h1>第三卷</h1><p><a name="mPC43"></a></p><h2 id="Locators（可参考HelloWorldNode）">Locators（可参考HelloWorldNode）</h2><p><a name="L8NWI"></a></p><h3 id="MPxLocatorNode">MPxLocatorNode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670824784593-b4e2aa98-d50f-45e4-abea-b3f7a774eece.png#averageHue=%230b0b0b&amp;clientId=u0fb33782-733b-4&amp;from=paste&amp;height=562&amp;id=u38288abb&amp;originHeight=506&amp;originWidth=1113&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=141834&amp;status=done&amp;style=none&amp;taskId=u297df3fd-7477-4bdf-9932-2e82aad8e03&amp;title=&amp;width=1236.6666994271463" alt="image.png"><br><a name="t7d3P"></a></p><h3 id="MPxDrawOverride（VP2-0）">MPxDrawOverride（VP2.0）</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670824823422-3d2a2cad-30cd-4e17-963c-2128659f31cb.png#averageHue=%230b0b0b&amp;clientId=u0fb33782-733b-4&amp;from=paste&amp;height=532&amp;id=u11b5804e&amp;originHeight=479&amp;originWidth=1509&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=197495&amp;status=done&amp;style=none&amp;taskId=u6f2950a7-2835-4757-bed7-59ba1cbfff1&amp;title=&amp;width=1676.666711083166" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670824872793-3e8e184c-6dc4-4370-bfc6-8eccc2aafa5b.png#averageHue=%230c0b0a&amp;clientId=u0fb33782-733b-4&amp;from=paste&amp;height=328&amp;id=uacb92293&amp;originHeight=295&amp;originWidth=1042&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33544&amp;status=done&amp;style=none&amp;taskId=u0bc92d29-62bd-46dc-84d6-27e74402a71&amp;title=&amp;width=1157.7778084484155" alt="image.png"><br><a name="xbGCL"></a></p><h3 id="代码举例-2">代码举例</h3><p><a name="z2Xy5"></a></p><h4 id="创建带形状变形器，通过更改序号改变定位器的形状">创建带形状变形器，通过更改序号改变定位器的形状</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928053999-00cb576f-99ea-468c-b2a7-064038a8aafe.png#averageHue=%23545353&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=719&amp;id=uc070a55d&amp;originHeight=647&amp;originWidth=1214&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=35937&amp;status=done&amp;style=none&amp;taskId=ue639a515-b28b-4461-a1ba-db5b1dc486c&amp;title=&amp;width=1348.8889246222423" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928061330-bde1870c-6966-4420-b47b-7e98ece72314.png#averageHue=%23535353&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=590&amp;id=uc5b9d692&amp;originHeight=531&amp;originWidth=1203&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=26767&amp;status=done&amp;style=none&amp;taskId=u0dfebbe0-bd33-4164-9f7f-6277ed2cf7a&amp;title=&amp;width=1336.6667020762418" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaRender <span class="keyword">as</span> omr</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLocatorNode</span>(omui.MPxLocatorNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;simplelocator&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FE</span>)</span><br><span class="line">    DRAW_CLASSIFICATION = <span class="string">&quot;drawdb/geometry/simplelocator&quot;</span></span><br><span class="line">    DRAW_REGISTRANT_ID = <span class="string">&quot;SimpleLocatorNode&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleLocatorNode, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> SimpleLocatorNode()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line">        cls.shape_index_obj = numeric_attr.create(<span class="string">&quot;shapeIndex&quot;</span>, <span class="string">&quot;si&quot;</span>, om.MFnNumericData.kInt, <span class="number">0</span>)</span><br><span class="line">        numeric_attr.setMin(<span class="number">0</span>)</span><br><span class="line">        numeric_attr.setMax(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.shape_index_obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLocatorUserData</span>(om.MUserData):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 创建MUserData类使其对象能够将数据在prepareForDraw与addUIDrawables之间相互传递  &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self, deleteAfterUse = <span class="literal">False</span></span>):  <span class="comment"># 设置为使用数据后不删除数据</span></span><br><span class="line">        <span class="built_in">super</span>(SimpleLocatorUserData, <span class="variable language_">self</span>).__init__(deleteAfterUse)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.shape_index = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.wireframe_color = om.MColor((<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">1.0</span>))  <span class="comment"># 线框颜色</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleLocatorDrawOverride</span>(omr.MPxDrawOverride):</span><br><span class="line">    NAME = <span class="string">&quot;SimpleLocatorDrawOverride&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>(SimpleLocatorDrawOverride, <span class="variable language_">self</span>).__init__(obj, <span class="literal">None</span>, <span class="literal">True</span>)  <span class="comment"># 第一个参数是maya object,第二个参数是绘制是callback函数,第三个参数是默认为True,为True时将会将此标志位dirty状态，因此可以持续更新,建议为True,除非遇到了性能问题可以为False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">supportedDrawAPIs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> omr.MRenderer.kAllDevices</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasUIDrawables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepareForDraw</span>(<span class="params">self, obj_path, camera_path, frame_context, old_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在使用绘制图形的方法之前,使用这个方法来将数据检索与缓存 &quot;&quot;&quot;</span></span><br><span class="line">        data = old_data</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            data = SimpleLocatorUserData()</span><br><span class="line"></span><br><span class="line">        locator_obj = obj_path.node()</span><br><span class="line">        node_fn = om.MFnDependencyNode(locator_obj)</span><br><span class="line"></span><br><span class="line">        data.shape_index = node_fn.findPlug(<span class="string">&quot;shapeIndex&quot;</span>, <span class="literal">False</span>).asInt()</span><br><span class="line"></span><br><span class="line">        display_status = omr.MGeometryUtilities.displayStatus(obj_path)</span><br><span class="line">        <span class="keyword">if</span> display_status == omr.MGeometryUtilities.kDormant:  </span><br><span class="line">            data.wireframe_color = om.MColor((<span class="number">0.0</span>, <span class="number">0.1</span>, <span class="number">0.0</span>)) <span class="comment"># 当节点处于未选中状态时设置颜色为深绿色</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data.wireframe_color = omr.MGeometryUtilities.wireframeColor(obj_path)  <span class="comment"># 其他状态按照maya的标准来设置线框颜色</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addUIDrawables</span>(<span class="params">self, obj_path, draw_manager, frame_context, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 绘制图形的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            obj_path (_type_): 指向正在绘制的对象的路径,这里是指locator节点</span></span><br><span class="line"><span class="string">            draw_manager (_type_): 用于绘制简单的几何图形</span></span><br><span class="line"><span class="string">            frame_context (_type_): 包含当前渲染框架的一些全局信息</span></span><br><span class="line"><span class="string">            data (_type_): 用户创建的数据对象,存储缓存数据,类型为MUserDataObject</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line"></span><br><span class="line">        draw_manager.setColor(data.wireframe_color)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> data.shape_index == <span class="number">0</span>: <span class="comment"># 绘制圆形</span></span><br><span class="line">            draw_manager.circle(om.MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), om.MVector(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>), <span class="number">1</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> data.shape_index == <span class="number">1</span>: <span class="comment"># 绘制矩形</span></span><br><span class="line">            draw_manager.rect(om.MPoint(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>), om.MVector(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>), om.MVector(<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>), <span class="number">1.0</span>, <span class="number">1.0</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">elif</span> data.shape_index == <span class="number">2</span>: <span class="comment"># 绘制三角形</span></span><br><span class="line">            point_array = om.MPointArray([(-<span class="number">1.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>), (<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>),(<span class="number">1.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>),(-<span class="number">1.0</span>, <span class="number">0.0</span>, -<span class="number">1.0</span>)])</span><br><span class="line">            draw_manager.lineStrip(point_array, <span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> SimpleLocatorDrawOverride(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(SimpleLocatorNode.TYPE_NAME,</span><br><span class="line">                               SimpleLocatorNode.TYPE_ID,</span><br><span class="line">                               SimpleLocatorNode.creator,</span><br><span class="line">                               SimpleLocatorNode.initialize,</span><br><span class="line">                               om.MPxNode.kLocatorNode,</span><br><span class="line">   SimpleLocatorNode.DRAW_CLASSIFICATION)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.registerDrawOverrideCreator(SimpleLocatorNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                      SimpleLocatorNode.DRAW_REGISTRANT_ID,</span><br><span class="line">                                                      SimpleLocatorDrawOverride.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.deregisterDrawOverrideCreator(SimpleLocatorNode.DRAW_CLASSIFICATION,</span><br><span class="line">                                                        SimpleLocatorNode.DRAW_REGISTRANT_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(SimpleLocatorNode.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(SimpleLocatorNode.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>,f=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    plugin_name = <span class="string">&quot;simple_locator_node.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;cmds.createNode(&quot;simplelocator&quot;)&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ANATJ"></a></p><h4 id="测量两个网格体的距离的定位器">测量两个网格体的距离的定位器</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928161742-d22eb865-d937-45aa-9c8a-2e3abdf0886d.png#averageHue=%235c5c5c&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=352&amp;id=u10c1c9ed&amp;originHeight=317&amp;originWidth=743&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=9114&amp;status=done&amp;style=none&amp;taskId=u9189b8ad-021b-4a51-be13-9a89b8cf206&amp;title=&amp;width=825.5555774253097" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670928211727-341226e9-16d0-4861-9ca7-9c2b4fdf4444.png#averageHue=%23403f3f&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=349&amp;id=u45f8f19c&amp;originHeight=314&amp;originWidth=690&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27137&amp;status=done&amp;style=none&amp;taskId=ua5d7643a-88f6-4aa3-9bc2-a3527437368&amp;title=&amp;width=766.6666869763981" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"><span class="comment"># 不适用于2018及以下版本</span></span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> maya.api.OpenMayaRender <span class="keyword">as</span> omr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">maya_useNewAPI</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 告知maya,使用的是maya api 2.0 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistanceBetweenLocator</span>(omui.MPxLocatorNode):</span><br><span class="line">    TYPE_NAME = <span class="string">&quot;distanceBetweenLocator&quot;</span></span><br><span class="line">    TYPE_ID = om.MTypeId(<span class="number">0x0007F7FD</span>)</span><br><span class="line">    DRAW_CLASSIFICATION = <span class="string">&quot;drawdb/geometry/distancebetweenlocator&quot;</span></span><br><span class="line">    DRAW_REGISTRANT_ID = <span class="string">&quot;DistanceBetweenLocator&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    point1_obj = <span class="literal">None</span></span><br><span class="line">    point2_obj = <span class="literal">None</span></span><br><span class="line">    distance_obj = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(DistanceBetweenLocator, <span class="variable language_">self</span>).__init__()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">compute</span>(<span class="params">self, plug, data</span>):</span><br><span class="line">        point1 = om.MPoint(data.inputValue(<span class="variable language_">self</span>.point1_obj).asFloatVector()) <span class="comment"># 得到MPoint对象</span></span><br><span class="line">        point2 = om.MPoint(data.inputValue(<span class="variable language_">self</span>.point2_obj).asFloatVector())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        distance = point1.distanceTo(point2) <span class="comment"># 使用MPoint的计算距离的方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.outputValue(<span class="variable language_">self</span>.distance_obj).setDouble(distance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.setClean(plug) <span class="comment"># 使plug变成干净的状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="built_in">classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> DistanceBetweenLocator()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="built_in">classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">cls</span>):</span><br><span class="line">        numeric_attr = om.MFnNumericAttribute()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.point1_obj = numeric_attr.createPoint(<span class="string">&quot;point1&quot;</span>, <span class="string">&quot;p1&quot;</span>)</span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.point2_obj = numeric_attr.createPoint(<span class="string">&quot;point2&quot;</span>, <span class="string">&quot;p2&quot;</span>)</span><br><span class="line">        numeric_attr.readable = <span class="literal">False</span></span><br><span class="line">        numeric_attr.keyable = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.distance_obj = numeric_attr.create(<span class="string">&quot;distance&quot;</span>, <span class="string">&quot;dist&quot;</span>, om.MFnNumericData.kDouble, <span class="number">0.0</span>)</span><br><span class="line">        numeric_attr.writable = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.addAttribute(cls.point1_obj)</span><br><span class="line">        cls.addAttribute(cls.point2_obj)</span><br><span class="line">        cls.addAttribute(cls.distance_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        cls.attributeAffects(cls.point1_obj, cls.distance_obj)</span><br><span class="line">        cls.attributeAffects(cls.point2_obj, cls.distance_obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistanceBetweenUserData</span>(om.MUserData):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init</span>(<span class="params">self, deleteAfterUse = <span class="literal">False</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(DistanceBetweenUserData, <span class="variable language_">self</span>).__init__(deleteAfterUse)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.distance = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.point1 = om.MPoint()</span><br><span class="line">        <span class="variable language_">self</span>.point2 = om.MPoint()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DistanceBetweenDrawOverride</span>(omr.MPxDrawOverride):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 负责在视口中绘制几何图形 &quot;&quot;&quot;</span></span><br><span class="line">    NAME = <span class="string">&quot;DistanceBetweenDrawOverride&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, obj</span>):</span><br><span class="line">        <span class="built_in">super</span>(DistanceBetweenDrawOverride, <span class="variable language_">self</span>).__init__(obj, <span class="literal">None</span>, <span class="literal">False</span>) <span class="comment"># 第一个参数是maya object,第二个参数是绘制是callback函数,第三个参数是默认为True,为True时将会将此标志位dirty状态，因此可以持续更新,建议为True,除非遇到了性能问题可以为False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">refineSelectionPath</span>(<span class="params">self, select_info, hit_item, path, components, obj_mask</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 重新定义选择，使绘制的几何图形不能够被选中 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">supportedDrawAPIs</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 让maya知道支持哪个图形api,kAllDevices指的是使用OpenGL and Direct X 11&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> omr.MRenderer.kAllDevices</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">hasUIDrawables</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 表示使用addUIDrawables方法来绘制图形 &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepareForDraw</span>(<span class="params">self, obj_path, camera_path, frame_context, old_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 在使用绘制图形的方法之前,使用这个方法来将数据检索与缓存 &quot;&quot;&quot;</span></span><br><span class="line">        data = old_data</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data:</span><br><span class="line">            data = DistanceBetweenUserData()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        node_fn = om.MFnDependencyNode(obj_path.node())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.point1 = om.MPoint(node_fn.findPlug(<span class="string">&quot;point1X&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point1Y&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point1Z&quot;</span>, <span class="literal">False</span>).asDouble())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.point2 = om.MPoint(node_fn.findPlug(<span class="string">&quot;point2X&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point2Y&quot;</span>, <span class="literal">False</span>).asDouble(),</span><br><span class="line">                                node_fn.findPlug(<span class="string">&quot;point2Z&quot;</span>, <span class="literal">False</span>).asDouble())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        data.distance = node_fn.findPlug(<span class="string">&quot;distance&quot;</span>, <span class="literal">False</span>).asDouble()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addUIDrawables</span>(<span class="params">self, obj_path, draw_manager, frame_context, data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot; 绘制图形的方法</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            obj_path (_type_): 指向正在绘制的对象的路径,这里是指locator节点</span></span><br><span class="line"><span class="string">            draw_manager (_type_): 用于绘制简单的几何图形</span></span><br><span class="line"><span class="string">            frame_context (_type_): 包含当前渲染框架的一些全局信息</span></span><br><span class="line"><span class="string">            data (_type_): 用户创建的数据对象,存储缓存数据</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        draw_manager.beginDrawable()</span><br><span class="line">        </span><br><span class="line">        draw_manager.setFontSize(<span class="number">14</span>)</span><br><span class="line">        draw_manager.setFontWeight(<span class="number">100</span>)</span><br><span class="line">        draw_manager.setColor(om.MColor((<span class="number">1.0</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        pos = om.MPoint((om.MVector(data.point1) + om.MVector(data.point2))/<span class="number">2.0</span>) <span class="comment"># 得到两点之间的重点</span></span><br><span class="line">        text = <span class="string">&quot;&#123;0:.3f&#125;&quot;</span>.<span class="built_in">format</span>(data.distance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        draw_manager.text(pos, text, omr.MUIDrawManager.kCenter)</span><br><span class="line">        draw_manager.line(data.point1,data.point2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        draw_manager.endDrawable()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="built_in">classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creator</span>(<span class="params">cls, obj</span>):</span><br><span class="line">        <span class="keyword">return</span> DistanceBetweenDrawOverride(obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">initializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    vendor = <span class="string">&quot;RuiChen&quot;</span>  <span class="comment"># 插件制作人的名字</span></span><br><span class="line">    version = <span class="string">&quot;1.0.0&quot;</span>  <span class="comment"># 插件的版本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin, vendor, version)  <span class="comment"># 定义插件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.registerNode(DistanceBetweenLocator.TYPE_NAME,</span><br><span class="line">                               DistanceBetweenLocator.TYPE_ID,</span><br><span class="line">                               DistanceBetweenLocator.creator,</span><br><span class="line">                               DistanceBetweenLocator.initialize,</span><br><span class="line">                               om.MPxNode.kLocatorNode,</span><br><span class="line">                               DistanceBetweenLocator.DRAW_CLASSIFICATION)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenLocator.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.registerDrawOverrideCreator(DistanceBetweenLocator.DRAW_CLASSIFICATION,</span><br><span class="line">                                                      DistanceBetweenLocator.DRAW_REGISTRANT_ID,</span><br><span class="line">                                                      DistanceBetweenDrawOverride.creator)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to register draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">uninitializePlugin</span>(<span class="params">plugin</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; 插件取消加载时执行这个函数&quot;&quot;&quot;</span></span><br><span class="line">    plugin_fn = om.MFnPlugin(plugin)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        omr.MDrawRegistry.deregisterDrawOverrideCreator(DistanceBetweenLocator.DRAW_CLASSIFICATION,</span><br><span class="line">                                                        DistanceBetweenLocator.DRAW_REGISTRANT_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister draw override: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenDrawOverride.NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        plugin_fn.deregisterNode(DistanceBetweenLocator.TYPE_ID)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        om.MGlobal.displayError(<span class="string">&quot;Failed to deregister node: &#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenLocator.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc_distance_between_test</span>():</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;persp.translate&quot;</span>, <span class="number">3.5</span>, <span class="number">5.5</span>, <span class="number">10.0</span>)</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;persp.rotate&quot;</span>, -<span class="number">27.0</span>, <span class="number">19.0</span>, <span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cube1 = cmds.polyCube()[<span class="number">0</span>]</span><br><span class="line">    cube2 = cmds.polyCube()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.setAttr(<span class="string">&quot;&#123;0&#125;.translateX&quot;</span>.<span class="built_in">format</span>(cube1), -<span class="number">2.5</span>)</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;&#123;0&#125;.translateX&quot;</span>.<span class="built_in">format</span>(cube2), <span class="number">2.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    distance_locator = cmds.createNode(<span class="string">&quot;&#123;0&#125;&quot;</span>.<span class="built_in">format</span>(DistanceBetweenLocator.TYPE_NAME))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.connectAttr(<span class="string">&quot;&#123;0&#125;.translate&quot;</span>.<span class="built_in">format</span>(cube1),<span class="string">&quot;&#123;0&#125;.point1&quot;</span>.<span class="built_in">format</span>(distance_locator))</span><br><span class="line">    cmds.connectAttr(<span class="string">&quot;&#123;0&#125;.translate&quot;</span>.<span class="built_in">format</span>(cube2),<span class="string">&quot;&#123;0&#125;.point2&quot;</span>.<span class="built_in">format</span>(distance_locator))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.select(distance_locator)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.file(new=<span class="literal">True</span>, force=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 注册后,在maya脚本编辑器中的使用方法 &quot;&quot;&quot;</span></span><br><span class="line">    plugin_name = <span class="string">&quot;distance_between_locator.py&quot;</span>  <span class="comment"># 插件的文件名</span></span><br><span class="line">    <span class="comment"># 如果插件加载了就先取消加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.unloadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line">    <span class="comment"># 如果插件没有加载就加载插件</span></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;if not cmds.pluginInfo(&quot;&#123;0&#125;&quot;, q=True, loaded=True): cmds.loadPlugin(&quot;&#123;0&#125;&quot;)&#x27;</span>.<span class="built_in">format</span>(plugin_name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    cmds.evalDeferred(<span class="string">&#x27;rc_distance_between_test()&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="bhu4x"></a></p><h3 id="设置自定义变形器节点在大纲处的图标以及节点编辑器中的图标">设置自定义变形器节点在大纲处的图标以及节点编辑器中的图标</h3><p>默认图标：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670915721160-2897f85d-23d1-4da0-b908-073f4a498ad3.png#averageHue=%234a4947&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=224&amp;id=u00e4ba98&amp;originHeight=202&amp;originWidth=435&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=44175&amp;status=done&amp;style=none&amp;taskId=u5efe4482-dfd4-46b5-b713-a5709e88b68&amp;title=&amp;width=483.3333461372944" alt="image.png"><br>设置自定义图标：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670915626186-0dedd648-4117-4033-996f-d3cfebeaa7d8.png#averageHue=%23f4f0f0&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=309&amp;id=u55d6291d&amp;originHeight=278&amp;originWidth=2056&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=146769&amp;status=done&amp;style=none&amp;taskId=u430907cc-fccc-4cdb-8475-9e8c16155a4&amp;title=&amp;width=2284.444504961557" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670915685735-9cbb3ab8-60ee-425f-aaee-64bd6043d88a.png#averageHue=%23373636&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=586&amp;id=ue61cf00e&amp;originHeight=527&amp;originWidth=1561&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=134322&amp;status=done&amp;style=none&amp;taskId=u941b3c90-01ba-41f8-852b-0fe57b00d77&amp;title=&amp;width=1734.4444903915323" alt="image.png"></p><p><a name="ICWzV"></a></p><h3 id="自定义节点属性编辑器的排列模板">自定义节点属性编辑器的排列模板</h3><p>名字格式： AE + 节点名字 + Template<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1670998413353-26d9a2c7-905a-41a8-8014-f8856a348242.png#averageHue=%23fcfbfb&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=160&amp;id=u7cf72e1c&amp;originHeight=144&amp;originWidth=841&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10569&amp;status=done&amp;style=none&amp;taskId=udaaeb6d3-9808-4518-94f7-a4de82fc5ed&amp;title=&amp;width=934.4444691987692" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671002285775-651ec0d7-129b-498e-8b3d-73b7059bb024.png#averageHue=%23413f3f&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=910&amp;id=uedf888c6&amp;originHeight=819&amp;originWidth=2682&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=197038&amp;status=done&amp;style=none&amp;taskId=ua342705b-c5da-4f06-ab25-1d2ed2f6eb9&amp;title=&amp;width=2980.000078943043" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// distanceBetweenLocator节点在属性编辑器中的模板</span><br><span class="line">// 在mel中不需要在意缩进，这里的缩进只是为了排版更好看而已</span><br><span class="line"><span class="keyword">global</span> proc AEdistanceBetweenLocatorTemplate(string $nodeName)</span><br><span class="line">&#123;</span><br><span class="line">    editorTemplate -beginScrollLayout;</span><br><span class="line">        </span><br><span class="line">        editorTemplate -beginLayout <span class="string">&quot;Distance Between Attributes&quot;</span> -collapse <span class="number">0</span>; //collapse 意思是展开，不折叠</span><br><span class="line"></span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;point1&quot;</span>;</span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;point2&quot;</span>;</span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;minDistance&quot;</span>;</span><br><span class="line">            editorTemplate -addControl <span class="string">&quot;maxDistance&quot;</span>;</span><br><span class="line"></span><br><span class="line">            AEaddRampControl($nodeName + <span class="string">&quot;.colorRamp&quot;</span>);</span><br><span class="line">            AEaddRampControl($nodeName + <span class="string">&quot;.curveRamp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        editorTemplate -endLayout;</span><br><span class="line"></span><br><span class="line">    editorTemplate -addExtraControls;</span><br><span class="line">    editorTemplate -endScrollLayout;</span><br><span class="line">&#125;</span><br><span class="line">// 刷新属性编辑器，便于快速看到代码改变带来的影响</span><br><span class="line">refreshEditorTemplates; </span><br></pre></td></tr></table></figure><p><a name="GS9oN"></a></p><h2 id="如何将单一功能的插件组合起来">如何将单一功能的插件组合起来</h2><p>之前的教程写插件都是写一个节点，命令，工具，但是一个插件功能往往包含这几个而不是单一的。因此这节课讲如何将它们组合起来。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671002908082-7d4cacc1-e487-44ba-a7ae-efa738c0738c.png#averageHue=%234e4d4d&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=589&amp;id=u572c52c2&amp;originHeight=530&amp;originWidth=1056&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=258887&amp;status=done&amp;style=none&amp;taskId=uf636dc9d-f8a2-44cd-a42e-cc119c2e58d&amp;title=&amp;width=1173.3333644160525" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671003972925-52e4ee7b-8749-49f0-a5c4-adf90b440a2a.png#averageHue=%232f2c29&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=783&amp;id=u57719ee8&amp;originHeight=705&amp;originWidth=602&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=223814&amp;status=done&amp;style=none&amp;taskId=u04d1646a-4660-41f1-b5e9-e78ae8f70e4&amp;title=&amp;width=668.8889066083937" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671004010290-e78014d7-5d18-4628-9c7c-5bcb91bddfcf.png#averageHue=%23212121&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=1046&amp;id=ua9ae1ad0&amp;originHeight=941&amp;originWidth=1536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=727699&amp;status=done&amp;style=none&amp;taskId=u5f75e573-ad72-446a-996c-86981f697d1&amp;title=&amp;width=1706.6667118778946" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671004083035-035c41b0-5c84-4647-a8a4-f3caf7bc457d.png#averageHue=%23302d2a&amp;clientId=uaca77ae3-2815-4&amp;from=paste&amp;height=487&amp;id=uec481016&amp;originHeight=438&amp;originWidth=1467&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=313778&amp;status=done&amp;style=none&amp;taskId=u289682d5-d3e7-4138-a0d0-3e070a43529&amp;title=&amp;width=1630.0000431802548" alt="image.png"><br><a name="Z0mEb"></a></p><h2 id="如何将文件功能分成多个文件使其更方便管理">如何将文件功能分成多个文件使其更方便管理</h2><p><a href="https://www.bilibili.com/video/BV1ye4y1r7Yv?p=22&amp;vd_source=b1de3fe38e887eb40fc55a5485724480">21_multifile_plugins_part1_哔哩哔哩_bilibili</a></p><p><a name="NaikZ"></a></p><h2 id="maya-modules">maya_modules</h2><p>maya的module是一种共享多文件插件的方法<br><a name="KygeB"></a></p><h3 id="简单的插件管理方式">简单的插件管理方式</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085566693-242de11c-b079-407b-9ad9-b5629e1f57b7.png#averageHue=%23090909&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=474&amp;id=u10ec219a&amp;originHeight=999&amp;originWidth=2302&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=446960&amp;status=done&amp;style=none&amp;taskId=u14d3c7bc-c9b8-440e-a906-3239120e487&amp;title=&amp;width=1091.77783203125" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085583642-e0336d04-41a2-4b39-86d4-5e935f755935.png#averageHue=%230a0a09&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=566&amp;id=ua342f8b0&amp;originHeight=960&amp;originWidth=1313&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=74945&amp;status=done&amp;style=none&amp;taskId=u51d14b57-8c0c-4c1e-a609-cc750826055&amp;title=&amp;width=773.885498046875" alt="image.png"><br><a name="LqOTk"></a></p><h3 id="maya-moudules的介绍">maya moudules的介绍</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085676299-c57674c6-1f6f-4ee5-bcc2-60bd6e0a6fb0.png#averageHue=%230b0b0b&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=705&amp;id=u5180ec1e&amp;originHeight=1209&amp;originWidth=2391&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=773548&amp;status=done&amp;style=none&amp;taskId=uff00fa39-30b7-45ff-8814-4fb583a9506&amp;title=&amp;width=1393.666748046875" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085698913-02ec178c-e03e-497d-a604-646e22f7edaa.png#averageHue=%23070706&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=499&amp;id=uf3e91b3f&amp;originHeight=992&amp;originWidth=2166&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=107701&amp;status=done&amp;style=none&amp;taskId=uf1ae4133-dc3a-49d9-b7ee-c0c722fb84a&amp;title=&amp;width=1089.6597900390625" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085897512-879e9245-c9c2-4791-94ce-b97e769f6dea.png#averageHue=%23070707&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=546&amp;id=ubbe1b506&amp;originHeight=1160&amp;originWidth=2317&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=501083&amp;status=done&amp;style=none&amp;taskId=u51a1f977-673d-4d3a-8e2e-16257618636&amp;title=&amp;width=1090.4410400390625" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671085945440-91ba49c0-e5cc-4915-9a7c-0f8ec2202152.png#averageHue=%23060505&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=544&amp;id=uc781249b&amp;originHeight=490&amp;originWidth=623&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=29185&amp;status=done&amp;style=none&amp;taskId=ud20ce58b-f589-4c12-8bbe-b547c32c8fa&amp;title=&amp;width=692.2222405598492" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086048276-89436e5a-f14e-4519-92c2-a82765897eef.png#averageHue=%23090909&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=614&amp;id=u51148265&amp;originHeight=1105&amp;originWidth=2370&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=632215&amp;status=done&amp;style=none&amp;taskId=ub78af419-6f55-40f7-9388-0486ff38c2c&amp;title=&amp;width=1317.33349609375" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086097304-6d550613-068b-4541-9834-6b6a98e53b59.png#averageHue=%23100e0d&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=72&amp;id=u65a6db8a&amp;originHeight=65&amp;originWidth=1018&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=12774&amp;status=done&amp;style=none&amp;taskId=u13033f6e-a119-483f-8afa-1f1c19ccce7&amp;title=&amp;width=1131.1111410753235" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086196037-6f4c580e-9d75-4d11-8bfa-74c19b3eaee4.png#averageHue=%23080808&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=509&amp;id=u78836d3d&amp;originHeight=957&amp;originWidth=2394&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=491507&amp;status=done&amp;style=none&amp;taskId=u7fffcc80-71f5-49fd-ae0c-1d322634ce6&amp;title=&amp;width=1274.000244140625" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086210447-0fb7c8df-8a81-42d0-b2b9-9a1837e43ae5.png#averageHue=%23100f0d&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=91&amp;id=uc3b16ff9&amp;originHeight=82&amp;originWidth=1103&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14596&amp;status=done&amp;style=none&amp;taskId=u29092a1d-5a81-46ef-b3f9-cc91b458fcb&amp;title=&amp;width=1225.5555880216914" alt="image.png"><br><a name="xPeit"></a></p><h3 id="使用创建moudules的步骤举例">使用创建moudules的步骤举例</h3><p><a name="Wywr1"></a></p><h4 id="一个工具的所需内容放到一个文件夹里，在这个文件夹下创建一个mod文件">一个工具的所需内容放到一个文件夹里，在这个文件夹下创建一个mod文件</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671086906525-ecf3a55b-7fb2-45f8-970e-74b5a0e78433.png#averageHue=%23f6f0ee&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=258&amp;id=u4b1ffb67&amp;originHeight=232&amp;originWidth=498&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=40431&amp;status=done&amp;style=none&amp;taskId=u9ceb672d-5a22-4b0b-83ba-a0792fe994f&amp;title=&amp;width=553.3333479916612" alt="image.png"></p><p><a name="CEzh9"></a></p><h4 id="mod文件夹下添加这个工具">mod文件夹下添加这个工具</h4><p>最后的./是相对路径<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087583273-798c1a11-2f9a-4962-b7f4-64d87267d22f.png#averageHue=%231c1c1b&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=130&amp;id=udbd71950&amp;originHeight=117&amp;originWidth=426&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=22000&amp;status=done&amp;style=none&amp;taskId=u3fd26225-2368-4abe-a127-880bb47af8b&amp;title=&amp;width=473.3333458723849" alt="image.png"></p><p><a name="HHsqn"></a></p><h4 id="在maya-env文件下添加mod：">在maya.env文件下添加mod：</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087574805-d58f52d1-d084-47ae-9b85-13f2c55c7582.png#averageHue=%23fbfaf9&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=341&amp;id=u16c56c7c&amp;originHeight=307&amp;originWidth=998&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=113257&amp;status=done&amp;style=none&amp;taskId=u31848ebf-4e7b-411a-8224-e8cbbcac93e&amp;title=&amp;width=1108.8889182644134" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087635395-42e2c798-9bc5-4375-a4e2-607c9f3a01b4.png#averageHue=%232a2625&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=286&amp;id=u2a3ea13a&amp;originHeight=257&amp;originWidth=1176&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=163738&amp;status=done&amp;style=none&amp;taskId=u64e5efb4-58b1-4f8f-8899-18ca8aaae3f&amp;title=&amp;width=1306.666701281513" alt="image.png"><br><a name="eq346"></a></p><h4 id="检查工作">检查工作</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087702883-c89e5cb5-b753-4e3a-a0b8-7b846180b311.png#averageHue=%232a2a2a&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=194&amp;id=u97c8351c&amp;originHeight=175&amp;originWidth=886&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=63681&amp;status=done&amp;style=none&amp;taskId=u3904e6b9-7b09-488c-a7f5-7032e9edb68&amp;title=&amp;width=984.4444705233169" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1671087721464-4de9fa78-8fde-4dd4-8ecd-041f13c2e409.png#averageHue=%23747470&amp;clientId=uc9db9e09-998d-4&amp;from=paste&amp;height=230&amp;id=udf99d51b&amp;originHeight=207&amp;originWidth=262&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=46299&amp;status=done&amp;style=none&amp;taskId=ue653480e-135e-44db-b10b-b1a737c00b5&amp;title=&amp;width=291.11111882292215" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maya开发实践</title>
      <link href="/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/"/>
      <url>/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="n8BWl"></a></p><h1>第一节</h1><p><a name="tHDPL"></a></p><h2 id="Maya帮助文档的查阅方法">Maya帮助文档的查阅方法</h2><p><img src="https://lyzz.top/file/40770" alt="image.png"><br>第一个框住的是命令的名称，也可以叫他函数<br>第二个框住的是命令的标识与参数，只需要在其中找到自己需要的几个使用就可以了<br>第三个框住的是返回值<br>第四个框住的是与查询的命令相似的命令<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648298887735-1e30d740-1aa5-4c47-b499-823769712273.png#averageHue=%23f6f5f4&amp;clientId=u72970d88-4bcf-4&amp;from=paste&amp;height=557&amp;id=ub8a467f2&amp;originHeight=557&amp;originWidth=1510&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=56812&amp;status=done&amp;style=none&amp;taskId=u2dda7fa0-d51f-4def-836a-563e746f48e&amp;title=&amp;width=1510" alt="image.png"><br>Flags下面是命令的标识与参数的使用方法<br>最左边是每个标识的全称与简称，中间是标识所需要的参数的数量与类型，右边是标识的特性<br>标识的特性介绍：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299084864-38a11f11-3738-4db3-a7ce-c34f544b486a.png#averageHue=%23a1a19d&amp;clientId=u72970d88-4bcf-4&amp;from=paste&amp;height=456&amp;id=u6bbdbe28&amp;originHeight=456&amp;originWidth=1708&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=329338&amp;status=done&amp;style=none&amp;taskId=u498d9385-1785-41c1-8bce-ed4be7b74b4&amp;title=&amp;width=1708" alt="image.png"><br>介绍一下M：例如设置球体半径，因为球体半径只有一个值，因此不能多次使用，但是创建曲线的时候，曲线由许多点构成，每个点都有不同的数值，在创建时可以多次使用他点位置的标识，然后跟上不同点的坐标，然后来创建一个曲线。<br>命令帮助文档的最下方是官方的帮助案例<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299280163-7bbbd788-757d-4fb8-b1f2-c463e4046daf.png#averageHue=%23f3f3f3&amp;clientId=u72970d88-4bcf-4&amp;from=paste&amp;height=213&amp;id=ud1f66f23&amp;originHeight=213&amp;originWidth=605&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8419&amp;status=done&amp;style=none&amp;taskId=uc33f9dc5-72f4-4ded-be4a-dda3621ffa7&amp;title=&amp;width=605" alt="image.png"><br><a name="HuDs0"></a></p><h2 id="如何在maya中使用python">如何在maya中使用python</h2><p>maya的命令在python中是以包的模式出现的。要使用maya的命令必须要先导入模块才能进行调用。<br>MEL命令与python命令在参数或者标识上调用的区别：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299745648-a3385da8-444e-4ac2-b6de-7ef26f72a26e.png#averageHue=%23605e4f&amp;clientId=u72970d88-4bcf-4&amp;from=paste&amp;height=955&amp;id=u26ac150b&amp;originHeight=955&amp;originWidth=1844&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=481675&amp;status=done&amp;style=none&amp;taskId=u12c00128-6c3f-4884-b0b2-9bba71a2170&amp;title=&amp;width=1844" alt="image.png"><br><a name="Q6Dig"></a></p><h1>第二节</h1><p><a name="x1FfQ"></a></p><h2 id="获取场景中的操作对象">获取场景中的操作对象</h2><p>在编程中，在确定对一个物体进行操作之前需要通过命令找到要操作的对象。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648345237495-517645ca-74ef-43a5-a6f2-f7542e62ecdb.png#averageHue=%23474744&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=582&amp;id=u49798923&amp;originHeight=582&amp;originWidth=1437&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=234325&amp;status=done&amp;style=none&amp;taskId=u486e58b3-21cd-46f4-803d-da6397294b0&amp;title=&amp;width=1437" alt="image.png"></p><ol><li>通过对象的名字获取单一物体</li><li>通过类型获取一类物体</li><li>通过UUID获取某一物体（在名字出现重复的情况下）</li></ol><p>获取对象的命令：ls<br><a href="http://mc.ls">mc.ls</a>()返回的结果是场景中所有的节点名称的列表<br><a href="http://mc.ls">mc.ls</a>(sl=True)返回的结果是在窗口的选择的对象的名称  sl是selection的简称<br><a href="http://mc.ls">mc.ls</a>(typ=(‘mesh’,‘nurbsCurve’)) 作用是列举场景中的所有多边形和曲线两种类型的物体，typ是tpye的简称，因为type是python的关键字所以使用在maya中使用typ<br>ls命令列举的名字都是短名（物体本身的名字），为了防止出现重名的情况,通过long=True列举它们的长名<br><a href="http://mc.ls">mc.ls</a>(typ=(‘mesh’,‘nurbsCurve’),long=True)</p><p>如果想要列出指定类型的所有对象，但不列出该类型的后代对象。例如想要列举transform类型的对象（模型曲线等）但不想要列举由transform扩展出来的对象（例如骨骼）就可以通过<strong>exactType（et）</strong><br><a href="http://mc.ls">mc.ls</a>(et=‘transform’)<br><a href="http://mc.ls">mc.ls</a>(ext=‘transform’)       # excludeType(ext) 列举除了transform类型外的所有物体<br>根据名字过滤物体：<br><a href="http://mc.ls">mc.ls</a>(“<em><em>cn</em></em>”)  # *号代表多个字母<br><a href="http://mc.ls">mc.ls</a>(“blendShape??Set”) # 一个?号代表一个字符<br>根据UUID选择物体：<br>UUID查询方法：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347037508-2dca9d1b-e5f5-4580-821f-390623c21cac.png#averageHue=%234c4b4a&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=466&amp;id=u09e4f771&amp;originHeight=466&amp;originWidth=494&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23392&amp;status=done&amp;style=none&amp;taskId=ub65ca394-320a-4e77-bd84-da63feb45cd&amp;title=&amp;width=494" alt="image.png">&quot;<br>mc.(“UUID的名字”)<br>ls命令参数：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347140198-39287a14-8575-4491-936a-cd3c0dd95df9.png#averageHue=%239cb0cc&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=929&amp;id=u220f1100&amp;originHeight=929&amp;originWidth=1735&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1248469&amp;status=done&amp;style=none&amp;taskId=u319a3e4f-e320-4e4d-a8c3-302a842b37c&amp;title=&amp;width=1735" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347152462-ba8b85e2-60af-4326-8624-c7c33db74c2a.png#averageHue=%2398adcb&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=927&amp;id=u2d696a29&amp;originHeight=927&amp;originWidth=1730&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1375151&amp;status=done&amp;style=none&amp;taskId=ua7043b23-a9c8-43af-b3b8-6f7d3243bfe&amp;title=&amp;width=1730" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347179521-2b39c4e1-679b-4fb4-8c8c-6d609e49df4c.png#averageHue=%239bb0cf&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=929&amp;id=u99c6f9eb&amp;originHeight=929&amp;originWidth=1732&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1121096&amp;status=done&amp;style=none&amp;taskId=u92937644-7185-4c3e-8872-397860f66b6&amp;title=&amp;width=1732" alt="image.png"><br><a name="pOJGE"></a></p><h2 id="rename命令">rename命令</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347220026-7e04c1af-745c-484f-b58b-44359d9bb392.png#averageHue=%23363636&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=436&amp;id=ub1721049&amp;originHeight=436&amp;originWidth=745&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=72460&amp;status=done&amp;style=none&amp;taskId=uffedf7d1-fa1a-4ecd-9fde-ff5b5abcdae&amp;title=&amp;width=745" alt="image.png"><br>批量重命名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> shape <span class="keyword">in</span> mc.ls(typ=<span class="string">&#x27;mesh&#x27;</span>):</span><br><span class="line">    mc.rename(shape,<span class="string">&#x27;mesh_&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(shape))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648351793548-74dc4039-5b32-45c7-98e3-5023af821ead.png#averageHue=%233f3e3d&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=320&amp;id=u78e52cbf&amp;originHeight=320&amp;originWidth=214&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13931&amp;status=done&amp;style=none&amp;taskId=u092ba3b2-1198-4d0a-8e1e-e6375914fdb&amp;title=&amp;width=214" alt="image.png"><br><a name="QgUf7"></a></p><h1>第三节获取与改变场景中的层级关系</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648356410300-86b3c513-619f-496e-8c04-acece4ec8855.png#averageHue=%233c3c3c&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=694&amp;id=u3ecf0d6c&amp;originHeight=694&amp;originWidth=798&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=117446&amp;status=done&amp;style=none&amp;taskId=u118e4e36-0d75-4461-bfcd-4ca584c37a7&amp;title=&amp;width=798" alt="image.png"><br>通过mc.listRelatives()命令可以处理层级关系<br>mc.listRelatives(‘Mery_grp’,p=True) # 得到Mery_grp的父物体名字（只有一个）<br>mc.listRelatives(‘Mery_grp’,c=True) # 得到Mery_grp的子物体名字（只得到“儿子”，没有“孙子”）<br>mc.listRelatives(‘Mery_grp’,ad=True) # ad是allDescendents的简称，得到Mery_grp的所有子物体名字<br>mc.listRelatives(‘Mery_grp’,ad=True,typ=‘joint’) # 得到Mery_grp的所有子物体名字（只要joint类型的）<br>mc.listRelatives(‘Mery_grp’,ad=True,typ=‘joint’,f=True)# f是fullPath的简称，防止子物体有重名的情况，列举长名<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648357759713-7d694590-c2c2-4fc5-920b-89c4082f91a1.png#averageHue=%239fb2d0&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=943&amp;id=u275f16bc&amp;originHeight=943&amp;originWidth=1211&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=823384&amp;status=done&amp;style=none&amp;taskId=u2e957dbd-7965-44f4-b29b-08101bc678c&amp;title=&amp;width=1211" alt="image.png"><br><a name="jLgLU"></a></p><h2 id="修改物体的层级关系">修改物体的层级关系</h2><p><strong>parent命令：</strong><br>mc.parent(‘pSphere1’,‘Mery_grp’) # 讲pSphere1放到Mery_grp的下面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> mc.ls(sl=<span class="literal">True</span>) :</span><br><span class="line">    mc.parent(obj,<span class="string">&#x27;Mery_grp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>mc.parent(‘pSphere1’,w=True) # w为world的缩写，这个命令的作用是将pSphere1放到世界层级的下边，这样pSphere1就没有任何父物体了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648358668411-10975296-0945-48cc-923a-887143b1a08b.png#averageHue=%2397abc9&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=929&amp;id=ua58ef5f8&amp;originHeight=929&amp;originWidth=1726&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1362801&amp;status=done&amp;style=none&amp;taskId=u4c5068ad-f4c4-448b-af42-8a890a9195a&amp;title=&amp;width=1726" alt="image.png"><br><strong>group命令：</strong><br>mc.group(<a href="http://mc.ls">mc.ls</a>(sl=True),name=‘ball_group’) # 将选择的物体进行打组并起组的名字叫ball_group，第一个参数接收的是一个<strong>列表</strong>，<a href="http://xn--mc-tz2cp45a.ls">因为mc.ls</a>(sl=True)返回的就是一个列表，因此不需要再增加中括号了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648358915022-c4f65ec7-b548-480a-bbaf-79850e5a820e.png#averageHue=%239aafd0&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=676&amp;id=u2764c4b1&amp;originHeight=676&amp;originWidth=1757&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=951958&amp;status=done&amp;style=none&amp;taskId=ub347cb79-93ae-49ee-941d-e016c73d854&amp;title=&amp;width=1757" alt="image.png"><br><a name="OcFZc"></a></p><h1>第四节</h1><p><a name="KyKpU"></a></p><h2 id="获取与更改物体的属性">获取与更改物体的属性</h2><p><a name="PCHmN"></a></p><h3 id="move，rotate，scale命令，移动，旋转，缩放">move，rotate，scale命令，移动，旋转，缩放</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>mc.move(0,1,0,‘pCube1’,r=True)</td><td>将pCube1在y轴方向移动1个单位，r是relative的缩写，意思是自身坐标</td></tr><tr><td>mc.move(0,1,0,‘pCube1’,a=True)</td><td>将pCube1移动到世界坐标（0，1，0）的位置，a是absolute的缩写，意思是世界坐标</td></tr><tr><td>mc.rotate(0,10,0,‘pCube1’,r=True)</td><td>将pCube1在y轴方向旋转10度，r是relative的缩写，意思是自身坐标</td></tr><tr><td>mc.rotate(0,1,0,‘pCube1’,a=True)</td><td>将pCube1y轴的旋转属性值设置为10度，a是absolute的缩写，意思是世界坐标</td></tr><tr><td>mc.scale(1,5,1,‘pCube1’,r=True)</td><td>将pCube1在y轴方向放大5倍</td></tr><tr><td>mc.scale(1,5,1,‘pCube1’,a=True)</td><td>将pCube1的缩放属性设置为1，5，1</td></tr></tbody></table><p><a name="wwcRK"></a></p><h3 id="xform命令（不能使用缩放），可以做绑定上的无缝切换">xform命令（不能使用缩放），可以做绑定上的无缝切换</h3><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>_t = mc.xform(‘locator1’,q=True,t=True)</td><td>查询locator1的移动属性(transform)并将结果传入给变量_t （列表）,q是查询的意思</td></tr><tr><td>mc.xform(‘locator2’,t=_t )</td><td>将刚才定义的_t变量 的数值传递给locator2的移动属性,默认是以自身坐标空间改变</td></tr><tr><td>_ro = mc.xform(‘locator1’,q=True,ro=True)</td><td>查询locator1的旋转属性(rotation)并将结果传入给变量_ro（列表）</td></tr><tr><td>mc.xform(‘locator2’,ro=_ro )</td><td>将刚才定义的_t变量 的数值传递给locator2的旋转属性,默认是以自身坐标空间改变</td></tr><tr><td>tt = mc.xform(‘locator1’,q=True,t=True,ws=True)</td><td>ws为True意思是以世界坐标空间获取</td></tr><tr><td>mc.xform(‘pSphere1’,t=tt,ws=True)</td><td>将locator1的世界坐标信息给pSphere1。</td></tr></tbody></table><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648371326540-67345798-b3f3-4d3e-baa7-051e0c87f255.png#averageHue=%23a6b7d4&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=1016&amp;id=u75eb237a&amp;originHeight=1016&amp;originWidth=1187&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1063536&amp;status=done&amp;style=none&amp;taskId=ud9e586ee-3f09-42a0-a9d6-76f0d12f921&amp;title=&amp;width=1187" alt="image.png"><br><a name="D23lG"></a></p><h1>第五节常见节点、物体的创建</h1><p><a name="EOEC8"></a></p><h2 id="创建某一确定物体的命令">创建某一确定物体的命令</h2><p>创建球体：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.polySphere(r=<span class="number">2</span>,sx=<span class="number">5</span>,sy=<span class="number">5</span>) <span class="comment"># 球体的半径为2，x，y的细分(subdivisions)都设置为5，</span></span><br></pre></td></tr></table></figure><p>创建圆环曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.circle(r=<span class="number">10</span>,s=<span class="number">20</span>,nr=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>)) <span class="comment"># 圆环的半径为10，段数(sections)设置为20，法线为（0，1，0）</span></span><br></pre></td></tr></table></figure><p>创建曲线：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.curve(d=<span class="number">1</span>,p=[[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]]) <span class="comment"># d（degree）的意思是曲率，p的意思是点</span></span><br></pre></td></tr></table></figure><p>创建骨骼：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) :</span><br><span class="line">    mc.joint(p=(<span class="number">0</span>,i,<span class="number">0</span>)) <span class="comment"># 使用此命令创建骨骼时，新创建的骨骼默认设置为当前选择的对象的子物体</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648378287550-9eef1c30-728b-4f9f-ae40-e560b6f199a3.png#averageHue=%23464646&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=326&amp;id=u50ff2ae1&amp;originHeight=326&amp;originWidth=431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19389&amp;status=done&amp;style=none&amp;taskId=u6a82b080-ea3a-401b-a889-116731e654f&amp;title=&amp;width=431" alt="image.png"><br><a name="QqnpH"></a></p><h2 id="万能创建法-createNode">万能创建法 createNode</h2><p>这个方法是创建节点使用的。可以创建的节点如下：<br><a href="https://help.autodesk.com/view/MAYAUL/2019/ENU/index.html?contextId=NODES-INDEX">https://help.autodesk.com/view/MAYAUL/2019/ENU/index.html?contextId=NODES-INDEX</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) :</span><br><span class="line">    mc.createNode(<span class="string">&#x27;joint&#x27;</span>) <span class="comment"># 创建的骨骼都是在同一层级下，createNode只是单纯创造节点使用的</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648379098018-a2a53c2a-96b0-401c-a3da-e27b052f6868.png#averageHue=%239db5db&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=523&amp;id=u649f1d70&amp;originHeight=523&amp;originWidth=1774&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=462176&amp;status=done&amp;style=none&amp;taskId=u3889cc15-925b-4256-91a0-f4b8b3ea30b&amp;title=&amp;width=1774" alt="image.png"><br><a name="NOvug"></a></p><h1>第六节获取节点的类型和属性</h1><p><a name="RBCtN"></a></p><h3 id="获取选择物体的类型nodeType">获取选择物体的类型nodeType</h3><p>import maya.cmds as mc <br>sel = <a href="http://mc.ls">mc.ls</a>(sl=True)[0]<br>print mc.nodeType(sel)<br><a name="r9jbq"></a></p><h3 id="获取物体所有属性listAttr">获取物体所有属性listAttr</h3><p>import maya.cmds as mc <br>print mc.listAttr(‘pCube1’)</p><p><a name="dSOPf"></a></p><h3 id="获取物体可k帧属性">获取物体可k帧属性</h3><p>import maya.cmds as mc <br>print mc.listAttr(‘pCube1’,k=1)<br><a name="bJWtt"></a></p><h3 id="获取物体自定义属性（ud）">获取物体自定义属性（ud）</h3><p>import maya.cmds as mc<br>box = ‘pCube1’<br>for attr in mc.listAttr(box, ud=True):<br>    print ‘{0}.{1}’.format(box, attr)<br><a name="BX4Oi"></a></p><h3 id="查询属性getAttr（参数是名称加上点加上属性名）">查询属性getAttr（参数是名称加上点加上属性名）</h3><p>import maya.cmds as mc <br>print mc.getAttr(‘<a href="http://pCube1.sy">pCube1.sy</a>’)<br><a name="VYI9L"></a></p><h3 id="修改属性setAttr">修改属性setAttr</h3><p>import maya.cmds as mc <br>print mc.setAttr(‘<a href="http://pCube1.sy">pCube1.sy</a>’,1)<br>如果属性是字符串类型的（用户自定义的属性）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648467132524-549002d8-f1ff-40c1-ad9f-6cffffd8990b.png#averageHue=%234e4e4e&amp;clientId=ue4c50ca3-2f68-4&amp;from=paste&amp;height=564&amp;id=u39635c7d&amp;originHeight=564&amp;originWidth=516&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=23790&amp;status=done&amp;style=none&amp;taskId=u4f0ca81a-093d-4b41-9d60-cb9ee7fecdc&amp;title=&amp;width=516" alt="image.png"><br>那么需要属性值是带引号的同时也需要在后面加一个typ=‘string’<br>举例<br>mc.setAttr(‘pCube1.str’,‘1’,typ=‘string’)<br>mc.setAttr(‘pCube1.str’,‘1’,typ=‘string’,l=True) # 赋值后并将属性锁定<br><a name="pVg21"></a></p><h1>第七节连接属性、断开属性、属性联动</h1><p><a name="txwY9"></a></p><h2 id="常见的连接属性的方法">常见的连接属性的方法</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648543031243-9bd5873c-9f8b-48d8-8fc0-05057912678f.png#averageHue=%23474646&amp;clientId=u783b1c22-f3a3-4&amp;from=paste&amp;height=659&amp;id=u307f7f96&amp;originHeight=659&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=36194&amp;status=done&amp;style=none&amp;taskId=ua1588174-0769-4654-9e5c-15c799dbdc8&amp;title=&amp;width=536" alt="image.png"><br>左边的属性影响右边的属性。<br><a name="OKwGF"></a></p><h2 id="连接属性-connectAttr命令">连接属性 connectAttr命令</h2><p>mc.connectAttr(‘pCube1.t’,‘pSphere1.t’) # 将pCube1的translate属性与pSphere1的translate属性连接起来<br>mc.connectAttr(‘pCube2.t’,‘pSphere1.t’) # 会提示错误，因为pSphere1已经处于连接状态<br>mc.connectAttr(‘pCube2.t’,‘pSphere1.t’.f=True) # f是force的简写，代表强制连接pCube2与pSphere1。<br><a name="ieC9p"></a></p><h2 id="断开属性-disconnectAttr命令">断开属性 disconnectAttr命令</h2><p>mc.disconnectAttr(‘pCube2.t’,‘pSphere1.t’)<br><a name="FLqE8"></a></p><h1>第八节获取节点的连接关系</h1><p><a name="TkcQV"></a></p><h2 id="命令：listConnections-获取节点的连接信息">命令：listConnections 获取节点的连接信息</h2><p><strong>可用参数：</strong><br>source 简称s 上游，来源<br>destination简称d 下游，目标 <br>plugs 简称p 接口，返回连接的节点的属性的名字，参数为布尔类型（如果想要获取属性名字也可以通过connectionInfo命令获取）<br>type 简称t 根据类型返回节点信息<br>**举例：**mc.listConnections(‘blendColors1’,s=True,d=False,p=True,t=‘lambert’)<br><a name="kHmPr"></a></p><h2 id="命令：connectionInfo-获取节点属性的连接信息">命令：connectionInfo 获取节点属性的连接信息</h2><p><strong>可用参数：</strong><br>sourceFromDestination简称sfd，为True时返回上游属性（返回的是一个unicode）<br>destinationFromSource简称dfs，为True时返回下游属性（返回的是一个列表）<br>isSource不能用简称，因为is是关键词，为True时判断目标属性是否为上游属性（是否是用来输出的源）<br>isDestination不能用简称，因为id是关键词，为True时判断目标属性是否为下游属性<br><strong>举例：</strong><br>mc.connectionInfo(‘blendColors1.output’,dfs=True)<br><a name="w8SSs"></a></p><h1>第九节 约束</h1><p>常见的约束：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648559948601-8b2bdb3d-a8ce-4045-b140-3c1b0c76d6b3.png#averageHue=%23535252&amp;clientId=u17e0615e-ed5e-4&amp;from=paste&amp;height=312&amp;id=u0ed1d8ee&amp;originHeight=312&amp;originWidth=247&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11586&amp;status=done&amp;style=none&amp;taskId=u2ae086d2-b2b3-4ea5-8217-05b7c06e503&amp;title=&amp;width=247" alt="image.png">从上到下依此为，父子约束、点约束、旋转约束、缩放约束、目标约束、极向量约束。<br>这里介绍一下点约束、旋转约束、父子约束。<br><a name="J5u4Y"></a></p><h2 id="点约束：pointConstraint">点约束：pointConstraint</h2><p>能使用命令调用的属性都包含在这里面<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648560223121-cd9181bb-4688-4ec9-bc62-a40afbbbe679.png#averageHue=%23525251&amp;clientId=u17e0615e-ed5e-4&amp;from=paste&amp;height=389&amp;id=u4f5359bc&amp;originHeight=389&amp;originWidth=562&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=14552&amp;status=done&amp;style=none&amp;taskId=u2eb3d0ae-3318-4e1d-a103-eee6b445367&amp;title=&amp;width=562" alt="image.png"><br>平时的约束操作：选择约束的物体然后再选择被约束的物体然后执行约束。<br>使用命令进行约束：mc.pointConstraint(‘pCube1’,‘pSphere1’)第一个为约束的物体，第二个为被约束的物体<br>保持偏移的情况下进行约束：mc.pointConstraint(‘pCube1’,‘pSphere1’,mo=True)  mo为maintaniOffset的缩写 <br>约束的同时赋予约束节点名字: mc.pointConstraint(‘pCube1’,‘pSphere1’,mo=True,n=‘ball_cons’)<br>**约束信息的查询 **<br>查询一个被约束物体的约束节点名字：mc.pointConstraint(‘pSphere1’,q=True,n=True)<br>查询一个被约束物体的约束物体名字（列表）：mc.pointConstraint(‘pSphere1’,q=True,tl=True)  tl为targetList的简称<br>查询一个被约束物体的约束节点权重别名列表：mc.pointConstraint(‘pSphere1’,q=True,wal=True) wal为weightAliasList的简称<br><a name="ErPRh"></a></p><h2 id="旋转约束orientConstraint">旋转约束orientConstraint</h2><p>跟点约束是一样的，就是把point改成orient 其他就都一样了<br><a name="Vj3S0"></a></p><h2 id="父子约束parentConstraint">父子约束parentConstraint</h2><p>实例：利用控制器对骨骼进行约束<br>在实际运用中控制器（可以用曲线当控制器）的轴向要和骨骼的轴向一致。<br>因此可以先为控制器创建一个组，然后通过父子约束使骨骼约束控制器的组，这样控制器作为组的子物体就与骨骼轴向一致了，再将这个约束删除掉，再执行父子约束使控制器约束骨骼。就可以实现使控制器与骨骼轴向并且绑定到了一起。<br>代码实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">jt1=<span class="string">&#x27;joint1&#x27;</span></span><br><span class="line">ctg=<span class="string">&#x27;ctl_grp&#x27;</span></span><br><span class="line">ctl=<span class="string">&#x27;ctl&#x27;</span></span><br><span class="line">mc.delete(mc.parentConstraint(jt1,ctg))</span><br><span class="line">mc.parentConstraint(ctl,jt1)</span><br></pre></td></tr></table></figure><p><a name="jel5d"></a></p><h1>第十节 关键帧</h1><p><a name="OWGuS"></a></p><h2 id="设置关键帧setKeyframe">设置关键帧setKeyframe</h2><table><thead><tr><th>命令</th><th>执行效果</th></tr></thead><tbody><tr><td>mc.setKeyframe()</td><td>为选择物体所有属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’)</td><td>为pSphere1所有属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at=‘tx’)</td><td>为pSphere1的tx属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at=[‘tx’,‘ty’])</td><td>为pSphere1的tx，ty属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at=[‘tx’,‘ty’,‘r’])</td><td>为pSphere1的tx，ty,rx,ry,rz属性k帧</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at=[‘tx’,‘ty’,‘r’],v=10)</td><td>为pSphere1的tx，ty,rx,ry,rz属性k帧,并指定属性的值为10</td></tr><tr><td>mc.setKeyframe(‘pSphere1’,at=[‘tx’,‘ty’,‘r’],v=10,t=10)</td><td>为pSphere1的tx，ty,rx,ry,rz属性在第10帧k帧,并指定属性的值为10</td></tr></tbody></table><p>可以通过此命令进行的实际案例举例：</p><ol><li>不通过Maya的导出动画工具，我们可以自定义导出类型，然后读进来，用这个命令给控制器赋值上动画，就可以做一个导出导入动画的工具了。</li><li>让一个物体按照数学曲线来实现他的运动，例如让一个球沿着原点旋转，可以让这个球的X轴为正弦，Z轴为余弦的方式配合着来实现让球转圈的运动。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">360</span>) :</span><br><span class="line">    x=math.sin(i*math.pi/<span class="number">180</span>)*<span class="number">10</span> <span class="comment"># 在程序中的数学计算默认是以弧度为单位进行运算的，因此将角度转换为弧度</span></span><br><span class="line">    z=math.cos(i*math.pi/<span class="number">180</span>)*<span class="number">10</span></span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tx&#x27;</span>,t=i,v=x)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tz&#x27;</span>,t=i,v=z)</span><br></pre></td></tr></table></figure><p><a name="kakFH"></a></p><h2 id="获取与编辑关键帧keyframe">获取与编辑关键帧keyframe</h2><table><thead><tr><th>命令</th><th>执行效果</th></tr></thead><tbody><tr><td>mc.keyframe(‘pSphere1’,q=True,tc=True)</td><td>tc为timeChange的缩写，返回的是一个列表，记录着物体所有存在关键帧的时间</td></tr><tr><td>mc.keyframe(‘pSphere1’,q=True,vc=True)</td><td>vc为valueChange的缩写，返回的是一个列表，记录着物体所有存在关键帧的数值</td></tr><tr><td>mc.keyframe(‘pSphere1’,q=True,t=(101,101),at=“tx”,eval=True)</td><td>得到pSphere1在101帧时tx属性的值</td></tr></tbody></table><p><a name="k1f0F"></a></p><h2 id="将物体的某一范围关键帧整体移动（编辑关键帧）">将物体的某一范围关键帧整体移动（编辑关键帧）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">frame_tc=mc.keyframe(<span class="string">&#x27;pSphere1&#x27;</span>,q=<span class="literal">True</span>,tc=<span class="literal">True</span>)</span><br><span class="line">mc.keyframe(<span class="string">&#x27;pSphere1&#x27;</span>,e=<span class="literal">True</span>,time=(<span class="built_in">min</span>(frame_tc),<span class="built_in">max</span>(frame_tc)),tc=<span class="number">5</span>,r=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 解释一下这些参数的意思，e代表开启编辑模式，time代表帧数的范围，tc代表移动的值(正为右，负为左)，r代表相对模式</span></span><br></pre></td></tr></table></figure><p>执行前：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648723170267-6c854a51-c782-49a4-b0a1-32d16c7ba23a.png#averageHue=%23393838&amp;clientId=u86956685-7471-4&amp;from=paste&amp;height=66&amp;id=u7c89c0fb&amp;originHeight=66&amp;originWidth=536&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1816&amp;status=done&amp;style=none&amp;taskId=u8295ef55-1fe0-41f0-9660-87cb00f4be5&amp;title=&amp;width=536" alt="image.png"><br>执行后：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648723174130-111ce6c6-779d-47e9-828f-7baa674be086.png#averageHue=%233a3939&amp;clientId=u86956685-7471-4&amp;from=paste&amp;height=74&amp;id=ud07db9b7&amp;originHeight=74&amp;originWidth=520&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2146&amp;status=done&amp;style=none&amp;taskId=uc6fefe1f-0eff-4bb9-b225-8e0664350eb&amp;title=&amp;width=520" alt="image.png"></p><p><a name="D3z5N"></a></p><h1>第十一节文件IO操作</h1><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td>**file命令 **</td><td><strong>处理文件与文件路径相关的</strong></td></tr><tr><td>mc.file(new=True)</td><td>新建一个场景，如果没保存会无法执行</td></tr><tr><td>mc.file(new=True,force=True)</td><td>强制新建一个场景，没有保存的数据会清空且操作无法撤回。</td></tr><tr><td>mc.file(rename=‘D:/ball.ma’)<br>mc.file(save=True,typ=‘mayaAscii’)</td><td>这两行代码代表的意思为，第一行执行ctrl+s中的选择位置并命名指定格式的操作，第二行执行保存的操作（默认类型为mb格式，如果保存的类型为ma格式需要更改typ的参数为mayaAscii）</td></tr><tr><td>mc.file(save=True,typ=‘mayaAscii’)</td><td>对于已经创建好的场景可以直接执行保存的命令</td></tr><tr><td>mc.file(‘D:/ball.ma’,o=True,f=True)</td><td>强制打开对应的路径场景(需要带后缀名)</td></tr><tr><td>mc.file(q=True,sn=True)</td><td>查询场景的路径文件名（带路径名），sn是sceneName的缩写。</td></tr><tr><td>mc.file(q=True,sn=True,shn=True)</td><td>查询场景的文件名（不带路径名），shn是shortName的缩写</td></tr><tr><td>mc.file(‘D:/ball_export.ma’,ea=True,typ=‘mayaAscii’)</td><td>导出所有物体并指定路径文件名，ea是exportAll的缩写</td></tr><tr><td>mc.file(‘D:/ball_export.ma’,es=True,typ=‘mayaAscii’)</td><td>导出选中的物体并指定路径文件，es为exportSelected的缩写</td></tr><tr><td>mc.file(‘D:/ball_export.ma’,i=True,ns=‘ball’)</td><td>进行导入文件操作并提供命名空间为ball，加命名空间的名字是为了区分物体，i是import的缩写使用简称，因为import是python的关键字，ns是namespace 的缩写<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648779775166-df7053af-a760-4225-94b0-9548ece5265b.png#averageHue=%23525250&amp;clientId=u693e63da-04bd-4&amp;from=paste&amp;height=34&amp;id=ubfeb4c31&amp;originHeight=34&amp;originWidth=424&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19004&amp;status=done&amp;style=none&amp;taskId=u837a9d31-fa7c-4e26-8177-e261bb0a807&amp;title=&amp;width=424" alt="image.png"></td></tr><tr><td>mc.file(‘D:/ball_export.ma’,r=True,ns=‘ball’)</td><td>进行引用文件操作并提供命名空间为ball，r是reference的缩写。</td></tr><tr><td>mc.file(q=True,r=True)</td><td>查看当前场景引用的文件路径，返回的是一个列表</td></tr><tr><td>mc.file(‘D:/ball_export.ma’,r=True,ns=‘ball’)</td><td>查看当前场景中引用的D:/ball_export.ma文件中的引用文件路径，针对嵌套引用进行的操作</td></tr><tr><td>**referenceQuery命令  **</td><td><strong>查询引用文件的信息</strong></td></tr><tr><td>mc.referenceQuery(‘D:/ball_export.ma’,n=True)</td><td>查询引用文件的所有节点信息（列表）</td></tr><tr><td>mc.referenceQuery(‘ball:pSphere50’,f=True)</td><td>查询当前场景中的文件的文件路径，f为filename的缩写。</td></tr><tr><td>mc.referenceQuery(‘D:/ball_export.ma{3}’,isLoaded=True)</td><td>查询当前场景中引用的第四个文件有没有加载进场景中。</td></tr></tbody></table><p><a name="hDKYL"></a></p><h1>第十二节maya界面编程</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648782901563-53023a75-6b89-44dc-acf6-9b09669ff4dc.png#averageHue=%23313332&amp;clientId=u693e63da-04bd-4&amp;from=paste&amp;height=956&amp;id=uabc08218&amp;originHeight=956&amp;originWidth=1229&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=115918&amp;status=done&amp;style=none&amp;taskId=ubd402539-223c-4aaf-93bf-5c78d2339cd&amp;title=&amp;width=1229" alt="image.png"></p><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td>wnd=mc.window()<br>mc.showWindow(wnd)</td><td>创建一个简单的窗口<br>显示窗口</td></tr><tr><td>wnd=mc.window(w=600,h=800，t=‘My Window’)</td><td>创建一个宽600高800标题为My Window的窗口</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">wnd_name=<span class="string">&#x27;my_window&#x27;</span> <span class="comment"># 为窗口设置一个名字</span></span><br><span class="line"><span class="keyword">if</span> mc.window(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 如果界面中出现已经打开的窗口，就先删掉窗口，再执行下面的语句（创建窗口）</span></span><br><span class="line">    mc.deleteUI(wnd_name,wnd=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> mc.windowPref(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># Pref是preference(偏好)的简称，如果创建窗口后更改了窗口的大小，就会移除这个偏好设置，r为remove的简称。</span></span><br><span class="line">    <span class="comment"># 这个操作可以理解为初始化</span></span><br><span class="line">    mc.windowPref(wnd_name,r=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 生成一个窗口名称为wnd_name标题为My Window的窗口，用wnd来存取</span></span><br><span class="line">wnd = mc.window(wnd_name,w=<span class="number">400</span>,h=<span class="number">300</span>,t=<span class="string">&#x27;My Window&#x27;</span>)</span><br><span class="line">mc.showWindow(wnd)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">wnd_name=<span class="string">&#x27;my_window&#x27;</span></span><br><span class="line"><span class="keyword">if</span> mc.window(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    mc.deleteUI(wnd_name,wnd=<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">if</span> mc.windowPref(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">    mc.windowPref(wnd_name,r=<span class="literal">True</span>)</span><br><span class="line">wnd = mc.window(wnd_name,w=<span class="number">400</span>,h=<span class="number">300</span>,t=<span class="string">&#x27;My Window&#x27;</span>)</span><br><span class="line">mc.columnLayout() <span class="comment"># 垂直布局</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    mc.button(l=<span class="string">&#x27;Button_&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i),c=<span class="string">&#x27;print &#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(i)) <span class="comment"># 按钮以及对应事件</span></span><br><span class="line">mc.showWindow(wnd)</span><br></pre></td></tr></table></figure><p>可以在帮助文档中的这一栏找到生成界面的操作命令<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648792828376-99f3cddb-467d-4bce-83c0-197aee119740.png#averageHue=%23e6e6e6&amp;clientId=u693e63da-04bd-4&amp;from=paste&amp;height=148&amp;id=u67bb6d10&amp;originHeight=148&amp;originWidth=192&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3700&amp;status=done&amp;style=none&amp;taskId=udb846596-45c4-4933-bca4-bfbdeb6b0b7&amp;title=&amp;width=192" alt="image.png"><br><a name="HaCXE"></a></p><h1>第十三节maya界面视图操作</h1><table><thead><tr><th>命令</th><th>执行结果</th></tr></thead><tbody><tr><td><strong>mc.getPanel命令</strong></td><td><strong>获取面板</strong></td></tr><tr><td>mc.getPanel(all=True)</td><td>获取maya中的所有面板名字列表，all为（allPanels的缩写）</td></tr><tr><td>mc.getPanel(vis=True)</td><td>获取显示的面板名字列表（一般会包括脚本编辑面板和大纲面板），vis为（visiblePanels的缩写）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648817058285-e3519439-fc5b-4e4e-ad72-1d4f6622f924.png#averageHue=%233b3a3a&amp;clientId=u46a1ca6b-8b3c-4&amp;from=paste&amp;height=793&amp;id=uf18f57ac&amp;originHeight=793&amp;originWidth=1894&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=123883&amp;status=done&amp;style=none&amp;taskId=ub3d15eaa-8a32-4277-9838-375f0baf319&amp;title=&amp;width=1894" alt="image.png"></td></tr><tr><td>mc.getPanel(typ=‘modelPanel’)</td><td>获取类型为modelPanel的面板，[u’modelPanel1’, u’modelPanel2’, u’modelPanel3’, u’modelPanel4’]<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648818332899-7f478f10-7af7-454e-bf62-461ac25a34f6.png#averageHue=%23535353&amp;clientId=u46a1ca6b-8b3c-4&amp;from=paste&amp;height=511&amp;id=u24518dfb&amp;originHeight=511&amp;originWidth=392&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=19137&amp;status=done&amp;style=none&amp;taskId=u36b7d83b-6d6b-4d0c-b8b5-bc775d30801&amp;title=&amp;width=392" alt="image.png"><strong>无论对应不同面板对应视图是什****么，面板名都不会改变</strong></td></tr><tr><td>mc.getPanel(withFocus=True)</td><td>获取当前激活的面板名字。（实时获取需要将代码变成工具后才能实时获取）</td></tr><tr><td><strong>mc.modePanel命令</strong></td><td><strong>编辑面板</strong></td></tr><tr><td>mc.modelPanel(‘modelPanel4’,q=True,cam=True)</td><td>查询modelPanel4面板的相机名字</td></tr><tr><td>mc.modelPanel(‘modelPanel4’,q=True,p=True)</td><td>查询modelPanel4面板的父物体的名字</td></tr><tr><td>mc.modelPanel(‘modelPanel4’,e=True,cam=‘camera1’)</td><td>编辑modelPanel4面板，使其相机设置为camera1</td></tr><tr><td>mc.modelPanel(‘modelPanel4’,e=True,tearOff=True)</td><td>将modelPanel4面板裁剪下来，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648819167054-d406a702-6586-4f4f-ab30-5c4551609b53.png#averageHue=%23545453&amp;clientId=u46a1ca6b-8b3c-4&amp;from=paste&amp;height=593&amp;id=u4899d308&amp;originHeight=593&amp;originWidth=878&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=73520&amp;status=done&amp;style=none&amp;taskId=ufaa052bf-201f-42a3-b5fe-9e6b515d95b&amp;title=&amp;width=878" alt="image.png"><br>要想恢复默认面板点击这个<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648819187600-4bbfbc39-68f7-4c7b-b63c-a8912694e79e.png#averageHue=%23484646&amp;clientId=u46a1ca6b-8b3c-4&amp;from=paste&amp;height=200&amp;id=u7c2aa74f&amp;originHeight=200&amp;originWidth=106&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1825&amp;status=done&amp;style=none&amp;taskId=ue175964b-a7a2-4f25-b659-8dc8178443c&amp;title=&amp;width=106" alt="image.png"></td></tr><tr><td><strong>mc.modelEditor命令</strong></td><td><strong>针对视图面板进行编辑操作</strong></td></tr><tr><td>mc.modelEditor(‘modelPanel4’,q=True,cam=True)</td><td>获取modelPanel4面板中的摄像机名字</td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e=True,j=False)</td><td>编辑modelPanle4面板，取消骨骼的显示</td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e=True,pm=False)</td><td>编辑modelPanle4面板，取消多边形的显示</td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e=True,xray=True)</td><td>编辑modelPanle4面板，是物体以x光的样式显示<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648819832918-9880594a-dd75-4265-8d59-7606bd95b66f.png#averageHue=%23606060&amp;clientId=u46a1ca6b-8b3c-4&amp;from=paste&amp;height=74&amp;id=u0e3d76a3&amp;originHeight=74&amp;originWidth=101&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1940&amp;status=done&amp;style=none&amp;taskId=u78fb911b-2b04-466a-ace9-1d7320d43b4&amp;title=&amp;width=101" alt="image.png"></td></tr><tr><td>mc.modelEditor(‘modelPanel4’,e=True,grid=False)</td><td>编辑modelPanle4面板，取消网格的显示</td></tr></tbody></table><p><a name="YqPsv"></a></p><h1>第十四节 Maya ScriptJob 事件操作</h1><p><a name="KFZaj"></a></p><h2 id="时间变化事件">时间变化事件</h2><p>mc.scriptJob(tc=‘print “xxx”’) 意思是当时间轴变化的时候会输出“xxx”<br><strong>每通过scriptJob创造一次事件后，会生成对应的ID来代表事件，如果重复使用scriptJob事件变化时，会产生多次事件操作，因此每创造一次事件操作后需要通过mc.scriptJob(kill=对应事件的ID)来删除掉。</strong><br><a name="estH7"></a></p><h2 id="属性变化事件">属性变化事件</h2><p>mc.scriptJob(attributeChange=(‘pSphere1.tx’,‘print “123”’))意思是当pSphere1的x坐标发生改变时就输出123<br>mc.scriptJob(killAll=True) 意思是删除所有变化事件<br><a name="Rk562"></a></p><h2 id="节点变化事件">节点变化事件</h2><p>mc.scriptJob(nodeDeleted=(‘pSphere1’,‘print “ball delete”’)) 当pSphere1节点被删除时输出ball delete<br>mc.scriptJob(nodeNameChanged=(‘pSphere1’,‘print “ball renamed”’))  当pSphere1节点名字改变时，输出ball renamed，**无论名字怎么变都能追踪到节点，但是无法追踪的更改后的名字。**如果需要追踪的更改后的名字需要用到api的知识。<br>mc.scriptJob(nodeNameChanged=(‘pSphere1’,‘print “ball renamed”’,permanent=True)) permanent是永久的意思，为True时代表这个事件不会被kill掉，只有关闭maya时才会kill掉。<br><a name="Ziejv"></a></p><h2 id="根据条件是否成立进行的事件">根据条件是否成立进行的事件</h2><p>mc.scriptJob(conditionTrue=(‘autoKeyframeState’,‘print “auto key enable”’) )如果开启自动关键帧，则输出auto key enable<br>mc.scriptJob(conditionFalse=(‘autoKeyframeState’,‘print “auto key disable”’) )如果关闭自动关键帧，则输出</p><p>mc.scriptJob(conditionFalse=(‘SomethingSelected’,func) )如果选择了一个物体，则调用func函数（func函数是自己定义的）<br>mc.scriptJob(listConditions=True) 列举所有可以判断的条件<br><a name="Ep3Td"></a></p><h1>第十六节Maya中的Pymel编程</h1><p><a href="https://vannyyuan.github.io/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/">https://vannyyuan.github.io/2020/10/30/maya/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE/Maya%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E8%AF%BE%EF%BC%88%E4%BA%8C%EF%BC%89/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648969455562-a9471201-5f76-416b-88c7-71000227d7cd.png#averageHue=%23383837&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=693&amp;id=u8ced480e&amp;originHeight=693&amp;originWidth=928&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=237735&amp;status=done&amp;style=none&amp;taskId=ucb71eae1-72d4-4664-9de4-8b2cbb906dd&amp;title=&amp;width=928" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648969694679-2da33bb3-91e4-45db-a0a4-5446c0e8f52f.png#averageHue=%23363635&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=688&amp;id=u48255799&amp;originHeight=688&amp;originWidth=1541&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=434095&amp;status=done&amp;style=none&amp;taskId=uc96d9b04-1d09-4d42-9478-32cb4156a01&amp;title=&amp;width=1541" alt="image.png"><br><a name="cC9ah"></a></p><h1>第十八节自定义maya环境</h1><p><a name="iWEbO"></a></p><h2 id="为什么要修改maya的环境变量">为什么要修改maya的环境变量</h2><p>我们可以通过环境变量来配置我们不同项目中所需要的maya环境，可以通过环境变量来存储、获取信息，也可以直接修改maya的配置，可以通过设置统一的环境变量，使每个人的环境设置都是统一的。如果我们使用动态设置环境变量的话，我们可以更方便地去切换配置来制定我们的运行环境。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974285639-8307f5dc-3fad-4dd6-93a9-37ca6d46ce5d.png#averageHue=%23f1f0ef&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=666&amp;id=ufb0805fb&amp;originHeight=666&amp;originWidth=632&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37783&amp;status=done&amp;style=none&amp;taskId=udb9a3237-1620-4b31-ab67-2dc3fa7f4e0&amp;title=&amp;width=632" alt="image.png"><br>上面一栏是针对用户的变量，系统变量不区分用户，只要用的是同一台电脑都会读取系统变量。<br>用户变量会覆盖系统变量，<br><a name="VuEty"></a></p><h2 id="在进程中设置环境变量">在进程中设置环境变量</h2><p>在进程中设置的环境变量只针对当前运行的程序，在进程中设置是指，<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974530936-92f75e29-8dec-404e-ab23-6b3e8f8a5760.png#averageHue=%23383838&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=188&amp;id=ua27d14e8&amp;originHeight=188&amp;originWidth=540&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=52373&amp;status=done&amp;style=none&amp;taskId=ua5af8108-75c6-470d-8b88-9ceab9ed478&amp;title=&amp;width=540" alt="image.png"><br>关闭程序框之后设置的环境变量就消失了。<br><a name="ojerf"></a></p><h2 id="通过设置环境变量关闭maya的用户登录节省启动时间">通过设置环境变量关闭maya的用户登录节省启动时间</h2><p>在搜索框中搜索env可以快速进入编辑环境变量的界面。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974632970-d824b63d-0ea5-4ece-b9dd-173db2f96959.png#averageHue=%231a6097&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=77&amp;id=u2483008d&amp;originHeight=77&amp;originWidth=264&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=11427&amp;status=done&amp;style=none&amp;taskId=ufd13bde6-62e7-4c21-ae4e-1bbb837377d&amp;title=&amp;width=264" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974672749-51fb577e-e216-4985-bb58-a1be24045b0a.png#averageHue=%23eae9e9&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=190&amp;id=u7b27031f&amp;originHeight=190&amp;originWidth=667&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=10509&amp;status=done&amp;style=none&amp;taskId=ue3fb4f62-e2da-44cc-9f95-313c0fbacfa&amp;title=&amp;width=667" alt="image.png"><br>常用的环境变量设置：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648974783139-5563350b-98d3-4a6f-8ced-262b4af7cb2c.png#averageHue=%23f4f4f4&amp;clientId=ua9dc1804-c6e6-4&amp;from=paste&amp;height=940&amp;id=u32d73e3d&amp;originHeight=940&amp;originWidth=1577&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=504330&amp;status=done&amp;style=none&amp;taskId=u0aac74f6-e652-46f0-8db7-5e62b90aed3&amp;title=&amp;width=1577" alt="image.png"><br><a name="cVpqZ"></a></p><h1>第十九节maya api基础知识</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653280913082-51374dc0-392d-4e30-8419-99747223fb98.png#averageHue=%2397a36a&amp;clientId=u83265a8a-3f59-4&amp;from=paste&amp;height=634&amp;id=u3890b232&amp;originHeight=634&amp;originWidth=988&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=149416&amp;status=done&amp;style=none&amp;taskId=uddea111d-2eab-41b3-99b6-df12b83781c&amp;title=&amp;width=988" alt="image.png"><br><a name="EKEk1"></a></p><h2 id="API编译的插件后缀">API编译的插件后缀</h2><p>Linux：.so<br>Windows: .mll<br>Mac OS X: .bundle<br>通用型插件: .py 直接运行<br><a name="xMUzJ"></a></p><h2 id="API的内置库">API的内置库</h2><p>OpenMaya 基本的操作工具类<br>OpenMayaUI 界面工具类<br>OpenMayaAnim 动画工具类<br>OpenMayaFX 特效工具类<br>OpenMayaRender 渲染工具类<br><a name="FzR2w"></a></p><h2 id="API命名规则">API命名规则</h2><p>M classes - 基本的数据类型   比如：类似于python的字符串、整数<br>MFn - Function 函数工具类型<br>MIt - lterator 迭代器类型<br>MPx - 代理类型，扩展Maya功能需要继承的类</p><p>MayaAPI通过MFn把不同的物体方法归类，我们可以通过这些方法，针对不同的物体进行各自的操作<br>MIt开头的迭代器类型：这种类型对于我们批量访问物体也就是说对于一批物体我们要逐个访问的时候，我们要使用这种迭代器类型，然后用循环挨个访问它们的元素。<br>MPx类型这个类型不是由我们来访问的，是我们按照这种格式编写好了一个插件，那么加载上之后，Maya就去根据他定义好的固定的格式来去加载这些插件，MPx类型就是我们由人工来编写，Maya自己来识别的这个命令</p><p><a name="XChwZ"></a></p><h2 id="DependencyNode和DagNode">DependencyNode和DagNode</h2><p>在maya中，所有的节点都是一个DependencyNode也就是说依赖节点，我们所有的数据都是依赖于节点来计算的，每个节点存储了我们所需要的数据，那么节点之间的相互计算，形成节点网络，也就形成了我们最终的文件。<br>DependencyNode是最基本的节点，类似于我们的材质节点，这种独立的单个节点。<br>Maya DagNode是带有层级关系的，在大纲里，我们可以设置它的父子关系，这种叫DagNode，DagNode是从DependencyNode扩展而来的，DagNode拥有DependencyNode的所有方法，我们可以用DependencyNode的方法来处理任何一个DagNode，但是类似于层级操作这种，比如说获取它的物体的上下级关系这种不属于DependencyNode里面的方法，我们就要用DagNode它自有的方法，也就是我们面向对象里面的，子类的那种方法。<br><a name="dTJpY"></a></p><h2 id="MObject-：Maya最基本的对象指针">MObject ：Maya最基本的对象指针</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653288864645-b0a7fcbd-b4fa-4f97-a0c6-ec56f647b08a.png#averageHue=%23323232&amp;clientId=u83265a8a-3f59-4&amp;from=paste&amp;height=488&amp;id=u4e48a232&amp;originHeight=488&amp;originWidth=1447&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=279544&amp;status=done&amp;style=none&amp;taskId=u087d5467-e700-433a-b5a2-a9a58803911&amp;title=&amp;width=1447" alt="image.png"><br>MObject是maya最基本的一个对象，也就是说如果使用API的话这个就是我们处理的最基本的一个数据，就像python编程一样，我们一个变量，虽然是字符串或者整数，那么它都是一个python的基本对象，这个MObject是MayaAPI的基本对象。在MayaAPI中，它不能以字符串这种来处理节点，它必须要转化成一个MObject才能处理，也就是说Maya中任何一个对象都是一个MObject，当然处理类似于它的名字、它的属性值这种字符串或者数值例外。也就是说这是一个最基本的索引，它指向 了每一个节点，我们在处理某一个节点就认为它是一个MObject</p><p>我们要处理任何一个Maya节点都要把它实例成一个MObject才能使用它的方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">ball_node = pm.PyNode(<span class="string">&#x27;pSphere1&#x27;</span>) <span class="comment"># 将”pSphere1“改为pymel节点</span></span><br><span class="line">ball_api_node = ball_node.__apimobject__() <span class="comment"># 利用pymel节点的方法创建一个MObject对象指向pSphere1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过pymel转化的MObject已经有了对象</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node.isNull() <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 通过OpenMaya直接创建的MObject是空的</span></span><br><span class="line"><span class="built_in">print</span> OpenMaya.MObject().isNull() <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询api类型</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node.apiType() <span class="comment"># 110</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node.apiTypeStr() <span class="comment"># kTransform</span></span><br><span class="line">ballshape_api_node = pm.PyNode(<span class="string">&#x27;pSphereShape1&#x27;</span>).__apimobject__()</span><br><span class="line"><span class="built_in">print</span> ballshape_api_node.apiType() <span class="comment"># 296</span></span><br><span class="line"><span class="built_in">print</span> ballshape_api_node.apiTypeStr() <span class="comment"># kMesh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 == != 判断两个物体是否相等</span></span><br><span class="line"><span class="built_in">print</span> ball_api_node == ballshape_api_node <span class="comment"># False</span></span><br><span class="line"><span class="comment"># 使用 = 直接赋值</span></span><br><span class="line">ballshape_api_node = ball_api_node</span><br><span class="line"><span class="built_in">print</span> ballshape_api_node.apiTypeStr()</span><br></pre></td></tr></table></figure><p><a name="amNP3"></a></p><h2 id="如何查询API的帮助文档">如何查询API的帮助文档</h2><p><a href="https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_index_html">https://help.autodesk.com/view/MAYAUL/2019/CHS/?guid=Maya_SDK_MERGED_cpp_ref_index_html</a><br>帮助文档是C++的风格，<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653291601023-9de8eeeb-6c65-4443-bccd-226ba3a42d79.png#averageHue=%23d6dde9&amp;clientId=u83265a8a-3f59-4&amp;from=paste&amp;height=208&amp;id=u0342c47f&amp;originHeight=208&amp;originWidth=312&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13455&amp;status=done&amp;style=none&amp;taskId=u73376463-7488-40a2-b405-14e7642c102&amp;title=&amp;width=312" alt="image.png"><br>modules是我们可以导入的模块，查询一般都是查询modules里面的内容<br>例如查询MObject<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653291953243-7e5ce736-0b3a-4abc-b0ba-a586d5927065.png#averageHue=%23f3f6fa&amp;clientId=u83265a8a-3f59-4&amp;from=paste&amp;height=549&amp;id=u4acf9a0a&amp;originHeight=549&amp;originWidth=932&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=54163&amp;status=done&amp;style=none&amp;taskId=u90bca0ff-6f2c-4306-bf5c-10b3bfa0abd&amp;title=&amp;width=932" alt="image.png"><br>前三行：在最一开始我们可以通过第一行创建一个空的MObject，或者通过第二行从另一个MObject转过来它就指到这一个原来那个MObject那个节点上了。第三行带~的学名叫做析构函数，意思是被销毁时执行的操作。一般不会用到它，除非我们编写节点的时候，需要用到它来清理内存。<br>下面的蓝色的部分是它可以使用的方法，前面的是当前方法的返回值，括号里面是当前方法需要的参数，后面是它的描述。<br><strong>静态方法：意思是不需要实例化就可以使用的方法</strong></p><p><a name="WRd71"></a></p><h2 id="MDagPath">MDagPath</h2><p>MDagPath是最基本的物体对象，我们可以把大纲里的物体通过它来交给API来处理，可以从MDagPath里面找到物体对应的MObject，也可以通过传入MObject，给物体定义好一个DagPath来处理它的层级关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个空的MDagPath</span></span><br><span class="line">ball_dag_path = OpenMaya.MDagPath()</span><br><span class="line"><span class="comment"># 建立DagPath联系</span></span><br><span class="line">OpenMaya.MDagPath.getAPathTo(ball_api_node,ball_dag_path)</span><br><span class="line"><span class="comment"># 获取DagPath名字</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.fullPathName() <span class="comment"># |pSphere1</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.partialPathName() <span class="comment"># pSphere1</span></span><br><span class="line"><span class="comment"># 判断是否显示</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.isVisible() <span class="comment"># True</span></span><br><span class="line"><span class="comment"># 通过MDagPath获取API类型</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.apiType() <span class="comment"># 110</span></span><br><span class="line"><span class="comment"># 通过MDagPath返回MObject</span></span><br><span class="line"><span class="built_in">print</span> ball_dag_path.node() <span class="comment"># &lt;maya.OpenMaya.MObject; proxy of &lt;Swig Object of type &#x27;MObject *&#x27; at 0x0000014894705F90&gt;</span></span><br></pre></td></tr></table></figure><p><a name="dXjGA"></a></p><h1>第二十节 MFn、MIt、MPx（函数库、迭代器、代理）</h1><p><a name="kMnOj"></a></p><h2 id="MFn">MFn</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653379132076-ae3a87ef-4af8-43b0-80de-6961a3499f80.png#averageHue=%23343434&amp;clientId=u7707d889-cb75-4&amp;from=paste&amp;height=718&amp;id=ubd1e52a1&amp;originHeight=718&amp;originWidth=1304&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=250768&amp;status=done&amp;style=none&amp;taskId=u97b20b69-d851-475e-bd37-314e47bd1b1&amp;title=&amp;width=1304" alt="image.png"><br>MFnDependencyNode用来处理任何一个节点的普通方法<br>MFnDagNode用来处理大纲内的物体的一些常用方法<br>MFnMesh用来处理多边形的操作<br>MFn记录了Maya内所有的节点的类型也就是说我们用MObject获取的那个apiType返回的数值就是它在MFn列表中的索引值<br><a name="S5GWo"></a></p><h2 id="MIt">MIt</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653379457368-a53666cf-f95b-48a5-813c-5d6a4a0cff46.png#averageHue=%23313130&amp;clientId=u7707d889-cb75-4&amp;from=paste&amp;height=841&amp;id=u071fd3f3&amp;originHeight=841&amp;originWidth=1391&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=310906&amp;status=done&amp;style=none&amp;taskId=u838416df-de52-4897-8a87-685e9f3da86&amp;title=&amp;width=1391" alt="image.png"><br>MIt是为了批量处理而设计的，比如挨个处理每个层级的物体。或者比如说有一个球的任何一个节点都可以通过MItMesh来访问，然后来访问它的任何一个点线面。<br>MItDag：处理大纲里的层级关系<br>MItCurveCV：处理曲线的点<br>MItMeshEdge：处理多边形的线的循环<br>MItMeshFaceVertex: 以面点的方式处理<br>MItMeshPolygon：处理面<br>MItMeshVertex：处理顶点<br>MItSelectionList：处理一个列表中的任何物体（跟MItDag有区别，MItDag是处理大纲里的所有物体，MItSelectionList是处理我们自己创建的列表中的物体）</p><p>MItDependencyGraph：通过一个节点寻找它上下游所有的节点<br>MItDependencyNodes：可以使用它来过滤场景里面任何一个节点，Maya中的节点都可以通过它来逐个访问到<br><a name="UC68R"></a></p><h2 id="MPx">MPx</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653380549470-f6f7ebc9-6faa-4aaa-af9c-269bed2d53c7.png#averageHue=%23323232&amp;clientId=u7707d889-cb75-4&amp;from=paste&amp;height=784&amp;id=uae30f1b1&amp;originHeight=784&amp;originWidth=1379&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=309040&amp;status=done&amp;style=none&amp;taskId=u46b56290-7d6b-4b79-86e8-c625e98e985&amp;title=&amp;width=1379" alt="image.png"><br>当要真正编写一个Maya中没有的物体的话，就需要继承MPx里边的内容。<br>我们如果要写一个命令的话，那么，它就要继承MPxCommand，如果我们要写一个节点的话就要继承一个MPxNode。如果要写一个变形器的话，那就要继承DeformerNode。<br>当然还有灯光材质或者其他的那些，我们要选择对应的代理类去继承然后使用。<br>比如，我们要编写一个新的节点的话，我们可以继承MPxNode，里面我们可以选择对应的类型，我们可以不用继承一个最基本的一个类型，比如我们要写一个新的Locator的话，我们可以直接定义他的初始化类型Locator。那么，这些方法我们都是要定义同样的方法，同样的参数，然后写我们不同的处理方法。Maya会自动访问这些方法，来根据我们的计算反映出不同的数值。compute方法是计算方法，是节点最核心的方法，我们所有的算法都要存在这里边然后返回不同的结果。<br>这只是一个单纯的节点，我们如果要编写一个新的节点的话，我们还需要在给这个节点他添加上我们所需要的属性，那么在compute方法里面，我们通过不同的算法，把不同的数值返回给我们的属性，那么它就会输出到其他的节点，从而达到我们真正所需要的想法。<br><a name="KuNx7"></a></p><h2 id="总结">总结</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653383481384-24e48f5e-810b-491c-b363-6573e4368e27.png#averageHue=%23333333&amp;clientId=u7707d889-cb75-4&amp;from=paste&amp;height=785&amp;id=ua211a22f&amp;originHeight=785&amp;originWidth=1389&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=315867&amp;status=done&amp;style=none&amp;taskId=ub1647ad2-883e-4e9c-a1b2-3a3244dfe3b&amp;title=&amp;width=1389" alt="image.png"><br><a name="DXONy"></a></p><h1>第二十一节MSelectionList与MItSelection List</h1><p><a name="kQTS4"></a></p><h2 id="MSelectionList">MSelectionList</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653384147890-bcfa673a-f9e9-4629-a5f3-d6b7df49a6f0.png#clientId=u7707d889-cb75-4&amp;from=paste&amp;height=1011&amp;id=u89ecb4e3&amp;originHeight=1011&amp;originWidth=1283&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=291687&amp;status=done&amp;style=none&amp;taskId=u92e44cd3-f5cb-4cbb-a605-ee2b6aff3fe&amp;title=&amp;width=1283" alt="image.png"><br>MSelectionList只是一个普通的节点列表。用来存储节点或者物体的列表。<br>MSelectionList类的方法：<br>isEmpty：用来判断实例化的对象是否是一个空的MSelectionList，返回布尔类型<br>add： 可以添加的类型有MObject、MDagPath、MString、MPlug、MUuid。其中MString可以是确切的物体的名字，也可以包含通配符的。例如add(“pSphere*”)就会挨个添加pSphere1、pSphere2等，这里的*就是通配符可以指代所有字符<br>length：返回列表中的元素个数<br>merge（合并） : 把参数中的列表内容添加到使用此方法的对象上。例如： ball_lst.merge(box_lst)就是将box_lst的内容添加到ball_lst列表里面<br>intersect（交集）：同理merge得到两个列表（调用方法的对象和方法中的参数）的交集<br>remove：移除<br><a name="Dpv2T"></a></p><h2 id="MItSelectionList">MItSelectionList</h2><p>MItSelectionList是SelectionList 的迭代器，用于逐个访问MSelectionList里的项目<br>生成迭代器需要传入MSelectionList对象<br>常用方法：<br>next： 通过next访问下一个元素<br>reset： 返回到某一位置重新继续next<br>getDagPath：获取里面的DagPath<br>getDependencyNode:获取里面的MObject<br><strong>举例，迭代SelectionList里的内容</strong><br>通过lst_iter = OpenMaya.MItSelectionList(sel_lst)来创建sel_lst的迭代器，然后迭代列表中的内容，输出dag_path<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653398043743-3b190bc6-c1ad-46df-8c24-8b9576eaf1ec.png#clientId=u7707d889-cb75-4&amp;from=paste&amp;height=442&amp;id=u680240fe&amp;originHeight=442&amp;originWidth=733&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=204123&amp;status=done&amp;style=none&amp;taskId=u556cb6a2-ea33-410a-8a52-f3c999808ac&amp;title=&amp;width=733" alt="image.png"><br>最重要的是框住的那些内容，如果不写这些会造成死循环，如果要迭代执行应该首先写这两个内容。<br><a name="s4nyD"></a></p><h1>第二十二节MGlobal全局操作类</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653460030778-cab5a9e7-748b-46df-8294-66239100e37d.png#clientId=u9947dbe0-b82a-4&amp;from=paste&amp;height=545&amp;id=ucbe51d44&amp;originHeight=545&amp;originWidth=976&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=127099&amp;status=done&amp;style=none&amp;taskId=ue7133d2d-e668-4a79-a8f4-8c2baeb2ea1&amp;title=&amp;width=976" alt="image.png"><br>重点：不需要实例化<br>静态方法：<br>mayaVersion：返回当前maya的版本号<br>getActiveSelectionList(MSelectionList的对象)：将我们在maya中选择的内容存入到传递的实例化的MSelectionList中（会替换列表中的内容，例如选择了5个物体执行命令列表会有5个，再选择1个物体执行命令列表会变成1个）。<br>setActiveSelectionList(MSelectionList的对象): 类似于select命令后面跟一组列表，将列表中的物体选择。<br>executeCommand:参数中写mel命令，可以通过api使用这些命令<br>executePythonCommand：参数中写python命令，可以通过api使用这些命令<br>isYAxisUp：判断场景的向上轴是否为Y轴，如果是返回True，如果不是返回False。同理isZAxisUp<br>displayInfo：显示输出信息，参数是字符串<br>displayWarning：输出显示警告信息<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653461558722-6d62fc39-94a0-4d2d-9a96-b22de5ea1b2c.png#clientId=u9947dbe0-b82a-4&amp;from=paste&amp;height=57&amp;id=u91af9ddd&amp;originHeight=57&amp;originWidth=300&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1723&amp;status=done&amp;style=none&amp;taskId=ua7776fb5-4a3e-4c2a-9fa9-6ff5f848d51&amp;title=&amp;width=300" alt="image.png"><br>displayError： 输出显示错误信息<br>viewFrame: 参数为整数，调整当前帧的位置<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653461723498-23836da2-e0a1-4893-864d-0c0d59c33a59.png#clientId=u9947dbe0-b82a-4&amp;from=paste&amp;height=817&amp;id=u869cdd62&amp;originHeight=817&amp;originWidth=1091&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=424890&amp;status=done&amp;style=none&amp;taskId=u1a550001-cef8-460c-a626-0e4af3d449a&amp;title=&amp;width=1091" alt="image.png"><br><a name="h291n"></a></p><h1>第二十三节MFileIO文件操作类</h1><p>MFileIO同样是一个全局的操作类，使用它不需要实例化<br>currentFile: 返回当前的场景的路径<br>setCurrentFile： 更改当前场景的名字路径，参数为字符串<br>fileType： 返回当前场景文件类型<br>查看可以保存的文件类型（结果在列表中）：<br>--------------------------------------------<br>lst = list()<br>OpenMaya.MFileIO.getFileTypes(lst)<br>[u’mayaAscii’, u’mayaBinary’, u’mel’, u’OBJ’, u’directory’, u’plug-in’, u’audio’, u’move’, u’EPS’, u’Adobe® Illustrator®’, u’image’, u’fluidCache’, u’editMA’, u’editMB’, u’IGES_ATF’, u’JT_ATF’, u’PARASOLID_ATF’, u’SAT_ATF’, u’STEP_ATF’, u’WIRE_ATF’, u’CATIAV4_ATF’, u’CATIAV5_ATF’, u’DWG_ATF’, u’DXF_ATF’, u’NX_ATF’, u’PROE_ATF’, u’IGES_ATF Export’, u’JT_ATF Export’, u’PARASOLID_ATF Export’, u’SAT_ATF Export’, u’STEP_ATF Export’, u’WIRE_ATF Export’, u’CATIAV5_ATF Export’, u’DWG_ATF Export’, u’DXF_ATF Export’, u’NX_ATF Export’, u’FBX’, u’FBX export’, u’DAE_FBX’, u’DAE_FBX export’, u’SVG’, u’ASS Export’, u’ASS’, u’Alembic’, u’OBJexport’, u’BIF’]<br>-------------------------------------------<br>newFile(True)：创建一个新的场景（强制）<br>save：保存场景<br>saveAs:另存场景，第一个参数为保存路径，第二个参数为保存类型（例如’mayaBinary’,‘mayaAscii’）<br>exportSelected：导出选择的物体，也是两个参数，第一个参数为文件路径，第二个参数为文件类型<br>exportAll:导出所有物体。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653466792218-28a24098-7fd7-4296-a138-44a7aac9970f.png#clientId=u9947dbe0-b82a-4&amp;from=paste&amp;height=982&amp;id=u497fff7a&amp;originHeight=982&amp;originWidth=1079&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=324039&amp;status=done&amp;style=none&amp;taskId=u7d5ef7f6-9fca-411d-aad6-a8f0d64865e&amp;title=&amp;width=1079" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653466815616-30af3357-ac40-41ac-9c98-78731d1e5c29.png#clientId=u9947dbe0-b82a-4&amp;from=paste&amp;height=968&amp;id=ub5ccc466&amp;originHeight=968&amp;originWidth=1195&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=478134&amp;status=done&amp;style=none&amp;taskId=uc93c2107-05f1-483e-aac8-c724f721797&amp;title=&amp;width=1195" alt="image.png"><br><a name="JV6lB"></a></p><h1>第二十四节MFnDependencyNode与MItDependencyNodes</h1><p><a name="JaA1h"></a></p><h2 id="MFnDependencyNode">MFnDependencyNode</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1653467327390-60981704-8b89-453a-827d-7b4c35f5aabc.png#clientId=u9947dbe0-b82a-4&amp;from=paste&amp;height=438&amp;id=u9208539b&amp;originHeight=438&amp;originWidth=849&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=121025&amp;status=done&amp;style=none&amp;taskId=u706087b2-8e51-4a49-ba74-3907f436030&amp;title=&amp;width=849" alt="image.png"><br>在maya中所有的物体都是以节点的形式来存在的，它们最基本的模式就是一个DependencyNode，带有层级的那些节点都是从DependencyNode扩展而来，变成了DagNode，通过不同的继承发展成不同的节点。<br>在maya中的所有的节点，都可以使用MFnDependencyNode方法<br>创建MFnDependencyNode的方法：<br>第一个：如果直接通过 MFnDependencyNode()语句创建，这样创建出来的不能与任何节点进行连接，创建出来的实际上是一个空的，没有任何意义。<br>第二个：通过传入一个MObject来实例化一个MFnDependencyNode，通过MObject，maya可以追踪到任何一个节点。<br>配合pymel快速传入MObject：<br>mfn = OpenMaya.MFnDependencyNode(<a href="http://pm.ls">pm.ls</a>(sl=True)[0].<strong>apimobject</strong>())<br><strong>MFnDependencyNode的常用方法：</strong><br>typeName:返回节点类型<br>name：返回节点名字<br>setName(要更改的名字)：更改节点的名字<br>attributeCount：查询节点有多少个属性<br>attribute：通过属性的名字返回MObject(指针)<br>findPlug：同样是返回属性<br>isLocked：判断是否锁定<br>hasAttribute ：判断有没有属性<br>icon：节点查询图标<br>setIcon ： 设置图标<br><a name="OQEbn"></a></p><h2 id="MItDependencyNodes">MItDependencyNodes</h2><p>MItDependencyNodes可以过滤场景中的所有基本节点，我们可以通过这个迭代器来达到我们命令中使用ls的这种效果。<br>iterator = OpenMaya.MItDependencyNodes(OpenMaya.MFn.kMesh)  #创建一个迭代器对象，用来过滤场景中的所有多边形类型<br>在maya中所有的迭代器都有一个isDone方法用来判断迭代器是否已经迭代完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="comment"># 创建一个过滤mesh类型的迭代器</span></span><br><span class="line">iterator = OpenMaya.MItDependencyNodes(OpenMaya.MFn.kMesh)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    <span class="comment"># 通过iterator.thisNode()得到迭代器中的节点（MObject）</span></span><br><span class="line">    <span class="comment"># 然后将MObject给MFnDependencyNode来使用DependencyNode的方法（name）</span></span><br><span class="line">    <span class="built_in">print</span> OpenMaya.MFnDependencyNode(iterator.thisNode()).name() <span class="comment"># 输出场景中的多边形的名字</span></span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p><a name="xsfp9"></a></p><h1>第二十五节MFnDagNode和MItDag</h1><p><a name="kb5QR"></a></p><h2 id="MFnDagNode">MFnDagNode</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654467583261-8453b27c-0de0-473a-b13e-8675228c40d8.png#clientId=u004a41f6-956d-4&amp;from=paste&amp;height=801&amp;id=ubd4048a4&amp;originHeight=801&amp;originWidth=1171&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=224149&amp;status=done&amp;style=none&amp;taskId=ue94af028-6444-442e-8b33-5a9f6974d01&amp;title=&amp;width=1171" alt="image.png"><br>MFnDagNode常用方法：<br>parent<br>child<br>hasParent<br>hasChild<br>isParentOf<br>isChildOf<br>dagPath<br>fullPathName<br>partialPathName</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="comment"># pm.PyNode(&#x27;pSphere1&#x27;).__apiobject__()找到场景中类型为MDagPath的pSphere1</span></span><br><span class="line"><span class="comment"># 当指定后,即使后续更改物体的名字,maya依然能够找到对应的物体。</span></span><br><span class="line"><span class="comment"># api和pymel是一样的,都是直接绑定到节点上的,不依据字符串查找,即使节点发生变化依然可以追踪到。</span></span><br><span class="line">mfn=OpenMaya.MFnDagNode(pm.PyNode(<span class="string">&#x27;pSphere1&#x27;</span>).__apiobject__())</span><br><span class="line">mfn.partialPathName() <span class="comment"># 得到pSphere1的短名</span></span><br><span class="line">mfn.fullPathName() <span class="comment"># 得到pSphere1的长名 </span></span><br><span class="line">mfn.childCount() <span class="comment"># 查询pSphere1的下一级有几个物体（包含shape）</span></span><br><span class="line">mfn.child(<span class="number">0</span>) <span class="comment"># 得到pSphere1的第一个子物体 类型为MObject</span></span><br><span class="line">mfn.parent(<span class="number">0</span>) <span class="comment"># 得到pSphere1的第一个父物体 类型为MObject</span></span><br><span class="line">OpenMaya.MFnDagNode(mfn.parent(<span class="number">0</span>)).partialPathName() <span class="comment"># 输出pSphere1的第一个父物体的短名</span></span><br><span class="line">mfn.removeChildAt(<span class="number">1</span>) <span class="comment"># 移除pSphere1的第二个子物体（第一个子物体是pSphereShape1），也会携带着移除第二个子物体的所有子级</span></span><br></pre></td></tr></table></figure><p><a name="vzQEv"></a></p><h2 id="MItDag">MItDag</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654473278734-4567a1ed-d4ed-4f3c-8e10-d4e34c5dfd12.png#averageHue=%23303030&amp;clientId=u004a41f6-956d-4&amp;from=paste&amp;height=375&amp;id=u882e443f&amp;originHeight=375&amp;originWidth=920&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=86367&amp;status=done&amp;style=none&amp;taskId=udaf4fc99-848b-4735-8118-b0860a2939e&amp;title=&amp;width=920" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line">iterator = OpenMaya.MItDag()</span><br><span class="line"><span class="comment"># 将迭代器的迭代起始点为group4，方式为广度优先，迭代类型为mesh类型</span></span><br><span class="line">iterator.reset(pm.PyNode(<span class="string">&#x27;group4&#x27;</span>).__apiobject__(),OpenMaya.MItDag.kBreadthFirst,OpenMaya.MFn.kMesh) </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    <span class="built_in">print</span> iterator.partialPathName() </span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br></pre></td></tr></table></figure><p>其中迭代器的自带方法中的 partialPathName是返回的字符串，代表当前迭代项的名字，如果使用currentItem返回的是当前迭代项的MObject。</p><p><a name="gFqip"></a></p><h1>第二十六节MFnMesh与MItMesh</h1><p><a name="T4pYL"></a></p><h2 id="MFnMesh">MFnMesh</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654481092141-3ce18d58-c913-4d13-8f5d-9ce8e07c3aaa.png#averageHue=%23313131&amp;clientId=u7402bc27-1154-4&amp;from=paste&amp;height=594&amp;id=uc0293a34&amp;originHeight=594&amp;originWidth=1783&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=247196&amp;status=done&amp;style=none&amp;taskId=ua7839acf-dd70-495f-8896-187bf243ce7&amp;title=&amp;width=1783" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">mfn = OpenMaya.MFnMesh(pm.PyNode(<span class="string">&#x27;pSphere1&#x27;</span>).__apiobject__())</span><br><span class="line">mfn.numVertices()  <span class="comment"># 查询pSphere1有多少个顶点。</span></span><br><span class="line">mfn.numEdges()  <span class="comment"># 查询有多少根线。</span></span><br><span class="line">mfn.numPolygons()  <span class="comment"># 查询有多少个面。</span></span><br><span class="line">point = OpenMaya.MPoint() <span class="comment"># 定义一个空的MPoint类型的对象</span></span><br><span class="line">mfn.getPoint(<span class="number">0</span>, point) <span class="comment"># 将pSphere1的序列号为0的顶点赋予刚才定义的MPoint类型的对象</span></span><br><span class="line"><span class="built_in">print</span> point.x, point.y, point.z <span class="comment"># 输出赋予顶点后的point的xyz</span></span><br><span class="line">point1 = OpenMaya.MPoint(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) <span class="comment"># 定义一个携带数值的MPoint类型的对象</span></span><br><span class="line">mfn.setPoint(<span class="number">381</span>, point1) <span class="comment"># 将pSphere1的序列号为381的顶点的数值设置为point1携带的数值</span></span><br></pre></td></tr></table></figure><p><a name="poySg"></a></p><h2 id="MItMesh">MItMesh</h2><p>MItMesh有四种类型分别是MItMeshPolygon，MItMeshVertex，MItMeshEdge，MItMeshFaceVertex<br>用的最多的是Vertex，polygon，edge</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">iterator = OpenMaya.MItMeshVertex(pm.PyNode(<span class="string">&#x27;pSphereShape1&#x27;</span>).__apimobject__()) <span class="comment"># 使用apimobject得到MObject类型的对象</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    <span class="built_in">print</span> iterator.index()  <span class="comment"># 得到迭代器中的顶点的序列号</span></span><br><span class="line"></span><br><span class="line">    point = iterator.position()  <span class="comment"># 通过position方法得到携带位置信息的MPoint类型的顶点，然后赋予point</span></span><br><span class="line">    <span class="built_in">print</span> point.x, point.y, point.z  <span class="comment"># 配合while输出每个顶点的位置信息</span></span><br><span class="line">    <span class="comment"># 将所有顶点的位置设置为0，0，0</span></span><br><span class="line">    point1 = OpenMaya.MPoint(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    iterator.setPosition(point1)</span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="JcUo4"></a></p><h1>第二十七节PythonApi与指针</h1><p>有些方法需要传递带类型的指针，因此如果使用python语句就需要通过MScriptUtil来定义对应类型的指针。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654485856359-79877248-42b0-4e43-a0b8-2d0fbccacca3.png#averageHue=%23333333&amp;clientId=u7402bc27-1154-4&amp;from=paste&amp;height=692&amp;id=ub2b77fe0&amp;originHeight=692&amp;originWidth=1576&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=271237&amp;status=done&amp;style=none&amp;taskId=ufff90242-4aa4-4542-aeeb-c047e5bfda4&amp;title=&amp;width=1576" alt="image.png">带有Util的一般都是通用的工具函数<br>有些方法是需要传入 float2 类型的指针，为了能够在python中使用因此需要通过MScriptUtil<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654500263988-a2847039-6d46-469c-9d4a-6dc5333729d4.png#averageHue=%23e2e6e9&amp;clientId=ue46ddd59-53b5-4&amp;from=paste&amp;height=94&amp;id=u8e25b979&amp;originHeight=94&amp;originWidth=780&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=70299&amp;status=done&amp;style=none&amp;taskId=ube991ac4-903a-4e97-9e7c-652a4c41fdc&amp;title=&amp;width=780" alt="image.png"><br>MScriptUtil的使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line">iterator = OpenMaya.MItMeshVertex(pm.PyNode(<span class="string">&#x27;pSphereShape1&#x27;</span>).__apimobject__())  <span class="comment"># 使用apimobject得到MObject类型的对象</span></span><br><span class="line"></span><br><span class="line">s_util = OpenMaya.MScriptUtil()  <span class="comment"># 定义一个MScriptUtil</span></span><br><span class="line">uv_ptr = s_util.asFloat2Ptr()  <span class="comment"># 通过使用MScriptUtil中的方法定义一个float2类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> iterator.isDone():</span><br><span class="line">    iterator.getUV(uv_ptr)  <span class="comment"># 将顶点的UV值传递给自定义的float2类型的uv_ptr指针</span></span><br><span class="line">    <span class="built_in">print</span> s_util.getFloat2ArrayItem(uv_ptr, <span class="number">0</span>, <span class="number">0</span>),  <span class="comment"># 输出指针中的0，0对应的值（u坐标）</span></span><br><span class="line">    <span class="built_in">print</span> s_util.getFloat2ArrayItem(uv_ptr, <span class="number">0</span>, <span class="number">1</span>)  <span class="comment"># 输出指针中的0，1对应的值（v坐标）</span></span><br><span class="line">    iterator.<span class="built_in">next</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据所需要的指针类型加上as就可以直接得到了。<br>如果要在指针中求值就需要使用get开头的方法，传进去指针就可以了。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654500969237-24272dcd-ee4d-4a59-8f61-3103436ee83c.png#averageHue=%23353534&amp;clientId=ue46ddd59-53b5-4&amp;from=paste&amp;height=1275&amp;id=ufd27250b&amp;originHeight=1275&amp;originWidth=1326&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=513694&amp;status=done&amp;style=none&amp;taskId=uefdd3dbd-8583-480a-b7bb-4623a8fe137&amp;title=&amp;width=1326" alt="image.png"><br><a name="K4Qaz"></a></p><h1>第二十八节MayaAPI事件触发 - MMessage</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654501986078-41f36b55-24c8-4bfc-b0d7-82964a96311a.png#averageHue=%23303030&amp;clientId=u7402bc27-1154-4&amp;from=paste&amp;height=1312&amp;id=u69829333&amp;originHeight=1312&amp;originWidth=2131&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=463350&amp;status=done&amp;style=none&amp;taskId=ua80f079c-67e8-43a8-9112-b9490cdfdd3&amp;title=&amp;width=2131" alt="image.png"><br>要操作物体层级相关的，就用MDagMessage<br>要操作普通节点相关的，就用MDGMessage<br>调用命令的时候就用MCommandMessage<br>要绑定某一个节点上的事件，比如说属性变化时可以使用MNodeMessage<br>可以使用多边形的MPolyMessage<br>场景变化或更新时可以使用MSceneMessage<br><a name="X1SeI"></a></p><h2 id="案例MTimerMessage">案例MTimerMessage</h2><p>首先了解一下MTimerMessage的一个方法，addTimerCallback,其中callback的意思是回调函数，什么是回调函数？作为参数传递的那个函数就被叫为回调函数。<br> <img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654504577713-39ade796-d258-40d2-9d5a-25c2b7476346.png#averageHue=%23dee5ea&amp;clientId=ufbfe3503-7f09-4&amp;from=paste&amp;height=61&amp;id=uf1977945&amp;originHeight=61&amp;originWidth=1336&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=61741&amp;status=done&amp;style=none&amp;taskId=u440d3a93-00bf-4074-aa97-27cab4baf8f&amp;title=&amp;width=1336" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>): <span class="comment"># 定义回调函数,输出1以及传入的参数（传入的第一个是间隔时间，第二个是持续时间）</span></span><br><span class="line">    <span class="built_in">print</span> <span class="number">1</span>,args</span><br><span class="line">callback_id = OpenMaya.MTimerMessage.addTimerCallback(<span class="number">2</span>,func) <span class="comment"># 每隔两秒执行一次定义的回调函数</span></span><br><span class="line">OpenMaya.MTimerMessage.removeCallback(callback_id) <span class="comment"># 移除刚才定义的定时器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="Z3oXB"></a></p><h2 id="案例MEventMessage">案例MEventMessage</h2><p>MEventMessage的addEventCallback方法所需要的参数：<br>第一个参数是事件名字。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1654504982544-1f60d9ed-08b6-43fd-8ef1-c84d589b71e9.png#averageHue=%23e1e5e8&amp;clientId=ufbfe3503-7f09-4&amp;from=paste&amp;height=66&amp;id=u99fc771c&amp;originHeight=66&amp;originWidth=1782&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=105273&amp;status=done&amp;style=none&amp;taskId=u0984e5b5-e490-4d9f-8508-47da561cd61&amp;title=&amp;width=1782" alt="image.png"><br>MEventMessage通过事件触发，而这些事件都是哪些可以通过getEventNames来得到：<br>得到MEventMessage所支持的事件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line">event_names = <span class="built_in">list</span>() <span class="comment"># 定义一个空列表用来存取事件名字</span></span><br><span class="line">OpenMaya.MEventMessage.getEventNames(event_names) <span class="comment"># 将事件名字存入到列表event_names中</span></span><br><span class="line"><span class="built_in">print</span> event_names <span class="comment"># 输出列表</span></span><br></pre></td></tr></table></figure><p>其中常用的事件：<br>deleteAll，undoSupressed（撤销后的返回），undo（撤销），timeChanged（时间轴变化）<br>其他事件的解释可以通过scriptjob命令的帮助文档找到:<br><a href="https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html">https://help.autodesk.com/view/MAYAUL/2018/ENU/?guid=__CommandsPython_index_html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> OpenMaya</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args</span>): <span class="comment"># 定义回调函数,输出1以及传入的参数（传入的第一个是间隔时间，第二个是持续时间）</span></span><br><span class="line">    <span class="built_in">print</span> <span class="number">1</span>,args</span><br><span class="line">callback_id = OpenMaya.MEventMessage.addEventCallback(<span class="string">&#x27;timeChanged&#x27;</span>,func) <span class="comment"># 当时间轴变化时触发回调函数</span></span><br><span class="line">OpenMaya.MEventMessage.removeCallback(callback_id) <span class="comment"># 移除刚才定义事件触发器</span></span><br></pre></td></tr></table></figure><p><a name="Pb0Ga"></a></p><h1>练习</h1><p><a name="OVFgx"></a></p><h2 id="第一节">第一节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648299847402-394103f7-8a94-4d67-8f38-44e7dbcc2297.png#averageHue=%23343434&amp;clientId=u72970d88-4bcf-4&amp;from=paste&amp;height=800&amp;id=ud66ae093&amp;originHeight=800&amp;originWidth=1803&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=287685&amp;status=done&amp;style=none&amp;taskId=uc703759d-d406-4ea1-adb0-fc4653abb8a&amp;title=&amp;width=1803" alt="image.png"><br>circle;<br>circle -r 2;<br>circle - r 2 -nr 0 1 0;<br>curve -d 1 -p -2 0 -2 -p 3 0 -2 -p 3 0 3 -p -2 0 3 -p -2 0 -2;</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line">mc.circle()</span><br><span class="line">mc.circle(r=<span class="number">2</span>)</span><br><span class="line">mc.circle(r=<span class="number">2</span>,nr=(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>))</span><br><span class="line">mc.curve(d=<span class="number">1</span>,p=[(-<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>),(<span class="number">3</span>,<span class="number">0</span>,-<span class="number">2</span>),(<span class="number">3</span>,<span class="number">0</span>,<span class="number">3</span>),(-<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>),(-<span class="number">2</span>,<span class="number">0</span>,-<span class="number">2</span>)])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="iUXKm"></a></p><h2 id="第二节">第二节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648347312751-5a08ec69-1a66-4cf8-b7e8-4ef9b2c6bbb0.png#averageHue=%233c3c3c&amp;clientId=ue82b3c53-47c5-4&amp;from=paste&amp;height=196&amp;id=ue3bbf5ea&amp;originHeight=196&amp;originWidth=1023&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=69465&amp;status=done&amp;style=none&amp;taskId=u9bc20f7f-ead1-4439-b4dc-c6556544a40&amp;title=&amp;width=1023" alt="image.png"><br>这个跟课中讲的批量重命名应该差不多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> shape <span class="keyword">in</span> mc.ls(typ=<span class="string">&#x27;mesh&#x27;</span>):</span><br><span class="line">    mc.rename(shape,<span class="string">&#x27;mesh_&#123;0&#125;&#x27;</span>.<span class="built_in">format</span>(shape))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="qFEMn"></a></p><h2 id="第五节">第五节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648470105020-ae661d75-bd1a-467a-9154-77f197eb8ae5.png#averageHue=%233e3e3e&amp;clientId=uf7c342ae-9460-4&amp;from=paste&amp;height=85&amp;id=u996515ec&amp;originHeight=85&amp;originWidth=675&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=27474&amp;status=done&amp;style=none&amp;taskId=u147f72b4-92ea-4079-8765-81df4dab0fd&amp;title=&amp;width=675" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line">sel = mc.ls(sl=<span class="number">1</span>)</span><br><span class="line">info = []</span><br><span class="line">info_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">    posx = mc.getAttr(i + <span class="string">&#x27;.tx&#x27;</span>)</span><br><span class="line">    posy = mc.getAttr(i + <span class="string">&#x27;.ty&#x27;</span>)</span><br><span class="line">    posz = mc.getAttr(i + <span class="string">&#x27;.tz&#x27;</span>)</span><br><span class="line">    <span class="built_in">type</span> = mc.objectType(i)</span><br><span class="line">    info.append([i, posx, posy, posz,<span class="built_in">type</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">    info_str = info_str + i[<span class="number">0</span>]+<span class="string">&#x27; type:&#x27;</span>+i[<span class="number">4</span>] + <span class="string">&#x27;\r\nposx:&#x27;</span> + <span class="built_in">str</span>(i[<span class="number">1</span>]) + <span class="string">&#x27;\r\nposy:&#x27;</span> + <span class="built_in">str</span>(i[<span class="number">2</span>]) + <span class="string">&#x27;\r\nposz:&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">        i[<span class="number">3</span>]) + <span class="string">&#x27;\r\n\r\n&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;D:\\posInfo.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) </span><br><span class="line">    f.write(info_str)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p><a name="TruIa"></a></p><h2 id="第七节">第七节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648544898343-44bafffa-267a-4e1a-bbef-542fe65f0039.png#averageHue=%234f4f4f&amp;clientId=u783b1c22-f3a3-4&amp;from=paste&amp;height=704&amp;id=u4a5230dd&amp;originHeight=704&amp;originWidth=1159&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=186745&amp;status=done&amp;style=none&amp;taskId=u77b41c6e-4c88-4a8f-91b9-56a09b39dab&amp;title=&amp;width=1159" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) :</span><br><span class="line">    lam=mc.createNode(<span class="string">&#x27;lambert&#x27;</span>)</span><br><span class="line">mc.createNode(<span class="string">&#x27;blendColors&#x27;</span>)</span><br><span class="line">mc.connectAttr(<span class="string">&#x27;lambert2.oc&#x27;</span>,<span class="string">&#x27;blendColors1.c1&#x27;</span>)</span><br><span class="line">mc.connectAttr(<span class="string">&#x27;lambert3.oc&#x27;</span>,<span class="string">&#x27;blendColors1.c2&#x27;</span>)</span><br><span class="line">mc.connectAttr(<span class="string">&#x27;blendColors1.output&#x27;</span>,<span class="string">&#x27;lambert4.c&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="qv1xR"></a></p><h2 id="第十节">第十节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648779599871-a2c84be5-3707-4833-982d-b0d82b0da25a.png#averageHue=%23383838&amp;clientId=u693e63da-04bd-4&amp;from=paste&amp;height=123&amp;id=u75cbb5d0&amp;originHeight=123&amp;originWidth=755&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=31039&amp;status=done&amp;style=none&amp;taskId=ubd9b41fe-1047-41e0-bbd3-e9943cfbfa8&amp;title=&amp;width=755" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    pox=random.randrange(-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    poy=random.randrange(-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    poz=random.randrange(-<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tx&#x27;</span>,t=i,v=pox)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;ty&#x27;</span>,t=i,v=poy)</span><br><span class="line">    mc.setKeyframe(<span class="string">&#x27;pSphere1&#x27;</span>,at=<span class="string">&#x27;tz&#x27;</span>,t=i,v=poz)</span><br></pre></td></tr></table></figure><p><a name="zKmGS"></a></p><h2 id="第十二节">第十二节</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648792874713-ce4a46bc-01e9-4b68-a8f1-ab2626d86522.png#averageHue=%23484848&amp;clientId=u693e63da-04bd-4&amp;from=paste&amp;height=119&amp;id=u1921642e&amp;originHeight=119&amp;originWidth=911&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=74932&amp;status=done&amp;style=none&amp;taskId=ub1e57a2c-e477-4249-b0a7-c3ee19e1776&amp;title=&amp;width=911" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ShowWindow</span>():</span><br><span class="line">    wnd_name=<span class="string">&#x27;my_window&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> mc.window(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">        mc.deleteUI(wnd_name,wnd=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">if</span> mc.windowPref(wnd_name,q=<span class="literal">True</span>,ex=<span class="literal">True</span>):</span><br><span class="line">        mc.windowPref(wnd_name,r=<span class="literal">True</span>)</span><br><span class="line">    wnd = mc.window(wnd_name,w=<span class="number">400</span>,h=<span class="number">300</span>,t=<span class="string">&#x27;My Window&#x27;</span>)</span><br><span class="line">    mc.gridLayout(numberOfColumns=<span class="number">2</span>, cellWidth=<span class="number">200</span>)</span><br><span class="line">    mc.text(l=<span class="string">&#x27;num:&#x27;</span>)</span><br><span class="line">    mc.intField(<span class="string">&#x27;numInt&#x27;</span>)</span><br><span class="line">    mc.text(l=<span class="string">&#x27;radius:&#x27;</span>)</span><br><span class="line">    mc.floatField(<span class="string">&#x27;radiusFloat&#x27;</span>)</span><br><span class="line">    mc.button(<span class="string">&#x27;ok&#x27;</span>,command=onCreateClick)</span><br><span class="line">    mc.showWindow(wnd)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">onCreateClick</span>(<span class="params">*args</span>):</span><br><span class="line">    num=mc.intField(<span class="string">&#x27;numInt&#x27;</span>,q=<span class="literal">True</span>,v=<span class="literal">True</span>)</span><br><span class="line">    radius=mc.floatField(<span class="string">&#x27;radiusFloat&#x27;</span>,q=<span class="literal">True</span>,v=<span class="literal">True</span>)</span><br><span class="line">    create(num,radius)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">num,radius</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        mc.polySphere(r=radius)</span><br><span class="line">ShowWindow()</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648813456649-b8fb708d-93e6-4916-8798-d473c6d944b9.png#averageHue=%23515151&amp;clientId=u46a1ca6b-8b3c-4&amp;from=paste&amp;height=339&amp;id=uae1b55f6&amp;originHeight=339&amp;originWidth=416&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6016&amp;status=done&amp;style=none&amp;taskId=u302f8c63-c8e3-4850-94de-9ea1f01b9eb&amp;title=&amp;width=416" alt="image.png">通过点击ok根据num和radius创建对应的球体</p>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maya python 简易教程和B站maya TD</title>
      <link href="/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-maya-python-%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%E5%92%8CB%E7%AB%99maya-TD/"/>
      <url>/2023/08/29/DCC%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91-MayaPy-maya-python-%E7%AE%80%E6%98%93%E6%95%99%E7%A8%8B%E5%92%8CB%E7%AB%99maya-TD/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a name="Cn3Wb"></a></p><h1>开篇介绍</h1><p>真正复杂的东西“东西”很少，但是复杂的“组合”却是很多。复杂的“组合”往往需要自己创造，发挥自己的想象力吧。<br><a name="V9keO"></a></p><h1>Unicode 字符串</h1><p>在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 <strong>u</strong>。<br>在Python3中，所有的字符串都是Unicode字符串。<br><a name="fPmBt"></a></p><h1>第一个简单代码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">height</span>(<span class="params">h</span>):</span><br><span class="line">    sel=mc.ls(sl=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(sel)):</span><br><span class="line">        mc.setAttr(sel[i]+<span class="string">&#x27;.ty&#x27;</span>,i*h)</span><br><span class="line">height(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648435412615-7d9cfcf0-5bc5-45a1-8bc0-aab7de506efc.png#averageHue=%235e5e5e&amp;clientId=u5321e486-8528-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=313&amp;id=ucd073b72&amp;originHeight=313&amp;originWidth=661&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5658&amp;status=error&amp;style=none&amp;taskId=ucbd93dd6-cb00-4aa0-ac53-1a7a0bbd4d9&amp;title=&amp;width=661" alt="image.png"><br><a name="tmEhp"></a></p><h1>吸附工具</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">snap</span>():</span><br><span class="line">    sel=mc.ls(sl=<span class="number">1</span>)</span><br><span class="line">    pos=mc.xform(sel[<span class="number">1</span>],t=<span class="number">1</span>,ws=<span class="number">1</span>,q=<span class="number">1</span>)</span><br><span class="line">    mc.xform(sel[<span class="number">0</span>],t=pos)</span><br><span class="line">snap()</span><br></pre></td></tr></table></figure><p><a name="UrJcC"></a></p><h1>批量添加前缀后缀工具</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addpre</span>(<span class="params">pre</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span>  mc.ls(sl=<span class="number">1</span>) :</span><br><span class="line">        mc.rename(name,pre+name)</span><br><span class="line">addpre(<span class="string">&#x27;mesh_&#x27;</span>)        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adddis</span>(<span class="params">dis</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span>  mc.ls(sl=<span class="number">1</span>) :</span><br><span class="line">        mc.rename(name,name+dis)</span><br><span class="line">adddis(<span class="string">&#x27;_low&#x27;</span>)</span><br></pre></td></tr></table></figure><p>看了另一个教程的修改版本：<br>介绍一下：这个工具修改了之前添加前缀名工具的一个bug，就是当出现<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648708809664-a9489ba4-68c1-4885-96f7-15ab4db4986f.png#averageHue=%233b3a39&amp;clientId=u4f45dca2-649f-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=114&amp;id=uk7V9&amp;originHeight=114&amp;originWidth=134&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2692&amp;status=error&amp;style=none&amp;taskId=ub4fb5101-f214-4f2d-ae15-896b0ec5306&amp;title=&amp;width=134" alt="image.png">这种不同级别物体名字相同时依然可以正确的通过工具添加后缀。<br>思路就是通过长名判断oldName，然后通过shortname=name.split(“|”)[-1]命令得到短名，配合前后缀得到newName，<strong>这样就不会出现一个名称有多个匹配对象的bug了</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addpre</span>(<span class="params">pre</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span>  mc.ls(sl=<span class="number">1</span>,l=<span class="number">1</span>) :</span><br><span class="line">        shortname=name.split(<span class="string">&quot;|&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        mc.rename(name,pre+shortname)</span><br><span class="line">addpre(<span class="string">&#x27;mesh_&#x27;</span>)        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">adddis</span>(<span class="params">dis</span>):</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span>  mc.ls(sl=<span class="number">1</span>,l=<span class="number">1</span>) :</span><br><span class="line">        shortname=name.split(<span class="string">&quot;|&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line">        mc.rename(name,shortname+dis)</span><br><span class="line">adddis(<span class="string">&#x27;_low&#x27;</span>)</span><br></pre></td></tr></table></figure><p><a name="dJIOd"></a></p><h1>对文本进行操作</h1><p>将当前所选择的物体的位置坐标导出成文本文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line">sel = mc.ls(sl=<span class="number">1</span>)</span><br><span class="line">info = []</span><br><span class="line">info_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sel:</span><br><span class="line">    posx = mc.getAttr(i + <span class="string">&#x27;.tx&#x27;</span>)</span><br><span class="line">    posy = mc.getAttr(i + <span class="string">&#x27;.ty&#x27;</span>)</span><br><span class="line">    posz = mc.getAttr(i + <span class="string">&#x27;.tz&#x27;</span>)</span><br><span class="line">    info.append([i, posx, posy, posz]) <span class="comment"># 测试里面用元组也能正常使用，但教程是列表</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">    info_str = info_str + i[<span class="number">0</span>] + <span class="string">&#x27;\r\nposx:&#x27;</span> + <span class="built_in">str</span>(i[<span class="number">1</span>]) + <span class="string">&#x27;\r\nposy:&#x27;</span> + <span class="built_in">str</span>(i[<span class="number">2</span>]) + <span class="string">&#x27;\r\nposz:&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">        i[<span class="number">3</span>]) + <span class="string">&#x27;\r\n\r\n&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;D:\\posInfo.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)  <span class="comment"># w代表写入</span></span><br><span class="line">    f.write(info_str)</span><br><span class="line">    f.close()</span><br></pre></td></tr></table></figure><p>最终结果是在d盘根目录生成一个posInfo文本文件，里面数值为选择的物体的参数属性<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648469718676-a9c60fd2-4a20-4db2-b33e-362b6e11a4b2.png#averageHue=%23fbfafa&amp;clientId=u45bfbeec-9c64-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=756&amp;id=u7577597b&amp;originHeight=756&amp;originWidth=718&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=21996&amp;status=error&amp;style=none&amp;taskId=ua3ee56ad-8e15-4229-88c5-67a8b6e1e89&amp;title=&amp;width=718" alt="image.png"><br><a name="le37I"></a></p><h1>带窗口带输入框的加前缀名工具</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addpre</span>(<span class="params">pre</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> mc.ls(sl=<span class="number">1</span>):</span><br><span class="line">        mc.rename(i,pre+i)</span><br><span class="line">mc.window()</span><br><span class="line">mc.columnLayout()</span><br><span class="line">a=mc.textField(tx=<span class="string">&#x27;defalt&#x27;</span>)</span><br><span class="line">mc.button(l=<span class="string">&#x27;Press   Me&#x27;</span>,w=<span class="number">100</span>,h=<span class="number">100</span>,c=<span class="string">&quot;b=mc.textField(a,q=1,tx=1);addpre(b)&quot;</span>) <span class="comment"># c为command的缩写</span></span><br><span class="line">mc.showWindow()</span><br></pre></td></tr></table></figure><p><a name="jCrpN"></a></p><h1>自动根据物体类型添加后缀名</h1><p>思路是通过cmds.listRelatives(obj,children=1,fullPath=1) or []命令得到物体的子物体的名字（pCube1的子物体的名字为<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648712895301-90044fca-7014-49dc-b5db-aaae5963f07f.png#averageHue=%234b6a81&amp;clientId=u4f45dca2-649f-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=46&amp;id=ua86708c6&amp;originHeight=46&amp;originWidth=188&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2426&amp;status=error&amp;style=none&amp;taskId=u509e639b-39d0-4dad-a71a-e763c398f53&amp;title=&amp;width=188" alt="image.png">，joint没有子物体返回空列表）。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648713269802-8c2bcf97-d9d4-4f8c-90ed-d4dc75bcd239.png#averageHue=%23ffffff&amp;clientId=u4f45dca2-649f-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=101&amp;id=uc8683ecb&amp;originHeight=101&amp;originWidth=296&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=8181&amp;status=error&amp;style=none&amp;taskId=ua0afd779-e652-4f27-8718-b2f2abb607f&amp;title=&amp;width=296" alt="image.png">有子物体的就判断子物体的类型，没有子物体的就判断物体本身的类型。之所以这样得到不同物体的类型是因为例如pCube通过objectType得到的类型为transform，而通过得到它的子物体（pCubeShape）得到的类型为mesh，能更好的区分。<br>如果想再细分物体类型（曲线，灯光等）就在下面加判断语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line">SUFFIXES = &#123;</span><br><span class="line">    <span class="string">&quot;mesh&quot;</span>: <span class="string">&quot;geo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;joint&quot;</span>: <span class="string">&quot;jnt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;camera&quot;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line">DEFAULT_SUFFIX = <span class="string">&quot;grp&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addSuffix</span>(<span class="params">selection=<span class="literal">False</span></span>):</span><br><span class="line">    sel = mc.ls(sl=selection, dag=<span class="number">1</span>, l=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> selection <span class="keyword">and</span> <span class="keyword">not</span> sel:  <span class="comment"># 如果指定selection为True但是却没有选择物体时抛出异常。</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;You don&#x27;t have anything selected! How dare you?!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sel.sort(key=<span class="built_in">len</span>, reverse=<span class="number">1</span>)  <span class="comment"># 将列表按照元素个数由高到底排序</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> sel:</span><br><span class="line">        shortName = obj.split(<span class="string">&#x27;|&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 因为是长名的列表，这里取长名中的短名</span></span><br><span class="line">        children = mc.listRelatives(obj, children=<span class="number">1</span>,</span><br><span class="line">                                    fullPath=<span class="number">1</span>) <span class="keyword">or</span> []  <span class="comment"># 如果物体没有子物体不会返回空列表而是返回None，因此加个or[]实现如果是None就返回空列表的功能</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">1</span>:</span><br><span class="line">            child = children[<span class="number">0</span>]  <span class="comment"># 将列表变成字符串</span></span><br><span class="line">            objType = mc.objectType(child)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            objType = mc.objectType(obj)</span><br><span class="line">        suffix = SUFFIXES.get(objType, DEFAULT_SUFFIX)  <span class="comment"># 根据objType获取对应添加的后缀名，如果没有找到对应的key那么就使用DEFAULT_SUFFIX</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> suffix:  <span class="comment"># 如果后缀名为None（类型为摄像机时）不添加后缀</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> obj.endswitch(<span class="string">&#x27;_&#x27;</span>+suffix):</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果已经添加了后缀，那么就不再进行添加后缀</span></span><br><span class="line">        newName = <span class="string">&quot;%s_%s&quot;</span> % (shortName, suffix)</span><br><span class="line">        mc.rename(obj, newName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>改进版介绍： 将类型以及对应的后缀名通过字典存取，（通过字典存取的好处是，如果想要增加其他类型的后缀名可以直接针对字典进行操作而不需要再使用if语句判断了。）通过SUFFIXES.get(objType, DEFAULT_SUFFIX)获取对应的value，通过更改为函数形式，可以通过导入的方式，直接调用函数，并可以指定是否使用选择模式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line">SUFFIXES = &#123;</span><br><span class="line">    <span class="string">&quot;mesh&quot;</span>: <span class="string">&quot;geo&quot;</span>,</span><br><span class="line">    <span class="string">&quot;joint&quot;</span>: <span class="string">&quot;jnt&quot;</span>,</span><br><span class="line">    <span class="string">&quot;camera&quot;</span>: <span class="literal">None</span></span><br><span class="line">&#125;</span><br><span class="line">DEFAULT_SUFFIX = <span class="string">&quot;grp&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">addSuffix</span>(<span class="params">selection=<span class="literal">False</span></span>):</span><br><span class="line">    sel = mc.ls(sl=selection, dag=<span class="number">1</span>, l=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> selection <span class="keyword">and</span> <span class="keyword">not</span> sel:  <span class="comment"># 如果指定selection为True但是却没有选择物体时抛出异常。</span></span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;You don&#x27;t have anything selected! How dare you?!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sel.sort(key=<span class="built_in">len</span>, reverse=<span class="number">1</span>)  <span class="comment"># 将列表按照元素个数由高到底排序</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> sel:</span><br><span class="line">        shortName = obj.split(<span class="string">&#x27;|&#x27;</span>)[-<span class="number">1</span>]  <span class="comment"># 因为是长名的列表，这里取长名中的短名</span></span><br><span class="line">        children = mc.listRelatives(obj, children=<span class="number">1</span>,</span><br><span class="line">                                    fullPath=<span class="number">1</span>) <span class="keyword">or</span> []  <span class="comment"># 如果物体没有子物体不会返回空列表而是返回None，因此加个or[]实现如果是None就返回空列表的功能</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">1</span>:</span><br><span class="line">            child = children[<span class="number">0</span>] <span class="comment"># 将列表变成字符串</span></span><br><span class="line">            objType = mc.objectType(child)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            objType = mc.objectType(obj)</span><br><span class="line">        suffix = SUFFIXES.get(objType, DEFAULT_SUFFIX)  <span class="comment"># 根据objType获取对应添加的后缀名，如果没有找到对应的key那么就使用DEFAULT_SUFFIX</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> suffix:  <span class="comment"># 如果后缀名为None（类型为摄像机时）不添加后缀</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> obj.endswitch(<span class="string">&#x27;_&#x27;</span>+suffix):</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果已经添加了后缀，那么就不再进行添加后缀</span></span><br><span class="line">        newName = <span class="string">&quot;%s_%s&quot;</span> % (shortName, suffix)</span><br><span class="line">        mc.rename(obj, newName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="kzeDE"></a></p><h1>齿轮工具</h1><p><a name="r1QzH"></a></p><h2 id="创建齿轮工具gearCreator">创建齿轮工具gearCreator</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createGear</span>(<span class="params">teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">    spans = teeth * <span class="number">2</span>  <span class="comment"># 面的数量是齿轮数量的2倍</span></span><br><span class="line">    transform, constructor = mc.polyPipe(subdivisionsAxis=spans) </span><br><span class="line">    <span class="comment"># mc.polyPipe 返回的是一个列表</span></span><br><span class="line">    <span class="comment"># transform是多边形的名字，constructor是构造器（调节多边形的属性）的名称</span></span><br><span class="line">    sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>) <span class="comment"># 面的数字ID是spans*2和spans*3。</span></span><br><span class="line">    mc.select(clear=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">        mc.select(<span class="string">&#x27;%s.f[%s]&#x27;</span> % (transform, face),add=<span class="literal">True</span>) <span class="comment"># add=True的意思是加选</span></span><br><span class="line">    extrude = mc.polyExtrudeFacet(localTranslateZ=length)[<span class="number">0</span>] <span class="comment"># 加一个[0]的作用就是将列表变成值</span></span><br><span class="line">    <span class="keyword">return</span> transform, constructor, extrude</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">createGear(teeth=<span class="number">20</span>,length=<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>返回值：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648895714457-9f408014-8096-4e6d-8152-4fe3e9381160.png#averageHue=%232f302d&amp;clientId=ude30dde1-d57a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=52&amp;id=u6b5b0f75&amp;originHeight=52&amp;originWidth=481&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=24509&amp;status=error&amp;style=none&amp;taskId=u60495b84-a4bf-42ff-8e9f-a91d073d998&amp;title=&amp;width=481" alt="image.png"></p><p><a name="PRZTC"></a></p><h2 id="创建齿轮并可以修改齿轮">创建齿轮并可以修改齿轮</h2><p>前言：<br>创建好的齿轮如果只是单纯的更改它的细分会造成：<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648904364686-2f1bd957-e6d3-484a-82ea-bd23ff46fc11.png#averageHue=%23444241&amp;clientId=ude30dde1-d57a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=176&amp;id=ue74d5d1b&amp;originHeight=176&amp;originWidth=253&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=7643&amp;status=error&amp;style=none&amp;taskId=ub72f5b86-ce02-43de-ae4f-66c59c44c18&amp;title=&amp;width=253" alt="image.png">这种奇怪的效果<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648904385463-47ee46d2-239a-41a7-bea1-527fb335c0a1.png#averageHue=%23696969&amp;clientId=ude30dde1-d57a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=349&amp;id=u229dd4ac&amp;originHeight=349&amp;originWidth=430&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13416&amp;status=error&amp;style=none&amp;taskId=u3a174a2a-9ff8-41e4-b528-699823a3d41&amp;title=&amp;width=430" alt="image.png">，原因是因为上面的polyExtrudeFace1，因为polyExtrudeFace1挤出命令是根据获得齿轮中的面id（inputComponents）来执行挤出操作的，但是如果更改了细分数挤出命令节点就不知道要编辑哪个面了。<br>因此修改齿轮的思路就是：<br>首先将<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1648904915251-25bcbf20-cc97-41f5-a236-911368dbf4aa.png#averageHue=%234b4645&amp;clientId=ude30dde1-d57a-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=88&amp;id=u6f8a71ac&amp;originHeight=88&amp;originWidth=189&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3611&amp;status=error&amp;style=none&amp;taskId=u59e7231b-7005-49e2-9502-ae0251e144c&amp;title=&amp;width=189" alt="image.png">polyPipe1的细分以及长度根据数值更改<br>然后将polyExtrudeFace1的inputComponents属性进行更改使挤出命令节点能够正确识别细分后的面。<br>mc.setAttr(‘%s.inputComponents’ % extrude, len(faceNames), *faceNames, typ=“componentList”)这个命令是重新设置inputComponents属性，len（faceNames）代表要进行操作的面的数量，*faceNames意思是将存取面ID的列表解开，最后指定类型为组件列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createGear</span>(<span class="params">teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">    spans = teeth * <span class="number">2</span></span><br><span class="line">    transform, constructor = mc.polyPipe(subdivisionsAxis=spans)</span><br><span class="line">    sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    mc.select(clear=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">        mc.select(<span class="string">&#x27;%s.f[%s]&#x27;</span> % (transform, face), add=<span class="literal">True</span>)</span><br><span class="line">    extrude = mc.polyExtrudeFacet(localTranslateZ=length)[<span class="number">0</span>]</span><br><span class="line">    mc.select(<span class="variable language_">self</span>.transform)</span><br><span class="line">    <span class="keyword">return</span> transform, constructor, extrude</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeTeeth</span>(<span class="params">constructor, extrude, teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">    spans = teeth * <span class="number">2</span></span><br><span class="line">    mc.polyPipe(constructor, edit=<span class="literal">True</span>, subdivisionsAxis=spans)</span><br><span class="line">    sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">    faceNames = []</span><br><span class="line">    <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">        faceName = <span class="string">&#x27;f[%s]&#x27;</span> % face</span><br><span class="line">        faceNames.append(faceName)</span><br><span class="line"></span><br><span class="line">    mc.setAttr(<span class="string">&#x27;%s.inputComponents&#x27;</span> % extrude, <span class="built_in">len</span>(faceNames), *faceNames, typ=<span class="string">&quot;componentList&quot;</span>)</span><br><span class="line">    mc.polyExtrudeFacet(extrude, edit=<span class="literal">True</span>, localTranslateZ=length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">changeTeeth(<span class="string">&#x27;polyPipe1&#x27;</span>, <span class="string">&#x27;polyExtrudeFace1&#x27;</span>, teeth=<span class="number">20</span>, length=<span class="number">0.1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="Bx7wC"></a></p><h2 id="使用类来实现齿轮工具">使用类来实现齿轮工具</h2><p>通过类实现就可以通过实例变量将创建齿轮函数与改变齿轮数量函数之间创建联系。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gear</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.constructor = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.transform = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.extrude = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createGear</span>(<span class="params">self, teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">        spans = teeth * <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.transform, <span class="variable language_">self</span>.constructor = mc.polyPipe(subdivisionsAxis=spans)</span><br><span class="line">        sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        mc.select(clear=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">            mc.select(<span class="string">&#x27;%s.f[%s]&#x27;</span> % (<span class="variable language_">self</span>.transform, face), add=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.extrude = mc.polyExtrudeFacet(localTranslateZ=length)[<span class="number">0</span>]</span><br><span class="line">        mc.select(<span class="variable language_">self</span>.transform)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">changeTeeth</span>(<span class="params">self, teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">        spans = teeth * <span class="number">2</span></span><br><span class="line">        mc.polyPipe(<span class="variable language_">self</span>.constructor, edit=<span class="literal">True</span>, subdivisionsAxis=spans)</span><br><span class="line">        sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        faceNames = []</span><br><span class="line">        <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">            faceName = <span class="string">&#x27;f[%s]&#x27;</span> % face</span><br><span class="line">            faceNames.append(faceName)</span><br><span class="line"></span><br><span class="line">        mc.setAttr(<span class="string">&#x27;%s.inputComponents&#x27;</span> % <span class="variable language_">self</span>.extrude, <span class="built_in">len</span>(faceNames), *faceNames, typ=<span class="string">&quot;componentList&quot;</span>)</span><br><span class="line">        mc.polyExtrudeFacet(<span class="variable language_">self</span>.extrude, edit=<span class="literal">True</span>, localTranslateZ=length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gear = Gear()</span><br><span class="line">gear.createGear()</span><br><span class="line">gear.changeTeeth(teeth=<span class="number">20</span>, length=<span class="number">0.1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="dDbGA"></a></p><h2 id="带UI的创建齿轮工具">带UI的创建齿轮工具</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gear</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.constructor = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.transform = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.extrude = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createGear</span>(<span class="params">self, teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">        spans = teeth * <span class="number">2</span></span><br><span class="line">        <span class="variable language_">self</span>.transform, <span class="variable language_">self</span>.constructor = mc.polyPipe(subdivisionsAxis=spans)</span><br><span class="line">        sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        mc.select(clear=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">            mc.select(<span class="string">&#x27;%s.f[%s]&#x27;</span> % (<span class="variable language_">self</span>.transform, face), add=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.extrude = mc.polyExtrudeFacet(localTranslateZ=length)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">changeTeeth</span>(<span class="params">self, teeth=<span class="number">10</span>, length=<span class="number">0.3</span></span>):</span><br><span class="line">        spans = teeth * <span class="number">2</span></span><br><span class="line">        mc.polyPipe(<span class="variable language_">self</span>.constructor, edit=<span class="literal">True</span>, subdivisionsAxis=spans)</span><br><span class="line">        sideFaces = <span class="built_in">range</span>(spans * <span class="number">2</span>, spans * <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">        faceNames = []</span><br><span class="line">        <span class="keyword">for</span> face <span class="keyword">in</span> sideFaces:</span><br><span class="line">            faceName = <span class="string">&#x27;f[%s]&#x27;</span> % face</span><br><span class="line">            faceNames.append(faceName)</span><br><span class="line"></span><br><span class="line">        mc.setAttr(<span class="string">&#x27;%s.inputComponents&#x27;</span> % <span class="variable language_">self</span>.extrude, <span class="built_in">len</span>(faceNames), *faceNames, typ=<span class="string">&quot;componentList&quot;</span>)</span><br><span class="line">        mc.polyExtrudeFacet(<span class="variable language_">self</span>.extrude, edit=<span class="literal">True</span>, localTranslateZ=length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GearWindow</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    windowName = <span class="string">&quot;GearWindow&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.gear = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> mc.window(<span class="variable language_">self</span>.windowName, q=<span class="literal">True</span>, exists=<span class="literal">True</span>):</span><br><span class="line">            mc.deleteUI(<span class="variable language_">self</span>.windowName)</span><br><span class="line">        mc.window(<span class="variable language_">self</span>.windowName)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.buildUI()</span><br><span class="line"></span><br><span class="line">        mc.showWindow()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildUI</span>(<span class="params">self</span>):</span><br><span class="line">        column = mc.columnLayout()</span><br><span class="line">        mc.text(label=<span class="string">&quot;Use the slider to modify the gear&quot;</span>)</span><br><span class="line">        row = mc.rowLayout(numberOfColumns=<span class="number">4</span>)</span><br><span class="line">        <span class="variable language_">self</span>.label = mc.text(label=<span class="string">&quot;10&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider = mc.intSlider(<span class="built_in">min</span>=<span class="number">5</span>, <span class="built_in">max</span>=<span class="number">30</span>, value=<span class="number">10</span>, step=<span class="number">1</span>, dragCommand=<span class="variable language_">self</span>.modifyGear)  <span class="comment"># 创建滑动条，拖动滑动条时调用函数</span></span><br><span class="line">        mc.button(label=<span class="string">&quot;Make Gear&quot;</span>, command=<span class="variable language_">self</span>.makeGear)</span><br><span class="line">        mc.button(label=<span class="string">&quot;Reset&quot;</span>, command=<span class="variable language_">self</span>.reset)  <span class="comment"># 命令中调用函数不加括号是因为如果加了括号就直接使用函数了，而不是与按钮绑定。</span></span><br><span class="line">        mc.setParent(column)</span><br><span class="line">        mc.button(label=<span class="string">&quot;Close&quot;</span>, command=<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">makeGear</span>(<span class="params">self, *args</span>):</span><br><span class="line">        teeth = mc.intSlider(<span class="variable language_">self</span>.slider, q=<span class="literal">True</span>, value=<span class="literal">True</span>)</span><br><span class="line">        <span class="variable language_">self</span>.gear = Gear()</span><br><span class="line">        <span class="variable language_">self</span>.gear.createGear(teeth=teeth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">modifyGear</span>(<span class="params">self, teeth</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.gear:</span><br><span class="line">            <span class="variable language_">self</span>.gear.changeTeeth(teeth=teeth)</span><br><span class="line">        mc.text(<span class="variable language_">self</span>.label, edit=<span class="literal">True</span>, label=teeth)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="comment"># 使用*args是因为command调用此函数的同时会传入参数，因此使用*args来接收，但没必要使用</span></span><br><span class="line">        <span class="variable language_">self</span>.gear = <span class="literal">None</span></span><br><span class="line">        mc.intSlider(<span class="variable language_">self</span>.slider, edit=<span class="literal">True</span>, value=<span class="number">10</span>)</span><br><span class="line">        mc.text(<span class="variable language_">self</span>.label, edit=<span class="literal">True</span>, label=<span class="string">&quot;10&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self, *args</span>):</span><br><span class="line">        mc.deleteUI(<span class="variable language_">self</span>.windowName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GearWindow().show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1649151264550-f79c09d4-09aa-4082-ad30-3cf17a9c7cd5.png#averageHue=%236f6e6e&amp;clientId=u9a09714e-8c52-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=129&amp;id=u44751cef&amp;originHeight=129&amp;originWidth=272&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=6329&amp;status=error&amp;style=none&amp;taskId=u94880517-8ed9-466e-9377-e569c31ad67&amp;title=&amp;width=272" alt="image.png"><br>可以通过滑动条更改齿轮的齿的数量。</p><p><a name="R0IJo"></a></p><h1>中间帧工具</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1649070276826-af0007fa-352f-495e-b50b-4a3030e9b159.png#averageHue=%23484746&amp;clientId=uf3de0013-f84f-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=162&amp;id=uf28e284b&amp;originHeight=162&amp;originWidth=431&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37943&amp;status=error&amp;style=none&amp;taskId=uee3130e3-f363-4829-af76-33a71ebf452&amp;title=&amp;width=431" alt="image.png"><br>介绍一下这个工具，这个工具会读取当前时间轴左右两边的关键帧，利用滑块控件设置最左边的数值为当前时间轴的左边的帧的大小，最右边的数值为当前时间轴的右边的帧的大小。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1649070824178-d7f97c71-8d4e-4d80-a2dc-6a5c369c01a9.png#averageHue=%232c2c2b&amp;clientId=uf3de0013-f84f-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=853&amp;id=u32afe44d&amp;originHeight=853&amp;originWidth=1157&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=201961&amp;status=error&amp;style=none&amp;taskId=ub6fd2b3f-16ae-4679-8ec2-f36c53eba6f&amp;title=&amp;width=1157" alt="image.png"><br><a name="lXIQT"></a></p><h2 id="无UI版">无UI版</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tween</span>(<span class="params">percentage, obj=<span class="literal">None</span>, attr=<span class="literal">None</span>, selection=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj <span class="keyword">and</span> <span class="keyword">not</span> selection:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;No object given to tween&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">        obj = mc.ls(sl=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> attr:</span><br><span class="line">        <span class="comment"># attrs为选择的物体的所有可以k帧的属性。</span></span><br><span class="line">        attrs = mc.listAttr(obj, k=<span class="literal">True</span>)</span><br><span class="line">    currentTime = mc.currentTime(q=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> attrs:</span><br><span class="line">        attrFull = <span class="string">&#x27;%s.%s&#x27;</span> % (obj, attr)  <span class="comment"># 构建所有可以k帧的属性的长名</span></span><br><span class="line">        keyframes = mc.keyframe(attrFull, q=<span class="literal">True</span>)  <span class="comment"># 获得物体已经k帧的属性的帧数，没有k帧的属性为None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> keyframes:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 对于没有k帧的属性跳过操作</span></span><br><span class="line"></span><br><span class="line">        previousKeyframes = []  <span class="comment"># 存取当前帧前的所有已经k帧的帧数列表</span></span><br><span class="line">        <span class="keyword">for</span> frame <span class="keyword">in</span> keyframes:</span><br><span class="line">            <span class="keyword">if</span> frame &lt; currentTime:</span><br><span class="line">                previousKeyframes.append(frame)</span><br><span class="line">        laterKeyframes = [frame <span class="keyword">for</span> frame <span class="keyword">in</span> keyframes <span class="keyword">if</span> frame &gt; currentTime]  <span class="comment"># 通过列表生成式操作得到当前帧后的所有已经k帧的帧数列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> previousKeyframes <span class="keyword">and</span> <span class="keyword">not</span> laterKeyframes:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果当前帧的前面或者后面没帧的话不执行后面的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> previousKeyframes:  <span class="comment"># 得到离当前帧最近的左边帧数</span></span><br><span class="line">            previousFrame = <span class="built_in">max</span>(previousKeyframes)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            previousFrame = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        nextFrame = <span class="built_in">min</span>(laterKeyframes) <span class="keyword">if</span> laterKeyframes <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 得到离当前帧最近的右边帧数</span></span><br><span class="line"></span><br><span class="line">        previousValue = mc.getAttr(attrFull, time=previousFrame)  <span class="comment"># 通过三目运算符得到离当前帧最近的左边帧数对应的值</span></span><br><span class="line">        nextValue = mc.getAttr(attrFull, time=nextFrame)  <span class="comment"># 得到离当前帧最近的右边帧数对应的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据百分比设置当前帧的大小</span></span><br><span class="line">        difference = nextValue - previousValue</span><br><span class="line">        weightedDifference = (difference * percentage) / <span class="number">100</span></span><br><span class="line">        currentValue = previousValue + weightedDifference</span><br><span class="line">        <span class="comment"># 设置当前帧的数值</span></span><br><span class="line">        mc.setKeyframe(attrFull, time=currentTime, value=currentValue)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用时只需要使用tween(100) 其中100代表的是百分比。<br><a name="z0lJ9"></a></p><h2 id="添加UI">添加UI</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TweenWindow</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    windowName = <span class="string">&quot;TweenerWindow&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> mc.window(<span class="variable language_">self</span>.windowName, q=<span class="literal">True</span>, exists=<span class="literal">True</span>):</span><br><span class="line">            mc.deleteUI(<span class="variable language_">self</span>.windowName)</span><br><span class="line">        mc.window(<span class="variable language_">self</span>.windowName)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.buildUI()</span><br><span class="line"></span><br><span class="line">        mc.showWindow()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildUI</span>(<span class="params">self</span>):</span><br><span class="line">        column = mc.columnLayout()</span><br><span class="line">        mc.text(label=<span class="string">&quot;Use this slider to set the tween amount&quot;</span>)</span><br><span class="line">        row = mc.rowLayout(numberOfColumns=<span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider = mc.floatSlider(<span class="built_in">min</span>=<span class="number">0</span>, <span class="built_in">max</span>=<span class="number">100</span>, value=<span class="number">50</span>, step=<span class="number">1</span>, changeCommand=tween)  <span class="comment"># 创建滑动条</span></span><br><span class="line">        mc.button(label=<span class="string">&quot;Reset&quot;</span>, command=<span class="variable language_">self</span>.reset)  <span class="comment"># 命令中调用函数不加括号是因为如果加了括号就直接使用函数了，而不是与按钮绑定。</span></span><br><span class="line">        mc.setParent(column)</span><br><span class="line">        mc.button(label=<span class="string">&quot;Close&quot;</span>, command=<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self,*args</span>):</span><br><span class="line">        <span class="comment"># 使用*args是因为command调用此函数的同时会传入参数，因此使用*args来接收，但没必要使用</span></span><br><span class="line">        mc.floatSlider(<span class="variable language_">self</span>.slider, edit=<span class="literal">True</span>, value=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self,*args</span>):</span><br><span class="line">        mc.deleteUI(<span class="variable language_">self</span>.windowName)</span><br></pre></td></tr></table></figure><p><a name="Ks6OD"></a></p><h2 id="组合并使用">组合并使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> mc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">tween</span>(<span class="params">percentage, obj=<span class="literal">None</span>, attr=<span class="literal">None</span>, selection=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj <span class="keyword">and</span> <span class="keyword">not</span> selection:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;No object given to tween&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> obj:</span><br><span class="line">        obj = mc.ls(sl=<span class="literal">True</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> attr:</span><br><span class="line">        <span class="comment"># attrs为选择的物体的所有可以k帧的属性。</span></span><br><span class="line">        attrs = mc.listAttr(obj, k=<span class="literal">True</span>)</span><br><span class="line">    currentTime = mc.currentTime(q=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">for</span> attr <span class="keyword">in</span> attrs:</span><br><span class="line">        attrFull = <span class="string">&#x27;%s.%s&#x27;</span> % (obj, attr)  <span class="comment"># 构建所有可以k帧的属性的长名</span></span><br><span class="line">        keyframes = mc.keyframe(attrFull, q=<span class="literal">True</span>)  <span class="comment"># 获得物体已经k帧的属性的帧数，没有k帧的属性为None</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> keyframes:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 对于没有k帧的属性跳过操作</span></span><br><span class="line"></span><br><span class="line">        previousKeyframes = []  <span class="comment"># 存取当前帧前的所有已经k帧的帧数列表</span></span><br><span class="line">        <span class="keyword">for</span> frame <span class="keyword">in</span> keyframes:</span><br><span class="line">            <span class="keyword">if</span> frame &lt; currentTime:</span><br><span class="line">                previousKeyframes.append(frame)</span><br><span class="line">        laterKeyframes = [frame <span class="keyword">for</span> frame <span class="keyword">in</span> keyframes <span class="keyword">if</span> frame &gt; currentTime]  <span class="comment"># 通过列表生成式操作得到当前帧后的所有已经k帧的帧数列表</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> previousKeyframes <span class="keyword">and</span> <span class="keyword">not</span> laterKeyframes:</span><br><span class="line">            <span class="keyword">continue</span>  <span class="comment"># 如果当前帧的前面或者后面没帧的话不执行后面的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> previousKeyframes:  <span class="comment"># 得到离当前帧最近的左边帧数</span></span><br><span class="line">            previousFrame = <span class="built_in">max</span>(previousKeyframes)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            previousFrame = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        nextFrame = <span class="built_in">min</span>(laterKeyframes) <span class="keyword">if</span> laterKeyframes <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 通过三目运算符得到离当前帧最近的右边帧数</span></span><br><span class="line"></span><br><span class="line">        previousValue = mc.getAttr(attrFull, time=previousFrame)  <span class="comment"># 得到离当前帧最近的左边帧数对应的值</span></span><br><span class="line">        nextValue = mc.getAttr(attrFull, time=nextFrame)  <span class="comment"># 得到离当前帧最近的右边帧数对应的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据百分比设置当前帧的大小</span></span><br><span class="line">        difference = nextValue - previousValue</span><br><span class="line">        weightedDifference = (difference * percentage) / <span class="number">100</span></span><br><span class="line">        currentValue = previousValue + weightedDifference</span><br><span class="line">        <span class="comment"># 设置当前帧的数值</span></span><br><span class="line">        mc.setKeyframe(attrFull, time=currentTime, value=currentValue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TweenWindow</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    windowName = <span class="string">&quot;TweenerWindow&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> mc.window(<span class="variable language_">self</span>.windowName, q=<span class="literal">True</span>, exists=<span class="literal">True</span>):</span><br><span class="line">            mc.deleteUI(<span class="variable language_">self</span>.windowName)</span><br><span class="line">        mc.window(<span class="variable language_">self</span>.windowName)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.buildUI()</span><br><span class="line"></span><br><span class="line">        mc.showWindow()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildUI</span>(<span class="params">self</span>):</span><br><span class="line">        column = mc.columnLayout()</span><br><span class="line">        mc.text(label=<span class="string">&quot;Use this slider to set the tween amount&quot;</span>)</span><br><span class="line">        row = mc.rowLayout(numberOfColumns=<span class="number">2</span>)</span><br><span class="line">        <span class="variable language_">self</span>.slider = mc.floatSlider(<span class="built_in">min</span>=<span class="number">0</span>, <span class="built_in">max</span>=<span class="number">100</span>, value=<span class="number">50</span>, step=<span class="number">1</span>, changeCommand=tween)  <span class="comment"># 创建滑动条</span></span><br><span class="line">        mc.button(label=<span class="string">&quot;Reset&quot;</span>, command=<span class="variable language_">self</span>.reset)  <span class="comment"># 命令中调用函数不加括号是因为如果加了括号就直接使用函数了，而不是与按钮绑定。</span></span><br><span class="line">        mc.setParent(column)</span><br><span class="line">        mc.button(label=<span class="string">&quot;Close&quot;</span>, command=<span class="variable language_">self</span>.close)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reset</span>(<span class="params">self, *args</span>):</span><br><span class="line">        <span class="comment"># 使用*args是因为command调用此函数的同时会传入参数，因此使用*args来接收，但没必要使用</span></span><br><span class="line">        mc.floatSlider(<span class="variable language_">self</span>.slider, edit=<span class="literal">True</span>, value=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close</span>(<span class="params">self, *args</span>):</span><br><span class="line">        mc.deleteUI(<span class="variable language_">self</span>.windowName)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TweenWindow().show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="g313z"></a></p><h1>contrary library UI（控制器库工具）</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1649488838209-6de22298-0a1a-4947-9e7b-b59382093e87.png#averageHue=%234e4e4b&amp;clientId=u4fc22727-5a7f-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=356&amp;id=ud7f2af05&amp;originHeight=356&amp;originWidth=325&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=48533&amp;status=error&amp;style=none&amp;taskId=u8ff3f457-bf31-4385-a185-25f11393050&amp;title=&amp;width=325" alt="image.png">将学习对文件的操作以及通过播放预览（playblast）命令得到缩略图，以及通过PySide2来完成UI的制作<br><a name="D9DEb"></a></p><h2 id="maya文件操作以及播放预览（playblast）">maya文件操作以及播放预览（playblast）</h2><p>USERAPPDIR的路径是：C:\Users\Admin\Documents\maya<br>DIRECTORY的路径是：C:\Users\Admin\Documents\maya\controllerLibrary<br>**info的作用：调用方法时接收自定义的字典信息（不需要大括号）<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1649394075265-3eea7f0d-8a00-4f58-b4c8-598fab080321.png#averageHue=%23557f9c&amp;clientId=ua5c7273c-270d-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=65&amp;id=u19d521e4&amp;originHeight=65&amp;originWidth=552&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=33417&amp;status=error&amp;style=none&amp;taskId=ua24a6fe0-f427-4e6d-a2a5-b93df0a0f1c&amp;title=&amp;width=552" alt="image.png">然后以字典格式存储信息。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1649394139186-a48c31a0-60cb-48ce-a814-8aa69b7007e0.png#averageHue=%23444440&amp;clientId=ua5c7273c-270d-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=36&amp;id=u68d73616&amp;originHeight=36&amp;originWidth=364&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=18574&amp;status=error&amp;style=none&amp;taskId=u518e121c-9fe6-41c9-96ec-e5671497e76&amp;title=&amp;width=364" alt="image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line">USERAPPDIR = cmds.internalVar(userAppDir=<span class="literal">True</span>)  <span class="comment"># 此变量存的是maya的路径</span></span><br><span class="line">DIRECTORY = os.path.join(USERAPPDIR, <span class="string">&#x27;controllerLibrary&#x27;</span>)  <span class="comment"># 此操作是在maya的路径下新增加一个controllerLibrary路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用os.path.join的好处是不需要担心不同操作系统的文件路径命名格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDirectory</span>(<span class="params">directory=DIRECTORY</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.mkdir(directory)  <span class="comment"># 如果路径下没有文件夹就新建一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ControllerLibrary</span>(<span class="title class_ inherited__">dict</span>):  <span class="comment"># 将类继承自dict</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, name, directory=DIRECTORY, screenshot=<span class="literal">True</span>, **info</span>):</span><br><span class="line">        createDirectory(directory)</span><br><span class="line">        path = os.path.join(directory, <span class="string">&#x27;%s.ma&#x27;</span> % name)  <span class="comment"># path为ma文件路径</span></span><br><span class="line">        infoFile = os.path.join(directory, <span class="string">&#x27;%s.json&#x27;</span> % name)  <span class="comment"># infoFile为json文件路径</span></span><br><span class="line">        <span class="comment"># 为信息字典除了自定义的信息外，增加name和path的信息。</span></span><br><span class="line">        info[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        info[<span class="string">&#x27;path&#x27;</span>] = path</span><br><span class="line"></span><br><span class="line">        cmds.file(rename=path)  <span class="comment"># 选择保存ma文件路径以及规定名字</span></span><br><span class="line">        <span class="keyword">if</span> cmds.ls(selection=<span class="literal">True</span>):</span><br><span class="line">            cmds.file(force=<span class="literal">True</span>, typ=<span class="string">&#x27;mayaAscii&#x27;</span>, exportSelected=<span class="literal">True</span>)  <span class="comment"># 为选择的物体创建文件</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.file(save=<span class="literal">True</span>, typ=<span class="string">&#x27;mayaAscii&#x27;</span>, force=<span class="literal">True</span>)  <span class="comment"># 保存整个场景</span></span><br><span class="line">        <span class="keyword">if</span> screenshot:</span><br><span class="line">            info[<span class="string">&#x27;screenshot&#x27;</span>] = <span class="variable language_">self</span>.saveScreenshot(name, directory=directory)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(infoFile, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># 安全地创建文件并执行写入操作</span></span><br><span class="line">            json.dump(info, f, indent=<span class="number">4</span>)  <span class="comment"># 将info的信息转存到json文件中，并增加缩进为4，info为调用函数时自定义的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>[name] = info  <span class="comment"># 保存的同时更新对象字典，对象字典的格式：名字对应信息字典。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, directory=DIRECTORY</span>):  <span class="comment"># 返回所有的ma文件名以及对应的文件路径（字典）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        files = os.listdir(directory)  <span class="comment"># 获取自定义库中的所有文件</span></span><br><span class="line">        mayaFiles = [f <span class="keyword">for</span> f <span class="keyword">in</span> files <span class="keyword">if</span> f.endswith(<span class="string">&#x27;.ma&#x27;</span>)]  <span class="comment"># 只获取ma格式的文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ma <span class="keyword">in</span> mayaFiles:</span><br><span class="line">            name, ext = os.path.splitext(ma)  <span class="comment"># 将名字和格式名分割开</span></span><br><span class="line">            path = os.path.join(directory, ma)  <span class="comment"># 得到ma格式文件路径</span></span><br><span class="line">            infoFile = <span class="string">&#x27;%s.json&#x27;</span> % name  <span class="comment"># 对于所有保存的ma文件得到对应的json文件名</span></span><br><span class="line">            <span class="keyword">if</span> infoFile <span class="keyword">in</span> files:  <span class="comment"># 如果有对应json文件</span></span><br><span class="line">                infoFile = os.path.join(directory, infoFile)  <span class="comment"># 得到json文件路径</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(infoFile, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    info = json.load(f)  <span class="comment"># 读取json数据</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                info = &#123;&#125;  <span class="comment"># 没有对应json文件的也给一个信息字典</span></span><br><span class="line">            screenshot = <span class="string">&#x27;%s.jpg&#x27;</span> % name</span><br><span class="line">            <span class="keyword">if</span> screenshot <span class="keyword">in</span> files:  <span class="comment"># 根据保存的截图根据名字进行匹配。</span></span><br><span class="line">                info[<span class="string">&#x27;screenshot&#x27;</span>] = os.path.join(directory, screenshot)</span><br><span class="line"></span><br><span class="line">            info[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">            info[<span class="string">&#x27;path&#x27;</span>] = path</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>[name] = info  <span class="comment"># 将ma文件名字和路径一一对应（字典）</span></span><br><span class="line"></span><br><span class="line">        pprint.pprint(<span class="variable language_">self</span>)  <span class="comment"># 输出字典（pprint使输出更美观）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, name</span>):</span><br><span class="line">        path = <span class="variable language_">self</span>[name][<span class="string">&#x27;path&#x27;</span>]  <span class="comment"># 读取对象字典中的信息字典中的path</span></span><br><span class="line">        cmds.file(path, i=<span class="literal">True</span>, usingNamespaces=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveScreenshot</span>(<span class="params">self, name, directory=DIRECTORY</span>):</span><br><span class="line">        path = os.path.join(directory, <span class="string">&#x27;%s.jpg&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line">        cmds.viewFit()  <span class="comment"># 相当于F快捷键</span></span><br><span class="line">        cmds.setAttr(<span class="string">&#x27;defaultRenderGlobals.imageFormat&#x27;</span>, <span class="number">8</span>)  <span class="comment"># 将渲染格式的图像格式设置为jpeg</span></span><br><span class="line">        <span class="comment"># completeFilename参数控制保存路径名，forceOverwrite意思是如果重名的话就覆盖，format为格式，width和height控制大小（200宽高对应分辨率100*100因为默认拍屏百分比为50%）</span></span><br><span class="line">        <span class="comment"># showOrnaments为False时设置渲染成片时不显示模型视图装饰物（例如网格,视图名字），startTime=1，endTime=1表示只获取第一帧，viewer为False表示渲染出来后不立刻浏览。</span></span><br><span class="line">        cmds.playblast(completeFilename=path, forceOverwrite=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&#x27;image&#x27;</span>, width=<span class="number">200</span>, height=<span class="number">200</span>,</span><br><span class="line">                       showOrnaments=<span class="literal">False</span>, startTime=<span class="number">1</span>, endTime=<span class="number">1</span>, viewer=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="ZxYs5"></a></p><h2 id="PySide2-for-maya">PySide2 for maya</h2><p>使用showUI方法时需要使用一个变量来接收showUI方法的值，不然会因为python的垃圾回收机制错误的将窗口删除而导致窗口一出现就消失。<br>get() 方法 Vs dict[key] 访问元素区别<br>**get(key) **方法在 key（键）不在字典中时，可以返回默认值 <strong>None</strong> 或者设置的默认值。<br><strong>dict[key]</strong> 在 key（键）不在字典中时，会触发 <strong>KeyError</strong> 异常。<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pprint</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets, QtCore, QtGui</span><br><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> cmds</span><br><span class="line"></span><br><span class="line">USERAPPDIR = cmds.internalVar(userAppDir=<span class="literal">True</span>)  <span class="comment"># 此变量存的是maya的路径</span></span><br><span class="line">DIRECTORY = os.path.join(USERAPPDIR, <span class="string">&#x27;controllerLibrary&#x27;</span>)  <span class="comment"># 此操作是在maya的路径下新增加一个controllerLibrary路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用os.path.join的好处是不需要担心不同操作系统的文件路径命名格式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">createDirectory</span>(<span class="params">directory=DIRECTORY</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">        os.mkdir(directory)  <span class="comment"># 如果路径下没有文件夹就新建一个</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ControllerLibrary</span>(<span class="title class_ inherited__">dict</span>):  <span class="comment"># 将类继承自dict</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self, name, directory=DIRECTORY, screenshot=<span class="literal">True</span>, **info</span>):</span><br><span class="line">        createDirectory(directory)</span><br><span class="line">        path = os.path.join(directory, <span class="string">&#x27;%s.ma&#x27;</span> % name)  <span class="comment"># path为ma文件路径</span></span><br><span class="line">        infoFile = os.path.join(directory, <span class="string">&#x27;%s.json&#x27;</span> % name)  <span class="comment"># infoFile为json文件路径</span></span><br><span class="line">        <span class="comment"># 为信息字典除了自定义的信息外，增加name和path的信息。</span></span><br><span class="line">        info[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">        info[<span class="string">&#x27;path&#x27;</span>] = path</span><br><span class="line"></span><br><span class="line">        cmds.file(rename=path)  <span class="comment"># 选择保存ma文件路径以及规定名字</span></span><br><span class="line">        <span class="keyword">if</span> cmds.ls(selection=<span class="literal">True</span>):</span><br><span class="line">            cmds.file(force=<span class="literal">True</span>, typ=<span class="string">&#x27;mayaAscii&#x27;</span>, exportSelected=<span class="literal">True</span>)  <span class="comment"># 为选择的物体创建文件</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmds.file(save=<span class="literal">True</span>, typ=<span class="string">&#x27;mayaAscii&#x27;</span>, force=<span class="literal">True</span>)  <span class="comment"># 保存整个场景</span></span><br><span class="line">        <span class="keyword">if</span> screenshot:</span><br><span class="line">            info[<span class="string">&#x27;screenshot&#x27;</span>] = <span class="variable language_">self</span>.saveScreenshot(name, directory=directory)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(infoFile, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># 安全地创建文件并执行写入操作</span></span><br><span class="line">            json.dump(info, f, indent=<span class="number">4</span>)  <span class="comment"># 将info的信息转存到json文件中，并增加缩进为4，info为调用函数时自定义的信息</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>[name] = info  <span class="comment"># 保存的同时更新对象字典，对象字典的格式：名字对应信息字典。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">self, directory=DIRECTORY</span>):  <span class="comment"># 返回所有的ma文件名以及对应的文件路径（字典）</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(directory):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        files = os.listdir(directory)  <span class="comment"># 获取自定义库中的所有文件</span></span><br><span class="line">        mayaFiles = [f <span class="keyword">for</span> f <span class="keyword">in</span> files <span class="keyword">if</span> f.endswith(<span class="string">&#x27;.ma&#x27;</span>)]  <span class="comment"># 只获取ma格式的文件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> ma <span class="keyword">in</span> mayaFiles:</span><br><span class="line">            name, ext = os.path.splitext(ma)  <span class="comment"># 将名字和格式名分割开</span></span><br><span class="line">            path = os.path.join(directory, ma)  <span class="comment"># 得到ma格式文件路径</span></span><br><span class="line">            infoFile = <span class="string">&#x27;%s.json&#x27;</span> % name  <span class="comment"># 对于所有保存的ma文件得到对应的json文件名</span></span><br><span class="line">            <span class="keyword">if</span> infoFile <span class="keyword">in</span> files:  <span class="comment"># 如果有对应json文件</span></span><br><span class="line">                infoFile = os.path.join(directory, infoFile)  <span class="comment"># 得到json文件路径</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(infoFile, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    info = json.load(f)  <span class="comment"># 读取json数据</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                info = &#123;&#125;  <span class="comment"># 没有对应json文件的也给一个信息字典</span></span><br><span class="line">            screenshot = <span class="string">&#x27;%s.jpg&#x27;</span> % name</span><br><span class="line">            <span class="keyword">if</span> screenshot <span class="keyword">in</span> files:  <span class="comment"># 根据保存的截图根据名字进行匹配。</span></span><br><span class="line">                info[<span class="string">&#x27;screenshot&#x27;</span>] = os.path.join(directory, name)</span><br><span class="line"></span><br><span class="line">            info[<span class="string">&#x27;name&#x27;</span>] = name</span><br><span class="line">            info[<span class="string">&#x27;path&#x27;</span>] = path</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">self</span>[name] = info  <span class="comment"># 将ma文件名字和路径一一对应（字典）</span></span><br><span class="line"></span><br><span class="line">        pprint.pprint(<span class="variable language_">self</span>)  <span class="comment"># 输出字典（pprint使输出更美观）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self, name</span>):</span><br><span class="line">        path = <span class="variable language_">self</span>[name][<span class="string">&#x27;path&#x27;</span>]  <span class="comment"># 读取对象字典中的信息字典中的path</span></span><br><span class="line">        cmds.file(path, i=<span class="literal">True</span>, usingNamespaces=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveScreenshot</span>(<span class="params">self, name, directory=DIRECTORY</span>):</span><br><span class="line">        path = os.path.join(directory, <span class="string">&#x27;%s.jpg&#x27;</span> % name)</span><br><span class="line"></span><br><span class="line">        cmds.viewFit()  <span class="comment"># 相当于F快捷键</span></span><br><span class="line">        cmds.setAttr(<span class="string">&#x27;defaultRenderGlobals.imageFormat&#x27;</span>, <span class="number">8</span>)  <span class="comment"># 将渲染格式的图像格式设置为jpeg</span></span><br><span class="line">        <span class="comment"># completeFilename参数控制保存路径名，forceOverwrite意思是如果重名的话就覆盖，format为格式，width和height控制大小（200宽高对应分辨率100*100因为默认拍屏百分比为50%）</span></span><br><span class="line">        <span class="comment"># showOrnaments为False时设置渲染成片时不显示模型视图装饰物（例如网格,视图名字），startTime=1，endTime=1表示只获取第一帧，viewer为False表示渲染出来后不立刻浏览。</span></span><br><span class="line">        cmds.playblast(completeFilename=path, forceOverwrite=<span class="literal">True</span>, <span class="built_in">format</span>=<span class="string">&#x27;image&#x27;</span>, width=<span class="number">200</span>, height=<span class="number">200</span>,</span><br><span class="line">                       showOrnaments=<span class="literal">False</span>, startTime=<span class="number">1</span>, endTime=<span class="number">1</span>, viewer=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ControllerLibraryUI</span>(QtWidgets.QDialog):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(ControllerLibraryUI, <span class="variable language_">self</span>).__init__()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)  <span class="comment"># 使窗口置顶</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.setWindowTitle(<span class="string">&#x27;Controller Library UI&#x27;</span>)</span><br><span class="line">        <span class="comment"># self.library 为ControllerLibrary类的实例</span></span><br><span class="line">        <span class="variable language_">self</span>.library = ControllerLibrary()</span><br><span class="line">        <span class="comment"># 创建实例的同时会为实例增加UI并填充。</span></span><br><span class="line">        <span class="variable language_">self</span>.buildUI()</span><br><span class="line">        <span class="variable language_">self</span>.populate()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildUI</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        layout = QtWidgets.QVBoxLayout(<span class="variable language_">self</span>) <span class="comment"># layout为主布局（垂直）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 水平的子控件</span></span><br><span class="line">        saveWidget = QtWidgets.QWidget()</span><br><span class="line">        saveLayout = QtWidgets.QHBoxLayout(saveWidget)</span><br><span class="line">        layout.addWidget(saveWidget)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.saveNameField = QtWidgets.QLineEdit()</span><br><span class="line">        saveLayout.addWidget(<span class="variable language_">self</span>.saveNameField)</span><br><span class="line"></span><br><span class="line">        saveBtn = QtWidgets.QPushButton(<span class="string">&#x27;Save&#x27;</span>)</span><br><span class="line">        saveBtn.clicked.connect(<span class="variable language_">self</span>.save)</span><br><span class="line">        saveLayout.addWidget(saveBtn)</span><br><span class="line"></span><br><span class="line">        size = <span class="number">80</span></span><br><span class="line">        buffer = <span class="number">12</span></span><br><span class="line">        <span class="variable language_">self</span>.listWidget = QtWidgets.QListWidget()</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setViewMode(QtWidgets.QListWidget.IconMode)</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setIconSize(QtCore.QSize(size, size))</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setResizeMode(QtWidgets.QListWidget.Adjust)  <span class="comment"># 使列表项能跟随窗口大小而自适应调整大小</span></span><br><span class="line">        <span class="variable language_">self</span>.listWidget.setGridSize(QtCore.QSize(size + buffer, size + buffer))</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.listWidget)</span><br><span class="line"></span><br><span class="line">        btnWidget = QtWidgets.QWidget()</span><br><span class="line">        btnLayout = QtWidgets.QHBoxLayout(btnWidget)</span><br><span class="line">        layout.addWidget(btnWidget)</span><br><span class="line"></span><br><span class="line">        importBtn = QtWidgets.QPushButton(<span class="string">&#x27;Import&#x27;</span>)</span><br><span class="line">        importBtn.clicked.connect(<span class="variable language_">self</span>.load)</span><br><span class="line">        btnLayout.addWidget(importBtn)</span><br><span class="line"></span><br><span class="line">        refreshBtn = QtWidgets.QPushButton(<span class="string">&#x27;Refresh&#x27;</span>)</span><br><span class="line">        refreshBtn.clicked.connect(<span class="variable language_">self</span>.populate)</span><br><span class="line">        btnLayout.addWidget(refreshBtn)</span><br><span class="line"></span><br><span class="line">        closeBtn = QtWidgets.QPushButton(<span class="string">&#x27;Close&#x27;</span>)</span><br><span class="line">        closeBtn.clicked.connect(<span class="variable language_">self</span>.close)</span><br><span class="line">        btnLayout.addWidget(closeBtn)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">populate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.listWidget.clear()</span><br><span class="line">        <span class="variable language_">self</span>.library.find()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> name, info <span class="keyword">in</span> <span class="variable language_">self</span>.library.items():</span><br><span class="line">            item = QtWidgets.QListWidgetItem(name)</span><br><span class="line">            <span class="variable language_">self</span>.listWidget.addItem(item)</span><br><span class="line"></span><br><span class="line">            screenshot = info.get(<span class="string">&#x27;screenshot&#x27;</span>)</span><br><span class="line">            <span class="keyword">if</span> screenshot:</span><br><span class="line">                icon = QtGui.QIcon(screenshot)</span><br><span class="line">                item.setIcon(icon)</span><br><span class="line">            item.setToolTip(pprint.pformat(info))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load</span>(<span class="params">self</span>):</span><br><span class="line">        currentItem = <span class="variable language_">self</span>.listWidget.currentItem()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> currentItem:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        name = currentItem.text()</span><br><span class="line">        <span class="variable language_">self</span>.library.load(name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">self</span>):</span><br><span class="line">        name = <span class="variable language_">self</span>.saveNameField.text()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> name.strip():</span><br><span class="line">            cmds.warning(<span class="string">&quot;You must give a name!&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.library.save(name)</span><br><span class="line">        <span class="variable language_">self</span>.populate()</span><br><span class="line">        <span class="variable language_">self</span>.saveNameField.setText(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">showUI</span>():</span><br><span class="line">    ui = ControllerLibraryUI()</span><br><span class="line">    ui.show()</span><br><span class="line">    <span class="keyword">return</span> ui</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a name="sHbvd"></a></p><h1>lightingManager</h1><p>源码：<a href="https://github.com/dgovil/PythonForMayaSamples/blob/master/lightManager/lightManager.py">https://github.com/dgovil/PythonForMayaSamples/blob/master/lightManager/lightManager.py</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665995561940-63e28faf-3177-44f9-9a0f-1f2b64cb1f86.png#averageHue=%23454545&amp;clientId=u62ebb92f-db9d-4&amp;from=paste&amp;height=1358&amp;id=uab4975ed&amp;originHeight=1358&amp;originWidth=546&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=20165&amp;status=done&amp;style=none&amp;taskId=u74b9d9d5-b697-40d5-9be5-c5cea3f80ca&amp;title=&amp;width=546" alt="image.png"><br><a name="tTW9c"></a></p><h2 id="知识点：">知识点：</h2><p><a name="Z6eUe"></a></p><h3 id="partial函数">partial函数</h3><p>from functools import partial<br>通过partial可以通过一个已有的函数，快速创建出一个根据这个已有的函数扩展的新函数。<br>通过partial可以只使用一行代码就可以实现调用函数并传递参数来创建对应类型灯光。<img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1650422509623-4979120e-8985-4ed7-9b47-5dd3a9c6af69.png#averageHue=%23312e2c&amp;clientId=u6a4b9ddd-4b51-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;height=61&amp;id=u7016d0f9&amp;originHeight=61&amp;originWidth=566&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=13681&amp;status=error&amp;style=none&amp;taskId=uf0a5bb89-a32e-40f3-985d-dcad6e73343&amp;title=&amp;width=566" alt="image.png"><br>partial函数的名字叫偏函数。<br>偏函数的使用是将一个旧函数，为其参数添加默认值然后得到一个默认使用刚才添加的默认值参数的新函数。<br><a href="https://www.liaoxuefeng.com/wiki/1016959663602400/1017454145929440">偏函数</a><br><a name="jRb49"></a></p><h3 id="lambda函数">lambda函数</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665994777469-d2a78757-d237-4699-a8df-a7145215fae8.png#averageHue=%23f6f4f2&amp;clientId=u62ebb92f-db9d-4&amp;from=paste&amp;height=77&amp;id=u2c795790&amp;originHeight=77&amp;originWidth=619&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=5845&amp;status=done&amp;style=none&amp;taskId=ubaeb00f4-6c1d-4b4d-82f4-9079f0785ce&amp;title=&amp;width=619" alt="image.png"><br>匿名函数的意思是他是一个函数，但是他没有名字，当然也可以把lambda的结果赋予一个变量，那么那个变量也就能变成一个函数了。<br>举例：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1665994912565-407b3933-446d-4e43-b2ae-d9fd1b674a9e.png#averageHue=%230f830d&amp;clientId=u62ebb92f-db9d-4&amp;from=paste&amp;height=64&amp;id=u9706c283&amp;originHeight=64&amp;originWidth=234&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=2976&amp;status=done&amp;style=none&amp;taskId=u3126f118-9da5-4472-958f-88aea428656&amp;title=&amp;width=234" alt="image.png"><br>以这节课的代码举例：soloBtn.toggled.connect(lambda val: self.onSolo.emit(val))  当按钮被激活时就直接使用lambda函数，不需要再定义函数了，按钮被激活就传入True（也就是val，val是形参），然后方法是 self.onSolo.emit(val)  这里的onSolo是之前的自定义的信号，emit是发送的意思，意思是向槽发送的数值。当信号进行emit时，就会执行这个信号所连接的函数，并且发送emit的参数。<br><a name="gZtXw"></a></p><h3 id="isinstance函数与basestring函数">isinstance函数与basestring函数</h3><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。<br><em>如果要判断两个类型是否相同推荐使用 isinstance()。</em><br>isinstance(obj, basestring) 等价于 isinstance(obj, (str, unicode))。<br><a name="vyT3q"></a></p><h3 id="pynode">pynode</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1650423645383-fbd19826-10cf-48ca-ac9b-4e8c2cec5bb4.png#averageHue=%23292827&amp;clientId=u6a4b9ddd-4b51-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;id=u02dbae2d&amp;originHeight=387&amp;originWidth=807&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=207073&amp;status=error&amp;style=none&amp;taskId=ua570155c-ecc6-40a7-9208-2713f0319e4&amp;title=" alt="image.png"><br>因此如果是在maya中通过鼠标点击创建的灯光需要通过PyNode转化成PyNode类型<br>if isinstance(light, basestring):<br>    light = pm.PyNode(light)  # 将不是通过pymel创建的灯光也转化为PyNode类型<br><a name="VYqaK"></a></p><h3 id="scrollWidget">scrollWidget</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/2623605/1650428346436-8a8a67df-65b7-4aed-993d-e6fff634c949.png#averageHue=%23fefaf6&amp;clientId=u6a4b9ddd-4b51-4&amp;errorMessage=unknown%20error&amp;from=paste&amp;id=udad06788&amp;originHeight=540&amp;originWidth=960&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;status=error&amp;style=none&amp;taskId=u06b5caad-c08c-49bd-a8d7-c4bfe7aedf4&amp;title=" alt><br><a name="a4wGT"></a></p><h3 id="删除UI控件的方法">删除UI控件的方法</h3><p>def deleteLight(self):<br>    # 当删除灯光的同时也需要删除控件<br>    self.setParent(None)<br>    self.setVisible(False)<br>    self.deleteLater()<br><a name="KWcBc"></a></p><h3 id="获取控件中的所有子控件并操作">获取控件中的所有子控件并操作</h3><p>阅读saveLights函数<br><a name="qOPno"></a></p><h3 id="logging模块">logging模块</h3><p><a href="https://blog.csdn.net/liuskyter/article/details/102657142?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4">https://blog.csdn.net/liuskyter/article/details/102657142?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.pc_relevant_default&amp;spm=1001.2101.3001.4242.2&amp;utm_relevant_index=4</a><br><a name="Ufn9i"></a></p><h3 id="将Qt的UI窗口和MAYA绑定到一起（窗口可以内嵌到maya中）并可以设置停靠地点">将Qt的UI窗口和MAYA绑定到一起（窗口可以内嵌到maya中）并可以设置停靠地点</h3><p>详情看代码中的getMayaMainWindow()和getDock(name=‘LightingManagerDock’)和deleteDock(name=‘LightingManagerDock’)<br>其中LightingManagerDock代表为控件起的名字来代表控件。 name是一个变量，是为了方便查看以及方法内容的使用<br><a name="U6I6w"></a></p><h3 id="shadingNode和pointLight与spotLight命令的区别：">shadingNode和pointLight与spotLight命令的区别：</h3><p>maya自带的命令pointLight 和 spotLight命令都可以直接使用生成对应的灯光，并且生成的灯光结果是一个shape类型的<br>而使用shadingNode命令可以生成areaLight与volumeLight，生成的灯光的结果是transform类型的，这导致了以后的通过它来获取灯光类型形成了障碍。<br><a name="kQAxO"></a></p><h3 id="代码">代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> PySide2 <span class="keyword">import</span> QtWidgets, QtCore</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"><span class="keyword">from</span> shiboken2 <span class="keyword">import</span> wrapInstance</span><br><span class="line"><span class="keyword">from</span> maya <span class="keyword">import</span> OpenMayaUI <span class="keyword">as</span> omui</span><br><span class="line"><span class="keyword">import</span> logging  <span class="comment"># 这是一种比使用print语句更好的记录输出的方式</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">logging.basicConfig()  <span class="comment"># 使用默认设置日志级别与输出格式</span></span><br><span class="line">logger = logging.getLogger(<span class="string">&#x27;LightingManager&#x27;</span>)  <span class="comment"># 创建一个日志器</span></span><br><span class="line">logger.setLevel(logging.DEBUG)  <span class="comment"># 设置日志器的级别</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getMayaMainWindow</span>():  <span class="comment"># 得到maya的主窗口</span></span><br><span class="line">    win = omui.MQtUtil_mainWindow()  <span class="comment"># 得到maya主窗口的内存地址</span></span><br><span class="line">    <span class="comment"># 使用wrapInstance方法将其转换为python可以理解的内容</span></span><br><span class="line">    <span class="comment"># 将它转换成QMainWindow</span></span><br><span class="line">    ptr = wrapInstance(long(win), QtWidgets.QMainWindow)</span><br><span class="line">    <span class="keyword">return</span> ptr  <span class="comment"># 返回maya主窗口这个QMainWindow</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getDock</span>(<span class="params">name=<span class="string">&#x27;LightingManagerDock&#x27;</span></span>):</span><br><span class="line">    deleteDock(name)  <span class="comment"># 如果已经存在自定义的LightingManagerDock窗口就删除掉</span></span><br><span class="line">    ctrl = pm.workspaceControl(name, dockToMainWindow=(<span class="string">&#x27;right&#x27;</span>, <span class="literal">True</span>),</span><br><span class="line">                               label=<span class="string">&#x27;Lighting Manager&#x27;</span>)  <span class="comment"># 在工作区的右区域生成一个窗口名字为变量name标题设置为label</span></span><br><span class="line">    qtCtrl = omui.MQtUtil_findControl(ctrl)  <span class="comment"># 使用OpenMayaUI API来获得与名称相关联的实际Qt小部件</span></span><br><span class="line">    ptr = wrapInstance(long(qtCtrl), QtWidgets.QWidget)  <span class="comment"># 使用wrapInstance将其转换为Python可以理解的内容，在本例中是一个QWidget</span></span><br><span class="line">    <span class="keyword">return</span> ptr  <span class="comment"># 返回LightingManagerDock这个QWidget</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">deleteDock</span>(<span class="params">name=<span class="string">&#x27;LightingManagerDock&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> pm.workspaceControl(name, q=<span class="literal">True</span>, exists=<span class="literal">True</span>):</span><br><span class="line">        pm.deleteUI(name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightManager</span>(QtWidgets.QWidget):</span><br><span class="line">    lightTypes = &#123;</span><br><span class="line">        <span class="string">&quot;Point Light&quot;</span>: pm.pointLight,</span><br><span class="line">        <span class="string">&quot;Spot Light&quot;</span>: pm.spotLight,</span><br><span class="line">        <span class="string">&quot;Directional Light&quot;</span>: pm.directionalLight,</span><br><span class="line">        <span class="string">&quot;Area Light&quot;</span>: partial(pm.shadingNode, <span class="string">&#x27;areaLight&#x27;</span>, asLight=<span class="literal">True</span>),</span><br><span class="line">        <span class="string">&quot;Volume Light&quot;</span>: partial(pm.shadingNode, <span class="string">&#x27;volumeLight&#x27;</span>, asLight=<span class="literal">True</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, dock=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> dock:</span><br><span class="line">            parent = getDock()  <span class="comment"># 默认将灯光信息的父窗口设置为dock</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            deleteDock()  <span class="comment"># 删除dock窗口</span></span><br><span class="line">            <span class="comment"># 尝试删除lightingManager窗口（父窗口为MayaMainWindow），如果不存在就记录日志。（不会中止程序）</span></span><br><span class="line">            <span class="comment"># 好处是既可以实现多次运行程序只生成一个窗口，也不会因为没生成过窗口而报错。</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                pm.deleteUI(<span class="string">&#x27;lightingManager&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                logger.debug(<span class="string">&#x27;No previous UI exists&#x27;</span>)</span><br><span class="line">            <span class="comment"># 如果设置dock为False，那么就使用默认的将父窗口设置为maya主窗口，并将灯光信息存入到父窗口上面</span></span><br><span class="line">            parent = QtWidgets.QDialog(parent=getMayaMainWindow())</span><br><span class="line">            <span class="comment"># 我们设置了它的名称，以便以后可以找到并删除它</span></span><br><span class="line">            parent.setObjectName(<span class="string">&#x27;lightingManager&#x27;</span>)</span><br><span class="line">            parent.setWindowTitle(<span class="string">&#x27;Lighting Manager&#x27;</span>)</span><br><span class="line">            <span class="comment"># 生成布局来存放灯光信息</span></span><br><span class="line">            layout = QtWidgets.QVBoxLayout(parent)</span><br><span class="line">        <span class="built_in">super</span>(LightManager, <span class="variable language_">self</span>).__init__(parent=parent)</span><br><span class="line">        <span class="variable language_">self</span>.buildUI()</span><br><span class="line">        <span class="variable language_">self</span>.populate()</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.parent().layout().addWidget(<span class="variable language_">self</span>)  <span class="comment"># 将灯光信息存放到主窗口的布局中</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> dock:</span><br><span class="line">            parent.show()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">populate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 点击refresh按钮时调用，首先将滑动条控件中的内容清空，然后再根据场景灯光类型将场景灯光通过addLight方法向滑动条控件中添加灯光控件</span></span><br><span class="line">        <span class="comment"># 可以通过for循环配合self.findChildren(LightWidget)来删除控件，这里介绍了如何通过while循环删除控件</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="variable language_">self</span>.scrollLayout.count():</span><br><span class="line">            widget = <span class="variable language_">self</span>.scrollLayout.takeAt(<span class="number">0</span>).widget()</span><br><span class="line">            <span class="keyword">if</span> widget:</span><br><span class="line">                <span class="comment"># 之所以没有widget.setParent(None)这个操作是因为takeAt（0）已经执行了这个操作</span></span><br><span class="line">                widget.setVisible(<span class="literal">False</span>)</span><br><span class="line">                widget.deleteLater()</span><br><span class="line">        <span class="keyword">for</span> light <span class="keyword">in</span> pm.ls(<span class="built_in">type</span>=(<span class="string">&#x27;areaLight&#x27;</span>, <span class="string">&#x27;spotLight&#x27;</span>, <span class="string">&#x27;pointLight&#x27;</span>, <span class="string">&#x27;directionalLight&#x27;</span>, <span class="string">&#x27;volumeLight&#x27;</span>)):</span><br><span class="line">            <span class="variable language_">self</span>.addLight(light)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildUI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QtWidgets.QGridLayout(<span class="variable language_">self</span>)  <span class="comment"># 为主窗口创建一个表格布局</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建下拉列表框控件存放灯光种类，控件设置在主窗口的表格布局中</span></span><br><span class="line">        <span class="variable language_">self</span>.lightTypeCB = QtWidgets.QComboBox()</span><br><span class="line">        <span class="keyword">for</span> lightType <span class="keyword">in</span> <span class="built_in">sorted</span>(<span class="variable language_">self</span>.lightTypes):</span><br><span class="line">            <span class="variable language_">self</span>.lightTypeCB.addItem(lightType)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.lightTypeCB, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 按钮控件在主窗口的表格布局中</span></span><br><span class="line">        createBtn = QtWidgets.QPushButton(<span class="string">&#x27;Create&#x27;</span>)</span><br><span class="line">        createBtn.clicked.connect(<span class="variable language_">self</span>.createLight)</span><br><span class="line">        layout.addWidget(createBtn, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建一个QWidget对象scrollWidget用来存放滑动条</span></span><br><span class="line">        scrollWidget = QtWidgets.QWidget()</span><br><span class="line">        scrollWidget.setSizePolicy(QtWidgets.QSizePolicy.Maximum,</span><br><span class="line">                                   QtWidgets.QSizePolicy.Maximum)  <span class="comment"># 设置滑动条控件中的内容的水平与垂直方向大小策略</span></span><br><span class="line">        <span class="variable language_">self</span>.scrollLayout = QtWidgets.QVBoxLayout(scrollWidget)  <span class="comment"># 滑动条控件中有一个垂直布局用来存放灯光控件</span></span><br><span class="line"></span><br><span class="line">        scrollArea = QtWidgets.QScrollArea()</span><br><span class="line">        scrollArea.setWidgetResizable(<span class="literal">True</span>)</span><br><span class="line">        scrollArea.setWidget(scrollWidget)</span><br><span class="line">        layout.addWidget(scrollArea, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        saveBtn = QtWidgets.QPushButton(<span class="string">&#x27;Save&#x27;</span>)</span><br><span class="line">        saveBtn.clicked.connect(<span class="variable language_">self</span>.saveLights)</span><br><span class="line">        layout.addWidget(saveBtn, <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        importBtn = QtWidgets.QPushButton(<span class="string">&#x27;Import&#x27;</span>)</span><br><span class="line">        importBtn.clicked.connect(<span class="variable language_">self</span>.importLights)</span><br><span class="line">        layout.addWidget(importBtn, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        refreshBtn = QtWidgets.QPushButton(<span class="string">&#x27;Refresh&#x27;</span>)</span><br><span class="line">        refreshBtn.clicked.connect(<span class="variable language_">self</span>.populate)</span><br><span class="line">        layout.addWidget(refreshBtn, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">saveLights</span>(<span class="params">self</span>):</span><br><span class="line">        properties = &#123;&#125;  <span class="comment"># 定义一个字典来存取灯光信息</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> lightWidget <span class="keyword">in</span> <span class="variable language_">self</span>.findChildren(LightWidget):  <span class="comment"># 遍历所有的灯光信息控件</span></span><br><span class="line">            light = lightWidget.light</span><br><span class="line">            transform = light.getTransform()</span><br><span class="line"></span><br><span class="line">            properties[<span class="built_in">str</span>(transform)] = &#123;</span><br><span class="line">                <span class="string">&#x27;translate&#x27;</span>: <span class="built_in">list</span>(transform.translate.get()),  <span class="comment"># 需要使用list格式json才能进行编码</span></span><br><span class="line">                <span class="string">&#x27;rotation&#x27;</span>: <span class="built_in">list</span>(transform.rotate.get()),  <span class="comment"># # 需要使用list格式json才能进行编码</span></span><br><span class="line">                <span class="string">&#x27;lightType&#x27;</span>: pm.objectType(light),  <span class="comment"># 这里必须要使用shape类型的灯光节点才能够得到正确的lightType</span></span><br><span class="line">                <span class="string">&#x27;intensity&#x27;</span>: light.intensity.get(),</span><br><span class="line">                <span class="string">&#x27;color&#x27;</span>: light.color.get()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment"># 获取maya文档路径并向后添加一个lightManager路径赋予director</span></span><br><span class="line">        director = <span class="variable language_">self</span>.getDirectory()</span><br><span class="line">        <span class="comment"># 创建json文件路径以及名字根据当前时间的格式（月日）来命名</span></span><br><span class="line">        lightFile = os.path.join(director, <span class="string">&#x27;lightFile_%s.json&#x27;</span> % time.strftime(<span class="string">&#x27;%m%d&#x27;</span>))</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(lightFile, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(properties, f, indent=<span class="number">4</span>)  <span class="comment"># 将info的信息转存到json文件中，f为别名并增加缩进为4，info为调用函数时自定义的信息</span></span><br><span class="line">        logger.info(<span class="string">&#x27;Saving file to %s&#x27;</span> % lightFile)  <span class="comment"># 日志器输出保存的json文件的路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getDirectory</span>(<span class="params">self</span>):</span><br><span class="line">        director = os.path.join(pm.internalVar(userAppDir=<span class="literal">True</span>), <span class="string">&#x27;lightManager&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(director):  <span class="comment"># 如果director路径中没有存在文件夹那么就生成对应的文件夹</span></span><br><span class="line">            os.mkdir(director)</span><br><span class="line">        <span class="keyword">return</span> director</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">importLights</span>(<span class="params">self</span>):</span><br><span class="line">        directory = <span class="variable language_">self</span>.getDirectory()</span><br><span class="line">        <span class="comment"># 打开一个文件浏览器，并定义文件浏览器的标题和目录</span></span><br><span class="line">        <span class="comment"># filename为一个元组 第一个元素为选中的文件的路径，第二个元素是空。（不包含文件夹中所有元素，也不是单独一个字符串）</span></span><br><span class="line">        fileName = QtWidgets.QFileDialog.getOpenFileName(<span class="variable language_">self</span>, <span class="string">&quot;Light Browser&quot;</span>, directory)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(fileName[<span class="number">0</span>], <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            properties = json.load(f)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> light, info <span class="keyword">in</span> properties.items():  <span class="comment"># light为灯光节点名字，info为信息字典</span></span><br><span class="line">            lightType = info.get(<span class="string">&#x27;lightType&#x27;</span>)  <span class="comment"># 先找到json文件中的灯光类型</span></span><br><span class="line">            <span class="keyword">for</span> lt <span class="keyword">in</span> <span class="variable language_">self</span>.lightTypes:  <span class="comment"># 对于我们支持的每个light类型，我们检查它们是否与light类型匹配</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&#x27;%sLight&#x27;</span> % lt.split()[<span class="number">0</span>].lower()) == lightType:  <span class="comment"># 如果找到对应的灯光类型就跳出循环后根据信息灯光</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 如果没有找到对应的灯光类型就结束这一次循环进入下一个循环</span></span><br><span class="line">                <span class="comment"># logger是用来调试生成日志使用的，使用logger生成light和lightType来观察哪里出现了问题</span></span><br><span class="line">                logger.info(<span class="string">&#x27;Cannot find a corresponding light type for %s(%s)&#x27;</span> % (light, lightType))</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 调用方法得到光的shape节点</span></span><br><span class="line">            light = <span class="variable language_">self</span>.createLight(lightType=lt)</span><br><span class="line">            <span class="comment"># 设置光的shape参数</span></span><br><span class="line">            light.intensity.<span class="built_in">set</span>(info.get(<span class="string">&#x27;intensity&#x27;</span>))</span><br><span class="line">            light.color.<span class="built_in">set</span>(info.get(<span class="string">&#x27;color&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 得到光的变换来设置它的参数</span></span><br><span class="line">            transform = light.getTransform()</span><br><span class="line">            transform.translate.<span class="built_in">set</span>(info.get(<span class="string">&#x27;translate&#x27;</span>))</span><br><span class="line">            transform.rotate.<span class="built_in">set</span>(info.get(<span class="string">&#x27;rotation&#x27;</span>))  <span class="comment"># 执行完之后进入下一个循环再次根据灯光类型生成灯光</span></span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.populate()  <span class="comment"># 灯光生成完成之后，调用populate方法来刷新得到UI</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">createLight</span>(<span class="params">self, lightType=<span class="literal">None</span>, add=<span class="literal">True</span></span>):  <span class="comment"># 每使用一次create就调用LightWidget类创建灯光控件放置在滑动条控件中</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> lightType:  <span class="comment"># 如果没有指定lightType就根据列表框中的文字生成</span></span><br><span class="line">            lightType = <span class="variable language_">self</span>.lightTypeCB.currentText()</span><br><span class="line">        <span class="comment"># 得到创建对应灯光类型的函数</span></span><br><span class="line">        func = <span class="variable language_">self</span>.lightTypes[lightType]</span><br><span class="line">        <span class="comment"># 调用函数来创建灯光</span></span><br><span class="line">        light = func()</span><br><span class="line">        <span class="keyword">if</span> add:</span><br><span class="line">            <span class="variable language_">self</span>.addLight(light)</span><br><span class="line">        <span class="keyword">return</span> light</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addLight</span>(<span class="params">self, light</span>):</span><br><span class="line">        <span class="comment"># 这将为给定的光源创建一个LightWidget，并将其添加到UI中</span></span><br><span class="line">        <span class="comment"># 首先我们创建LightWidget</span></span><br><span class="line">        widget = LightWidget(light)</span><br><span class="line">        <span class="comment"># 然后，我们将小部件的onSolo信号连接到我们的方法中</span></span><br><span class="line">        widget.onSolo.connect(<span class="variable language_">self</span>.onSolo)  <span class="comment"># onSolo是信号，self.onSolo是槽</span></span><br><span class="line">        <span class="comment"># 最后，我们将其添加到scrollLayout</span></span><br><span class="line">        <span class="variable language_">self</span>.scrollLayout.addWidget(widget)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">onSolo</span>(<span class="params">self, value</span>):</span><br><span class="line">        lightWidgets = <span class="variable language_">self</span>.findChildren(LightWidget)  <span class="comment"># 得到所有LightWidget控件的列表</span></span><br><span class="line">        <span class="keyword">for</span> widget <span class="keyword">in</span> lightWidgets:</span><br><span class="line">            <span class="comment"># 每个信号都让我们知道是谁发送的，我们可以通过sender()查询</span></span><br><span class="line">            <span class="comment"># 对于每个小部件，我们检查它是否是发送者</span></span><br><span class="line">            <span class="keyword">if</span> widget != <span class="variable language_">self</span>.sender():</span><br><span class="line">                <span class="comment"># 如果不是小部件，我们将禁用它</span></span><br><span class="line">                widget.disableLight(value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LightWidget</span>(QtWidgets.QWidget):</span><br><span class="line">    onSolo = QtCore.Signal(<span class="built_in">bool</span>)  <span class="comment"># 自定义信号，接收bool类型的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, light</span>):</span><br><span class="line">        <span class="built_in">super</span>(LightWidget, <span class="variable language_">self</span>).__init__()</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(light, basestring):</span><br><span class="line">            light = pm.PyNode(light)  <span class="comment"># 这里接收的light参数是通过create创建的灯光，因为创建灯光的方式不完全相同，因此都转换成pyNode的类型方便操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 因为通过shadingNode命令生成的灯光返回是transform类型的</span></span><br><span class="line">        <span class="comment"># 如果要通过objectType命令反推灯光类型的名字需要通过shape类型的节点</span></span><br><span class="line">        <span class="comment"># 因此加一个判断，如果灯光的节点类型是transform类型就更改为shape类型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(light, pm.nodetypes.Transform):</span><br><span class="line">            light = light.getShape()</span><br><span class="line">        <span class="variable language_">self</span>.light = light</span><br><span class="line">        <span class="variable language_">self</span>.buildUI()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">buildUI</span>(<span class="params">self</span>):</span><br><span class="line">        layout = QtWidgets.QGridLayout(<span class="variable language_">self</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.name = QtWidgets.QCheckBox(<span class="built_in">str</span>(<span class="variable language_">self</span>.light.getTransform()))  <span class="comment"># 灯光的名字</span></span><br><span class="line">        <span class="variable language_">self</span>.name.setChecked(<span class="variable language_">self</span>.light.getTransform().visibility.get())  <span class="comment"># 根据灯光的可视性自动设置复选框的状态</span></span><br><span class="line">        <span class="variable language_">self</span>.name.toggled.connect(</span><br><span class="line">            <span class="keyword">lambda</span> val: <span class="variable language_">self</span>.light.getTransform().visibility.<span class="built_in">set</span>(val))  <span class="comment"># 当复选框改变时调用lambda函数，传入val（0，1，2）然后返回冒号后面的内容</span></span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.name, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        soloBtn = QtWidgets.QPushButton(<span class="string">&#x27;solo&#x27;</span>)</span><br><span class="line">        soloBtn.setCheckable(<span class="literal">True</span>)</span><br><span class="line">        soloBtn.toggled.connect(<span class="keyword">lambda</span> val: <span class="variable language_">self</span>.onSolo.emit(val))  <span class="comment"># 当solo按钮被按下时向onSolo信号发送val值（按下时为True，反之False）</span></span><br><span class="line">        layout.addWidget(soloBtn, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        deleteBtn = QtWidgets.QPushButton(<span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">        deleteBtn.clicked.connect(<span class="variable language_">self</span>.deleteLight)</span><br><span class="line">        deleteBtn.setMaximumWidth(<span class="number">20</span>)</span><br><span class="line">        layout.addWidget(deleteBtn, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        intensity = QtWidgets.QSlider(QtCore.Qt.Horizontal)  <span class="comment"># 创建水平滑块控件</span></span><br><span class="line">        intensity.setMinimum(<span class="number">1</span>)</span><br><span class="line">        intensity.setMaximum(<span class="number">1000</span>)</span><br><span class="line">        intensity.setValue(<span class="variable language_">self</span>.light.intensity.get())</span><br><span class="line">        intensity.valueChanged.connect(<span class="keyword">lambda</span> val: <span class="variable language_">self</span>.light.intensity.<span class="built_in">set</span>(val))</span><br><span class="line">        layout.addWidget(intensity, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.colorBtn = QtWidgets.QPushButton()</span><br><span class="line">        <span class="variable language_">self</span>.colorBtn.setMaximumWidth(<span class="number">20</span>)</span><br><span class="line">        <span class="variable language_">self</span>.colorBtn.setMinimumHeight(<span class="number">20</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setButtonColor()</span><br><span class="line">        <span class="variable language_">self</span>.colorBtn.clicked.connect(<span class="variable language_">self</span>.setColor)</span><br><span class="line">        layout.addWidget(<span class="variable language_">self</span>.colorBtn, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setColor</span>(<span class="params">self</span>):</span><br><span class="line">        lightColor = <span class="variable language_">self</span>.light.color.get()  <span class="comment"># 得到灯光的颜色</span></span><br><span class="line">        color = pm.colorEditor(rgbValue=lightColor)  <span class="comment"># 调用maya的颜色编辑器，默认颜色为灯光颜色，color为我们期望的颜色</span></span><br><span class="line">        <span class="comment"># 通过pm.colorEditor颜色编辑器得到的颜色为字符串类型的，且字之间有空格，因此通过列表生成式以及split将rgba数值分别传递给rgba变量</span></span><br><span class="line">        r, g, b, a = [<span class="built_in">float</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> color.split()]</span><br><span class="line">        color = (r, g, b)</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.light.color.<span class="built_in">set</span>(color)</span><br><span class="line">        <span class="variable language_">self</span>.setButtonColor(color)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setButtonColor</span>(<span class="params">self, color=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> color:</span><br><span class="line">            <span class="comment"># 如果没有设置按钮颜色，那么就自动获取对应灯光的颜色</span></span><br><span class="line">            color = <span class="variable language_">self</span>.light.color.get()</span><br><span class="line">        <span class="comment"># 确保提供的颜色为3个项目的列表</span></span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(color) == <span class="number">3</span>, <span class="string">&quot;You must provide a list of 3 colors&quot;</span>  <span class="comment"># 通过assert 判断 len（color） 如果为False则报错为True则正常进行</span></span><br><span class="line">        <span class="comment"># maya里的数值为0~1，而我们需要0~255的数值来设置UI的颜色</span></span><br><span class="line">        r, g, b = [c * <span class="number">255</span> <span class="keyword">for</span> c <span class="keyword">in</span> color]</span><br><span class="line">        <span class="comment"># 通过类CSS的方法设置按钮的颜色</span></span><br><span class="line">        <span class="variable language_">self</span>.colorBtn.setStyleSheet(<span class="string">&#x27;background-color: rgba(%s, %s, %s, 1.0)&#x27;</span> % (r, g, b))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disableLight</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.name.setChecked(<span class="keyword">not</span> value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">deleteLight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 当删除灯光的同时也需要删除控件</span></span><br><span class="line">        <span class="comment"># 前两行是防止python和Qt发生冲突而使用的</span></span><br><span class="line">        <span class="comment"># 理论上只需要第三行就可以了，第三行会自动执行前两行</span></span><br><span class="line">        <span class="variable language_">self</span>.setParent(<span class="literal">None</span>)</span><br><span class="line">        <span class="variable language_">self</span>.setVisible(<span class="literal">False</span>)</span><br><span class="line">        <span class="variable language_">self</span>.deleteLater()</span><br><span class="line">        pm.delete(<span class="variable language_">self</span>.light.getTransform())  <span class="comment"># 需要删除变换层而不仅仅是形状层</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">LightManager()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> DCC工具开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MayaPy </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
